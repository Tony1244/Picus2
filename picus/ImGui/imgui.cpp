// dear imgui, v1.50 WIP
// (main code and documentation)

// See ImGui::ShowTestWindow() in imgui_demo.cpp for demo code.
// Newcomers, read 'Programmer guide' below for notes on how to setup ImGui in your codebase.
// Get latest version at https://github.com/ocornut/imgui
// Releases change-log at https://github.com/ocornut/imgui/releases
// Gallery (please post your screenshots/video there!): https://github.com/ocornut/imgui/issues/772
// Developed by Omar Cornut and every direct or indirect contributors to the GitHub.
// This library is free but I need your support to sustain development and maintenance.
// If you work for a company, please consider financial support, e.g: https://www.patreon.com/imgui

/*

Index
- MISSION STATEMENT
- END-USER GUIDE
- PROGRAMMER GUIDE (read me!)
- API BREAKING CHANGES (read me when you update!)
- FREQUENTLY ASKED QUESTIONS (FAQ), TIPS
- How can I help?
- How do I update to a newer version of ImGui?
- What is ImTextureID and how do I display an image?
- I integrated ImGui in my engine and the text or lines are blurry..
- I integrated ImGui in my engine and some elements are clipping or disappearing when I move windows around..
- How can I have multiple widgets with the same label? Can I have widget without a label? (Yes). A primer on the purpose of labels/IDs.
- How can I tell when ImGui wants my mouse/keyboard inputs and when I can pass them to my application?
- How can I load a different font than the default?
- How can I easily use icons in my application?
- How can I load multiple fonts?
- How can I display and input non-latin characters such as Chinese, Japanese, Korean, Cyrillic?
- How can I use the drawing facilities without an ImGui window? (using ImDrawList API)
- ISSUES & TODO-LIST
- CODE


MISSION STATEMENT
=================

- easy to use to create code-driven and data-driven tools
- easy to use to create ad hoc short-lived tools and long-lived, more elaborate tools
- easy to hack and improve
- minimize screen real-estate usage
- minimize setup and maintenance
- minimize state storage on user side
- portable, minimize dependencies, run on target (consoles, phones, etc.)
- efficient runtime (NB- we do allocate when "growing" content - creating a window / opening a tree node for the first time, etc. - but a typical frame won't allocate anything)
- read about immediate-mode gui principles @ http://mollyrocket.com/861, http://mollyrocket.com/forums/index.html

Designed for developers and content-creators, not the typical end-user! Some of the weaknesses includes:
- doesn't look fancy, doesn't animate
- limited layout features, intricate layouts are typically crafted in code
- occasionally uses statically sized buffers for string manipulations - won't crash, but some very long pieces of text may be clipped. functions like ImGui::TextUnformatted() don't have such restriction.


END-USER GUIDE
==============

- double-click title bar to collapse window
- click upper right corner to close a window, available when 'bool* p_open' is passed to ImGui::Begin()
- click and drag on lower right corner to resize window
- click and drag on any empty space to move window
- double-click/double-tap on lower right corner grip to auto-fit to content
- TAB/SHIFT+TAB to cycle through keyboard editable fields
- use mouse wheel to scroll
- use CTRL+mouse wheel to zoom window contents (if IO.FontAllowScaling is true)
- CTRL+Click on a slider or drag box to input value as text
- text editor:
- Hold SHIFT or use mouse to select text.
- CTRL+Left/Right to word jump
- CTRL+Shift+Left/Right to select words
- CTRL+A our Double-Click to select all
- CTRL+X,CTRL+C,CTRL+V to use OS clipboard
- CTRL+Z,CTRL+Y to undo/redo
- ESCAPE to revert text to its original value
- You can apply arithmetic operators +,*,/ on numerical values. Use +- to subtract (because - would set a negative value!)


PROGRAMMER GUIDE
================

- read the FAQ below this section!
- your code creates the UI, if your code doesn't run the UI is gone! == very dynamic UI, no construction/destructions steps, less data retention on your side, no state duplication, less sync, less bugs.
- call and read ImGui::ShowTestWindow() for demo code demonstrating most features.
- see examples/ folder for standalone sample applications. Prefer reading examples/opengl2_example/ first as it is the simplest.
you may be able to grab and copy a ready made imgui_impl_*** file from the examples/.
- customization: PushStyleColor()/PushStyleVar() or the style editor to tweak the look of the interface (e.g. if you want a more compact UI or a different color scheme).

- getting started:
- init: call ImGui::GetIO() to retrieve the ImGuiIO structure and fill the fields marked 'Settings'.
- init: call io.Fonts->GetTexDataAsRGBA32(...) and load the font texture pixels into graphics memory.
- every frame:
1/ in your mainloop or right after you got your keyboard/mouse info, call ImGui::GetIO() and fill the fields marked 'Input'
2/ call ImGui::NewFrame() as early as you can!
3/ use any ImGui function you want between NewFrame() and Render()
4/ call ImGui::Render() as late as you can to end the frame and finalize render data. it will call your RenderDrawListFn handler that you set in the IO structure.
(if you don't need to render, you still need to call Render() and ignore the callback, or call EndFrame() instead. if you call neither some aspects of windows focusing/moving will appear broken.)
- all rendering information are stored into command-lists until ImGui::Render() is called.
- ImGui never touches or know about your GPU state. the only function that knows about GPU is the RenderDrawListFn handler that you provide.
- effectively it means you can create widgets at any time in your code, regardless of considerations of being in "update" vs "render" phases of your own application.
- refer to the examples applications in the examples/ folder for instruction on how to setup your code.
- a typical application skeleton may be:

// Application init
ImGuiIO& io = ImGui::GetIO();
io.DisplaySize.x = 1920.0f;
io.DisplaySize.y = 1280.0f;
io.IniFilename = "imgui.ini";
io.RenderDrawListsFn = my_render_function;  // Setup a render function, or set to NULL and call GetDrawData() after Render() to access the render data.
// TODO: Fill others settings of the io structure

// Load texture atlas
// There is a default font so you don't need to care about choosing a font yet
unsigned char* pixels;
int width, height;
io.Fonts->GetTexDataAsRGBA32(pixels, &width, &height);
// TODO: At this points you've got a texture pointed to by 'pixels' and you need to upload that your your graphic system
// TODO: Store your texture pointer/identifier (whatever your engine uses) in 'io.Fonts->TexID'

// Application main loop
while (true)
{
// 1) get low-level inputs (e.g. on Win32, GetKeyboardState(), or poll your events, etc.)
// TODO: fill all fields of IO structure and call NewFrame
ImGuiIO& io = ImGui::GetIO();
io.DeltaTime = 1.0f/60.0f;
io.MousePos = mouse_pos;
io.MouseDown[0] = mouse_button_0;
io.MouseDown[1] = mouse_button_1;
io.KeysDown[i] = ...

// 2) call NewFrame(), after this point you can use ImGui::* functions anytime
ImGui::NewFrame();

// 3) most of your application code here
MyGameUpdate(); // may use any ImGui functions, e.g. ImGui::Begin("My window"); ImGui::Text("Hello, world!"); ImGui::End();
MyGameRender(); // may use any ImGui functions

// 4) render & swap video buffers
ImGui::Render();
SwapBuffers();
}

- You can read back 'io.WantCaptureMouse', 'io.WantCaptureKeybord' etc. flags from the IO structure to tell how ImGui intends to use your
inputs and to know if you should share them or hide them from the rest of your application. Read the FAQ below for more information.


API BREAKING CHANGES
====================

Occasionally introducing changes that are breaking the API. The breakage are generally minor and easy to fix.
Here is a change-log of API breaking changes, if you are using one of the functions listed, expect to have to fix some code.
Also read releases logs https://github.com/ocornut/imgui/releases for more details.

- 2017/05/01 (1.50) - Renamed ImDrawList::PathFill() to ImDrawList::PathFillConvex() for clarity.
- 2016/11/06 (1.50) - BeginChild(const char*) now applies the stack id to the provided label, consistently with other functions as it should always have been. It shouldn't affect you unless (extremely unlikely) you were appending multiple times to a same child from different locations of the stack id. If that's the case, generate an id with GetId() and use it instead of passing string to BeginChild().
- 2016/10/15 (1.50) - avoid 'void* user_data' parameter to io.SetClipboardTextFn/io.GetClipboardTextFn pointers. We pass io.ClipboardUserData to it.
- 2016/09/25 (1.50) - style.WindowTitleAlign is now a ImVec2 (ImGuiAlign enum was removed). set to (0.5f,0.5f) for horizontal+vertical centering, (0.0f,0.0f) for upper-left, etc.
- 2016/07/30 (1.50) - SameLine(x) with x>0.0f is now relative to left of column/group if any, and not always to left of window. This was sort of always the intent and hopefully breakage should be minimal.
- 2016/05/12 (1.49) - title bar (using ImGuiCol_TitleBg/ImGuiCol_TitleBgActive colors) isn't rendered over a window background (ImGuiCol_WindowBg color) anymore.
If your TitleBg/TitleBgActive alpha was 1.0f or you are using the default theme it will not affect you.
However if your TitleBg/TitleBgActive alpha was <1.0f you need to tweak your custom theme to readjust for the fact that we don't draw a WindowBg background behind the title bar.
This helper function will convert an old TitleBg/TitleBgActive color into a new one with the same visual output, given the OLD color and the OLD WindowBg color.
ImVec4 ConvertTitleBgCol(const ImVec4& win_bg_col, const ImVec4& title_bg_col)
{
float new_a = 1.0f - ((1.0f - win_bg_col.w) * (1.0f - title_bg_col.w)), k = title_bg_col.w / new_a;
return ImVec4((win_bg_col.x * win_bg_col.w + title_bg_col.x) * k, (win_bg_col.y * win_bg_col.w + title_bg_col.y) * k, (win_bg_col.z * win_bg_col.w + title_bg_col.z) * k, new_a);
}
If this is confusing, pick the RGB value from title bar from an old screenshot and apply this as TitleBg/TitleBgActive. Or you may just create TitleBgActive from a tweaked TitleBg color.
- 2016/05/07 (1.49) - removed confusing set of GetInternalState(), GetInternalStateSize(), SetInternalState() functions. Now using CreateContext(), DestroyContext(), GetCurrentContext(), SetCurrentContext().
- 2016/05/02 (1.49) - renamed SetNextTreeNodeOpened() to SetNextTreeNodeOpen(), no redirection.
- 2016/05/01 (1.49) - obsoleted old signature of CollapsingHeader(const char* label, const char* str_id = NULL, bool display_frame = true, bool default_open = false) as extra parameters were badly designed and rarely used. You can replace the "default_open = true" flag in new API with CollapsingHeader(label, ImGuiTreeNodeFlags_DefaultOpen).
- 2016/04/26 (1.49) - changed ImDrawList::PushClipRect(ImVec4 rect) to ImDraw::PushClipRect(Imvec2 min,ImVec2 max,bool intersect_with_current_clip_rect=false). Note that higher-level ImGui::PushClipRect() is preferable because it will clip at logic/widget level, whereas ImDrawList::PushClipRect() only affect your renderer.
- 2016/04/03 (1.48) - removed style.WindowFillAlphaDefault setting which was redundant. Bake default BG alpha inside style.Colors[ImGuiCol_WindowBg] and all other Bg color values. (ref github issue #337).
- 2016/04/03 (1.48) - renamed ImGuiCol_TooltipBg to ImGuiCol_PopupBg, used by popups/menus and tooltips. popups/menus were previously using ImGuiCol_WindowBg. (ref github issue #337)
- 2016/03/21 (1.48) - renamed GetWindowFont() to GetFont(), GetWindowFontSize() to GetFontSize(). Kept inline redirection function (will obsolete).
- 2016/03/02 (1.48) - InputText() completion/history/always callbacks: if you modify the text buffer manually (without using DeleteChars()/InsertChars() helper) you need to maintain the BufTextLen field. added an assert.
- 2016/01/23 (1.48) - fixed not honoring exact width passed to PushItemWidth(), previously it would add extra FramePadding.x*2 over that width. if you had manual pixel-perfect alignment in place it might affect you.
- 2015/12/27 (1.48) - fixed ImDrawList::AddRect() which used to render a rectangle 1 px too large on each axis.
- 2015/12/04 (1.47) - renamed Color() helpers to ValueColor() - dangerously named, rarely used and probably to be made obsolete.
- 2015/08/29 (1.45) - with the addition of horizontal scrollbar we made various fixes to inconsistencies with dealing with cursor position.
GetCursorPos()/SetCursorPos() functions now include the scrolled amount. It shouldn't affect the majority of users, but take note that SetCursorPosX(100.0f) puts you at +100 from the starting x position which may include scrolling, not at +100 from the window left side.
GetContentRegionMax()/GetWindowContentRegionMin()/GetWindowContentRegionMax() functions allow include the scrolled amount. Typically those were used in cases where no scrolling would happen so it may not be a problem, but watch out!
- 2015/08/29 (1.45) - renamed style.ScrollbarWidth to style.ScrollbarSize
- 2015/08/05 (1.44) - split imgui.cpp into extra files: imgui_demo.cpp imgui_draw.cpp imgui_internal.h that you need to add to your project.
- 2015/07/18 (1.44) - fixed angles in ImDrawList::PathArcTo(), PathArcToFast() (introduced in 1.43) being off by an extra PI for no justifiable reason
- 2015/07/14 (1.43) - add new ImFontAtlas::AddFont() API. For the old AddFont***, moved the 'font_no' parameter of ImFontAtlas::AddFont** functions to the ImFontConfig structure.
you need to render your textured triangles with bilinear filtering to benefit from sub-pixel positioning of text.
- 2015/07/08 (1.43) - switched rendering data to use indexed rendering. this is saving a fair amount of CPU/GPU and enables us to get anti-aliasing for a marginal cost.
this necessary change will break your rendering function! the fix should be very easy. sorry for that :(
- if you are using a vanilla copy of one of the imgui_impl_XXXX.cpp provided in the example, you just need to update your copy and you can ignore the rest.
- the signature of the io.RenderDrawListsFn handler has changed!
ImGui_XXXX_RenderDrawLists(ImDrawList** const cmd_lists, int cmd_lists_count)
became:
ImGui_XXXX_RenderDrawLists(ImDrawData* draw_data).
argument   'cmd_lists'        -> 'draw_data->CmdLists'
argument   'cmd_lists_count'  -> 'draw_data->CmdListsCount'
ImDrawList 'commands'         -> 'CmdBuffer'
ImDrawList 'vtx_buffer'       -> 'VtxBuffer'
ImDrawList  n/a               -> 'IdxBuffer' (new)
ImDrawCmd  'vtx_count'        -> 'ElemCount'
ImDrawCmd  'clip_rect'        -> 'ClipRect'
ImDrawCmd  'user_callback'    -> 'UserCallback'
ImDrawCmd  'texture_id'       -> 'TextureId'
- each ImDrawList now contains both a vertex buffer and an index buffer. For each command, render ElemCount/3 triangles using indices from the index buffer.
- if you REALLY cannot render indexed primitives, you can call the draw_data->DeIndexAllBuffers() method to de-index the buffers. This is slow and a waste of CPU/GPU. Prefer using indexed rendering!
- refer to code in the examples/ folder or ask on the GitHub if you are unsure of how to upgrade. please upgrade!
- 2015/07/10 (1.43) - changed SameLine() parameters from int to float.
- 2015/07/02 (1.42) - renamed SetScrollPosHere() to SetScrollFromCursorPos(). Kept inline redirection function (will obsolete).
- 2015/07/02 (1.42) - renamed GetScrollPosY() to GetScrollY(). Necessary to reduce confusion along with other scrolling functions, because positions (e.g. cursor position) are not equivalent to scrolling amount.
- 2015/06/14 (1.41) - changed ImageButton() default bg_col parameter from (0,0,0,1) (black) to (0,0,0,0) (transparent) - makes a difference when texture have transparence
- 2015/06/14 (1.41) - changed Selectable() API from (label, selected, size) to (label, selected, flags, size). Size override should have been rarely be used. Sorry!
- 2015/05/31 (1.40) - renamed GetWindowCollapsed() to IsWindowCollapsed() for consistency. Kept inline redirection function (will obsolete).
- 2015/05/31 (1.40) - renamed IsRectClipped() to IsRectVisible() for consistency. Note that return value is opposite! Kept inline redirection function (will obsolete).
- 2015/05/27 (1.40) - removed the third 'repeat_if_held' parameter from Button() - sorry! it was rarely used and inconsistent. Use PushButtonRepeat(true) / PopButtonRepeat() to enable repeat on desired buttons.
- 2015/05/11 (1.40) - changed BeginPopup() API, takes a string identifier instead of a bool. ImGui needs to manage the open/closed state of popups. Call OpenPopup() to actually set the "open" state of a popup. BeginPopup() returns true if the popup is opened.
- 2015/05/03 (1.40) - removed style.AutoFitPadding, using style.WindowPadding makes more sense (the default values were already the same).
- 2015/04/13 (1.38) - renamed IsClipped() to IsRectClipped(). Kept inline redirection function until 1.50.
- 2015/04/09 (1.38) - renamed ImDrawList::AddArc() to ImDrawList::AddArcFast() for compatibility with future API
- 2015/04/03 (1.38) - removed ImGuiCol_CheckHovered, ImGuiCol_CheckActive, replaced with the more general ImGuiCol_FrameBgHovered, ImGuiCol_FrameBgActive.
- 2014/04/03 (1.38) - removed support for passing -FLT_MAX..+FLT_MAX as the range for a SliderFloat(). Use DragFloat() or Inputfloat() instead.
- 2015/03/17 (1.36) - renamed GetItemBoxMin()/GetItemBoxMax()/IsMouseHoveringBox() to GetItemRectMin()/GetItemRectMax()/IsMouseHoveringRect(). Kept inline redirection function until 1.50.
- 2015/03/15 (1.36) - renamed style.TreeNodeSpacing to style.IndentSpacing, ImGuiStyleVar_TreeNodeSpacing to ImGuiStyleVar_IndentSpacing
- 2015/03/13 (1.36) - renamed GetWindowIsFocused() to IsWindowFocused(). Kept inline redirection function until 1.50.
- 2015/03/08 (1.35) - renamed style.ScrollBarWidth to style.ScrollbarWidth (casing)
- 2015/02/27 (1.34) - renamed OpenNextNode(bool) to SetNextTreeNodeOpened(bool, ImGuiSetCond). Kept inline redirection function until 1.50.
- 2015/02/27 (1.34) - renamed ImGuiSetCondition_*** to ImGuiSetCond_***, and _FirstUseThisSession becomes _Once.
- 2015/02/11 (1.32) - changed text input callback ImGuiTextEditCallback return type from void-->int. reserved for future use, return 0 for now.
- 2015/02/10 (1.32) - renamed GetItemWidth() to CalcItemWidth() to clarify its evolving behavior
- 2015/02/08 (1.31) - renamed GetTextLineSpacing() to GetTextLineHeightWithSpacing()
- 2015/02/01 (1.31) - removed IO.MemReallocFn (unused)
- 2015/01/19 (1.30) - renamed ImGuiStorage::GetIntPtr()/GetFloatPtr() to GetIntRef()/GetIntRef() because Ptr was conflicting with actual pointer storage functions.
- 2015/01/11 (1.30) - big font/image API change! now loads TTF file. allow for multiple fonts. no need for a PNG loader.
(1.30) - removed GetDefaultFontData(). uses io.Fonts->GetTextureData*() API to retrieve uncompressed pixels.
this sequence:
const void* png_data;
unsigned int png_size;
ImGui::GetDefaultFontData(NULL, NULL, &png_data, &png_size);
// <Copy to GPU>
became:
unsigned char* pixels;
int width, height;
io.Fonts->GetTexDataAsRGBA32(&pixels, &width, &height);
// <Copy to GPU>
io.Fonts->TexID = (your_texture_identifier);
you now have much more flexibility to load multiple TTF fonts and manage the texture buffer for internal needs.
it is now recommended that you sample the font texture with bilinear interpolation.
(1.30) - added texture identifier in ImDrawCmd passed to your render function (we can now render images). make sure to set io.Fonts->TexID.
(1.30) - removed IO.PixelCenterOffset (unnecessary, can be handled in user projection matrix)
(1.30) - removed ImGui::IsItemFocused() in favor of ImGui::IsItemActive() which handles all widgets
- 2014/12/10 (1.18) - removed SetNewWindowDefaultPos() in favor of new generic API SetNextWindowPos(pos, ImGuiSetCondition_FirstUseEver)
- 2014/11/28 (1.17) - moved IO.Font*** options to inside the IO.Font-> structure (FontYOffset, FontTexUvForWhite, FontBaseScale, FontFallbackGlyph)
- 2014/11/26 (1.17) - reworked syntax of IMGUI_ONCE_UPON_A_FRAME helper macro to increase compiler compatibility
- 2014/11/07 (1.15) - renamed IsHovered() to IsItemHovered()
- 2014/10/02 (1.14) - renamed IMGUI_INCLUDE_IMGUI_USER_CPP to IMGUI_INCLUDE_IMGUI_USER_INL and imgui_user.cpp to imgui_user.inl (more IDE friendly)
- 2014/09/25 (1.13) - removed 'text_end' parameter from IO.SetClipboardTextFn (the string is now always zero-terminated for simplicity)
- 2014/09/24 (1.12) - renamed SetFontScale() to SetWindowFontScale()
- 2014/09/24 (1.12) - moved IM_MALLOC/IM_REALLOC/IM_FREE preprocessor defines to IO.MemAllocFn/IO.MemReallocFn/IO.MemFreeFn
- 2014/08/30 (1.09) - removed IO.FontHeight (now computed automatically)
- 2014/08/30 (1.09) - moved IMGUI_FONT_TEX_UV_FOR_WHITE preprocessor define to IO.FontTexUvForWhite
- 2014/08/28 (1.09) - changed the behavior of IO.PixelCenterOffset following various rendering fixes


FREQUENTLY ASKED QUESTIONS (FAQ), TIPS
======================================

Q: How can I help?
A: - If you are experienced enough with ImGui and with C/C++, look at the todo list and see how you want/can help!
- Become a Patron/donate. Convince your company to become a Patron or provide serious funding for development time.

Q: How do I update to a newer version of ImGui?
A: Overwrite the following files:
imgui.cpp
imgui.h
imgui_demo.cpp
imgui_draw.cpp
imgui_internal.h
stb_rect_pack.h
stb_textedit.h
stb_truetype.h
Don't overwrite imconfig.h if you have made modification to your copy.
Check the "API BREAKING CHANGES" sections for a list of occasional API breaking changes. If you have a problem with a function, search for its name
in the code, there will likely be a comment about it. Please report any issue to the GitHub page!

Q: What is ImTextureID and how do I display an image?
A: ImTextureID is a void* used to pass renderer-agnostic texture references around until it hits your render function.
ImGui knows nothing about what those bits represent, it just passes them around. It is up to you to decide what you want the void* to carry!
It could be an identifier to your OpenGL texture (cast GLuint to void*), a pointer to your custom engine material (cast MyMaterial* to void*), etc.
At the end of the chain, your renderer takes this void* to cast it back into whatever it needs to select a current texture to render.
Refer to examples applications, where each renderer (in a imgui_impl_xxxx.cpp file) is treating ImTextureID as a different thing.
(c++ tip: OpenGL uses integers to identify textures. You can safely store an integer into a void*, just cast it to void*, don't take it's address!)
To display a custom image/texture within an ImGui window, you may use ImGui::Image(), ImGui::ImageButton(), ImDrawList::AddImage() functions.
ImGui will generate the geometry and draw calls using the ImTextureID that you passed and which your renderer can use.
It is your responsibility to get textures uploaded to your GPU.

Q: I integrated ImGui in my engine and the text or lines are blurry..
A: In your Render function, try translating your projection matrix by (0.5f,0.5f) or (0.375f,0.375f).
Also make sure your orthographic projection matrix and io.DisplaySize matches your actual framebuffer dimension.

Q: I integrated ImGui in my engine and some elements are clipping or disappearing when I move windows around..
A: Most likely you are mishandling the clipping rectangles in your render function. Rectangles provided by ImGui are defined as (x1=left,y1=top,x2=right,y2=bottom) and NOT as (x1,y1,width,height).

Q: Can I have multiple widgets with the same label? Can I have widget without a label? (Yes)
A: Yes. A primer on the use of labels/IDs in ImGui..

- Elements that are not clickable, such as Text() items don't need an ID.

- Interactive widgets require state to be carried over multiple frames (most typically ImGui often needs to remember what is the "active" widget).
to do so they need a unique ID. unique ID are typically derived from a string label, an integer index or a pointer.

Button("OK");        // Label = "OK",     ID = hash of "OK"
Button("Cancel");    // Label = "Cancel", ID = hash of "Cancel"

- ID are uniquely scoped within windows, tree nodes, etc. so no conflict can happen if you have two buttons called "OK" in two different windows
or in two different locations of a tree.

- If you have a same ID twice in the same location, you'll have a conflict:

Button("OK");
Button("OK");           // ID collision! Both buttons will be treated as the same.

Fear not! this is easy to solve and there are many ways to solve it!

- When passing a label you can optionally specify extra unique ID information within string itself. This helps solving the simpler collision cases.
use "##" to pass a complement to the ID that won't be visible to the end-user:

Button("Play");         // Label = "Play",   ID = hash of "Play"
Button("Play##foo1");   // Label = "Play",   ID = hash of "Play##foo1" (different from above)
Button("Play##foo2");   // Label = "Play",   ID = hash of "Play##foo2" (different from above)

- If you want to completely hide the label, but still need an ID:

Checkbox("##On", &b);   // Label = "",       ID = hash of "##On" (no label!)

- Occasionally/rarely you might want change a label while preserving a constant ID. This allows you to animate labels.
For example you may want to include varying information in a window title bar (and windows are uniquely identified by their ID.. obviously)
Use "###" to pass a label that isn't part of ID:

Button("Hello###ID";   // Label = "Hello",  ID = hash of "ID"
Button("World###ID";   // Label = "World",  ID = hash of "ID" (same as above)

sprintf(buf, "My game (%f FPS)###MyGame");
Begin(buf);            // Variable label,   ID = hash of "MyGame"

- Use PushID() / PopID() to create scopes and avoid ID conflicts within the same Window.
This is the most convenient way of distinguishing ID if you are iterating and creating many UI elements.
You can push a pointer, a string or an integer value. Remember that ID are formed from the concatenation of everything in the ID stack!

for (int i = 0; i < 100; i++)
{
PushID(i);
Button("Click");   // Label = "Click",  ID = hash of integer + "label" (unique)
PopID();
}

for (int i = 0; i < 100; i++)
{
MyObject* obj = Objects[i];
PushID(obj);
Button("Click");   // Label = "Click",  ID = hash of pointer + "label" (unique)
PopID();
}

for (int i = 0; i < 100; i++)
{
MyObject* obj = Objects[i];
PushID(obj->Name);
Button("Click");   // Label = "Click",  ID = hash of string + "label" (unique)
PopID();
}

- More example showing that you can stack multiple prefixes into the ID stack:

Button("Click");     // Label = "Click",  ID = hash of "Click"
PushID("node");
Button("Click");     // Label = "Click",  ID = hash of "node" + "Click"
PushID(my_ptr);
Button("Click"); // Label = "Click",  ID = hash of "node" + ptr + "Click"
PopID();
PopID();

- Tree nodes implicitly creates a scope for you by calling PushID().

Button("Click");     // Label = "Click",  ID = hash of "Click"
if (TreeNode("node"))
{
Button("Click");   // Label = "Click",  ID = hash of "node" + "Click"
TreePop();
}

- When working with trees, ID are used to preserve the open/close state of each tree node.
Depending on your use cases you may want to use strings, indices or pointers as ID.
e.g. when displaying a single object that may change over time (1-1 relationship), using a static string as ID will preserve your node open/closed state when the targeted object change.
e.g. when displaying a list of objects, using indices or pointers as ID will preserve the node open/closed state differently. experiment and see what makes more sense!

Q: How can I tell when ImGui wants my mouse/keyboard inputs and when I can pass them to my application?
A: You can read the 'io.WantCaptureXXX' flags in the ImGuiIO structure. Preferably read them after calling ImGui::NewFrame() to avoid those flags lagging by one frame, but either should be fine.
When 'io.WantCaptureMouse' or 'io.WantCaptureKeyboard' flags are set you may want to discard/hide the inputs from the rest of your application.
When 'io.WantInputsCharacters' is set to may want to notify your OS to popup an on-screen keyboard, if available.
ImGui is tracking dragging and widget activity that may occur outside the boundary of a window, so 'io.WantCaptureMouse' is a more accurate and complete than testing for ImGui::IsMouseHoveringAnyWindow().
(Advanced note: text input releases focus on Return 'KeyDown', so the following Return 'KeyUp' event that your application receive will typically have 'io.WantcaptureKeyboard=false'.
Depending on your application logic it may or not be inconvenient. You might want to track which key-downs were for ImGui (e.g. with an array of bool) and filter out the corresponding key-ups.)

Q: How can I load a different font than the default? (default is an embedded version of ProggyClean.ttf, rendered at size 13)
A: Use the font atlas to load the TTF file you want:

ImGuiIO& io = ImGui::GetIO();
io.Fonts->AddFontFromFileTTF("myfontfile.ttf", size_in_pixels);
io.Fonts->GetTexDataAsRGBA32() or GetTexDataAsAlpha8()

Q: How can I easily use icons in my application?
A: The most convenient and practical way is to merge an icon font such as FontAwesome inside you main font. Then you can refer to icons within your strings.
Read 'How can I load multiple fonts?' and the file 'extra_fonts/README.txt' for instructions.

Q: How can I load multiple fonts?
A: Use the font atlas to pack them into a single texture:
(Read extra_fonts/README.txt and the code in ImFontAtlas for more details.)

ImGuiIO& io = ImGui::GetIO();
ImFont* font0 = io.Fonts->AddFontDefault();
ImFont* font1 = io.Fonts->AddFontFromFileTTF("myfontfile.ttf", size_in_pixels);
ImFont* font2 = io.Fonts->AddFontFromFileTTF("myfontfile2.ttf", size_in_pixels);
io.Fonts->GetTexDataAsRGBA32() or GetTexDataAsAlpha8()
// the first loaded font gets used by default
// use ImGui::PushFont()/ImGui::PopFont() to change the font at runtime

// Options
ImFontConfig config;
config.OversampleH = 3;
config.OversampleV = 1;
config.GlyphExtraSpacing.x = 1.0f;
io.Fonts->LoadFromFileTTF("myfontfile.ttf", size_pixels, &config);

// Combine multiple fonts into one (e.g. for icon fonts)
ImWchar ranges[] = { 0xf000, 0xf3ff, 0 };
ImFontConfig config;
config.MergeMode = true;
io.Fonts->AddFontDefault();
io.Fonts->LoadFromFileTTF("fontawesome-webfont.ttf", 16.0f, &config, ranges); // Merge icon font
io.Fonts->LoadFromFileTTF("myfontfile.ttf", size_pixels, NULL, &config, io.Fonts->GetGlyphRangesJapanese()); // Merge japanese glyphs

Q: How can I display and input non-Latin characters such as Chinese, Japanese, Korean, Cyrillic?
A: When loading a font, pass custom Unicode ranges to specify the glyphs to load.
All your strings needs to use UTF-8 encoding. Specifying literal in your source code using a local code page (such as CP-923 for Japanese or CP-1251 for Cyrillic) will not work.
In C++11 you can encode a string literal in UTF-8 by using the u8"hello" syntax. Otherwise you can convert yourself to UTF-8 or load text data from file already saved as UTF-8.
You can also try to remap your local codepage characters to their Unicode codepoint using font->AddRemapChar(), but international users may have problems reading/editing your source code.

io.Fonts->AddFontFromFileTTF("myfontfile.ttf", size_in_pixels, NULL, io.Fonts->GetGlyphRangesJapanese());  // Load Japanese characters
io.Fonts->GetTexDataAsRGBA32() or GetTexDataAsAlpha8()
io.ImeWindowHandle = MY_HWND;      // To input using Microsoft IME, give ImGui the hwnd of your application

As for text input, depends on you passing the right character code to io.AddInputCharacter(). The example applications do that.

Q: How can I use the drawing facilities without an ImGui window? (using ImDrawList API)
A: The easiest way is to create a dummy window. Call Begin() with NoTitleBar|NoResize|NoMove|NoScrollbar|NoSavedSettings|NoInputs flag, zero background alpha,
then retrieve the ImDrawList* via GetWindowDrawList() and draw to it in any way you like.

- tip: the construct 'IMGUI_ONCE_UPON_A_FRAME { ... }' will run the block of code only once a frame. You can use it to quickly add custom UI in the middle of a deep nested inner loop in your code.
- tip: you can create widgets without a Begin()/End() block, they will go in an implicit window called "Debug"
- tip: you can call Begin() multiple times with the same name during the same frame, it will keep appending to the same window. this is also useful to set yourself in the context of another window (to get/set other settings)
- tip: you can call Render() multiple times (e.g for VR renders).
- tip: call and read the ShowTestWindow() code in imgui_demo.cpp for more example of how to use ImGui!


ISSUES & TODO-LIST
==================
Issue numbers (#) refer to github issues listed at https://github.com/ocornut/imgui/issues
The list below consist mostly of ideas noted down before they are requested/discussed by users (at which point it usually moves to the github)

- doc: add a proper documentation+regression testing system (#435)
- window: add a way for very transient windows (non-saved, temporary overlay over hundreds of objects) to "clean" up from the global window list. perhaps a lightweight explicit cleanup pass.
- window: calling SetNextWindowSize() every frame with <= 0 doesn't do anything, may be useful to allow (particularly when used for a single axis) (#690)
- window: auto-fit feedback loop when user relies on any dynamic layout (window width multiplier, column) appears weird to end-user. clarify.
- window: allow resizing of child windows (possibly given min/max for each axis?)
- window: background options for child windows, border option (disable rounding)
- window: add a way to clear an existing window instead of appending (e.g. for tooltip override using a consistent api rather than the deferred tooltip)
- window: resizing from any sides? + mouse cursor directives for app.
!- window: begin with *p_open == false should return false.
- window: get size/pos helpers given names (see discussion in #249)
- window: a collapsed window can be stuck behind the main menu bar?
- window: when window is small, prioritize resize button over close button.
- window: detect extra End() call that pop the "Debug" window out and assert at call site instead of later.
- window/tooltip: allow to set the width of a tooltip to allow TextWrapped() etc. while keeping the height automatic.
- window: increase minimum size of a window with menus or fix the menu rendering so that it doesn't look odd.
- draw-list: maintaining bounding box per command would allow to merge draw command when clipping isn't relied on (typical non-scrolling window or non-overflowing column would merge with previous command).
!- scrolling: allow immediately effective change of scroll if we haven't appended items yet
- splitter/separator: formalize the splitter idiom into an official api (we want to handle n-way split) (#319)
- widgets: display mode: widget-label, label-widget (aligned on column or using fixed size), label-newline-tab-widget etc.
- widgets: clean up widgets internal toward exposing everything.
- widgets: add disabled and read-only modes (#211)
- main: considering adding an Init() function? some constructs are awkward in the implementation because of the lack of them.
!- main: make it so that a frame with no window registered won't refocus every window on subsequent frames (~bump LastFrameActive of all windows).
- main: IsItemHovered() make it more consistent for various type of widgets, widgets with multiple components, etc. also effectively IsHovered() region sometimes differs from hot region, e.g tree nodes
- main: IsItemHovered() info stored in a stack? so that 'if TreeNode() { Text; TreePop; } if IsHovered' return the hover state of the TreeNode?
- input text: clean up the mess caused by converting UTF-8 <> wchar. the code is rather inefficient right now and super fragile.
- input text: reorganize event handling, allow CharFilter to modify buffers, allow multiple events? (#541)
- input text: expose CursorPos in char filter event (#816)
- input text: flag to disable live update of the user buffer (also applies to float/int text input)
- input text: resize behavior - field could stretch when being edited? hover tooltip shows more text?
- input text: add ImGuiInputTextFlags_EnterToApply? (off #218)
- input text: add discard flag (e.g. ImGuiInputTextFlags_DiscardActiveBuffer) or make it easier to clear active focus for text replacement during edition (#725)
- input text multi-line: don't directly call AddText() which does an unnecessary vertex reserve for character count prior to clipping. and/or more line-based clipping to AddText(). and/or reorganize TextUnformatted/RenderText for more efficiency for large text (e.g TextUnformatted could clip and log separately, etc).
- input text multi-line: way to dynamically grow the buffer without forcing the user to initially allocate for worse case (follow up on #200)
- input text multi-line: line numbers? status bar? (follow up on #200)
- input text multi-line: behave better when user changes input buffer while editing is active (even though it is illegal behavior). namely, the change of buffer can create a scrollbar glitch (#725)
- input text: allow centering/positioning text so that ctrl+clicking Drag or Slider keeps the textual value at the same pixel position.
- input number: optional range min/max for Input*() functions
- input number: holding [-]/[+] buttons could increase the step speed non-linearly (or user-controlled)
- input number: use mouse wheel to step up/down
- input number: applying arithmetics ops (+,-,*,/) messes up with text edit undo stack.
- button: provide a button that looks framed.
- text: proper alignment options
- image/image button: misalignment on padded/bordered button?
- image/image button: parameters are confusing, image() has tint_col,border_col whereas imagebutton() has bg_col/tint_col. Even thou they are different parameters ordering could be more consistent. can we fix that?
- layout: horizontal layout helper (#97)
- layout: horizontal flow until no space left (#404)
- layout: more generic alignment state (left/right/centered) for single items?
- layout: clean up the InputFloatN/SliderFloatN/ColorEdit4 layout code. item width should include frame padding.
- layout: BeginGroup() needs a border option.
- columns: declare column set (each column: fixed size, %, fill, distribute default size among fills) (#513, #125)
- columns: add a conditional parameter to SetColumnOffset() (#513, #125)
- columns: separator function or parameter that works within the column (currently Separator() bypass all columns) (#125)
- columns: columns header to act as button (~sort op) and allow resize/reorder (#513, #125)
- columns: user specify columns size (#513, #125)
- columns: flag to add horizontal separator above/below?
- columns/layout: setup minimum line height (equivalent of automatically calling AlignFirstTextHeightToWidgets)
- combo: sparse combo boxes (via function call?) / iterators
- combo: contents should extends to fit label if combo widget is small
- combo/listbox: keyboard control. need InputText-like non-active focus + key handling. considering keyboard for custom listbox (pr #203)
- listbox: multiple selection
- listbox: user may want to initial scroll to focus on the one selected value?
- listbox: keyboard navigation.
- listbox: scrolling should track modified selection.
!- popups/menus: clarify usage of popups id, how MenuItem/Selectable closing parent popups affects the ID, etc. this is quite fishy needs improvement! (#331, #402)
- popups: add variant using global identifier similar to Begin/End (#402)
- popups: border options. richer api like BeginChild() perhaps? (#197)
- tooltip: tooltip that doesn't fit in entire screen seems to lose their "last preferred button" and may teleport when moving mouse
- menus: local shortcuts, global shortcuts (#456, #126)
- menus: icons
- menus: menubars: some sort of priority / effect of main menu-bar on desktop size?
- menus: calling BeginMenu() twice with a same name doesn't seem to append nicely
- statusbar: add a per-window status bar helper similar to what menubar does.
- tabs (#261, #351)
- separator: separator on the initial position of a window is not visible (cursorpos.y <= clippos.y)
!- color: the color helpers/typing is a mess and needs sorting out.
- color: add a better color picker (#346)
- node/graph editor (#306)
- pie menus patterns (#434)
- drag'n drop, dragging helpers (carry dragging info, visualize drag source before clicking, drop target, etc.) (#143, #479)
- plot: PlotLines() should use the polygon-stroke facilities (currently issues with averaging normals)
- plot: make it easier for user to draw extra stuff into the graph (e.g: draw basis, highlight certain points, 2d plots, multiple plots)
- plot: "smooth" automatic scale over time, user give an input 0.0(full user scale) 1.0(full derived from value)
- plot: add a helper e.g. Plot(char* label, float value, float time_span=2.0f) that stores values and Plot them for you - probably another function name. and/or automatically allow to plot ANY displayed value (more reliance on stable ID)
- slider: allow using the [-]/[+] buttons used by InputFloat()/InputInt()
- slider: initial absolute click is imprecise. change to relative movement slider (same as scrollbar).
- slider: add dragging-based widgets to edit values with mouse (on 2 axises), saving screen real-estate.
- slider: tint background based on value (e.g. v_min -> v_max, or use 0.0f either side of the sign)
- slider & drag: int data passing through a float
- drag float: up/down axis
- drag float: added leeway on edge (e.g. a few invisible steps past the clamp limits)
- tree node / optimization: avoid formatting when clipped.
- tree node: tree-node/header right-most side doesn't take account of horizontal scrolling.
- tree node: add treenode/treepush int variants? not there because (void*) cast from int warns on some platforms/settings?
- tree node: try to apply scrolling at time of TreePop() if node was just opened and end of node is past scrolling limits?
- tree node / selectable render mismatch which is visible if you use them both next to each other (e.g. cf. property viewer)
- tree node: tweak color scheme to distinguish headers from selected tree node (#581)
- textwrapped: figure out better way to use TextWrapped() in an always auto-resize context (tooltip, etc.) (#249)
- settings: write more decent code to allow saving/loading new fields
- settings: api for per-tool simple persistent data (bool,int,float,columns sizes,etc.) in .ini file
- style: add window shadows.
- style/optimization: store rounded corners in texture to use 1 quad per corner (filled and wireframe) to lower the cost of rounding.
- style: color-box not always square?
- style: a concept of "compact style" that the end-user can easily rely on (e.g. PushStyleCompact()?) that maps to other settings? avoid implementing duplicate helpers such as SmallCheckbox(), etc.
- style: try to make PushStyleVar() more robust to incorrect parameters (to be more friendly to edit & continues situation).
- style: global scale setting.
- style: WindowPadding needs to be EVEN needs the 0.5 multiplier probably have a subtle effect on clip rectangle
- text: simple markup language for color change?
- font: dynamic font atlas to avoid baking huge ranges into bitmap and make scaling easier.
- font: small opt: for monospace font (like the defalt one) we can trim IndexXAdvance as long as trailing value is == FallbackXAdvance
- font: add support for kerning, probably optional. perhaps default to (32..128)^2 matrix ~ 36KB then hash fallback.
- font: add a simpler CalcTextSizeA() api? current one ok but not welcome if user needs to call it directly (without going through ImGui::CalcTextSize)
- font: fix AddRemapChar() to work before font has been built.
- log: LogButtons() options for specifying depth and/or hiding depth slider
- log: have more control over the log scope (e.g. stop logging when leaving current tree node scope)
- log: be able to log anything (e.g. right-click on a window/tree-node, shows context menu? log into tty/file/clipboard)
- log: let user copy any window content to clipboard easily (CTRL+C on windows? while moving it? context menu?). code is commented because it fails with multiple Begin/End pairs.
- filters: set a current filter that tree node can automatically query to hide themselves
- filters: handle wildcards (with implicit leading/trailing *), regexps
- shortcuts: add a shortcut api, e.g. parse "&Save" and/or "Save (CTRL+S)", pass in to widgets or provide simple ways to use (button=activate, input=focus)
!- keyboard: tooltip & combo boxes are messing up / not honoring keyboard tabbing
- keyboard: full keyboard navigation and focus. (#323)
- focus: preserve ActiveId/focus stack state, e.g. when opening a menu and close it, previously selected InputText() focus gets restored (#622)
- focus: SetKeyboardFocusHere() on with >= 0 offset could be done on same frame (else latch and modulate on beginning of next frame)
- input: rework IO system to be able to pass actual ordered/timestamped events. (~#335, #71)
- input: allow to decide and pass explicit double-clicks (e.g. for windows by the CS_DBLCLKS style).
- input: support track pad style scrolling & slider edit.
- misc: provide a way to compile out the entire implementation while providing a dummy API (e.g. #define IMGUI_DUMMY_IMPL)
- misc: double-clicking on title bar to minimize isn't consistent, perhaps move to single-click on left-most collapse icon?
- misc: provide HoveredTime and ActivatedTime to ease the creation of animations.
- style editor: have a more global HSV setter (e.g. alter hue on all elements). consider replacing active/hovered by offset in HSV space? (#438)
- style editor: color child window height expressed in multiple of line height.
- remote: make a system like RemoteImGui first-class citizen/project (#75)
- drawlist: move Font, FontSize, FontTexUvWhitePixel inside ImDrawList and make it self-contained (apart from drawing settings?)
- drawlist: end-user probably can't call Clear() directly because we expect a texture to be pushed in the stack.
- examples: directx9: save/restore device state more thoroughly.
- examples: window minimize, maximize (#583)
- optimization: add a flag to disable most of rendering, for the case where the user expect to skip it (#335)
- optimization: use another hash function than crc32, e.g. FNV1a
- optimization/render: merge command-lists with same clip-rect into one even if they aren't sequential? (as long as in-between clip rectangle don't overlap)?
- optimization: turn some the various stack vectors into statically-sized arrays
- optimization: better clipping for multi-component widgets
*/

#if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS
#endif

#include "imgui.h"
#define IMGUI_DEFINE_MATH_OPERATORS
#define IMGUI_DEFINE_PLACEMENT_NEW
#include "imgui_internal.h"

#include <ctype.h>      // toupper, isprint
#include <stdlib.h>     // NULL, malloc, free, qsort, atoi
#include <stdio.h>      // vsnprintf, sscanf, printf
#include <limits.h>     // INT_MIN, INT_MAX
#if defined(_MSC_VER) && _MSC_VER <= 1500 // MSVC 2008 or earlier
#include <stddef.h>     // intptr_t
#else
#include <stdint.h>     // intptr_t
#endif

#ifdef _MSC_VER
#pragma warning (disable: 4127) // condition expression is constant
#pragma warning (disable: 4505) // unreferenced local function has been removed (stb stuff)
#pragma warning (disable: 4996) // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen
#endif

// Clang warnings with -Weverything
#ifdef __clang__
#pragma clang diagnostic ignored "-Wold-style-cast"         // warning : use of old-style cast                              // yes, they are more terse.
#pragma clang diagnostic ignored "-Wfloat-equal"            // warning : comparing floating point with == or != is unsafe   // storing and comparing against same constants (typically 0.0f) is ok.
#pragma clang diagnostic ignored "-Wformat-nonliteral"      // warning : format string is not a string literal              // passing non-literal to vsnformat(). yes, user passing incorrect format strings can crash the code.
#pragma clang diagnostic ignored "-Wexit-time-destructors"  // warning : declaration requires an exit-time destructor       // exit-time destruction order is undefined. if MemFree() leads to users code that has been disabled before exit it might cause problems. ImGui coding style welcomes static/globals.
#pragma clang diagnostic ignored "-Wglobal-constructors"    // warning : declaration requires a global destructor           // similar to above, not sure what the exact difference it.
#pragma clang diagnostic ignored "-Wsign-conversion"        // warning : implicit conversion changes signedness             //
#pragma clang diagnostic ignored "-Wformat-pedantic"        // warning : format specifies type 'void *' but the argument has type 'xxxx *' // unreasonable, would lead to casting every %p arg to void*. probably enabled by -pedantic. 
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast" // warning : cast to 'void *' from smaller integer type 'int' //
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-function"          // warning: 'xxxx' defined but not used
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"      // warning: cast to pointer from integer of different size
#pragma GCC diagnostic ignored "-Wformat"                   // warning: format '%p' expects argument of type 'void*', but argument 6 has type 'ImGuiWindow*'
#pragma GCC diagnostic ignored "-Wdouble-promotion"         // warning: implicit conversion from 'float' to 'double' when passing argument to function
#pragma GCC diagnostic ignored "-Wconversion"               // warning: conversion to 'xxxx' from 'xxxx' may alter its value
#pragma GCC diagnostic ignored "-Wcast-qual"                // warning: cast from type 'xxxx' to type 'xxxx' casts away qualifiers
#endif

//-------------------------------------------------------------------------
// Forward Declarations
//-------------------------------------------------------------------------

static void             LogRenderedText(const ImVec2& ref_pos, const char* text, const char* text_end = NULL);

static void             PushMultiItemsWidths(int components, float w_full = 0.0f);
static float            GetDraggedColumnOffset(int column_index);

static bool             IsKeyPressedMap(ImGuiKey key, bool repeat = true);

static ImFont*          GetDefaultFont();
static void             SetCurrentFont(ImFont* font);
static void             SetCurrentWindow(ImGuiWindow* window);
static void             SetWindowScrollY(ImGuiWindow* window, float new_scroll_y);
static void             SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiSetCond cond);
static void             SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiSetCond cond);
static void             SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiSetCond cond);
static ImGuiWindow*     FindHoveredWindow(ImVec2 pos, bool excluding_childs);
static ImGuiWindow*     CreateNewWindow(const char* name, ImVec2 size, ImGuiWindowFlags flags);
static inline bool      IsWindowContentHoverable(ImGuiWindow* window);
static void             ClearSetNextWindowData();
static void             CheckStacksSize(ImGuiWindow* window, bool write);
static void             Scrollbar(ImGuiWindow* window, bool horizontal);

static void             AddDrawListToRenderList(ImVector<ImDrawList*>& out_render_list, ImDrawList* draw_list);
static void             AddWindowToRenderList(ImVector<ImDrawList*>& out_render_list, ImGuiWindow* window);
static void             AddWindowToSortedBuffer(ImVector<ImGuiWindow*>& out_sorted_windows, ImGuiWindow* window);

static ImGuiIniData*    FindWindowSettings(const char* name);
static ImGuiIniData*    AddWindowSettings(const char* name);
static void             LoadIniSettingsFromDisk(const char* ini_filename);
static void             SaveIniSettingsToDisk(const char* ini_filename);
static void             MarkIniSettingsDirty();

static void             PushColumnClipRect(int column_index = -1);
static ImRect           GetVisibleRect();

static bool             BeginPopupEx(const char* str_id, ImGuiWindowFlags extra_flags);
static void             CloseInactivePopups();
static void             ClosePopupToLevel(int remaining);
static void             ClosePopup(ImGuiID id);
static bool             IsPopupOpen(ImGuiID id);
static ImGuiWindow*     GetFrontMostModalRootWindow();
static ImVec2           FindBestPopupWindowPos(const ImVec2& base_pos, const ImVec2& size, int* last_dir, const ImRect& rect_to_avoid);

static bool             InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data);
static int              InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end);
static ImVec2           InputTextCalcTextSizeW(const ImWchar* text_begin, const ImWchar* text_end, const ImWchar** remaining = NULL, ImVec2* out_offset = NULL, bool stop_on_new_line = false);

static inline void      DataTypeFormatString(ImGuiDataType data_type, void* data_ptr, const char* display_format, char* buf, int buf_size);
static inline void      DataTypeFormatString(ImGuiDataType data_type, void* data_ptr, int decimal_precision, char* buf, int buf_size);
static void             DataTypeApplyOp(ImGuiDataType data_type, int op, void* value1, const void* value2);
static bool             DataTypeApplyOpFromText(const char* buf, const char* initial_value_buf, ImGuiDataType data_type, void* data_ptr, const char* scalar_format);

//-----------------------------------------------------------------------------
// Platform dependent default implementations
//-----------------------------------------------------------------------------

static const char*      GetClipboardTextFn_DefaultImpl(void* user_data);
static void             SetClipboardTextFn_DefaultImpl(void* user_data, const char* text);
static void             ImeSetInputScreenPosFn_DefaultImpl(int x, int y);

//-----------------------------------------------------------------------------
// Context
//-----------------------------------------------------------------------------

// Default font atlas storage .
// New contexts always point by default to this font atlas. It can be changed by reassigning the GetIO().Fonts variable.
static ImFontAtlas      GImDefaultFontAtlas;

// Default context storage + current context pointer.
// Implicitely used by all ImGui functions. Always assumed to be != NULL. Change to a different context by calling ImGui::SetCurrentContext()
// ImGui is currently not thread-safe because of this variable. If you want thread-safety to allow N threads to access N different contexts, you might work around it by:
// - Having multiple instances of the ImGui code compiled inside different namespace (easiest/safest, if you have a finite number of contexts)
// - or: Changing this variable to be TLS. You may #define GImGui in imconfig.h for further custom hackery. Future development aim to make this context pointer explicit to all calls. Also read https://github.com/ocornut/imgui/issues/586
#ifndef GImGui
static ImGuiContext     GImDefaultContext;
ImGuiContext*           GImGui = &GImDefaultContext;
#endif

//-----------------------------------------------------------------------------
// User facing structures
//-----------------------------------------------------------------------------

ImGuiStyle::ImGuiStyle()
{
	Alpha = 1.0f;             // Global alpha applies to everything in ImGui
	WindowPadding = ImVec2(8, 8);      // Padding within a window
	WindowMinSize = ImVec2(32, 32);    // Minimum window size
	WindowRounding = 15.0f;             // Radius of window corners rounding. Set to 0.0f to have rectangular windows
	WindowTitleAlign = ImVec2(0.0f, 0.5f);// Alignment for title bar text
	ChildWindowRounding = 5.0f;             // Radius of child window corners rounding. Set to 0.0f to have rectangular child windows
	FramePadding = ImVec2(4, 3);      // Padding within a framed rectangle (used by most widgets)
	FrameRounding = 15.0f;             // Radius of frame corners rounding. Set to 0.0f to have rectangular frames (used by most widgets).
	ItemSpacing = ImVec2(8, 4);      // Horizontal and vertical spacing between widgets/lines
	ItemInnerSpacing = ImVec2(4, 4);      // Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label)
	TouchExtraPadding = ImVec2(0, 0);      // Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!
	IndentSpacing = 21.0f;            // Horizontal spacing when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2).
	ColumnsMinSpacing = 6.0f;             // Minimum horizontal spacing between two columns
	ScrollbarSize = 16.0f;            // Width of the vertical scrollbar, Height of the horizontal scrollbar
	ScrollbarRounding = 15.0f;             // Radius of grab corners rounding for scrollbar
	GrabMinSize = 10.0f;            // Minimum width/height of a grab box for slider/scrollbar
	GrabRounding = 15.0f;             // Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs.
	ButtonTextAlign = ImVec2(0.5f, 0.5f);// Alignment of button text when button is larger than text.
	DisplayWindowPadding = ImVec2(22, 22);    // Window positions are clamped to be visible within the display area by at least this amount. Only covers regular windows.
	DisplaySafeAreaPadding = ImVec2(4, 4);      // If you cannot see the edge of your screen (e.g. on a TV) increase the safe area padding. Covers popups/tooltips as well regular windows.
	AntiAliasedLines = true;             // Enable anti-aliasing on lines/borders. Disable if you are really short on CPU/GPU.
	AntiAliasedShapes = true;             // Enable anti-aliasing on filled shapes (rounded rectangles, circles, etc.)
	CurveTessellationTol = 1.25f;            // Tessellation tolerance. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality.

	Colors[ImGuiCol_Text] = ImVec4(0.90f, 0.90f, 0.90f, 1.00f);
	Colors[ImGuiCol_TextDisabled] = ImVec4(0.60f, 0.60f, 0.60f, 1.00f);
	Colors[ImGuiCol_WindowBg] = ImVec4(0.00f, 0.00f, 0.00f, 0.70f);
	Colors[ImGuiCol_ChildWindowBg] = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
	Colors[ImGuiCol_PopupBg] = ImVec4(0.05f, 0.05f, 0.10f, 0.90f);
	Colors[ImGuiCol_Border] = ImVec4(0.70f, 0.70f, 0.70f, 0.65f);
	Colors[ImGuiCol_BorderShadow] = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
	Colors[ImGuiCol_FrameBg] = ImVec4(0.80f, 0.80f, 0.80f, 0.30f);   // Background of checkbox, radio button, plot, slider, text input
	Colors[ImGuiCol_FrameBgHovered] = ImVec4(0.90f, 0.80f, 0.80f, 0.40f);
	Colors[ImGuiCol_FrameBgActive] = ImVec4(0.90f, 0.65f, 0.65f, 0.45f);
	Colors[ImGuiCol_TitleBg] = ImVec4(0.27f, 0.27f, 0.54f, 0.83f);
	Colors[ImGuiCol_TitleBgCollapsed] = ImVec4(0.40f, 0.40f, 0.80f, 0.20f);
	Colors[ImGuiCol_TitleBgActive] = ImVec4(0.32f, 0.32f, 0.63f, 0.87f);
	Colors[ImGuiCol_MenuBarBg] = ImVec4(0.40f, 0.40f, 0.55f, 0.80f);
	Colors[ImGuiCol_ScrollbarBg] = ImVec4(0.20f, 0.25f, 0.30f, 0.60f);
	Colors[ImGuiCol_ScrollbarGrab] = ImVec4(0.40f, 0.40f, 0.80f, 0.30f);
	Colors[ImGuiCol_ScrollbarGrabHovered] = ImVec4(0.40f, 0.40f, 0.80f, 0.40f);
	Colors[ImGuiCol_ScrollbarGrabActive] = ImVec4(0.80f, 0.50f, 0.50f, 0.40f);
	Colors[ImGuiCol_ComboBg] = ImVec4(0.20f, 0.20f, 0.20f, 0.99f);
	Colors[ImGuiCol_CheckMark] = ImVec4(0.90f, 0.90f, 0.90f, 0.50f);
	Colors[ImGuiCol_SliderGrab] = ImVec4(1.00f, 1.00f, 1.00f, 0.30f);
	Colors[ImGuiCol_SliderGrabActive] = ImVec4(0.80f, 0.50f, 0.50f, 1.00f);
	Colors[ImGuiCol_Button] = ImVec4(0.67f, 0.40f, 0.40f, 0.60f);
	Colors[ImGuiCol_ButtonHovered] = ImVec4(0.67f, 0.40f, 0.40f, 1.00f);
	Colors[ImGuiCol_ButtonActive] = ImVec4(0.80f, 0.50f, 0.50f, 1.00f);
	Colors[ImGuiCol_Header] = ImVec4(0.40f, 0.40f, 0.90f, 0.45f);
	Colors[ImGuiCol_HeaderHovered] = ImVec4(0.45f, 0.45f, 0.90f, 0.80f);
	Colors[ImGuiCol_HeaderActive] = ImVec4(0.53f, 0.53f, 0.87f, 0.80f);
	Colors[ImGuiCol_Column] = ImVec4(0.50f, 0.50f, 0.50f, 1.00f);
	Colors[ImGuiCol_ColumnHovered] = ImVec4(0.70f, 0.60f, 0.60f, 1.00f);
	Colors[ImGuiCol_ColumnActive] = ImVec4(0.90f, 0.70f, 0.70f, 1.00f);
	Colors[ImGuiCol_ResizeGrip] = ImVec4(1.00f, 1.00f, 1.00f, 0.30f);
	Colors[ImGuiCol_ResizeGripHovered] = ImVec4(1.00f, 1.00f, 1.00f, 0.60f);
	Colors[ImGuiCol_ResizeGripActive] = ImVec4(1.00f, 1.00f, 1.00f, 0.90f);
	Colors[ImGuiCol_CloseButton] = ImVec4(0.50f, 0.50f, 0.90f, 0.50f);
	Colors[ImGuiCol_CloseButtonHovered] = ImVec4(0.70f, 0.70f, 0.90f, 0.60f);
	Colors[ImGuiCol_CloseButtonActive] = ImVec4(0.70f, 0.70f, 0.70f, 1.00f);
	Colors[ImGuiCol_PlotLines] = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
	Colors[ImGuiCol_PlotLinesHovered] = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);
	Colors[ImGuiCol_PlotHistogram] = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);
	Colors[ImGuiCol_PlotHistogramHovered] = ImVec4(1.00f, 0.60f, 0.00f, 1.00f);
	Colors[ImGuiCol_TextSelectedBg] = ImVec4(0.00f, 0.00f, 1.00f, 0.35f);
	Colors[ImGuiCol_ModalWindowDarkening] = ImVec4(0.20f, 0.20f, 0.20f, 0.35f);
}

ImGuiIO::ImGuiIO()
{
	// Most fields are initialized with zero
	memset(this, 0, sizeof(*this));

	DisplaySize = ImVec2(-1.0f, -1.0f);
	DeltaTime = 1.0f / 60.0f;
	IniSavingRate = 5.0f;
	IniFilename = "imgui.ini";
	LogFilename = "imgui_log.txt";
	Fonts = &GImDefaultFontAtlas;
	FontGlobalScale = 1.0f;
	FontDefault = NULL;
	DisplayFramebufferScale = ImVec2(1.0f, 1.0f);
	MousePos = ImVec2(-1, -1);
	MousePosPrev = ImVec2(-1, -1);
	MouseDoubleClickTime = 0.30f;
	MouseDoubleClickMaxDist = 6.0f;
	MouseDragThreshold = 6.0f;
	for (int i = 0; i < IM_ARRAYSIZE(MouseDownDuration); i++)
		MouseDownDuration[i] = MouseDownDurationPrev[i] = -1.0f;
	for (int i = 0; i < IM_ARRAYSIZE(KeysDownDuration); i++)
		KeysDownDuration[i] = KeysDownDurationPrev[i] = -1.0f;
	for (int i = 0; i < ImGuiKey_COUNT; i++)
		KeyMap[i] = -1;
	KeyRepeatDelay = 0.250f;
	KeyRepeatRate = 0.050f;
	UserData = NULL;

	// User functions
	RenderDrawListsFn = NULL;
	MemAllocFn = malloc;
	MemFreeFn = free;
	GetClipboardTextFn = GetClipboardTextFn_DefaultImpl;   // Platform dependent default implementations
	SetClipboardTextFn = SetClipboardTextFn_DefaultImpl;
	ClipboardUserData = NULL;
	ImeSetInputScreenPosFn = ImeSetInputScreenPosFn_DefaultImpl;

	// Set OS X style defaults based on __APPLE__ compile time flag
#ifdef __APPLE__
	OSXBehaviors = true;
#endif
}

// Pass in translated ASCII characters for text input.
// - with glfw you can get those from the callback set in glfwSetCharCallback()
// - on Windows you can get those using ToAscii+keyboard state, or via the WM_CHAR message
void ImGuiIO::AddInputCharacter(ImWchar c)
{
	const int n = ImStrlenW(InputCharacters);
	if (n + 1 < IM_ARRAYSIZE(InputCharacters))
	{
		InputCharacters[n] = c;
		InputCharacters[n + 1] = '\0';
	}
}

void ImGuiIO::AddInputCharactersUTF8(const char* utf8_chars)
{
	// We can't pass more wchars than ImGuiIO::InputCharacters[] can hold so don't convert more
	const int wchars_buf_len = sizeof(ImGuiIO::InputCharacters) / sizeof(ImWchar);
	ImWchar wchars[wchars_buf_len];
	ImTextStrFromUtf8(wchars, wchars_buf_len, utf8_chars, NULL);
	for (int i = 0; i < wchars_buf_len && wchars[i] != 0; i++)
		AddInputCharacter(wchars[i]);
}

//-----------------------------------------------------------------------------
// HELPERS
//-----------------------------------------------------------------------------

#define IM_F32_TO_INT8_UNBOUND(_VAL)    ((int)((_VAL) * 255.0f + ((_VAL)>=0 ? 0.5f : -0.5f)))   // Unsaturated, for display purpose 
#define IM_F32_TO_INT8_SAT(_VAL)        ((int)(ImSaturate(_VAL) * 255.0f + 0.5f))               // Saturated, always output 0..255

// Play it nice with Windows users. Notepad in 2015 still doesn't display text data with Unix-style \n.
#ifdef _WIN32
#define IM_NEWLINE "\r\n"
#else
#define IM_NEWLINE "\n"
#endif

bool ImIsPointInTriangle(const ImVec2& p, const ImVec2& a, const ImVec2& b, const ImVec2& c)
{
	bool b1 = ((p.x - b.x) * (a.y - b.y) - (p.y - b.y) * (a.x - b.x)) < 0.0f;
	bool b2 = ((p.x - c.x) * (b.y - c.y) - (p.y - c.y) * (b.x - c.x)) < 0.0f;
	bool b3 = ((p.x - a.x) * (c.y - a.y) - (p.y - a.y) * (c.x - a.x)) < 0.0f;
	return ((b1 == b2) && (b2 == b3));
}

int ImStricmp(const char* str1, const char* str2)
{
	int d;
	while ((d = toupper(*str2) - toupper(*str1)) == 0 && *str1) { str1++; str2++; }
	return d;
}

int ImStrnicmp(const char* str1, const char* str2, int count)
{
	int d = 0;
	while (count > 0 && (d = toupper(*str2) - toupper(*str1)) == 0 && *str1) { str1++; str2++; count--; }
	return d;
}

void ImStrncpy(char* dst, const char* src, int count)
{
	if (count < 1) return;
	strncpy(dst, src, (size_t)count);
	dst[count - 1] = 0;
}

char* ImStrdup(const char *str)
{
	size_t len = strlen(str) + 1;
	void* buff = ImGui::MemAlloc(len);
	return (char*)memcpy(buff, (const void*)str, len);
}

int ImStrlenW(const ImWchar* str)
{
	int n = 0;
	while (*str++) n++;
	return n;
}

const ImWchar* ImStrbolW(const ImWchar* buf_mid_line, const ImWchar* buf_begin) // find beginning-of-line
{
	while (buf_mid_line > buf_begin && buf_mid_line[-1] != '\n')
		buf_mid_line--;
	return buf_mid_line;
}

const char* ImStristr(const char* haystack, const char* haystack_end, const char* needle, const char* needle_end)
{
	if (!needle_end)
		needle_end = needle + strlen(needle);

	const char un0 = (char)toupper(*needle);
	while ((!haystack_end && *haystack) || (haystack_end && haystack < haystack_end))
	{
		if (toupper(*haystack) == un0)
		{
			const char* b = needle + 1;
			for (const char* a = haystack + 1; b < needle_end; a++, b++)
				if (toupper(*a) != toupper(*b))
					break;
			if (b == needle_end)
				return haystack;
		}
		haystack++;
	}
	return NULL;
}


// MSVC version appears to return -1 on overflow, whereas glibc appears to return total count (which may be >= buf_size). 
// Ideally we would test for only one of those limits at runtime depending on the behavior the vsnprintf(), but trying to deduct it at compile time sounds like a pandora can of worm.
int ImFormatString(char* buf, int buf_size, const char* fmt, ...)
{
	IM_ASSERT(buf_size > 0);
	va_list args;
	va_start(args, fmt);
	int w = vsnprintf(buf, buf_size, fmt, args);
	va_end(args);
	if (w == -1 || w >= buf_size)
		w = buf_size - 1;
	buf[w] = 0;
	return w;
}

int ImFormatStringV(char* buf, int buf_size, const char* fmt, va_list args)
{
	IM_ASSERT(buf_size > 0);
	int w = vsnprintf(buf, buf_size, fmt, args);
	if (w == -1 || w >= buf_size)
		w = buf_size - 1;
	buf[w] = 0;
	return w;
}

// Pass data_size==0 for zero-terminated strings
// FIXME-OPT: Replace with e.g. FNV1a hash? CRC32 pretty much randomly access 1KB. Need to do proper measurements.
ImU32 ImHash(const void* data, int data_size, ImU32 seed)
{
	static ImU32 crc32_lut[256] = { 0 };
	if (!crc32_lut[1])
	{
		const ImU32 polynomial = 0xEDB88320;
		for (ImU32 i = 0; i < 256; i++)
		{
			ImU32 crc = i;
			for (ImU32 j = 0; j < 8; j++)
				crc = (crc >> 1) ^ (ImU32(-int(crc & 1)) & polynomial);
			crc32_lut[i] = crc;
		}
	}

	seed = ~seed;
	ImU32 crc = seed;
	const unsigned char* current = (const unsigned char*)data;

	if (data_size > 0)
	{
		// Known size
		while (data_size--)
			crc = (crc >> 8) ^ crc32_lut[(crc & 0xFF) ^ *current++];
	}
	else
	{
		// Zero-terminated string
		while (unsigned char c = *current++)
		{
			// We support a syntax of "label###id" where only "###id" is included in the hash, and only "label" gets displayed.
			// Because this syntax is rarely used we are optimizing for the common case.
			// - If we reach ### in the string we discard the hash so far and reset to the seed.
			// - We don't do 'current += 2; continue;' after handling ### to keep the code smaller.
			if (c == '#' && current[0] == '#' && current[1] == '#')
				crc = seed;
			crc = (crc >> 8) ^ crc32_lut[(crc & 0xFF) ^ c];
		}
	}
	return ~crc;
}

//-----------------------------------------------------------------------------
// ImText* helpers
//-----------------------------------------------------------------------------

// Convert UTF-8 to 32-bits character, process single character input.
// Based on stb_from_utf8() from github.com/nothings/stb/
// We handle UTF-8 decoding error by skipping forward.
int ImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end)
{
	unsigned int c = (unsigned int)-1;
	const unsigned char* str = (const unsigned char*)in_text;
	if (!(*str & 0x80))
	{
		c = (unsigned int)(*str++);
		*out_char = c;
		return 1;
	}
	if ((*str & 0xe0) == 0xc0)
	{
		*out_char = 0xFFFD; // will be invalid but not end of string
		if (in_text_end && in_text_end - (const char*)str < 2) return 1;
		if (*str < 0xc2) return 2;
		c = (unsigned int)((*str++ & 0x1f) << 6);
		if ((*str & 0xc0) != 0x80) return 2;
		c += (*str++ & 0x3f);
		*out_char = c;
		return 2;
	}
	if ((*str & 0xf0) == 0xe0)
	{
		*out_char = 0xFFFD; // will be invalid but not end of string
		if (in_text_end && in_text_end - (const char*)str < 3) return 1;
		if (*str == 0xe0 && (str[1] < 0xa0 || str[1] > 0xbf)) return 3;
		if (*str == 0xed && str[1] > 0x9f) return 3; // str[1] < 0x80 is checked below
		c = (unsigned int)((*str++ & 0x0f) << 12);
		if ((*str & 0xc0) != 0x80) return 3;
		c += (unsigned int)((*str++ & 0x3f) << 6);
		if ((*str & 0xc0) != 0x80) return 3;
		c += (*str++ & 0x3f);
		*out_char = c;
		return 3;
	}
	if ((*str & 0xf8) == 0xf0)
	{
		*out_char = 0xFFFD; // will be invalid but not end of string
		if (in_text_end && in_text_end - (const char*)str < 4) return 1;
		if (*str > 0xf4) return 4;
		if (*str == 0xf0 && (str[1] < 0x90 || str[1] > 0xbf)) return 4;
		if (*str == 0xf4 && str[1] > 0x8f) return 4; // str[1] < 0x80 is checked below
		c = (unsigned int)((*str++ & 0x07) << 18);
		if ((*str & 0xc0) != 0x80) return 4;
		c += (unsigned int)((*str++ & 0x3f) << 12);
		if ((*str & 0xc0) != 0x80) return 4;
		c += (unsigned int)((*str++ & 0x3f) << 6);
		if ((*str & 0xc0) != 0x80) return 4;
		c += (*str++ & 0x3f);
		// utf-8 encodings of values used in surrogate pairs are invalid
		if ((c & 0xFFFFF800) == 0xD800) return 4;
		*out_char = c;
		return 4;
	}
	*out_char = 0;
	return 0;
}

int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, const char** in_text_remaining)
{
	ImWchar* buf_out = buf;
	ImWchar* buf_end = buf + buf_size;
	while (buf_out < buf_end - 1 && (!in_text_end || in_text < in_text_end) && *in_text)
	{
		unsigned int c;
		in_text += ImTextCharFromUtf8(&c, in_text, in_text_end);
		if (c == 0)
			break;
		if (c < 0x10000)    // FIXME: Losing characters that don't fit in 2 bytes
			*buf_out++ = (ImWchar)c;
	}
	*buf_out = 0;
	if (in_text_remaining)
		*in_text_remaining = in_text;
	return (int)(buf_out - buf);
}

int ImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end)
{
	int char_count = 0;
	while ((!in_text_end || in_text < in_text_end) && *in_text)
	{
		unsigned int c;
		in_text += ImTextCharFromUtf8(&c, in_text, in_text_end);
		if (c == 0)
			break;
		if (c < 0x10000)
			char_count++;
	}
	return char_count;
}

// Based on stb_to_utf8() from github.com/nothings/stb/
static inline int ImTextCharToUtf8(char* buf, int buf_size, unsigned int c)
{
	if (c < 0x80)
	{
		buf[0] = (char)c;
		return 1;
	}
	if (c < 0x800)
	{
		if (buf_size < 2) return 0;
		buf[0] = (char)(0xc0 + (c >> 6));
		buf[1] = (char)(0x80 + (c & 0x3f));
		return 2;
	}
	if (c >= 0xdc00 && c < 0xe000)
	{
		return 0;
	}
	if (c >= 0xd800 && c < 0xdc00)
	{
		if (buf_size < 4) return 0;
		buf[0] = (char)(0xf0 + (c >> 18));
		buf[1] = (char)(0x80 + ((c >> 12) & 0x3f));
		buf[2] = (char)(0x80 + ((c >> 6) & 0x3f));
		buf[3] = (char)(0x80 + ((c) & 0x3f));
		return 4;
	}
	//else if (c < 0x10000)
	{
		if (buf_size < 3) return 0;
		buf[0] = (char)(0xe0 + (c >> 12));
		buf[1] = (char)(0x80 + ((c >> 6) & 0x3f));
		buf[2] = (char)(0x80 + ((c) & 0x3f));
		return 3;
	}
}

static inline int ImTextCountUtf8BytesFromChar(unsigned int c)
{
	if (c < 0x80) return 1;
	if (c < 0x800) return 2;
	if (c >= 0xdc00 && c < 0xe000) return 0;
	if (c >= 0xd800 && c < 0xdc00) return 4;
	return 3;
}

int ImTextStrToUtf8(char* buf, int buf_size, const ImWchar* in_text, const ImWchar* in_text_end)
{
	char* buf_out = buf;
	const char* buf_end = buf + buf_size;
	while (buf_out < buf_end - 1 && (!in_text_end || in_text < in_text_end) && *in_text)
	{
		unsigned int c = (unsigned int)(*in_text++);
		if (c < 0x80)
			*buf_out++ = (char)c;
		else
			buf_out += ImTextCharToUtf8(buf_out, (int)(buf_end - buf_out - 1), c);
	}
	*buf_out = 0;
	return (int)(buf_out - buf);
}

int ImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end)
{
	int bytes_count = 0;
	while ((!in_text_end || in_text < in_text_end) && *in_text)
	{
		unsigned int c = (unsigned int)(*in_text++);
		if (c < 0x80)
			bytes_count++;
		else
			bytes_count += ImTextCountUtf8BytesFromChar(c);
	}
	return bytes_count;
}

ImVec4 ImGui::ColorConvertU32ToFloat4(ImU32 in)
{
	float s = 1.0f / 255.0f;
	return ImVec4(
		((in >> IM_COL32_R_SHIFT) & 0xFF) * s,
		((in >> IM_COL32_G_SHIFT) & 0xFF) * s,
		((in >> IM_COL32_B_SHIFT) & 0xFF) * s,
		((in >> IM_COL32_A_SHIFT) & 0xFF) * s);
}

ImU32 ImGui::ColorConvertFloat4ToU32(const ImVec4& in)
{
	ImU32 out;
	out = ((ImU32)IM_F32_TO_INT8_SAT(in.x)) << IM_COL32_R_SHIFT;
	out |= ((ImU32)IM_F32_TO_INT8_SAT(in.y)) << IM_COL32_G_SHIFT;
	out |= ((ImU32)IM_F32_TO_INT8_SAT(in.z)) << IM_COL32_B_SHIFT;
	out |= ((ImU32)IM_F32_TO_INT8_SAT(in.w)) << IM_COL32_A_SHIFT;
	return out;
}

ImU32 ImGui::GetColorU32(ImGuiCol idx, float alpha_mul)
{
	ImVec4 c = GImGui->Style.Colors[idx];
	c.w *= GImGui->Style.Alpha * alpha_mul;
	return ColorConvertFloat4ToU32(c);
}

ImU32 ImGui::GetColorU32(const ImVec4& col)
{
	ImVec4 c = col;
	c.w *= GImGui->Style.Alpha;
	return ColorConvertFloat4ToU32(c);
}

// Convert rgb floats ([0-1],[0-1],[0-1]) to hsv floats ([0-1],[0-1],[0-1]), from Foley & van Dam p592
// Optimized http://lolengine.net/blog/2013/01/13/fast-rgb-to-hsv
void ImGui::ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& out_v)
{
	float K = 0.f;
	if (g < b)
	{
		const float tmp = g; g = b; b = tmp;
		K = -1.f;
	}
	if (r < g)
	{
		const float tmp = r; r = g; g = tmp;
		K = -2.f / 6.f - K;
	}

	const float chroma = r - (g < b ? g : b);
	out_h = fabsf(K + (g - b) / (6.f * chroma + 1e-20f));
	out_s = chroma / (r + 1e-20f);
	out_v = r;
}

// Convert hsv floats ([0-1],[0-1],[0-1]) to rgb floats ([0-1],[0-1],[0-1]), from Foley & van Dam p593
// also http://en.wikipedia.org/wiki/HSL_and_HSV
void ImGui::ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& out_b)
{
	if (s == 0.0f)
	{
		// gray
		out_r = out_g = out_b = v;
		return;
	}

	h = fmodf(h, 1.0f) / (60.0f / 360.0f);
	int   i = (int)h;
	float f = h - (float)i;
	float p = v * (1.0f - s);
	float q = v * (1.0f - s * f);
	float t = v * (1.0f - s * (1.0f - f));

	switch (i)
	{
	case 0: out_r = v; out_g = t; out_b = p; break;
	case 1: out_r = q; out_g = v; out_b = p; break;
	case 2: out_r = p; out_g = v; out_b = t; break;
	case 3: out_r = p; out_g = q; out_b = v; break;
	case 4: out_r = t; out_g = p; out_b = v; break;
	case 5: default: out_r = v; out_g = p; out_b = q; break;
	}
}

FILE* ImFileOpen(const char* filename, const char* mode)
{
#if defined(_WIN32) && !defined(__CYGWIN__)
	// We need a fopen() wrapper because MSVC/Windows fopen doesn't handle UTF-8 filenames. Converting both strings from UTF-8 to wchar format (using a single allocation, because we can)
	const int filename_wsize = ImTextCountCharsFromUtf8(filename, NULL) + 1;
	const int mode_wsize = ImTextCountCharsFromUtf8(mode, NULL) + 1;
	ImVector<ImWchar> buf;
	buf.resize(filename_wsize + mode_wsize);
	ImTextStrFromUtf8(&buf[0], filename_wsize, filename, NULL);
	ImTextStrFromUtf8(&buf[filename_wsize], mode_wsize, mode, NULL);
	return _wfopen((wchar_t*)&buf[0], (wchar_t*)&buf[filename_wsize]);
#else
	return fopen(filename, mode);
#endif
}

// Load file content into memory
// Memory allocated with ImGui::MemAlloc(), must be freed by user using ImGui::MemFree()
void* ImFileLoadToMemory(const char* filename, const char* file_open_mode, int* out_file_size, int padding_bytes)
{
	IM_ASSERT(filename && file_open_mode);
	if (out_file_size)
		*out_file_size = 0;

	FILE* f;
	if ((f = ImFileOpen(filename, file_open_mode)) == NULL)
		return NULL;

	long file_size_signed;
	if (fseek(f, 0, SEEK_END) || (file_size_signed = ftell(f)) == -1 || fseek(f, 0, SEEK_SET))
	{
		fclose(f);
		return NULL;
	}

	int file_size = (int)file_size_signed;
	void* file_data = ImGui::MemAlloc(file_size + padding_bytes);
	if (file_data == NULL)
	{
		fclose(f);
		return NULL;
	}
	if (fread(file_data, 1, (size_t)file_size, f) != (size_t)file_size)
	{
		fclose(f);
		ImGui::MemFree(file_data);
		return NULL;
	}
	if (padding_bytes > 0)
		memset((void *)(((char*)file_data) + file_size), 0, padding_bytes);

	fclose(f);
	if (out_file_size)
		*out_file_size = file_size;

	return file_data;
}

//-----------------------------------------------------------------------------
// ImGuiStorage
//-----------------------------------------------------------------------------

// Helper: Key->value storage
void ImGuiStorage::Clear()
{
	Data.clear();
}

// std::lower_bound but without the bullshit
static ImVector<ImGuiStorage::Pair>::iterator LowerBound(ImVector<ImGuiStorage::Pair>& data, ImGuiID key)
{
	ImVector<ImGuiStorage::Pair>::iterator first = data.begin();
	ImVector<ImGuiStorage::Pair>::iterator last = data.end();
	int count = (int)(last - first);
	while (count > 0)
	{
		int count2 = count / 2;
		ImVector<ImGuiStorage::Pair>::iterator mid = first + count2;
		if (mid->key < key)
		{
			first = ++mid;
			count -= count2 + 1;
		}
		else
		{
			count = count2;
		}
	}
	return first;
}

int ImGuiStorage::GetInt(ImGuiID key, int default_val) const
{
	ImVector<Pair>::iterator it = LowerBound(const_cast<ImVector<ImGuiStorage::Pair>&>(Data), key);
	if (it == Data.end() || it->key != key)
		return default_val;
	return it->val_i;
}

bool ImGuiStorage::GetBool(ImGuiID key, bool default_val) const
{
	return GetInt(key, default_val ? 1 : 0) != 0;
}

float ImGuiStorage::GetFloat(ImGuiID key, float default_val) const
{
	ImVector<Pair>::iterator it = LowerBound(const_cast<ImVector<ImGuiStorage::Pair>&>(Data), key);
	if (it == Data.end() || it->key != key)
		return default_val;
	return it->val_f;
}

void* ImGuiStorage::GetVoidPtr(ImGuiID key) const
{
	ImVector<Pair>::iterator it = LowerBound(const_cast<ImVector<ImGuiStorage::Pair>&>(Data), key);
	if (it == Data.end() || it->key != key)
		return NULL;
	return it->val_p;
}

// References are only valid until a new value is added to the storage. Calling a Set***() function or a Get***Ref() function invalidates the pointer.
int* ImGuiStorage::GetIntRef(ImGuiID key, int default_val)
{
	ImVector<Pair>::iterator it = LowerBound(Data, key);
	if (it == Data.end() || it->key != key)
		it = Data.insert(it, Pair(key, default_val));
	return &it->val_i;
}

bool* ImGuiStorage::GetBoolRef(ImGuiID key, bool default_val)
{
	return (bool*)GetIntRef(key, default_val ? 1 : 0);
}

float* ImGuiStorage::GetFloatRef(ImGuiID key, float default_val)
{
	ImVector<Pair>::iterator it = LowerBound(Data, key);
	if (it == Data.end() || it->key != key)
		it = Data.insert(it, Pair(key, default_val));
	return &it->val_f;
}

void** ImGuiStorage::GetVoidPtrRef(ImGuiID key, void* default_val)
{
	ImVector<Pair>::iterator it = LowerBound(Data, key);
	if (it == Data.end() || it->key != key)
		it = Data.insert(it, Pair(key, default_val));
	return &it->val_p;
}

// FIXME-OPT: Need a way to reuse the result of lower_bound when doing GetInt()/SetInt() - not too bad because it only happens on explicit interaction (maximum one a frame)
void ImGuiStorage::SetInt(ImGuiID key, int val)
{
	ImVector<Pair>::iterator it = LowerBound(Data, key);
	if (it == Data.end() || it->key != key)
	{
		Data.insert(it, Pair(key, val));
		return;
	}
	it->val_i = val;
}

void ImGuiStorage::SetBool(ImGuiID key, bool val)
{
	SetInt(key, val ? 1 : 0);
}

void ImGuiStorage::SetFloat(ImGuiID key, float val)
{
	ImVector<Pair>::iterator it = LowerBound(Data, key);
	if (it == Data.end() || it->key != key)
	{
		Data.insert(it, Pair(key, val));
		return;
	}
	it->val_f = val;
}

void ImGuiStorage::SetVoidPtr(ImGuiID key, void* val)
{
	ImVector<Pair>::iterator it = LowerBound(Data, key);
	if (it == Data.end() || it->key != key)
	{
		Data.insert(it, Pair(key, val));
		return;
	}
	it->val_p = val;
}

void ImGuiStorage::SetAllInt(int v)
{
	for (int i = 0; i < Data.Size; i++)
		Data[i].val_i = v;
}

//-----------------------------------------------------------------------------
// ImGuiTextFilter
//-----------------------------------------------------------------------------

// Helper: Parse and apply text filters. In format "aaaaa[,bbbb][,ccccc]"
ImGuiTextFilter::ImGuiTextFilter(const char* default_filter)
{
	if (default_filter)
	{
		ImStrncpy(InputBuf, default_filter, IM_ARRAYSIZE(InputBuf));
		Build();
	}
	else
	{
		InputBuf[0] = 0;
		CountGrep = 0;
	}
}

bool ImGuiTextFilter::Draw(const char* label, float width)
{
	if (width != 0.0f)
		ImGui::PushItemWidth(width);
	bool value_changed = ImGui::InputText(label, InputBuf, IM_ARRAYSIZE(InputBuf));
	if (width != 0.0f)
		ImGui::PopItemWidth();
	if (value_changed)
		Build();
	return value_changed;
}

void ImGuiTextFilter::TextRange::split(char separator, ImVector<TextRange>& out)
{
	out.resize(0);
	const char* wb = b;
	const char* we = wb;
	while (we < e)
	{
		if (*we == separator)
		{
			out.push_back(TextRange(wb, we));
			wb = we + 1;
		}
		we++;
	}
	if (wb != we)
		out.push_back(TextRange(wb, we));
}

void ImGuiTextFilter::Build()
{
	Filters.resize(0);
	TextRange input_range(InputBuf, InputBuf + strlen(InputBuf));
	input_range.split(',', Filters);

	CountGrep = 0;
	for (int i = 0; i != Filters.Size; i++)
	{
		Filters[i].trim_blanks();
		if (Filters[i].empty())
			continue;
		if (Filters[i].front() != '-')
			CountGrep += 1;
	}
}

bool ImGuiTextFilter::PassFilter(const char* text, const char* text_end) const
{
	if (Filters.empty())
		return true;

	if (text == NULL)
		text = "";

	for (int i = 0; i != Filters.Size; i++)
	{
		const TextRange& f = Filters[i];
		if (f.empty())
			continue;
		if (f.front() == '-')
		{
			// Subtract
			if (ImStristr(text, text_end, f.begin() + 1, f.end()) != NULL)
				return false;
		}
		else
		{
			// Grep
			if (ImStristr(text, text_end, f.begin(), f.end()) != NULL)
				return true;
		}
	}

	// Implicit * grep
	if (CountGrep == 0)
		return true;

	return false;
}

//-----------------------------------------------------------------------------
// ImGuiTextBuffer
//-----------------------------------------------------------------------------

// On some platform vsnprintf() takes va_list by reference and modifies it.
// va_copy is the 'correct' way to copy a va_list but Visual Studio prior to 2013 doesn't have it.
#ifndef va_copy
#define va_copy(dest, src) (dest = src)
#endif

// Helper: Text buffer for logging/accumulating text
void ImGuiTextBuffer::appendv(const char* fmt, va_list args)
{
	va_list args_copy;
	va_copy(args_copy, args);

	int len = vsnprintf(NULL, 0, fmt, args);         // FIXME-OPT: could do a first pass write attempt, likely successful on first pass.
	if (len <= 0)
		return;

	const int write_off = Buf.Size;
	const int needed_sz = write_off + len;
	if (write_off + len >= Buf.Capacity)
	{
		int double_capacity = Buf.Capacity * 2;
		Buf.reserve(needed_sz > double_capacity ? needed_sz : double_capacity);
	}

	Buf.resize(needed_sz);
	ImFormatStringV(&Buf[write_off] - 1, len + 1, fmt, args_copy);
}

void ImGuiTextBuffer::append(const char* fmt, ...)
{
	va_list args;
	va_start(args, fmt);
	appendv(fmt, args);
	va_end(args);
}

//-----------------------------------------------------------------------------
// ImGuiSimpleColumns
//-----------------------------------------------------------------------------

ImGuiSimpleColumns::ImGuiSimpleColumns()
{
	Count = 0;
	Spacing = Width = NextWidth = 0.0f;
	memset(Pos, 0, sizeof(Pos));
	memset(NextWidths, 0, sizeof(NextWidths));
}

void ImGuiSimpleColumns::Update(int count, float spacing, bool clear)
{
	IM_ASSERT(Count <= IM_ARRAYSIZE(Pos));
	Count = count;
	Width = NextWidth = 0.0f;
	Spacing = spacing;
	if (clear) memset(NextWidths, 0, sizeof(NextWidths));
	for (int i = 0; i < Count; i++)
	{
		if (i > 0 && NextWidths[i] > 0.0f)
			Width += Spacing;
		Pos[i] = (float)(int)Width;
		Width += NextWidths[i];
		NextWidths[i] = 0.0f;
	}
}

float ImGuiSimpleColumns::DeclColumns(float w0, float w1, float w2) // not using va_arg because they promote float to double
{
	NextWidth = 0.0f;
	NextWidths[0] = ImMax(NextWidths[0], w0);
	NextWidths[1] = ImMax(NextWidths[1], w1);
	NextWidths[2] = ImMax(NextWidths[2], w2);
	for (int i = 0; i < 3; i++)
		NextWidth += NextWidths[i] + ((i > 0 && NextWidths[i] > 0.0f) ? Spacing : 0.0f);
	return ImMax(Width, NextWidth);
}

float ImGuiSimpleColumns::CalcExtraSpace(float avail_w)
{
	return ImMax(0.0f, avail_w - Width);
}

//-----------------------------------------------------------------------------
// ImGuiListClipper
//-----------------------------------------------------------------------------

static void SetCursorPosYAndSetupDummyPrevLine(float pos_y, float line_height)
{
	// Set cursor position and a few other things so that SetScrollHere() and Columns() can work when seeking cursor. 
	// FIXME: It is problematic that we have to do that here, because custom/equivalent end-user code would stumble on the same issue. Consider moving within SetCursorXXX functions?
	ImGui::SetCursorPosY(pos_y);
	ImGuiWindow* window = ImGui::GetCurrentWindow();
	window->DC.CursorPosPrevLine.y = window->DC.CursorPos.y - line_height;      // Setting those fields so that SetScrollHere() can properly function after the end of our clipper usage.
	window->DC.PrevLineHeight = (line_height - GImGui->Style.ItemSpacing.y);    // If we end up needing more accurate data (to e.g. use SameLine) we may as well make the clipper have a fourth step to let user process and display the last item in their list.
	if (window->DC.ColumnsCount > 1)
		window->DC.ColumnsCellMinY = window->DC.CursorPos.y;                    // Setting this so that cell Y position are set properly
}

// Use case A: Begin() called from constructor with items_height<0, then called again from Sync() in StepNo 1
// Use case B: Begin() called from constructor with items_height>0
// FIXME-LEGACY: Ideally we should remove the Begin/End functions but they are part of the legacy API we still support. This is why some of the code in Step() calling Begin() and reassign some fields, spaghetti style.
void ImGuiListClipper::Begin(int count, float items_height)
{
	StartPosY = ImGui::GetCursorPosY();
	ItemsHeight = items_height;
	ItemsCount = count;
	StepNo = 0;
	DisplayEnd = DisplayStart = -1;
	if (ItemsHeight > 0.0f)
	{
		ImGui::CalcListClipping(ItemsCount, ItemsHeight, &DisplayStart, &DisplayEnd); // calculate how many to clip/display
		if (DisplayStart > 0)
			SetCursorPosYAndSetupDummyPrevLine(StartPosY + DisplayStart * ItemsHeight, ItemsHeight); // advance cursor
		StepNo = 2;
	}
}

void ImGuiListClipper::End()
{
	if (ItemsCount < 0)
		return;
	// In theory here we should assert that ImGui::GetCursorPosY() == StartPosY + DisplayEnd * ItemsHeight, but it feels saner to just seek at the end and not assert/crash the user.
	if (ItemsCount < INT_MAX)
		SetCursorPosYAndSetupDummyPrevLine(StartPosY + ItemsCount * ItemsHeight, ItemsHeight); // advance cursor
	ItemsCount = -1;
	StepNo = 3;
}

bool ImGuiListClipper::Step()
{
	if (ItemsCount == 0 || ImGui::GetCurrentWindowRead()->SkipItems)
	{
		ItemsCount = -1;
		return false;
	}
	if (StepNo == 0) // Step 0: the clipper let you process the first element, regardless of it being visible or not, so we can measure the element height.
	{
		DisplayStart = 0;
		DisplayEnd = 1;
		StartPosY = ImGui::GetCursorPosY();
		StepNo = 1;
		return true;
	}
	if (StepNo == 1) // Step 1: the clipper infer height from first element, calculate the actual range of elements to display, and position the cursor before the first element.
	{
		if (ItemsCount == 1) { ItemsCount = -1; return false; }
		float items_height = ImGui::GetCursorPosY() - StartPosY;
		IM_ASSERT(items_height > 0.0f);   // If this triggers, it means Item 0 hasn't moved the cursor vertically
		Begin(ItemsCount - 1, items_height);
		DisplayStart++;
		DisplayEnd++;
		StepNo = 3;
		return true;
	}
	if (StepNo == 2) // Step 2: dummy step only required if an explicit items_height was passed to constructor or Begin() and user still call Step(). Does nothing and switch to Step 3.
	{
		IM_ASSERT(DisplayStart >= 0 && DisplayEnd >= 0);
		StepNo = 3;
		return true;
	}
	if (StepNo == 3) // Step 3: the clipper validate that we have reached the expected Y position (corresponding to element DisplayEnd), advance the cursor to the end of the list and then returns 'false' to end the loop.
		End();
	return false;
}

//-----------------------------------------------------------------------------
// ImGuiWindow
//-----------------------------------------------------------------------------

ImGuiWindow::ImGuiWindow(const char* name)
{
	Name = ImStrdup(name);
	ID = ImHash(name, 0);
	IDStack.push_back(ID);
	MoveId = GetID("#MOVE");

	Flags = 0;
	IndexWithinParent = 0;
	PosFloat = Pos = ImVec2(0.0f, 0.0f);
	Size = SizeFull = ImVec2(0.0f, 0.0f);
	SizeContents = SizeContentsExplicit = ImVec2(0.0f, 0.0f);
	WindowPadding = ImVec2(0.0f, 0.0f);
	Scroll = ImVec2(0.0f, 0.0f);
	ScrollTarget = ImVec2(FLT_MAX, FLT_MAX);
	ScrollTargetCenterRatio = ImVec2(0.5f, 0.5f);
	ScrollbarX = ScrollbarY = false;
	ScrollbarSizes = ImVec2(0.0f, 0.0f);
	BorderSize = 0.0f;
	Active = WasActive = false;
	Accessed = false;
	Collapsed = false;
	SkipItems = false;
	BeginCount = 0;
	PopupId = 0;
	AutoFitFramesX = AutoFitFramesY = -1;
	AutoFitOnlyGrows = false;
	AutoPosLastDirection = -1;
	HiddenFrames = 0;
	SetWindowPosAllowFlags = SetWindowSizeAllowFlags = SetWindowCollapsedAllowFlags = ImGuiSetCond_Always | ImGuiSetCond_Once | ImGuiSetCond_FirstUseEver | ImGuiSetCond_Appearing;
	SetWindowPosCenterWanted = false;

	LastFrameActive = -1;
	ItemWidthDefault = 0.0f;
	FontWindowScale = 1.0f;

	DrawList = (ImDrawList*)ImGui::MemAlloc(sizeof(ImDrawList));
	IM_PLACEMENT_NEW(DrawList) ImDrawList();
	DrawList->_OwnerName = Name;
	RootWindow = NULL;
	RootNonPopupWindow = NULL;
	ParentWindow = NULL;

	FocusIdxAllCounter = FocusIdxTabCounter = -1;
	FocusIdxAllRequestCurrent = FocusIdxTabRequestCurrent = INT_MAX;
	FocusIdxAllRequestNext = FocusIdxTabRequestNext = INT_MAX;
}

ImGuiWindow::~ImGuiWindow()
{
	DrawList->~ImDrawList();
	ImGui::MemFree(DrawList);
	DrawList = NULL;
	ImGui::MemFree(Name);
	Name = NULL;
}

ImGuiID ImGuiWindow::GetID(const char* str, const char* str_end)
{
	ImGuiID seed = IDStack.back();
	ImGuiID id = ImHash(str, str_end ? (int)(str_end - str) : 0, seed);
	ImGui::KeepAliveID(id);
	return id;
}

ImGuiID ImGuiWindow::GetID(const void* ptr)
{
	ImGuiID seed = IDStack.back();
	ImGuiID id = ImHash(&ptr, sizeof(void*), seed);
	ImGui::KeepAliveID(id);
	return id;
}

ImGuiID ImGuiWindow::GetIDNoKeepAlive(const char* str, const char* str_end)
{
	ImGuiID seed = IDStack.back();
	return ImHash(str, str_end ? (int)(str_end - str) : 0, seed);
}

//-----------------------------------------------------------------------------
// Internal API exposed in imgui_internal.h
//-----------------------------------------------------------------------------

static void SetCurrentWindow(ImGuiWindow* window)
{
	ImGuiContext& g = *GImGui;
	g.CurrentWindow = window;
	if (window)
		g.FontSize = window->CalcFontSize();
}

ImGuiWindow* ImGui::GetParentWindow()
{
	ImGuiContext& g = *GImGui;
	IM_ASSERT(g.CurrentWindowStack.Size >= 2);
	return g.CurrentWindowStack[(unsigned int)g.CurrentWindowStack.Size - 2];
}

void ImGui::SetActiveID(ImGuiID id, ImGuiWindow* window)
{
	ImGuiContext& g = *GImGui;
	g.ActiveId = id;
	g.ActiveIdAllowOverlap = false;
	g.ActiveIdIsJustActivated = true;
	if (id)
		g.ActiveIdIsAlive = true;
	g.ActiveIdWindow = window;
}

void ImGui::ClearActiveID()
{
	SetActiveID(0, NULL);
}

void ImGui::SetHoveredID(ImGuiID id)
{
	ImGuiContext& g = *GImGui;
	g.HoveredId = id;
	g.HoveredIdAllowOverlap = false;
}

void ImGui::KeepAliveID(ImGuiID id)
{
	ImGuiContext& g = *GImGui;
	if (g.ActiveId == id)
		g.ActiveIdIsAlive = true;
}

// Advance cursor given item size for layout.
void ImGui::ItemSize(const ImVec2& size, float text_offset_y)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return;

	// Always align ourselves on pixel boundaries
	ImGuiContext& g = *GImGui;
	const float line_height = ImMax(window->DC.CurrentLineHeight, size.y);
	const float text_base_offset = ImMax(window->DC.CurrentLineTextBaseOffset, text_offset_y);
	window->DC.CursorPosPrevLine = ImVec2(window->DC.CursorPos.x + size.x, window->DC.CursorPos.y);
	window->DC.CursorPos = ImVec2((float)(int)(window->Pos.x + window->DC.IndentX + window->DC.ColumnsOffsetX), (float)(int)(window->DC.CursorPos.y + line_height + g.Style.ItemSpacing.y));
	window->DC.CursorMaxPos.x = ImMax(window->DC.CursorMaxPos.x, window->DC.CursorPosPrevLine.x);
	window->DC.CursorMaxPos.y = ImMax(window->DC.CursorMaxPos.y, window->DC.CursorPos.y);

	//window->DrawList->AddCircle(window->DC.CursorMaxPos, 3.0f, IM_COL32(255,0,0,255), 4); // Debug

	window->DC.PrevLineHeight = line_height;
	window->DC.PrevLineTextBaseOffset = text_base_offset;
	window->DC.CurrentLineHeight = window->DC.CurrentLineTextBaseOffset = 0.0f;
}

void ImGui::ItemSize(const ImRect& bb, float text_offset_y)
{
	ItemSize(bb.GetSize(), text_offset_y);
}

// Declare item bounding box for clipping and interaction.
// Note that the size can be different than the one provided to ItemSize(). Typically, widgets that spread over available surface
// declares their minimum size requirement to ItemSize() and then use a larger region for drawing/interaction, which is passed to ItemAdd().
bool ImGui::ItemAdd(const ImRect& bb, const ImGuiID* id)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->DC.LastItemId = id ? *id : 0;
	window->DC.LastItemRect = bb;
	window->DC.LastItemHoveredAndUsable = window->DC.LastItemHoveredRect = false;
	if (IsClippedEx(bb, id, false))
		return false;

	// This is a sensible default, but widgets are free to override it after calling ItemAdd()
	ImGuiContext& g = *GImGui;
	if (IsMouseHoveringRect(bb.Min, bb.Max))
	{
		// Matching the behavior of IsHovered() but allow if ActiveId==window->MoveID (we clicked on the window background)
		// So that clicking on items with no active id such as Text() still returns true with IsItemHovered()
		window->DC.LastItemHoveredRect = true;
		if (g.HoveredRootWindow == window->RootWindow)
			if (g.ActiveId == 0 || (id && g.ActiveId == *id) || g.ActiveIdAllowOverlap || (g.ActiveId == window->MoveId))
				if (IsWindowContentHoverable(window))
					window->DC.LastItemHoveredAndUsable = true;
	}

	return true;
}

bool ImGui::IsClippedEx(const ImRect& bb, const ImGuiID* id, bool clip_even_when_logged)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = GetCurrentWindowRead();

	if (!bb.Overlaps(window->ClipRect))
		if (!id || *id != GImGui->ActiveId)
			if (clip_even_when_logged || !g.LogEnabled)
				return true;
	return false;
}

// NB: This is an internal helper. The user-facing IsItemHovered() is using data emitted from ItemAdd(), with a slightly different logic.
bool ImGui::IsHovered(const ImRect& bb, ImGuiID id, bool flatten_childs)
{
	ImGuiContext& g = *GImGui;
	if (g.HoveredId == 0 || g.HoveredId == id || g.HoveredIdAllowOverlap)
	{
		ImGuiWindow* window = GetCurrentWindowRead();
		if (g.HoveredWindow == window || (flatten_childs && g.HoveredRootWindow == window->RootWindow))
			if ((g.ActiveId == 0 || g.ActiveId == id || g.ActiveIdAllowOverlap) && IsMouseHoveringRect(bb.Min, bb.Max))
				if (IsWindowContentHoverable(g.HoveredRootWindow))
					return true;
	}
	return false;
}

bool ImGui::FocusableItemRegister(ImGuiWindow* window, bool is_active, bool tab_stop)
{
	ImGuiContext& g = *GImGui;

	const bool allow_keyboard_focus = window->DC.AllowKeyboardFocus;
	window->FocusIdxAllCounter++;
	if (allow_keyboard_focus)
		window->FocusIdxTabCounter++;

	// Process keyboard input at this point: TAB, Shift-TAB switch focus
	// We can always TAB out of a widget that doesn't allow tabbing in.
	if (tab_stop && window->FocusIdxAllRequestNext == INT_MAX && window->FocusIdxTabRequestNext == INT_MAX && is_active && IsKeyPressedMap(ImGuiKey_Tab))
	{
		// Modulo on index will be applied at the end of frame once we've got the total counter of items.
		window->FocusIdxTabRequestNext = window->FocusIdxTabCounter + (g.IO.KeyShift ? (allow_keyboard_focus ? -1 : 0) : +1);
	}

	if (window->FocusIdxAllCounter == window->FocusIdxAllRequestCurrent)
		return true;

	if (allow_keyboard_focus)
		if (window->FocusIdxTabCounter == window->FocusIdxTabRequestCurrent)
			return true;

	return false;
}

void ImGui::FocusableItemUnregister(ImGuiWindow* window)
{
	window->FocusIdxAllCounter--;
	window->FocusIdxTabCounter--;
}

ImVec2 ImGui::CalcItemSize(ImVec2 size, float default_x, float default_y)
{
	ImGuiContext& g = *GImGui;
	ImVec2 content_max;
	if (size.x < 0.0f || size.y < 0.0f)
		content_max = g.CurrentWindow->Pos + GetContentRegionMax();
	if (size.x <= 0.0f)
		size.x = (size.x == 0.0f) ? default_x : ImMax(content_max.x - g.CurrentWindow->DC.CursorPos.x, 4.0f) + size.x;
	if (size.y <= 0.0f)
		size.y = (size.y == 0.0f) ? default_y : ImMax(content_max.y - g.CurrentWindow->DC.CursorPos.y, 4.0f) + size.y;
	return size;
}

float ImGui::CalcWrapWidthForPos(const ImVec2& pos, float wrap_pos_x)
{
	if (wrap_pos_x < 0.0f)
		return 0.0f;

	ImGuiWindow* window = GetCurrentWindowRead();
	if (wrap_pos_x == 0.0f)
		wrap_pos_x = GetContentRegionMax().x + window->Pos.x;
	else if (wrap_pos_x > 0.0f)
		wrap_pos_x += window->Pos.x - window->Scroll.x; // wrap_pos_x is provided is window local space

	return ImMax(wrap_pos_x - pos.x, 1.0f);
}

//-----------------------------------------------------------------------------

void* ImGui::MemAlloc(size_t sz)
{
	GImGui->IO.MetricsAllocs++;
	return GImGui->IO.MemAllocFn(sz);
}

void ImGui::MemFree(void* ptr)
{
	if (ptr) GImGui->IO.MetricsAllocs--;
	return GImGui->IO.MemFreeFn(ptr);
}

const char* ImGui::GetClipboardText()
{
	return GImGui->IO.GetClipboardTextFn ? GImGui->IO.GetClipboardTextFn(GImGui->IO.ClipboardUserData) : "";
}

void ImGui::SetClipboardText(const char* text)
{
	if (GImGui->IO.SetClipboardTextFn)
		GImGui->IO.SetClipboardTextFn(GImGui->IO.ClipboardUserData, text);
}

const char* ImGui::GetVersion()
{
	return IMGUI_VERSION;
}

// Internal state access - if you want to share ImGui state between modules (e.g. DLL) or allocate it yourself
// Note that we still point to some static data and members (such as GFontAtlas), so the state instance you end up using will point to the static data within its module
ImGuiContext* ImGui::GetCurrentContext()
{
	return GImGui;
}

void ImGui::SetCurrentContext(ImGuiContext* ctx)
{
#ifdef IMGUI_SET_CURRENT_CONTEXT_FUNC
	IMGUI_SET_CURRENT_CONTEXT_FUNC(ctx); // For custom thread-based hackery you may want to have control over this.
#else
	GImGui = ctx;
#endif
}

ImGuiContext* ImGui::CreateContext(void* (*malloc_fn)(size_t), void(*free_fn)(void*))
{
	if (!malloc_fn) malloc_fn = malloc;
	ImGuiContext* ctx = (ImGuiContext*)malloc_fn(sizeof(ImGuiContext));
	IM_PLACEMENT_NEW(ctx) ImGuiContext();
	ctx->IO.MemAllocFn = malloc_fn;
	ctx->IO.MemFreeFn = free_fn ? free_fn : free;
	return ctx;
}

void ImGui::DestroyContext(ImGuiContext* ctx)
{
	void(*free_fn)(void*) = ctx->IO.MemFreeFn;
	ctx->~ImGuiContext();
	free_fn(ctx);
	if (GImGui == ctx)
		SetCurrentContext(NULL);
}

ImGuiIO& ImGui::GetIO()
{
	return GImGui->IO;
}

ImGuiStyle& ImGui::GetStyle()
{
	return GImGui->Style;
}

// Same value as passed to your RenderDrawListsFn() function. valid after Render() and until the next call to NewFrame()
ImDrawData* ImGui::GetDrawData()
{
	return GImGui->RenderDrawData.Valid ? &GImGui->RenderDrawData : NULL;
}

float ImGui::GetTime()
{
	return GImGui->Time;
}

int ImGui::GetFrameCount()
{
	return GImGui->FrameCount;
}

void ImGui::NewFrame()
{
	ImGuiContext& g = *GImGui;

	// Check user data
	IM_ASSERT(g.IO.DeltaTime >= 0.0f);               // Need a positive DeltaTime (zero is tolerated but will cause some timing issues)
	IM_ASSERT(g.IO.DisplaySize.x >= 0.0f && g.IO.DisplaySize.y >= 0.0f);
	IM_ASSERT(g.IO.Fonts->Fonts.Size > 0);           // Font Atlas not created. Did you call io.Fonts->GetTexDataAsRGBA32 / GetTexDataAsAlpha8 ?
	IM_ASSERT(g.IO.Fonts->Fonts[0]->IsLoaded());     // Font Atlas not created. Did you call io.Fonts->GetTexDataAsRGBA32 / GetTexDataAsAlpha8 ?
	IM_ASSERT(g.Style.CurveTessellationTol > 0.0f);  // Invalid style setting

	if (!g.Initialized)
	{
		// Initialize on first frame
		g.LogClipboard = (ImGuiTextBuffer*)ImGui::MemAlloc(sizeof(ImGuiTextBuffer));
		IM_PLACEMENT_NEW(g.LogClipboard) ImGuiTextBuffer();

		IM_ASSERT(g.Settings.empty());
		LoadIniSettingsFromDisk(g.IO.IniFilename);
		g.Initialized = true;
	}

	SetCurrentFont(GetDefaultFont());
	IM_ASSERT(g.Font->IsLoaded());

	g.Time += g.IO.DeltaTime;
	g.FrameCount += 1;
	g.Tooltip[0] = '\0';
	g.OverlayDrawList.Clear();
	g.OverlayDrawList.PushTextureID(g.IO.Fonts->TexID);
	g.OverlayDrawList.PushClipRectFullScreen();

	// Mark rendering data as invalid to prevent user who may have a handle on it to use it
	g.RenderDrawData.Valid = false;
	g.RenderDrawData.CmdLists = NULL;
	g.RenderDrawData.CmdListsCount = g.RenderDrawData.TotalVtxCount = g.RenderDrawData.TotalIdxCount = 0;

	// Update inputs state
	if (g.IO.MousePos.x < 0 && g.IO.MousePos.y < 0)
		g.IO.MousePos = ImVec2(-9999.0f, -9999.0f);
	if ((g.IO.MousePos.x < 0 && g.IO.MousePos.y < 0) || (g.IO.MousePosPrev.x < 0 && g.IO.MousePosPrev.y < 0))   // if mouse just appeared or disappeared (negative coordinate) we cancel out movement in MouseDelta
		g.IO.MouseDelta = ImVec2(0.0f, 0.0f);
	else
		g.IO.MouseDelta = g.IO.MousePos - g.IO.MousePosPrev;
	g.IO.MousePosPrev = g.IO.MousePos;
	for (int i = 0; i < IM_ARRAYSIZE(g.IO.MouseDown); i++)
	{
		g.IO.MouseClicked[i] = g.IO.MouseDown[i] && g.IO.MouseDownDuration[i] < 0.0f;
		g.IO.MouseReleased[i] = !g.IO.MouseDown[i] && g.IO.MouseDownDuration[i] >= 0.0f;
		g.IO.MouseDownDurationPrev[i] = g.IO.MouseDownDuration[i];
		g.IO.MouseDownDuration[i] = g.IO.MouseDown[i] ? (g.IO.MouseDownDuration[i] < 0.0f ? 0.0f : g.IO.MouseDownDuration[i] + g.IO.DeltaTime) : -1.0f;
		g.IO.MouseDoubleClicked[i] = false;
		if (g.IO.MouseClicked[i])
		{
			if (g.Time - g.IO.MouseClickedTime[i] < g.IO.MouseDoubleClickTime)
			{
				if (ImLengthSqr(g.IO.MousePos - g.IO.MouseClickedPos[i]) < g.IO.MouseDoubleClickMaxDist * g.IO.MouseDoubleClickMaxDist)
					g.IO.MouseDoubleClicked[i] = true;
				g.IO.MouseClickedTime[i] = -FLT_MAX;    // so the third click isn't turned into a double-click
			}
			else
			{
				g.IO.MouseClickedTime[i] = g.Time;
			}
			g.IO.MouseClickedPos[i] = g.IO.MousePos;
			g.IO.MouseDragMaxDistanceSqr[i] = 0.0f;
		}
		else if (g.IO.MouseDown[i])
		{
			g.IO.MouseDragMaxDistanceSqr[i] = ImMax(g.IO.MouseDragMaxDistanceSqr[i], ImLengthSqr(g.IO.MousePos - g.IO.MouseClickedPos[i]));
		}
	}
	memcpy(g.IO.KeysDownDurationPrev, g.IO.KeysDownDuration, sizeof(g.IO.KeysDownDuration));
	for (int i = 0; i < IM_ARRAYSIZE(g.IO.KeysDown); i++)
		g.IO.KeysDownDuration[i] = g.IO.KeysDown[i] ? (g.IO.KeysDownDuration[i] < 0.0f ? 0.0f : g.IO.KeysDownDuration[i] + g.IO.DeltaTime) : -1.0f;

	// Calculate frame-rate for the user, as a purely luxurious feature
	g.FramerateSecPerFrameAccum += g.IO.DeltaTime - g.FramerateSecPerFrame[g.FramerateSecPerFrameIdx];
	g.FramerateSecPerFrame[g.FramerateSecPerFrameIdx] = g.IO.DeltaTime;
	g.FramerateSecPerFrameIdx = (g.FramerateSecPerFrameIdx + 1) % IM_ARRAYSIZE(g.FramerateSecPerFrame);
	g.IO.Framerate = 1.0f / (g.FramerateSecPerFrameAccum / (float)IM_ARRAYSIZE(g.FramerateSecPerFrame));

	// Clear reference to active widget if the widget isn't alive anymore
	g.HoveredIdPreviousFrame = g.HoveredId;
	g.HoveredId = 0;
	g.HoveredIdAllowOverlap = false;
	if (!g.ActiveIdIsAlive && g.ActiveIdPreviousFrame == g.ActiveId && g.ActiveId != 0)
		ClearActiveID();
	g.ActiveIdPreviousFrame = g.ActiveId;
	g.ActiveIdIsAlive = false;
	g.ActiveIdIsJustActivated = false;

	// Handle user moving window (at the beginning of the frame to avoid input lag or sheering). Only valid for root windows.
	if (g.MovedWindowMoveId && g.MovedWindowMoveId == g.ActiveId)
	{
		KeepAliveID(g.MovedWindowMoveId);
		IM_ASSERT(g.MovedWindow && g.MovedWindow->RootWindow);
		IM_ASSERT(g.MovedWindow->RootWindow->MoveId == g.MovedWindowMoveId);
		if (g.IO.MouseDown[0])
		{
			if (!(g.MovedWindow->Flags & ImGuiWindowFlags_NoMove))
			{
				g.MovedWindow->PosFloat += g.IO.MouseDelta;
				if (!(g.MovedWindow->Flags & ImGuiWindowFlags_NoSavedSettings) && (g.IO.MouseDelta.x != 0.0f || g.IO.MouseDelta.y != 0.0f))
					MarkIniSettingsDirty();
			}
			FocusWindow(g.MovedWindow);
		}
		else
		{
			ClearActiveID();
			g.MovedWindow = NULL;
			g.MovedWindowMoveId = 0;
		}
	}
	else
	{
		g.MovedWindow = NULL;
		g.MovedWindowMoveId = 0;
	}

	// Delay saving settings so we don't spam disk too much
	if (g.SettingsDirtyTimer > 0.0f)
	{
		g.SettingsDirtyTimer -= g.IO.DeltaTime;
		if (g.SettingsDirtyTimer <= 0.0f)
			SaveIniSettingsToDisk(g.IO.IniFilename);
	}

	// Find the window we are hovering. Child windows can extend beyond the limit of their parent so we need to derive HoveredRootWindow from HoveredWindow
	g.HoveredWindow = g.MovedWindow ? g.MovedWindow : FindHoveredWindow(g.IO.MousePos, false);
	if (g.HoveredWindow && (g.HoveredWindow->Flags & ImGuiWindowFlags_ChildWindow))
		g.HoveredRootWindow = g.HoveredWindow->RootWindow;
	else
		g.HoveredRootWindow = g.MovedWindow ? g.MovedWindow->RootWindow : FindHoveredWindow(g.IO.MousePos, true);

	if (ImGuiWindow* modal_window = GetFrontMostModalRootWindow())
	{
		g.ModalWindowDarkeningRatio = ImMin(g.ModalWindowDarkeningRatio + g.IO.DeltaTime * 6.0f, 1.0f);
		ImGuiWindow* window = g.HoveredRootWindow;
		while (window && window != modal_window)
			window = window->ParentWindow;
		if (!window)
			g.HoveredRootWindow = g.HoveredWindow = NULL;
	}
	else
	{
		g.ModalWindowDarkeningRatio = 0.0f;
	}

	// Are we using inputs? Tell user so they can capture/discard the inputs away from the rest of their application.
	// When clicking outside of a window we assume the click is owned by the application and won't request capture. We need to track click ownership.
	int mouse_earliest_button_down = -1;
	bool mouse_any_down = false;
	for (int i = 0; i < IM_ARRAYSIZE(g.IO.MouseDown); i++)
	{
		if (g.IO.MouseClicked[i])
			g.IO.MouseDownOwned[i] = (g.HoveredWindow != NULL) || (!g.OpenPopupStack.empty());
		mouse_any_down |= g.IO.MouseDown[i];
		if (g.IO.MouseDown[i])
			if (mouse_earliest_button_down == -1 || g.IO.MouseClickedTime[mouse_earliest_button_down] > g.IO.MouseClickedTime[i])
				mouse_earliest_button_down = i;
	}
	bool mouse_avail_to_imgui = (mouse_earliest_button_down == -1) || g.IO.MouseDownOwned[mouse_earliest_button_down];
	if (g.CaptureMouseNextFrame != -1)
		g.IO.WantCaptureMouse = (g.CaptureMouseNextFrame != 0);
	else
		g.IO.WantCaptureMouse = (mouse_avail_to_imgui && (g.HoveredWindow != NULL || mouse_any_down)) || (g.ActiveId != 0) || (!g.OpenPopupStack.empty());
	g.IO.WantCaptureKeyboard = (g.CaptureKeyboardNextFrame != -1) ? (g.CaptureKeyboardNextFrame != 0) : (g.ActiveId != 0);
	g.IO.WantTextInput = (g.ActiveId != 0 && g.InputTextState.Id == g.ActiveId);
	g.MouseCursor = ImGuiMouseCursor_Arrow;
	g.CaptureMouseNextFrame = g.CaptureKeyboardNextFrame = -1;
	g.OsImePosRequest = ImVec2(1.0f, 1.0f); // OS Input Method Editor showing on top-left of our window by default

											// If mouse was first clicked outside of ImGui bounds we also cancel out hovering.
	if (!mouse_avail_to_imgui)
		g.HoveredWindow = g.HoveredRootWindow = NULL;

	// Scale & Scrolling
	if (g.HoveredWindow && g.IO.MouseWheel != 0.0f && !g.HoveredWindow->Collapsed)
	{
		ImGuiWindow* window = g.HoveredWindow;
		if (g.IO.KeyCtrl)
		{
			if (g.IO.FontAllowUserScaling)
			{
				// Zoom / Scale window
				float new_font_scale = ImClamp(window->FontWindowScale + g.IO.MouseWheel * 0.10f, 0.50f, 2.50f);
				float scale = new_font_scale / window->FontWindowScale;
				window->FontWindowScale = new_font_scale;

				const ImVec2 offset = window->Size * (1.0f - scale) * (g.IO.MousePos - window->Pos) / window->Size;
				window->Pos += offset;
				window->PosFloat += offset;
				window->Size *= scale;
				window->SizeFull *= scale;
			}
		}
		else if (!(window->Flags & ImGuiWindowFlags_NoScrollWithMouse))
		{
			// Scroll
			const int scroll_lines = (window->Flags & ImGuiWindowFlags_ComboBox) ? 3 : 5;
			SetWindowScrollY(window, window->Scroll.y - g.IO.MouseWheel * window->CalcFontSize() * scroll_lines);
		}
	}

	// Pressing TAB activate widget focus
	// NB: Don't discard FocusedWindow if it isn't active, so that a window that go on/off programatically won't lose its keyboard focus.
	if (g.ActiveId == 0 && g.FocusedWindow != NULL && g.FocusedWindow->Active && IsKeyPressedMap(ImGuiKey_Tab, false))
		g.FocusedWindow->FocusIdxTabRequestNext = 0;

	// Mark all windows as not visible
	for (int i = 0; i != g.Windows.Size; i++)
	{
		ImGuiWindow* window = g.Windows[i];
		window->WasActive = window->Active;
		window->Active = false;
		window->Accessed = false;
	}

	// Closing the focused window restore focus to the first active root window in descending z-order
	if (g.FocusedWindow && !g.FocusedWindow->WasActive)
		for (int i = g.Windows.Size - 1; i >= 0; i--)
			if (g.Windows[i]->WasActive && !(g.Windows[i]->Flags & ImGuiWindowFlags_ChildWindow))
			{
				FocusWindow(g.Windows[i]);
				break;
			}

	// No window should be open at the beginning of the frame.
	// But in order to allow the user to call NewFrame() multiple times without calling Render(), we are doing an explicit clear.
	g.CurrentWindowStack.resize(0);
	g.CurrentPopupStack.resize(0);
	CloseInactivePopups();

	// Create implicit window - we will only render it if the user has added something to it.
	ImGui::SetNextWindowSize(ImVec2(400, 400), ImGuiSetCond_FirstUseEver);
	ImGui::Begin("Debug");
}

// NB: behavior of ImGui after Shutdown() is not tested/guaranteed at the moment. This function is merely here to free heap allocations.
void ImGui::Shutdown()
{
	ImGuiContext& g = *GImGui;

	// The fonts atlas can be used prior to calling NewFrame(), so we clear it even if g.Initialized is FALSE (which would happen if we never called NewFrame)
	if (g.IO.Fonts) // Testing for NULL to allow user to NULLify in case of running Shutdown() on multiple contexts. Bit hacky.
		g.IO.Fonts->Clear();

	// Cleanup of other data are conditional on actually having used ImGui.
	if (!g.Initialized)
		return;

	SaveIniSettingsToDisk(g.IO.IniFilename);

	for (int i = 0; i < g.Windows.Size; i++)
	{
		g.Windows[i]->~ImGuiWindow();
		ImGui::MemFree(g.Windows[i]);
	}
	g.Windows.clear();
	g.WindowsSortBuffer.clear();
	g.CurrentWindow = NULL;
	g.CurrentWindowStack.clear();
	g.FocusedWindow = NULL;
	g.HoveredWindow = NULL;
	g.HoveredRootWindow = NULL;
	g.ActiveIdWindow = NULL;
	g.MovedWindow = NULL;
	for (int i = 0; i < g.Settings.Size; i++)
		ImGui::MemFree(g.Settings[i].Name);
	g.Settings.clear();
	g.ColorModifiers.clear();
	g.StyleModifiers.clear();
	g.FontStack.clear();
	g.OpenPopupStack.clear();
	g.CurrentPopupStack.clear();
	g.SetNextWindowSizeConstraintCallback = NULL;
	g.SetNextWindowSizeConstraintCallbackUserData = NULL;
	for (int i = 0; i < IM_ARRAYSIZE(g.RenderDrawLists); i++)
		g.RenderDrawLists[i].clear();
	g.OverlayDrawList.ClearFreeMemory();
	g.ColorEditModeStorage.Clear();
	if (g.PrivateClipboard)
	{
		ImGui::MemFree(g.PrivateClipboard);
		g.PrivateClipboard = NULL;
	}
	g.InputTextState.Text.clear();
	g.InputTextState.InitialText.clear();
	g.InputTextState.TempTextBuffer.clear();

	if (g.LogFile && g.LogFile != stdout)
	{
		fclose(g.LogFile);
		g.LogFile = NULL;
	}
	if (g.LogClipboard)
	{
		g.LogClipboard->~ImGuiTextBuffer();
		ImGui::MemFree(g.LogClipboard);
	}

	g.Initialized = false;
}

static ImGuiIniData* FindWindowSettings(const char* name)
{
	ImGuiContext& g = *GImGui;
	ImGuiID id = ImHash(name, 0);
	for (int i = 0; i != g.Settings.Size; i++)
	{
		ImGuiIniData* ini = &g.Settings[i];
		if (ini->Id == id)
			return ini;
	}
	return NULL;
}

static ImGuiIniData* AddWindowSettings(const char* name)
{
	GImGui->Settings.resize(GImGui->Settings.Size + 1);
	ImGuiIniData* ini = &GImGui->Settings.back();
	ini->Name = ImStrdup(name);
	ini->Id = ImHash(name, 0);
	ini->Collapsed = false;
	ini->Pos = ImVec2(FLT_MAX, FLT_MAX);
	ini->Size = ImVec2(0, 0);
	return ini;
}

// Zero-tolerance, poor-man .ini parsing
// FIXME: Write something less rubbish
static void LoadIniSettingsFromDisk(const char* ini_filename)
{
	ImGuiContext& g = *GImGui;
	if (!ini_filename)
		return;

	int file_size;
	char* file_data = (char*)ImFileLoadToMemory(ini_filename, "rb", &file_size, 1);
	if (!file_data)
		return;

	ImGuiIniData* settings = NULL;
	const char* buf_end = file_data + file_size;
	for (const char* line_start = file_data; line_start < buf_end; )
	{
		const char* line_end = line_start;
		while (line_end < buf_end && *line_end != '\n' && *line_end != '\r')
			line_end++;

		if (line_start[0] == '[' && line_end > line_start && line_end[-1] == ']')
		{
			char name[64];
			ImFormatString(name, IM_ARRAYSIZE(name), "%.*s", (int)(line_end - line_start - 2), line_start + 1);
			settings = FindWindowSettings(name);
			if (!settings)
				settings = AddWindowSettings(name);
		}
		else if (settings)
		{
			float x, y;
			int i;
			if (sscanf(line_start, "Pos=%f,%f", &x, &y) == 2)
				settings->Pos = ImVec2(x, y);
			else if (sscanf(line_start, "Size=%f,%f", &x, &y) == 2)
				settings->Size = ImMax(ImVec2(x, y), g.Style.WindowMinSize);
			else if (sscanf(line_start, "Collapsed=%d", &i) == 1)
				settings->Collapsed = (i != 0);
		}

		line_start = line_end + 1;
	}

	ImGui::MemFree(file_data);
}

static void SaveIniSettingsToDisk(const char* ini_filename)
{
	ImGuiContext& g = *GImGui;
	g.SettingsDirtyTimer = 0.0f;
	if (!ini_filename)
		return;

	// Gather data from windows that were active during this session
	for (int i = 0; i != g.Windows.Size; i++)
	{
		ImGuiWindow* window = g.Windows[i];
		if (window->Flags & ImGuiWindowFlags_NoSavedSettings)
			continue;
		ImGuiIniData* settings = FindWindowSettings(window->Name);
		settings->Pos = window->Pos;
		settings->Size = window->SizeFull;
		settings->Collapsed = window->Collapsed;
	}

	// Write .ini file
	// If a window wasn't opened in this session we preserve its settings
	FILE* f = ImFileOpen(ini_filename, "wt");
	if (!f)
		return;
	for (int i = 0; i != g.Settings.Size; i++)
	{
		const ImGuiIniData* settings = &g.Settings[i];
		if (settings->Pos.x == FLT_MAX)
			continue;
		const char* name = settings->Name;
		if (const char* p = strstr(name, "###"))  // Skip to the "###" marker if any. We don't skip past to match the behavior of GetID()
			name = p;
		fprintf(f, "[%s]\n", name);
		fprintf(f, "Pos=%d,%d\n", (int)settings->Pos.x, (int)settings->Pos.y);
		fprintf(f, "Size=%d,%d\n", (int)settings->Size.x, (int)settings->Size.y);
		fprintf(f, "Collapsed=%d\n", settings->Collapsed);
		fprintf(f, "\n");
	}

	fclose(f);
}

static void MarkIniSettingsDirty()
{
	ImGuiContext& g = *GImGui;
	if (g.SettingsDirtyTimer <= 0.0f)
		g.SettingsDirtyTimer = g.IO.IniSavingRate;
}

// FIXME: Add a more explicit sort order in the window structure.
static int ChildWindowComparer(const void* lhs, const void* rhs)
{
	const ImGuiWindow* a = *(const ImGuiWindow**)lhs;
	const ImGuiWindow* b = *(const ImGuiWindow**)rhs;
	if (int d = (a->Flags & ImGuiWindowFlags_Popup) - (b->Flags & ImGuiWindowFlags_Popup))
		return d;
	if (int d = (a->Flags & ImGuiWindowFlags_Tooltip) - (b->Flags & ImGuiWindowFlags_Tooltip))
		return d;
	if (int d = (a->Flags & ImGuiWindowFlags_ComboBox) - (b->Flags & ImGuiWindowFlags_ComboBox))
		return d;
	return (a->IndexWithinParent - b->IndexWithinParent);
}

static void AddWindowToSortedBuffer(ImVector<ImGuiWindow*>& out_sorted_windows, ImGuiWindow* window)
{
	out_sorted_windows.push_back(window);
	if (window->Active)
	{
		int count = window->DC.ChildWindows.Size;
		if (count > 1)
			qsort(window->DC.ChildWindows.begin(), (size_t)count, sizeof(ImGuiWindow*), ChildWindowComparer);
		for (int i = 0; i < count; i++)
		{
			ImGuiWindow* child = window->DC.ChildWindows[i];
			if (child->Active)
				AddWindowToSortedBuffer(out_sorted_windows, child);
		}
	}
}

static void AddDrawListToRenderList(ImVector<ImDrawList*>& out_render_list, ImDrawList* draw_list)
{
	if (draw_list->CmdBuffer.empty())
		return;

	// Remove trailing command if unused
	ImDrawCmd& last_cmd = draw_list->CmdBuffer.back();
	if (last_cmd.ElemCount == 0 && last_cmd.UserCallback == NULL)
	{
		draw_list->CmdBuffer.pop_back();
		if (draw_list->CmdBuffer.empty())
			return;
	}

	// Draw list sanity check. Detect mismatch between PrimReserve() calls and incrementing _VtxCurrentIdx, _VtxWritePtr etc.
	IM_ASSERT(draw_list->VtxBuffer.Size == 0 || draw_list->_VtxWritePtr == draw_list->VtxBuffer.Data + draw_list->VtxBuffer.Size);
	IM_ASSERT(draw_list->IdxBuffer.Size == 0 || draw_list->_IdxWritePtr == draw_list->IdxBuffer.Data + draw_list->IdxBuffer.Size);
	IM_ASSERT((int)draw_list->_VtxCurrentIdx == draw_list->VtxBuffer.Size);

	// Check that draw_list doesn't use more vertices than indexable (default ImDrawIdx = 2 bytes = 64K vertices)
	// If this assert triggers because you are drawing lots of stuff manually, A) workaround by calling BeginChild()/EndChild() to put your draw commands in multiple draw lists, B) #define ImDrawIdx to a 'unsigned int' in imconfig.h and render accordingly.
	IM_ASSERT((int64_t)draw_list->_VtxCurrentIdx <= ((int64_t)1L << (sizeof(ImDrawIdx) * 8)));  // Too many vertices in same ImDrawList. See comment above.

	out_render_list.push_back(draw_list);
	GImGui->IO.MetricsRenderVertices += draw_list->VtxBuffer.Size;
	GImGui->IO.MetricsRenderIndices += draw_list->IdxBuffer.Size;
}

static void AddWindowToRenderList(ImVector<ImDrawList*>& out_render_list, ImGuiWindow* window)
{
	AddDrawListToRenderList(out_render_list, window->DrawList);
	for (int i = 0; i < window->DC.ChildWindows.Size; i++)
	{
		ImGuiWindow* child = window->DC.ChildWindows[i];
		if (!child->Active) // clipped children may have been marked not active
			continue;
		if ((child->Flags & ImGuiWindowFlags_Popup) && child->HiddenFrames > 0)
			continue;
		AddWindowToRenderList(out_render_list, child);
	}
}

// When using this function it is sane to ensure that float are perfectly rounded to integer values, to that e.g. (int)(max.x-min.x) in user's render produce correct result.
void ImGui::PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersect_with_current_clip_rect)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->DrawList->PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
	window->ClipRect = window->DrawList->_ClipRectStack.back();
}

void ImGui::PopClipRect()
{
	ImGuiWindow* window = GetCurrentWindow();
	window->DrawList->PopClipRect();
	window->ClipRect = window->DrawList->_ClipRectStack.back();
}

// This is normally called by Render(). You may want to call it directly if you want to avoid calling Render() but the gain will be very minimal.
void ImGui::EndFrame()
{
	ImGuiContext& g = *GImGui;
	IM_ASSERT(g.Initialized);                       // Forgot to call ImGui::NewFrame()
	IM_ASSERT(g.FrameCountEnded != g.FrameCount);   // ImGui::EndFrame() called multiple times, or forgot to call ImGui::NewFrame() again

													// Render tooltip
	if (g.Tooltip[0])
	{
		ImGui::BeginTooltip();
		ImGui::TextUnformatted(g.Tooltip);
		ImGui::EndTooltip();
	}

	// Notify OS when our Input Method Editor cursor has moved (e.g. CJK inputs using Microsoft IME)
	if (g.IO.ImeSetInputScreenPosFn && ImLengthSqr(g.OsImePosRequest - g.OsImePosSet) > 0.0001f)
	{
		g.IO.ImeSetInputScreenPosFn((int)g.OsImePosRequest.x, (int)g.OsImePosRequest.y);
		g.OsImePosSet = g.OsImePosRequest;
	}

	// Hide implicit "Debug" window if it hasn't been used
	IM_ASSERT(g.CurrentWindowStack.Size == 1);    // Mismatched Begin()/End() calls
	if (g.CurrentWindow && !g.CurrentWindow->Accessed)
		g.CurrentWindow->Active = false;
	ImGui::End();

	// Click to focus window and start moving (after we're done with all our widgets)
	if (g.ActiveId == 0 && g.HoveredId == 0 && g.IO.MouseClicked[0])
	{
		if (!(g.FocusedWindow && !g.FocusedWindow->WasActive && g.FocusedWindow->Active)) // Unless we just made a popup appear
		{
			if (g.HoveredRootWindow != NULL)
			{
				FocusWindow(g.HoveredWindow);
				if (!(g.HoveredWindow->Flags & ImGuiWindowFlags_NoMove))
				{
					g.MovedWindow = g.HoveredWindow;
					g.MovedWindowMoveId = g.HoveredRootWindow->MoveId;
					SetActiveID(g.MovedWindowMoveId, g.HoveredRootWindow);
				}
			}
			else if (g.FocusedWindow != NULL && GetFrontMostModalRootWindow() == NULL)
			{
				// Clicking on void disable focus
				FocusWindow(NULL);
			}
		}
	}

	// Sort the window list so that all child windows are after their parent
	// We cannot do that on FocusWindow() because childs may not exist yet
	g.WindowsSortBuffer.resize(0);
	g.WindowsSortBuffer.reserve(g.Windows.Size);
	for (int i = 0; i != g.Windows.Size; i++)
	{
		ImGuiWindow* window = g.Windows[i];
		if (window->Active && (window->Flags & ImGuiWindowFlags_ChildWindow))       // if a child is active its parent will add it
			continue;
		AddWindowToSortedBuffer(g.WindowsSortBuffer, window);
	}
	IM_ASSERT(g.Windows.Size == g.WindowsSortBuffer.Size);  // we done something wrong
	g.Windows.swap(g.WindowsSortBuffer);

	// Clear Input data for next frame
	g.IO.MouseWheel = 0.0f;
	memset(g.IO.InputCharacters, 0, sizeof(g.IO.InputCharacters));

	g.FrameCountEnded = g.FrameCount;
}

void ImGui::Render()
{
	ImGuiContext& g = *GImGui;
	IM_ASSERT(g.Initialized);   // Forgot to call ImGui::NewFrame()

	if (g.FrameCountEnded != g.FrameCount)
		ImGui::EndFrame();
	g.FrameCountRendered = g.FrameCount;

	// Skip render altogether if alpha is 0.0
	// Note that vertex buffers have been created and are wasted, so it is best practice that you don't create windows in the first place, or consistently respond to Begin() returning false.
	if (g.Style.Alpha > 0.0f)
	{
		// Gather windows to render
		g.IO.MetricsRenderVertices = g.IO.MetricsRenderIndices = g.IO.MetricsActiveWindows = 0;
		for (int i = 0; i < IM_ARRAYSIZE(g.RenderDrawLists); i++)
			g.RenderDrawLists[i].resize(0);
		for (int i = 0; i != g.Windows.Size; i++)
		{
			ImGuiWindow* window = g.Windows[i];
			if (window->Active && window->HiddenFrames <= 0 && (window->Flags & (ImGuiWindowFlags_ChildWindow)) == 0)
			{
				// FIXME: Generalize this with a proper layering system so e.g. user can draw in specific layers, below text, ..
				g.IO.MetricsActiveWindows++;
				if (window->Flags & ImGuiWindowFlags_Popup)
					AddWindowToRenderList(g.RenderDrawLists[1], window);
				else if (window->Flags & ImGuiWindowFlags_Tooltip)
					AddWindowToRenderList(g.RenderDrawLists[2], window);
				else
					AddWindowToRenderList(g.RenderDrawLists[0], window);
			}
		}

		// Flatten layers
		int n = g.RenderDrawLists[0].Size;
		int flattened_size = n;
		for (int i = 1; i < IM_ARRAYSIZE(g.RenderDrawLists); i++)
			flattened_size += g.RenderDrawLists[i].Size;
		g.RenderDrawLists[0].resize(flattened_size);
		for (int i = 1; i < IM_ARRAYSIZE(g.RenderDrawLists); i++)
		{
			ImVector<ImDrawList*>& layer = g.RenderDrawLists[i];
			if (layer.empty())
				continue;
			memcpy(&g.RenderDrawLists[0][n], &layer[0], layer.Size * sizeof(ImDrawList*));
			n += layer.Size;
		}

		// Draw software mouse cursor if requested
		if (g.IO.MouseDrawCursor)
		{
			const ImGuiMouseCursorData& cursor_data = g.MouseCursorData[g.MouseCursor];
			const ImVec2 pos = g.IO.MousePos - cursor_data.HotOffset;
			const ImVec2 size = cursor_data.Size;
			const ImTextureID tex_id = g.IO.Fonts->TexID;
			g.OverlayDrawList.PushTextureID(tex_id);
			g.OverlayDrawList.AddImage(tex_id, pos + ImVec2(1, 0), pos + ImVec2(1, 0) + size, cursor_data.TexUvMin[1], cursor_data.TexUvMax[1], IM_COL32(0, 0, 0, 48));        // Shadow
			g.OverlayDrawList.AddImage(tex_id, pos + ImVec2(2, 0), pos + ImVec2(2, 0) + size, cursor_data.TexUvMin[1], cursor_data.TexUvMax[1], IM_COL32(0, 0, 0, 48));        // Shadow
			g.OverlayDrawList.AddImage(tex_id, pos, pos + size, cursor_data.TexUvMin[1], cursor_data.TexUvMax[1], IM_COL32(0, 0, 0, 255));       // Black border
			g.OverlayDrawList.AddImage(tex_id, pos, pos + size, cursor_data.TexUvMin[0], cursor_data.TexUvMax[0], IM_COL32(40, 239, 236, 255));
			g.OverlayDrawList.PopTextureID();
		}
		if (!g.OverlayDrawList.VtxBuffer.empty())
			AddDrawListToRenderList(g.RenderDrawLists[0], &g.OverlayDrawList);

		// Setup draw data
		g.RenderDrawData.Valid = true;
		g.RenderDrawData.CmdLists = (g.RenderDrawLists[0].Size > 0) ? &g.RenderDrawLists[0][0] : NULL;
		g.RenderDrawData.CmdListsCount = g.RenderDrawLists[0].Size;
		g.RenderDrawData.TotalVtxCount = g.IO.MetricsRenderVertices;
		g.RenderDrawData.TotalIdxCount = g.IO.MetricsRenderIndices;

		// Render. If user hasn't set a callback then they may retrieve the draw data via GetDrawData()
		if (g.RenderDrawData.CmdListsCount > 0 && g.IO.RenderDrawListsFn != NULL)
			g.IO.RenderDrawListsFn(&g.RenderDrawData);
	}
}

const char* ImGui::FindRenderedTextEnd(const char* text, const char* text_end)
{
	const char* text_display_end = text;
	if (!text_end)
		text_end = (const char*)-1;

	while (text_display_end < text_end && *text_display_end != '\0' && (text_display_end[0] != '#' || text_display_end[1] != '#'))
		text_display_end++;
	return text_display_end;
}

// Pass text data straight to log (without being displayed)
void ImGui::LogText(const char* fmt, ...)
{
	ImGuiContext& g = *GImGui;
	if (!g.LogEnabled)
		return;

	va_list args;
	va_start(args, fmt);
	if (g.LogFile)
	{
		vfprintf(g.LogFile, fmt, args);
	}
	else
	{
		g.LogClipboard->appendv(fmt, args);
	}
	va_end(args);
}

// Internal version that takes a position to decide on newline placement and pad items according to their depth.
// We split text into individual lines to add current tree level padding
static void LogRenderedText(const ImVec2& ref_pos, const char* text, const char* text_end)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = ImGui::GetCurrentWindowRead();

	if (!text_end)
		text_end = ImGui::FindRenderedTextEnd(text, text_end);

	const bool log_new_line = ref_pos.y > window->DC.LogLinePosY + 1;
	window->DC.LogLinePosY = ref_pos.y;

	const char* text_remaining = text;
	if (g.LogStartDepth > window->DC.TreeDepth)  // Re-adjust padding if we have popped out of our starting depth
		g.LogStartDepth = window->DC.TreeDepth;
	const int tree_depth = (window->DC.TreeDepth - g.LogStartDepth);
	for (;;)
	{
		// Split the string. Each new line (after a '\n') is followed by spacing corresponding to the current depth of our log entry.
		const char* line_end = text_remaining;
		while (line_end < text_end)
			if (*line_end == '\n')
				break;
			else
				line_end++;
		if (line_end >= text_end)
			line_end = NULL;

		const bool is_first_line = (text == text_remaining);
		bool is_last_line = false;
		if (line_end == NULL)
		{
			is_last_line = true;
			line_end = text_end;
		}
		if (line_end != NULL && !(is_last_line && (line_end - text_remaining) == 0))
		{
			const int char_count = (int)(line_end - text_remaining);
			if (log_new_line || !is_first_line)
				ImGui::LogText(IM_NEWLINE "%*s%.*s", tree_depth * 4, "", char_count, text_remaining);
			else
				ImGui::LogText(" %.*s", char_count, text_remaining);
		}

		if (is_last_line)
			break;
		text_remaining = line_end + 1;
	}
}

// Internal ImGui functions to render text
// RenderText***() functions calls ImDrawList::AddText() calls ImBitmapFont::RenderText()
void ImGui::RenderText(ImVec2 pos, const char* text, const char* text_end, bool hide_text_after_hash)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = GetCurrentWindow();

	// Hide anything after a '##' string
	const char* text_display_end;
	if (hide_text_after_hash)
	{
		text_display_end = FindRenderedTextEnd(text, text_end);
	}
	else
	{
		if (!text_end)
			text_end = text + strlen(text); // FIXME-OPT
		text_display_end = text_end;
	}

	const int text_len = (int)(text_display_end - text);
	if (text_len > 0)
	{
		window->DrawList->AddText(g.Font, g.FontSize, pos, GetColorU32(ImGuiCol_Text), text, text_display_end);
		if (g.LogEnabled)
			LogRenderedText(pos, text, text_display_end);
	}
}

void ImGui::RenderTextWrapped(ImVec2 pos, const char* text, const char* text_end, float wrap_width)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = GetCurrentWindow();

	if (!text_end)
		text_end = text + strlen(text); // FIXME-OPT

	const int text_len = (int)(text_end - text);
	if (text_len > 0)
	{
		window->DrawList->AddText(g.Font, g.FontSize, pos, GetColorU32(ImGuiCol_Text), text, text_end, wrap_width);
		if (g.LogEnabled)
			LogRenderedText(pos, text, text_end);
	}
}

// Default clip_rect uses (pos_min,pos_max)
// Handle clipping on CPU immediately (vs typically let the GPU clip the triangles that are overlapping the clipping rectangle edges)
void ImGui::RenderTextClipped(const ImVec2& pos_min, const ImVec2& pos_max, const char* text, const char* text_end, const ImVec2* text_size_if_known, const ImVec2& align, const ImRect* clip_rect)
{
	// Hide anything after a '##' string
	const char* text_display_end = FindRenderedTextEnd(text, text_end);
	const int text_len = (int)(text_display_end - text);
	if (text_len == 0)
		return;

	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = GetCurrentWindow();

	// Perform CPU side clipping for single clipped element to avoid using scissor state
	ImVec2 pos = pos_min;
	const ImVec2 text_size = text_size_if_known ? *text_size_if_known : CalcTextSize(text, text_display_end, false, 0.0f);

	const ImVec2* clip_min = clip_rect ? &clip_rect->Min : &pos_min;
	const ImVec2* clip_max = clip_rect ? &clip_rect->Max : &pos_max;
	bool need_clipping = (pos.x + text_size.x >= clip_max->x) || (pos.y + text_size.y >= clip_max->y);
	if (clip_rect) // If we had no explicit clipping rectangle then pos==clip_min
		need_clipping |= (pos.x < clip_min->x) || (pos.y < clip_min->y);

	// Align whole block. We should defer that to the better rendering function when we'll have support for individual line alignment.
	if (align.x > 0.0f) pos.x = ImMax(pos.x, pos.x + (pos_max.x - pos.x - text_size.x) * align.x);
	if (align.y > 0.0f) pos.y = ImMax(pos.y, pos.y + (pos_max.y - pos.y - text_size.y) * align.y);

	// Render
	if (need_clipping)
	{
		ImVec4 fine_clip_rect(clip_min->x, clip_min->y, clip_max->x, clip_max->y);
		window->DrawList->AddText(g.Font, g.FontSize, pos, GetColorU32(ImGuiCol_Text), text, text_display_end, 0.0f, &fine_clip_rect);
	}
	else
	{
		window->DrawList->AddText(g.Font, g.FontSize, pos, GetColorU32(ImGuiCol_Text), text, text_display_end, 0.0f, NULL);
	}
	if (g.LogEnabled)
		LogRenderedText(pos, text, text_display_end);
}

// Render a rectangle shaped with optional rounding and borders
void ImGui::RenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)
{
	ImGuiWindow* window = GetCurrentWindow();

	window->DrawList->AddRectFilled(p_min, p_max, fill_col, rounding);
	if (border && (window->Flags & ImGuiWindowFlags_ShowBorders))
	{
		window->DrawList->AddRect(p_min + ImVec2(1, 1), p_max + ImVec2(1, 1), GetColorU32(ImGuiCol_BorderShadow), rounding);
		window->DrawList->AddRect(p_min, p_max, GetColorU32(ImGuiCol_Border), rounding);
	}
}

// Render a triangle to denote expanded/collapsed state
void ImGui::RenderCollapseTriangle(ImVec2 p_min, bool is_open, float scale)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = GetCurrentWindow();

	const float h = g.FontSize * 1.00f;
	const float r = h * 0.40f * scale;
	ImVec2 center = p_min + ImVec2(h*0.50f, h*0.50f*scale);

	ImVec2 a, b, c;
	if (is_open)
	{
		center.y -= r * 0.25f;
		a = center + ImVec2(0, 1)*r;
		b = center + ImVec2(-0.866f, -0.5f)*r;
		c = center + ImVec2(0.866f, -0.5f)*r;
	}
	else
	{
		a = center + ImVec2(1, 0)*r;
		b = center + ImVec2(-0.500f, 0.866f)*r;
		c = center + ImVec2(-0.500f, -0.866f)*r;
	}

	window->DrawList->AddTriangleFilled(a, b, c, GetColorU32(ImGuiCol_Text));
}

void ImGui::RenderBullet(ImVec2 pos)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->DrawList->AddCircleFilled(pos, GImGui->FontSize*0.20f, GetColorU32(ImGuiCol_Text), 8);
}

void ImGui::RenderCheckMark(ImVec2 pos, ImU32 col)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = GetCurrentWindow();

	ImVec2 a, b, c;
	float start_x = (float)(int)(g.FontSize * 0.307f + 0.5f);
	float rem_third = (float)(int)((g.FontSize - start_x) / 3.0f);
	a.x = pos.x + 0.5f + start_x;
	b.x = a.x + rem_third;
	c.x = a.x + rem_third * 3.0f;
	b.y = pos.y - 1.0f + (float)(int)(g.Font->Ascent * (g.FontSize / g.Font->FontSize) + 0.5f) + (float)(int)(g.Font->DisplayOffset.y);
	a.y = b.y - rem_third;
	c.y = b.y - rem_third * 2.0f;

	window->DrawList->PathLineTo(a);
	window->DrawList->PathLineTo(b);
	window->DrawList->PathLineTo(c);
	window->DrawList->PathStroke(col, false);
}

// Calculate text size. Text can be multi-line. Optionally ignore text after a ## marker.
// CalcTextSize("") should return ImVec2(0.0f, GImGui->FontSize)
ImVec2 ImGui::CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_hash, float wrap_width)
{
	ImGuiContext& g = *GImGui;

	const char* text_display_end;
	if (hide_text_after_double_hash)
		text_display_end = FindRenderedTextEnd(text, text_end);      // Hide anything after a '##' string
	else
		text_display_end = text_end;

	ImFont* font = g.Font;
	const float font_size = g.FontSize;
	if (text == text_display_end)
		return ImVec2(0.0f, font_size);
	ImVec2 text_size = font->CalcTextSizeA(font_size, FLT_MAX, wrap_width, text, text_display_end, NULL);

	// Cancel out character spacing for the last character of a line (it is baked into glyph->XAdvance field)
	const float font_scale = font_size / font->FontSize;
	const float character_spacing_x = 1.0f * font_scale;
	if (text_size.x > 0.0f)
		text_size.x -= character_spacing_x;
	text_size.x = (float)(int)(text_size.x + 0.95f);

	return text_size;
}

// Helper to calculate coarse clipping of large list of evenly sized items.
// NB: Prefer using the ImGuiListClipper higher-level helper if you can! Read comments and instructions there on how those use this sort of pattern.
// NB: 'items_count' is only used to clamp the result, if you don't know your count you can use INT_MAX
void ImGui::CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = GetCurrentWindowRead();
	if (g.LogEnabled)
	{
		// If logging is active, do not perform any clipping
		*out_items_display_start = 0;
		*out_items_display_end = items_count;
		return;
	}
	if (window->SkipItems)
	{
		*out_items_display_start = *out_items_display_end = 0;
		return;
	}

	const ImVec2 pos = window->DC.CursorPos;
	int start = (int)((window->ClipRect.Min.y - pos.y) / items_height);
	int end = (int)((window->ClipRect.Max.y - pos.y) / items_height);
	start = ImClamp(start, 0, items_count);
	end = ImClamp(end + 1, start, items_count);
	*out_items_display_start = start;
	*out_items_display_end = end;
}

// Find window given position, search front-to-back
// FIXME: Note that we have a lag here because WindowRectClipped is updated in Begin() so windows moved by user via SetWindowPos() and not SetNextWindowPos() will have that rectangle lagging by a frame at the time FindHoveredWindow() is called, aka before the next Begin(). Moving window thankfully isn't affected.
static ImGuiWindow* FindHoveredWindow(ImVec2 pos, bool excluding_childs)
{
	ImGuiContext& g = *GImGui;
	for (int i = g.Windows.Size - 1; i >= 0; i--)
	{
		ImGuiWindow* window = g.Windows[i];
		if (!window->Active)
			continue;
		if (window->Flags & ImGuiWindowFlags_NoInputs)
			continue;
		if (excluding_childs && (window->Flags & ImGuiWindowFlags_ChildWindow) != 0)
			continue;

		// Using the clipped AABB so a child window will typically be clipped by its parent.
		ImRect bb(window->WindowRectClipped.Min - g.Style.TouchExtraPadding, window->WindowRectClipped.Max + g.Style.TouchExtraPadding);
		if (bb.Contains(pos))
			return window;
	}
	return NULL;
}

// Test if mouse cursor is hovering given rectangle
// NB- Rectangle is clipped by our current clip setting
// NB- Expand the rectangle to be generous on imprecise inputs systems (g.Style.TouchExtraPadding)
bool ImGui::IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = GetCurrentWindowRead();

	// Clip
	ImRect rect_clipped(r_min, r_max);
	if (clip)
		rect_clipped.Clip(window->ClipRect);

	// Expand for touch input
	const ImRect rect_for_touch(rect_clipped.Min - g.Style.TouchExtraPadding, rect_clipped.Max + g.Style.TouchExtraPadding);
	return rect_for_touch.Contains(g.IO.MousePos);
}

bool ImGui::IsMouseHoveringWindow()
{
	ImGuiContext& g = *GImGui;
	return g.HoveredWindow == g.CurrentWindow;
}

bool ImGui::IsMouseHoveringAnyWindow()
{
	ImGuiContext& g = *GImGui;
	return g.HoveredWindow != NULL;
}

bool ImGui::IsPosHoveringAnyWindow(const ImVec2& pos)
{
	return FindHoveredWindow(pos, false) != NULL;
}

static bool IsKeyPressedMap(ImGuiKey key, bool repeat)
{
	const int key_index = GImGui->IO.KeyMap[key];
	return ImGui::IsKeyPressed(key_index, repeat);
}

int ImGui::GetKeyIndex(ImGuiKey key)
{
	IM_ASSERT(key >= 0 && key < ImGuiKey_COUNT);
	return GImGui->IO.KeyMap[key];
}

bool ImGui::IsKeyDown(int key_index)
{
	if (key_index < 0) return false;
	IM_ASSERT(key_index >= 0 && key_index < IM_ARRAYSIZE(GImGui->IO.KeysDown));
	return GImGui->IO.KeysDown[key_index];
}

bool ImGui::IsKeyPressed(int key_index, bool repeat)
{
	ImGuiContext& g = *GImGui;
	if (key_index < 0) return false;
	IM_ASSERT(key_index >= 0 && key_index < IM_ARRAYSIZE(g.IO.KeysDown));
	const float t = g.IO.KeysDownDuration[key_index];
	if (t == 0.0f)
		return true;

	if (repeat && t > g.IO.KeyRepeatDelay)
	{
		float delay = g.IO.KeyRepeatDelay, rate = g.IO.KeyRepeatRate;
		if ((fmodf(t - delay, rate) > rate*0.5f) != (fmodf(t - delay - g.IO.DeltaTime, rate) > rate*0.5f))
			return true;
	}
	return false;
}

bool ImGui::IsKeyReleased(int key_index)
{
	ImGuiContext& g = *GImGui;
	if (key_index < 0) return false;
	IM_ASSERT(key_index >= 0 && key_index < IM_ARRAYSIZE(g.IO.KeysDown));
	if (g.IO.KeysDownDurationPrev[key_index] >= 0.0f && !g.IO.KeysDown[key_index])
		return true;
	return false;
}

bool ImGui::IsMouseDown(int button)
{
	ImGuiContext& g = *GImGui;
	IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
	return g.IO.MouseDown[button];
}

bool ImGui::IsMouseClicked(int button, bool repeat)
{
	ImGuiContext& g = *GImGui;
	IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
	const float t = g.IO.MouseDownDuration[button];
	if (t == 0.0f)
		return true;

	if (repeat && t > g.IO.KeyRepeatDelay)
	{
		float delay = g.IO.KeyRepeatDelay, rate = g.IO.KeyRepeatRate;
		if ((fmodf(t - delay, rate) > rate*0.5f) != (fmodf(t - delay - g.IO.DeltaTime, rate) > rate*0.5f))
			return true;
	}

	return false;
}

bool ImGui::IsMouseReleased(int button)
{
	ImGuiContext& g = *GImGui;
	IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
	return g.IO.MouseReleased[button];
}

bool ImGui::IsMouseDoubleClicked(int button)
{
	ImGuiContext& g = *GImGui;
	IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
	return g.IO.MouseDoubleClicked[button];
}

bool ImGui::IsMouseDragging(int button, float lock_threshold)
{
	ImGuiContext& g = *GImGui;
	IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
	if (!g.IO.MouseDown[button])
		return false;
	if (lock_threshold < 0.0f)
		lock_threshold = g.IO.MouseDragThreshold;
	return g.IO.MouseDragMaxDistanceSqr[button] >= lock_threshold * lock_threshold;
}

ImVec2 ImGui::GetMousePos()
{
	return GImGui->IO.MousePos;
}

// NB: prefer to call right after BeginPopup(). At the time Selectable/MenuItem is activated, the popup is already closed!
ImVec2 ImGui::GetMousePosOnOpeningCurrentPopup()
{
	ImGuiContext& g = *GImGui;
	if (g.CurrentPopupStack.Size > 0)
		return g.OpenPopupStack[g.CurrentPopupStack.Size - 1].MousePosOnOpen;
	return g.IO.MousePos;
}

ImVec2 ImGui::GetMouseDragDelta(int button, float lock_threshold)
{
	ImGuiContext& g = *GImGui;
	IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
	if (lock_threshold < 0.0f)
		lock_threshold = g.IO.MouseDragThreshold;
	if (g.IO.MouseDown[button])
		if (g.IO.MouseDragMaxDistanceSqr[button] >= lock_threshold * lock_threshold)
			return g.IO.MousePos - g.IO.MouseClickedPos[button];     // Assume we can only get active with left-mouse button (at the moment).
	return ImVec2(0.0f, 0.0f);
}

void ImGui::ResetMouseDragDelta(int button)
{
	ImGuiContext& g = *GImGui;
	IM_ASSERT(button >= 0 && button < IM_ARRAYSIZE(g.IO.MouseDown));
	// NB: We don't need to reset g.IO.MouseDragMaxDistanceSqr
	g.IO.MouseClickedPos[button] = g.IO.MousePos;
}

ImGuiMouseCursor ImGui::GetMouseCursor()
{
	return GImGui->MouseCursor;
}

void ImGui::SetMouseCursor(ImGuiMouseCursor cursor_type)
{
	GImGui->MouseCursor = cursor_type;
}

void ImGui::CaptureKeyboardFromApp(bool capture)
{
	GImGui->CaptureKeyboardNextFrame = capture ? 1 : 0;
}

void ImGui::CaptureMouseFromApp(bool capture)
{
	GImGui->CaptureMouseNextFrame = capture ? 1 : 0;
}

bool ImGui::IsItemHovered()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->DC.LastItemHoveredAndUsable;
}

bool ImGui::IsItemHoveredRect()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->DC.LastItemHoveredRect;
}

bool ImGui::IsItemActive()
{
	ImGuiContext& g = *GImGui;
	if (g.ActiveId)
	{
		ImGuiWindow* window = GetCurrentWindowRead();
		return g.ActiveId == window->DC.LastItemId;
	}
	return false;
}

bool ImGui::IsItemClicked(int mouse_button)
{
	return IsMouseClicked(mouse_button) && IsItemHovered();
}

bool ImGui::IsAnyItemHovered()
{
	return GImGui->HoveredId != 0 || GImGui->HoveredIdPreviousFrame != 0;
}

bool ImGui::IsAnyItemActive()
{
	return GImGui->ActiveId != 0;
}

bool ImGui::IsItemVisible()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	ImRect r(window->ClipRect);
	return r.Overlaps(window->DC.LastItemRect);
}

// Allow last item to be overlapped by a subsequent item. Both may be activated during the same frame before the later one takes priority.
void ImGui::SetItemAllowOverlap()
{
	ImGuiContext& g = *GImGui;
	if (g.HoveredId == g.CurrentWindow->DC.LastItemId)
		g.HoveredIdAllowOverlap = true;
	if (g.ActiveId == g.CurrentWindow->DC.LastItemId)
		g.ActiveIdAllowOverlap = true;
}

ImVec2 ImGui::GetItemRectMin()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->DC.LastItemRect.Min;
}

ImVec2 ImGui::GetItemRectMax()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->DC.LastItemRect.Max;
}

ImVec2 ImGui::GetItemRectSize()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->DC.LastItemRect.GetSize();
}

ImVec2 ImGui::CalcItemRectClosestPoint(const ImVec2& pos, bool on_edge, float outward)
{
	ImGuiWindow* window = GetCurrentWindowRead();
	ImRect rect = window->DC.LastItemRect;
	rect.Expand(outward);
	return rect.GetClosestPoint(pos, on_edge);
}

// Tooltip is stored and turned into a BeginTooltip()/EndTooltip() sequence at the end of the frame. Each call override previous value.
void ImGui::SetTooltipV(const char* fmt, va_list args)
{
	ImGuiContext& g = *GImGui;
	ImFormatStringV(g.Tooltip, IM_ARRAYSIZE(g.Tooltip), fmt, args);
}

void ImGui::SetTooltip(const char* fmt, ...)
{
	va_list args;
	va_start(args, fmt);
	SetTooltipV(fmt, args);
	va_end(args);
}

static ImRect GetVisibleRect()
{
	ImGuiContext& g = *GImGui;
	if (g.IO.DisplayVisibleMin.x != g.IO.DisplayVisibleMax.x && g.IO.DisplayVisibleMin.y != g.IO.DisplayVisibleMax.y)
		return ImRect(g.IO.DisplayVisibleMin, g.IO.DisplayVisibleMax);
	return ImRect(0.0f, 0.0f, g.IO.DisplaySize.x, g.IO.DisplaySize.y);
}

void ImGui::BeginTooltip()
{
	ImGuiWindowFlags flags = ImGuiWindowFlags_Tooltip | ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_AlwaysAutoResize;
	ImGui::Begin("##Tooltip", NULL, flags);
}

void ImGui::EndTooltip()
{
	IM_ASSERT(GetCurrentWindowRead()->Flags & ImGuiWindowFlags_Tooltip);   // Mismatched BeginTooltip()/EndTooltip() calls
	ImGui::End();
}

static bool IsPopupOpen(ImGuiID id)
{
	ImGuiContext& g = *GImGui;
	return g.OpenPopupStack.Size > g.CurrentPopupStack.Size && g.OpenPopupStack[g.CurrentPopupStack.Size].PopupId == id;
}

// Mark popup as open (toggle toward open state).
// Popups are closed when user click outside, or activate a pressable item, or CloseCurrentPopup() is called within a BeginPopup()/EndPopup() block.
// Popup identifiers are relative to the current ID-stack (so OpenPopup and BeginPopup needs to be at the same level).
// One open popup per level of the popup hierarchy (NB: when assigning we reset the Window member of ImGuiPopupRef to NULL)
void ImGui::OpenPopupEx(const char* str_id, bool reopen_existing)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = g.CurrentWindow;
	ImGuiID id = window->GetID(str_id);
	int current_stack_size = g.CurrentPopupStack.Size;
	ImGuiPopupRef popup_ref = ImGuiPopupRef(id, window, window->GetID("##menus"), g.IO.MousePos); // Tagged as new ref because constructor sets Window to NULL (we are passing the ParentWindow info here)
	if (g.OpenPopupStack.Size < current_stack_size + 1)
		g.OpenPopupStack.push_back(popup_ref);
	else if (reopen_existing || g.OpenPopupStack[current_stack_size].PopupId != id)
	{
		g.OpenPopupStack.resize(current_stack_size + 1);
		g.OpenPopupStack[current_stack_size] = popup_ref;
	}
}

void ImGui::OpenPopup(const char* str_id)
{
	ImGui::OpenPopupEx(str_id, false);
}

static void CloseInactivePopups()
{
	ImGuiContext& g = *GImGui;
	if (g.OpenPopupStack.empty())
		return;

	// When popups are stacked, clicking on a lower level popups puts focus back to it and close popups above it.
	// Don't close our own child popup windows
	int n = 0;
	if (g.FocusedWindow)
	{
		for (n = 0; n < g.OpenPopupStack.Size; n++)
		{
			ImGuiPopupRef& popup = g.OpenPopupStack[n];
			if (!popup.Window)
				continue;
			IM_ASSERT((popup.Window->Flags & ImGuiWindowFlags_Popup) != 0);
			if (popup.Window->Flags & ImGuiWindowFlags_ChildWindow)
				continue;

			bool has_focus = false;
			for (int m = n; m < g.OpenPopupStack.Size && !has_focus; m++)
				has_focus = (g.OpenPopupStack[m].Window && g.OpenPopupStack[m].Window->RootWindow == g.FocusedWindow->RootWindow);
			if (!has_focus)
				break;
		}
	}
	if (n < g.OpenPopupStack.Size)   // This test is not required but it allows to set a useful breakpoint on the line below
		g.OpenPopupStack.resize(n);
}

static ImGuiWindow* GetFrontMostModalRootWindow()
{
	ImGuiContext& g = *GImGui;
	for (int n = g.OpenPopupStack.Size - 1; n >= 0; n--)
		if (ImGuiWindow* front_most_popup = g.OpenPopupStack.Data[n].Window)
			if (front_most_popup->Flags & ImGuiWindowFlags_Modal)
				return front_most_popup;
	return NULL;
}

static void ClosePopupToLevel(int remaining)
{
	ImGuiContext& g = *GImGui;
	if (remaining > 0)
		ImGui::FocusWindow(g.OpenPopupStack[remaining - 1].Window);
	else
		ImGui::FocusWindow(g.OpenPopupStack[0].ParentWindow);
	g.OpenPopupStack.resize(remaining);
}

static void ClosePopup(ImGuiID id)
{
	if (!IsPopupOpen(id))
		return;
	ImGuiContext& g = *GImGui;
	ClosePopupToLevel(g.OpenPopupStack.Size - 1);
}

// Close the popup we have begin-ed into.
void ImGui::CloseCurrentPopup()
{
	ImGuiContext& g = *GImGui;
	int popup_idx = g.CurrentPopupStack.Size - 1;
	if (popup_idx < 0 || popup_idx > g.OpenPopupStack.Size || g.CurrentPopupStack[popup_idx].PopupId != g.OpenPopupStack[popup_idx].PopupId)
		return;
	while (popup_idx > 0 && g.OpenPopupStack[popup_idx].Window && (g.OpenPopupStack[popup_idx].Window->Flags & ImGuiWindowFlags_ChildMenu))
		popup_idx--;
	ClosePopupToLevel(popup_idx);
}

static inline void ClearSetNextWindowData()
{
	ImGuiContext& g = *GImGui;
	g.SetNextWindowPosCond = g.SetNextWindowSizeCond = g.SetNextWindowContentSizeCond = g.SetNextWindowCollapsedCond = 0;
	g.SetNextWindowSizeConstraint = g.SetNextWindowFocus = false;
}

static bool BeginPopupEx(const char* str_id, ImGuiWindowFlags extra_flags)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = g.CurrentWindow;
	const ImGuiID id = window->GetID(str_id);
	if (!IsPopupOpen(id))
	{
		ClearSetNextWindowData(); // We behave like Begin() and need to consume those values
		return false;
	}

	ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
	ImGuiWindowFlags flags = extra_flags | ImGuiWindowFlags_Popup | ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_AlwaysAutoResize;

	char name[20];
	if (flags & ImGuiWindowFlags_ChildMenu)
		ImFormatString(name, IM_ARRAYSIZE(name), "##menu_%d", g.CurrentPopupStack.Size);    // Recycle windows based on depth
	else
		ImFormatString(name, IM_ARRAYSIZE(name), "##popup_%08x", id); // Not recycling, so we can close/open during the same frame

	bool is_open = ImGui::Begin(name, NULL, flags);
	if (!(window->Flags & ImGuiWindowFlags_ShowBorders))
		g.CurrentWindow->Flags &= ~ImGuiWindowFlags_ShowBorders;
	if (!is_open) // NB: is_open can be 'false' when the popup is completely clipped (e.g. zero size display)
		ImGui::EndPopup();

	return is_open;
}

bool ImGui::BeginPopup(const char* str_id)
{
	if (GImGui->OpenPopupStack.Size <= GImGui->CurrentPopupStack.Size)	// Early out for performance
	{
		ClearSetNextWindowData(); // We behave like Begin() and need to consume those values
		return false;
	}
	return BeginPopupEx(str_id, ImGuiWindowFlags_ShowBorders);
}

bool ImGui::BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags extra_flags)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = g.CurrentWindow;
	const ImGuiID id = window->GetID(name);
	if (!IsPopupOpen(id))
	{
		ClearSetNextWindowData(); // We behave like Begin() and need to consume those values
		return false;
	}

	ImGuiWindowFlags flags = extra_flags | ImGuiWindowFlags_Popup | ImGuiWindowFlags_Modal | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoSavedSettings;
	bool is_open = ImGui::Begin(name, p_open, flags);
	if (!is_open || (p_open && !*p_open)) // NB: is_open can be 'false' when the popup is completely clipped (e.g. zero size display)
	{
		ImGui::EndPopup();
		if (is_open)
			ClosePopup(id);
		return false;
	}

	return is_open;
}

void ImGui::EndPopup()
{
	ImGuiWindow* window = GetCurrentWindow();
	IM_ASSERT(window->Flags & ImGuiWindowFlags_Popup);  // Mismatched BeginPopup()/EndPopup() calls
	IM_ASSERT(GImGui->CurrentPopupStack.Size > 0);
	ImGui::End();
	if (!(window->Flags & ImGuiWindowFlags_Modal))
		ImGui::PopStyleVar();
}

// This is a helper to handle the most simple case of associating one named popup to one given widget.
// 1. If you have many possible popups (for different "instances" of a same widget, or for wholly different widgets), you may be better off handling
//    this yourself so you can store data relative to the widget that opened the popup instead of choosing different popup identifiers.
// 2. If you want right-clicking on the same item to reopen the popup at new location, use the same code replacing IsItemHovered() with IsItemHoveredRect()
//    and passing true to the OpenPopupEx().
//    Because: hovering an item in a window below the popup won't normally trigger is hovering behavior/coloring. The pattern of ignoring the fact that
//    the item isn't interactable (because it is blocked by the active popup) may useful in some situation when e.g. large canvas as one item, content of menu
//    driven by click position.
bool ImGui::BeginPopupContextItem(const char* str_id, int mouse_button)
{
	if (IsItemHovered() && IsMouseClicked(mouse_button))
		OpenPopupEx(str_id, false);
	return BeginPopup(str_id);
}

bool ImGui::BeginPopupContextWindow(bool also_over_items, const char* str_id, int mouse_button)
{
	if (!str_id) str_id = "window_context_menu";
	if (IsMouseHoveringWindow() && IsMouseClicked(mouse_button))
		if (also_over_items || !IsAnyItemHovered())
			OpenPopupEx(str_id, true);
	return BeginPopup(str_id);
}

bool ImGui::BeginPopupContextVoid(const char* str_id, int mouse_button)
{
	if (!str_id) str_id = "void_context_menu";
	if (!IsMouseHoveringAnyWindow() && IsMouseClicked(mouse_button))
		OpenPopupEx(str_id, true);
	return BeginPopup(str_id);
}

static bool BeginChildEx(const char* name, ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_flags)
{
	ImGuiWindow* window = ImGui::GetCurrentWindow();
	ImGuiWindowFlags flags = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_ChildWindow;

	const ImVec2 content_avail = ImGui::GetContentRegionAvail();
	ImVec2 size = ImFloor(size_arg);
	if (size.x <= 0.0f)
	{
		if (size.x == 0.0f)
			flags |= ImGuiWindowFlags_ChildWindowAutoFitX;
		size.x = ImMax(content_avail.x, 4.0f) - fabsf(size.x); // Arbitrary minimum zero-ish child size of 4.0f (0.0f causing too much issues)
	}
	if (size.y <= 0.0f)
	{
		if (size.y == 0.0f)
			flags |= ImGuiWindowFlags_ChildWindowAutoFitY;
		size.y = ImMax(content_avail.y, 4.0f) - fabsf(size.y);
	}
	if (border)
		flags |= ImGuiWindowFlags_ShowBorders;
	flags |= extra_flags;

	char title[256];
	if (name)
		ImFormatString(title, IM_ARRAYSIZE(title), "%s.%s.%08X", window->Name, name, id);
	else
		ImFormatString(title, IM_ARRAYSIZE(title), "%s.%08X", window->Name, id);

	bool ret = ImGui::Begin(title, NULL, size, -1.0f, flags);

	if (!(window->Flags & ImGuiWindowFlags_ShowBorders))
		ImGui::GetCurrentWindow()->Flags &= ~ImGuiWindowFlags_ShowBorders;

	return ret;
}

bool ImGui::BeginChild(const char* str_id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_flags)
{
	ImGuiWindow* window = GetCurrentWindow();
	return BeginChildEx(str_id, window->GetID(str_id), size_arg, border, extra_flags);
}

bool ImGui::BeginChild(ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_flags)
{
	return BeginChildEx(NULL, id, size_arg, border, extra_flags);
}

void ImGui::EndChild()
{
	ImGuiWindow* window = GetCurrentWindow();

	IM_ASSERT(window->Flags & ImGuiWindowFlags_ChildWindow);   // Mismatched BeginChild()/EndChild() callss
	if ((window->Flags & ImGuiWindowFlags_ComboBox) || window->BeginCount > 1)
	{
		ImGui::End();
	}
	else
	{
		// When using auto-filling child window, we don't provide full width/height to ItemSize so that it doesn't feed back into automatic size-fitting.
		ImVec2 sz = GetWindowSize();
		if (window->Flags & ImGuiWindowFlags_ChildWindowAutoFitX) // Arbitrary minimum zero-ish child size of 4.0f causes less trouble than a 0.0f
			sz.x = ImMax(4.0f, sz.x);
		if (window->Flags & ImGuiWindowFlags_ChildWindowAutoFitY)
			sz.y = ImMax(4.0f, sz.y);

		ImGui::End();

		window = GetCurrentWindow();
		ImRect bb(window->DC.CursorPos, window->DC.CursorPos + sz);
		ItemSize(sz);
		ItemAdd(bb, NULL);
	}
}

// Helper to create a child window / scrolling region that looks like a normal widget frame.
bool ImGui::BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags extra_flags)
{
	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;
	ImGui::PushStyleColor(ImGuiCol_ChildWindowBg, style.Colors[ImGuiCol_FrameBg]);
	ImGui::PushStyleVar(ImGuiStyleVar_ChildWindowRounding, style.FrameRounding);
	ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, style.FramePadding);
	return ImGui::BeginChild(id, size, (g.CurrentWindow->Flags & ImGuiWindowFlags_ShowBorders) ? true : false, ImGuiWindowFlags_NoMove | ImGuiWindowFlags_AlwaysUseWindowPadding | extra_flags);
}

void ImGui::EndChildFrame()
{
	ImGui::EndChild();
	ImGui::PopStyleVar(2);
	ImGui::PopStyleColor();
}

// Save and compare stack sizes on Begin()/End() to detect usage errors
static void CheckStacksSize(ImGuiWindow* window, bool write)
{
	// NOT checking: DC.ItemWidth, DC.AllowKeyboardFocus, DC.ButtonRepeat, DC.TextWrapPos (per window) to allow user to conveniently push once and not pop (they are cleared on Begin)
	ImGuiContext& g = *GImGui;
	int* p_backup = &window->DC.StackSizesBackup[0];
	{ int current = window->IDStack.Size;       if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && "PushID/PopID or TreeNode/TreePop Mismatch!");   p_backup++; }    // Too few or too many PopID()/TreePop()
	{ int current = window->DC.GroupStack.Size; if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && "BeginGroup/EndGroup Mismatch!");                p_backup++; }    // Too few or too many EndGroup()
	{ int current = g.CurrentPopupStack.Size;   if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && "BeginMenu/EndMenu or BeginPopup/EndPopup Mismatch"); p_backup++; }// Too few or too many EndMenu()/EndPopup()
	{ int current = g.ColorModifiers.Size;      if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && "PushStyleColor/PopStyleColor Mismatch!");       p_backup++; }    // Too few or too many PopStyleColor()
	{ int current = g.StyleModifiers.Size;      if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && "PushStyleVar/PopStyleVar Mismatch!");           p_backup++; }    // Too few or too many PopStyleVar()
	{ int current = g.FontStack.Size;           if (write) *p_backup = current; else IM_ASSERT(*p_backup == current && "PushFont/PopFont Mismatch!");                   p_backup++; }    // Too few or too many PopFont()
	IM_ASSERT(p_backup == window->DC.StackSizesBackup + IM_ARRAYSIZE(window->DC.StackSizesBackup));
}

static ImVec2 FindBestPopupWindowPos(const ImVec2& base_pos, const ImVec2& size, int* last_dir, const ImRect& r_inner)
{
	const ImGuiStyle& style = GImGui->Style;

	// Clamp into visible area while not overlapping the cursor. Safety padding is optional if our popup size won't fit without it.
	ImVec2 safe_padding = style.DisplaySafeAreaPadding;
	ImRect r_outer(GetVisibleRect());
	r_outer.Reduce(ImVec2((size.x - r_outer.GetWidth() > safe_padding.x * 2) ? safe_padding.x : 0.0f, (size.y - r_outer.GetHeight() > safe_padding.y * 2) ? safe_padding.y : 0.0f));
	ImVec2 base_pos_clamped = ImClamp(base_pos, r_outer.Min, r_outer.Max - size);

	for (int n = (*last_dir != -1) ? -1 : 0; n < 4; n++)   // Last, Right, down, up, left. (Favor last used direction).
	{
		const int dir = (n == -1) ? *last_dir : n;
		ImRect rect(dir == 0 ? r_inner.Max.x : r_outer.Min.x, dir == 1 ? r_inner.Max.y : r_outer.Min.y, dir == 3 ? r_inner.Min.x : r_outer.Max.x, dir == 2 ? r_inner.Min.y : r_outer.Max.y);
		if (rect.GetWidth() < size.x || rect.GetHeight() < size.y)
			continue;
		*last_dir = dir;
		return ImVec2(dir == 0 ? r_inner.Max.x : dir == 3 ? r_inner.Min.x - size.x : base_pos_clamped.x, dir == 1 ? r_inner.Max.y : dir == 2 ? r_inner.Min.y - size.y : base_pos_clamped.y);
	}

	// Fallback, try to keep within display
	*last_dir = -1;
	ImVec2 pos = base_pos;
	pos.x = ImMax(ImMin(pos.x + size.x, r_outer.Max.x) - size.x, r_outer.Min.x);
	pos.y = ImMax(ImMin(pos.y + size.y, r_outer.Max.y) - size.y, r_outer.Min.y);
	return pos;
}

ImGuiWindow* ImGui::FindWindowByName(const char* name)
{
	// FIXME-OPT: Store sorted hashes -> pointers so we can do a bissection in a contiguous block
	ImGuiContext& g = *GImGui;
	ImGuiID id = ImHash(name, 0);
	for (int i = 0; i < g.Windows.Size; i++)
		if (g.Windows[i]->ID == id)
			return g.Windows[i];
	return NULL;
}

static ImGuiWindow* CreateNewWindow(const char* name, ImVec2 size, ImGuiWindowFlags flags)
{
	ImGuiContext& g = *GImGui;

	// Create window the first time
	ImGuiWindow* window = (ImGuiWindow*)ImGui::MemAlloc(sizeof(ImGuiWindow));
	IM_PLACEMENT_NEW(window) ImGuiWindow(name);
	window->Flags = flags;

	if (flags & ImGuiWindowFlags_NoSavedSettings)
	{
		// User can disable loading and saving of settings. Tooltip and child windows also don't store settings.
		window->Size = window->SizeFull = size;
	}
	else
	{
		// Retrieve settings from .ini file
		// Use SetWindowPos() or SetNextWindowPos() with the appropriate condition flag to change the initial position of a window.
		window->PosFloat = ImVec2(60, 60);
		window->Pos = ImVec2((float)(int)window->PosFloat.x, (float)(int)window->PosFloat.y);

		ImGuiIniData* settings = FindWindowSettings(name);
		if (!settings)
		{
			settings = AddWindowSettings(name);
		}
		else
		{
			window->SetWindowPosAllowFlags &= ~ImGuiSetCond_FirstUseEver;
			window->SetWindowSizeAllowFlags &= ~ImGuiSetCond_FirstUseEver;
			window->SetWindowCollapsedAllowFlags &= ~ImGuiSetCond_FirstUseEver;
		}

		if (settings->Pos.x != FLT_MAX)
		{
			window->PosFloat = settings->Pos;
			window->Pos = ImVec2((float)(int)window->PosFloat.x, (float)(int)window->PosFloat.y);
			window->Collapsed = settings->Collapsed;
		}

		if (ImLengthSqr(settings->Size) > 0.00001f && !(flags & ImGuiWindowFlags_NoResize))
			size = settings->Size;
		window->Size = window->SizeFull = size;
	}

	if ((flags & ImGuiWindowFlags_AlwaysAutoResize) != 0)
	{
		window->AutoFitFramesX = window->AutoFitFramesY = 2;
		window->AutoFitOnlyGrows = false;
	}
	else
	{
		if (window->Size.x <= 0.0f)
			window->AutoFitFramesX = 2;
		if (window->Size.y <= 0.0f)
			window->AutoFitFramesY = 2;
		window->AutoFitOnlyGrows = (window->AutoFitFramesX > 0) || (window->AutoFitFramesY > 0);
	}

	if (flags & ImGuiWindowFlags_NoBringToFrontOnFocus)
		g.Windows.insert(g.Windows.begin(), window); // Quite slow but rare and only once
	else
		g.Windows.push_back(window);
	return window;
}

static void ApplySizeFullWithConstraint(ImGuiWindow* window, ImVec2 new_size)
{
	ImGuiContext& g = *GImGui;
	if (g.SetNextWindowSizeConstraint)
	{
		// Using -1,-1 on either X/Y axis to preserve the current size.
		ImRect cr = g.SetNextWindowSizeConstraintRect;
		new_size.x = (cr.Min.x >= 0 && cr.Max.x >= 0) ? ImClamp(new_size.x, cr.Min.x, cr.Max.x) : window->SizeFull.x;
		new_size.y = (cr.Min.y >= 0 && cr.Max.y >= 0) ? ImClamp(new_size.y, cr.Min.y, cr.Max.y) : window->SizeFull.y;
		if (g.SetNextWindowSizeConstraintCallback)
		{
			ImGuiSizeConstraintCallbackData data;
			data.UserData = g.SetNextWindowSizeConstraintCallbackUserData;
			data.Pos = window->Pos;
			data.CurrentSize = window->SizeFull;
			data.DesiredSize = new_size;
			g.SetNextWindowSizeConstraintCallback(&data);
			new_size = data.DesiredSize;
		}
	}
	if (!(window->Flags & (ImGuiWindowFlags_ChildWindow | ImGuiWindowFlags_AlwaysAutoResize)))
		new_size = ImMax(new_size, g.Style.WindowMinSize);
	window->SizeFull = new_size;
}

// Push a new ImGui window to add widgets to.
// - A default window called "Debug" is automatically stacked at the beginning of every frame so you can use widgets without explicitly calling a Begin/End pair.
// - Begin/End can be called multiple times during the frame with the same window name to append content.
// - 'size_on_first_use' for a regular window denote the initial size for first-time creation (no saved data) and isn't that useful. Use SetNextWindowSize() prior to calling Begin() for more flexible window manipulation.
// - The window name is used as a unique identifier to preserve window information across frames (and save rudimentary information to the .ini file).
//   You can use the "##" or "###" markers to use the same label with different id, or same id with different label. See documentation at the top of this file.
// - Return false when window is collapsed, so you can early out in your code. You always need to call ImGui::End() even if false is returned.
// - Passing 'bool* p_open' displays a Close button on the upper-right corner of the window, the pointed value will be set to false when the button is pressed.
// - Passing non-zero 'size' is roughly equivalent to calling SetNextWindowSize(size, ImGuiSetCond_FirstUseEver) prior to calling Begin().
bool ImGui::Begin(const char* name, bool* p_open, ImGuiWindowFlags flags)
{
	return ImGui::Begin(name, p_open, ImVec2(0.f, 0.f), -1.0f, flags);
}

bool ImGui::Begin(const char* name, bool* p_open, const ImVec2& size_on_first_use, float bg_alpha, ImGuiWindowFlags flags)
{
	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;
	IM_ASSERT(name != NULL);                        // Window name required
	IM_ASSERT(g.Initialized);                       // Forgot to call ImGui::NewFrame()
	IM_ASSERT(g.FrameCountEnded != g.FrameCount);   // Called ImGui::Render() or ImGui::EndFrame() and haven't called ImGui::NewFrame() again yet

	if (flags & ImGuiWindowFlags_NoInputs)
		flags |= ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoResize;

	// Find or create
	bool window_is_new = false;
	ImGuiWindow* window = FindWindowByName(name);
	if (!window)
	{
		window = CreateNewWindow(name, size_on_first_use, flags);
		window_is_new = true;
	}

	const int current_frame = ImGui::GetFrameCount();
	const bool first_begin_of_the_frame = (window->LastFrameActive != current_frame);
	if (first_begin_of_the_frame)
		window->Flags = (ImGuiWindowFlags)flags;
	else
		flags = window->Flags;

	// Add to stack
	ImGuiWindow* parent_window = !g.CurrentWindowStack.empty() ? g.CurrentWindowStack.back() : NULL;
	g.CurrentWindowStack.push_back(window);
	SetCurrentWindow(window);
	CheckStacksSize(window, true);
	IM_ASSERT(parent_window != NULL || !(flags & ImGuiWindowFlags_ChildWindow));

	bool window_was_active = (window->LastFrameActive == current_frame - 1);   // Not using !WasActive because the implicit "Debug" window would always toggle off->on
	if (flags & ImGuiWindowFlags_Popup)
	{
		ImGuiPopupRef& popup_ref = g.OpenPopupStack[g.CurrentPopupStack.Size];
		window_was_active &= (window->PopupId == popup_ref.PopupId);
		window_was_active &= (window == popup_ref.Window);
		popup_ref.Window = window;
		g.CurrentPopupStack.push_back(popup_ref);
		window->PopupId = popup_ref.PopupId;
	}

	const bool window_appearing_after_being_hidden = (window->HiddenFrames == 1);

	// Process SetNextWindow***() calls
	bool window_pos_set_by_api = false, window_size_set_by_api = false;
	if (g.SetNextWindowPosCond)
	{
		const ImVec2 backup_cursor_pos = window->DC.CursorPos;                  // FIXME: not sure of the exact reason of this saving/restore anymore :( need to look into that.
		if (!window_was_active || window_appearing_after_being_hidden) window->SetWindowPosAllowFlags |= ImGuiSetCond_Appearing;
		window_pos_set_by_api = (window->SetWindowPosAllowFlags & g.SetNextWindowPosCond) != 0;
		if (window_pos_set_by_api && ImLengthSqr(g.SetNextWindowPosVal - ImVec2(-FLT_MAX, -FLT_MAX)) < 0.001f)
		{
			window->SetWindowPosCenterWanted = true;                            // May be processed on the next frame if this is our first frame and we are measuring size
			window->SetWindowPosAllowFlags &= ~(ImGuiSetCond_Once | ImGuiSetCond_FirstUseEver | ImGuiSetCond_Appearing);
		}
		else
		{
			SetWindowPos(window, g.SetNextWindowPosVal, g.SetNextWindowPosCond);
		}
		window->DC.CursorPos = backup_cursor_pos;
		g.SetNextWindowPosCond = 0;
	}
	if (g.SetNextWindowSizeCond)
	{
		if (!window_was_active || window_appearing_after_being_hidden) window->SetWindowSizeAllowFlags |= ImGuiSetCond_Appearing;
		window_size_set_by_api = (window->SetWindowSizeAllowFlags & g.SetNextWindowSizeCond) != 0;
		SetWindowSize(window, g.SetNextWindowSizeVal, g.SetNextWindowSizeCond);
		g.SetNextWindowSizeCond = 0;
	}
	if (g.SetNextWindowContentSizeCond)
	{
		window->SizeContentsExplicit = g.SetNextWindowContentSizeVal;
		g.SetNextWindowContentSizeCond = 0;
	}
	else if (first_begin_of_the_frame)
	{
		window->SizeContentsExplicit = ImVec2(0.0f, 0.0f);
	}
	if (g.SetNextWindowCollapsedCond)
	{
		if (!window_was_active || window_appearing_after_being_hidden) window->SetWindowCollapsedAllowFlags |= ImGuiSetCond_Appearing;
		SetWindowCollapsed(window, g.SetNextWindowCollapsedVal, g.SetNextWindowCollapsedCond);
		g.SetNextWindowCollapsedCond = 0;
	}
	if (g.SetNextWindowFocus)
	{
		ImGui::SetWindowFocus();
		g.SetNextWindowFocus = false;
	}

	// Update known root window (if we are a child window, otherwise window == window->RootWindow)
	int root_idx, root_non_popup_idx;
	for (root_idx = g.CurrentWindowStack.Size - 1; root_idx > 0; root_idx--)
		if (!(g.CurrentWindowStack[root_idx]->Flags & ImGuiWindowFlags_ChildWindow))
			break;
	for (root_non_popup_idx = root_idx; root_non_popup_idx > 0; root_non_popup_idx--)
		if (!(g.CurrentWindowStack[root_non_popup_idx]->Flags & (ImGuiWindowFlags_ChildWindow | ImGuiWindowFlags_Popup)))
			break;
	window->ParentWindow = parent_window;
	window->RootWindow = g.CurrentWindowStack[root_idx];
	window->RootNonPopupWindow = g.CurrentWindowStack[root_non_popup_idx];      // This is merely for displaying the TitleBgActive color.

																				// When reusing window again multiple times a frame, just append content (don't need to setup again)
	if (first_begin_of_the_frame)
	{
		window->Active = true;
		window->IndexWithinParent = 0;
		window->BeginCount = 0;
		window->ClipRect = ImVec4(-FLT_MAX, -FLT_MAX, +FLT_MAX, +FLT_MAX);
		window->LastFrameActive = current_frame;
		window->IDStack.resize(1);

		// Clear draw list, setup texture, outer clipping rectangle
		window->DrawList->Clear();
		window->DrawList->PushTextureID(g.Font->ContainerAtlas->TexID);
		ImRect fullscreen_rect(GetVisibleRect());
		if ((flags & ImGuiWindowFlags_ChildWindow) && !(flags & (ImGuiWindowFlags_ComboBox | ImGuiWindowFlags_Popup)))
			PushClipRect(parent_window->ClipRect.Min, parent_window->ClipRect.Max, true);
		else
			PushClipRect(fullscreen_rect.Min, fullscreen_rect.Max, true);

		if (!window_was_active)
		{
			// Popup first latch mouse position, will position itself when it appears next frame
			window->AutoPosLastDirection = -1;
			if ((flags & ImGuiWindowFlags_Popup) != 0 && !window_pos_set_by_api)
				window->PosFloat = g.IO.MousePos;
		}

		// Collapse window by double-clicking on title bar
		// At this point we don't have a clipping rectangle setup yet, so we can use the title bar area for hit detection and drawing
		if (!(flags & ImGuiWindowFlags_NoTitleBar) && !(flags & ImGuiWindowFlags_NoCollapse))
		{
			ImRect title_bar_rect = window->TitleBarRect();
			if (g.HoveredWindow == window && IsMouseHoveringRect(title_bar_rect.Min, title_bar_rect.Max) && g.IO.MouseDoubleClicked[0])
			{
				window->Collapsed = !window->Collapsed;
				if (!(flags & ImGuiWindowFlags_NoSavedSettings))
					MarkIniSettingsDirty();
				FocusWindow(window);
			}
		}
		else
		{
			window->Collapsed = false;
		}

		// SIZE

		// Save contents size from last frame for auto-fitting (unless explicitly specified)
		window->SizeContents.x = (float)(int)((window->SizeContentsExplicit.x != 0.0f) ? window->SizeContentsExplicit.x : ((window_is_new ? 0.0f : window->DC.CursorMaxPos.x - window->Pos.x) + window->Scroll.x));
		window->SizeContents.y = (float)(int)((window->SizeContentsExplicit.y != 0.0f) ? window->SizeContentsExplicit.y : ((window_is_new ? 0.0f : window->DC.CursorMaxPos.y - window->Pos.y) + window->Scroll.y));

		// Hide popup/tooltip window when first appearing while we measure size (because we recycle them)
		if (window->HiddenFrames > 0)
			window->HiddenFrames--;
		if ((flags & (ImGuiWindowFlags_Popup | ImGuiWindowFlags_Tooltip)) != 0 && !window_was_active)
		{
			window->HiddenFrames = 1;
			if (flags & ImGuiWindowFlags_AlwaysAutoResize)
			{
				if (!window_size_set_by_api)
					window->Size = window->SizeFull = ImVec2(0.f, 0.f);
				window->SizeContents = ImVec2(0.f, 0.f);
			}
		}

		// Lock window padding so that altering the ShowBorders flag for children doesn't have side-effects.
		window->WindowPadding = ((flags & ImGuiWindowFlags_ChildWindow) && !(flags & (ImGuiWindowFlags_AlwaysUseWindowPadding | ImGuiWindowFlags_ShowBorders | ImGuiWindowFlags_ComboBox | ImGuiWindowFlags_Popup))) ? ImVec2(0, 0) : style.WindowPadding;

		// Calculate auto-fit size
		ImVec2 size_auto_fit;
		if ((flags & ImGuiWindowFlags_Tooltip) != 0)
		{
			// Tooltip always resize. We keep the spacing symmetric on both axises for aesthetic purpose.
			size_auto_fit = window->SizeContents + window->WindowPadding - ImVec2(0.0f, style.ItemSpacing.y);
		}
		else
		{
			size_auto_fit = ImClamp(window->SizeContents + window->WindowPadding, style.WindowMinSize, ImMax(style.WindowMinSize, g.IO.DisplaySize - g.Style.DisplaySafeAreaPadding));

			// Handling case of auto fit window not fitting in screen on one axis, we are growing auto fit size on the other axis to compensate for expected scrollbar. FIXME: Might turn bigger than DisplaySize-WindowPadding.
			if (size_auto_fit.x < window->SizeContents.x && !(flags & ImGuiWindowFlags_NoScrollbar) && (flags & ImGuiWindowFlags_HorizontalScrollbar))
				size_auto_fit.y += style.ScrollbarSize;
			if (size_auto_fit.y < window->SizeContents.y && !(flags & ImGuiWindowFlags_NoScrollbar))
				size_auto_fit.x += style.ScrollbarSize;
			size_auto_fit.y = ImMax(size_auto_fit.y - style.ItemSpacing.y, 0.0f);
		}

		// Handle automatic resize
		if (window->Collapsed)
		{
			// We still process initial auto-fit on collapsed windows to get a window width,
			// But otherwise we don't honor ImGuiWindowFlags_AlwaysAutoResize when collapsed.
			if (window->AutoFitFramesX > 0)
				window->SizeFull.x = window->AutoFitOnlyGrows ? ImMax(window->SizeFull.x, size_auto_fit.x) : size_auto_fit.x;
			if (window->AutoFitFramesY > 0)
				window->SizeFull.y = window->AutoFitOnlyGrows ? ImMax(window->SizeFull.y, size_auto_fit.y) : size_auto_fit.y;
		}
		else
		{
			if ((flags & ImGuiWindowFlags_AlwaysAutoResize) && !window_size_set_by_api)
			{
				window->SizeFull = size_auto_fit;
			}
			else if ((window->AutoFitFramesX > 0 || window->AutoFitFramesY > 0) && !window_size_set_by_api)
			{
				// Auto-fit only grows during the first few frames
				if (window->AutoFitFramesX > 0)
					window->SizeFull.x = window->AutoFitOnlyGrows ? ImMax(window->SizeFull.x, size_auto_fit.x) : size_auto_fit.x;
				if (window->AutoFitFramesY > 0)
					window->SizeFull.y = window->AutoFitOnlyGrows ? ImMax(window->SizeFull.y, size_auto_fit.y) : size_auto_fit.y;
				if (!(flags & ImGuiWindowFlags_NoSavedSettings))
					MarkIniSettingsDirty();
			}
		}

		// Apply minimum/maximum window size constraints and final size
		ApplySizeFullWithConstraint(window, window->SizeFull);
		window->Size = window->Collapsed ? window->TitleBarRect().GetSize() : window->SizeFull;

		// POSITION

		// Position child window
		if (flags & ImGuiWindowFlags_ChildWindow)
		{
			window->IndexWithinParent = parent_window->DC.ChildWindows.Size;
			parent_window->DC.ChildWindows.push_back(window);
		}
		if ((flags & ImGuiWindowFlags_ChildWindow) && !(flags & ImGuiWindowFlags_Popup))
		{
			window->Pos = window->PosFloat = parent_window->DC.CursorPos;
			window->Size = window->SizeFull = size_on_first_use; // NB: argument name 'size_on_first_use' misleading here, it's really just 'size' as provided by user passed via BeginChild()->Begin().
		}

		bool window_pos_center = false;
		window_pos_center |= (window->SetWindowPosCenterWanted && window->HiddenFrames == 0);
		window_pos_center |= ((flags & ImGuiWindowFlags_Modal) && !window_pos_set_by_api && window_appearing_after_being_hidden);
		if (window_pos_center)
		{
			// Center (any sort of window)
			SetWindowPos(window, ImMax(style.DisplaySafeAreaPadding, fullscreen_rect.GetCenter() - window->SizeFull * 0.5f), 0);
		}
		else if (flags & ImGuiWindowFlags_ChildMenu)
		{
			// Child menus typically request _any_ position within the parent menu item, and then our FindBestPopupWindowPos() function will move the new menu outside the parent bounds.
			// This is how we end up with child menus appearing (most-commonly) on the right of the parent menu.
			IM_ASSERT(window_pos_set_by_api);
			float horizontal_overlap = style.ItemSpacing.x; // We want some overlap to convey the relative depth of each popup (currently the amount of overlap it is hard-coded to style.ItemSpacing.x, may need to introduce another style value).
			ImRect rect_to_avoid;
			if (parent_window->DC.MenuBarAppending)
				rect_to_avoid = ImRect(-FLT_MAX, parent_window->Pos.y + parent_window->TitleBarHeight(), FLT_MAX, parent_window->Pos.y + parent_window->TitleBarHeight() + parent_window->MenuBarHeight());
			else
				rect_to_avoid = ImRect(parent_window->Pos.x + horizontal_overlap, -FLT_MAX, parent_window->Pos.x + parent_window->Size.x - horizontal_overlap - parent_window->ScrollbarSizes.x, FLT_MAX);
			window->PosFloat = FindBestPopupWindowPos(window->PosFloat, window->Size, &window->AutoPosLastDirection, rect_to_avoid);
		}
		else if ((flags & ImGuiWindowFlags_Popup) != 0 && !window_pos_set_by_api && window_appearing_after_being_hidden)
		{
			ImRect rect_to_avoid(window->PosFloat.x - 1, window->PosFloat.y - 1, window->PosFloat.x + 1, window->PosFloat.y + 1);
			window->PosFloat = FindBestPopupWindowPos(window->PosFloat, window->Size, &window->AutoPosLastDirection, rect_to_avoid);
		}

		// Position tooltip (always follows mouse)
		if ((flags & ImGuiWindowFlags_Tooltip) != 0 && !window_pos_set_by_api)
		{
			ImRect rect_to_avoid(g.IO.MousePos.x - 16, g.IO.MousePos.y - 8, g.IO.MousePos.x + 24, g.IO.MousePos.y + 24); // FIXME: Completely hard-coded. Perhaps center on cursor hit-point instead?
			window->PosFloat = FindBestPopupWindowPos(g.IO.MousePos, window->Size, &window->AutoPosLastDirection, rect_to_avoid);
			if (window->AutoPosLastDirection == -1)
				window->PosFloat = g.IO.MousePos + ImVec2(2, 2); // If there's not enough room, for tooltip we prefer avoiding the cursor at all cost even if it means that part of the tooltip won't be visible.
		}

		// Clamp position so it stays visible
		if (!(flags & ImGuiWindowFlags_ChildWindow) && !(flags & ImGuiWindowFlags_Tooltip))
		{
			if (!window_pos_set_by_api && window->AutoFitFramesX <= 0 && window->AutoFitFramesY <= 0 && g.IO.DisplaySize.x > 0.0f && g.IO.DisplaySize.y > 0.0f) // Ignore zero-sized display explicitly to avoid losing positions if a window manager reports zero-sized window when initializing or minimizing.
			{
				ImVec2 padding = ImMax(style.DisplayWindowPadding, style.DisplaySafeAreaPadding);
				window->PosFloat = ImMax(window->PosFloat + window->Size, padding) - window->Size;
				window->PosFloat = ImMin(window->PosFloat, g.IO.DisplaySize - padding);
			}
		}
		window->Pos = ImVec2((float)(int)window->PosFloat.x, (float)(int)window->PosFloat.y);

		// Default item width. Make it proportional to window size if window manually resizes
		if (window->Size.x > 0.0f && !(flags & ImGuiWindowFlags_Tooltip) && !(flags & ImGuiWindowFlags_AlwaysAutoResize))
			window->ItemWidthDefault = (float)(int)(window->Size.x * 0.65f);
		else
			window->ItemWidthDefault = (float)(int)(g.FontSize * 16.0f);

		// Prepare for focus requests
		window->FocusIdxAllRequestCurrent = (window->FocusIdxAllRequestNext == INT_MAX || window->FocusIdxAllCounter == -1) ? INT_MAX : (window->FocusIdxAllRequestNext + (window->FocusIdxAllCounter + 1)) % (window->FocusIdxAllCounter + 1);
		window->FocusIdxTabRequestCurrent = (window->FocusIdxTabRequestNext == INT_MAX || window->FocusIdxTabCounter == -1) ? INT_MAX : (window->FocusIdxTabRequestNext + (window->FocusIdxTabCounter + 1)) % (window->FocusIdxTabCounter + 1);
		window->FocusIdxAllCounter = window->FocusIdxTabCounter = -1;
		window->FocusIdxAllRequestNext = window->FocusIdxTabRequestNext = INT_MAX;

		// Apply scrolling
		if (window->ScrollTarget.x < FLT_MAX)
		{
			window->Scroll.x = window->ScrollTarget.x;
			window->ScrollTarget.x = FLT_MAX;
		}
		if (window->ScrollTarget.y < FLT_MAX)
		{
			float center_ratio = window->ScrollTargetCenterRatio.y;
			window->Scroll.y = window->ScrollTarget.y - ((1.0f - center_ratio) * (window->TitleBarHeight() + window->MenuBarHeight())) - (center_ratio * window->SizeFull.y);
			window->ScrollTarget.y = FLT_MAX;
		}
		window->Scroll = ImMax(window->Scroll, ImVec2(0.0f, 0.0f));
		if (!window->Collapsed && !window->SkipItems)
			window->Scroll = ImMin(window->Scroll, ImMax(ImVec2(0.0f, 0.0f), window->SizeContents - window->SizeFull + window->ScrollbarSizes));

		// Modal window darkens what is behind them
		if ((flags & ImGuiWindowFlags_Modal) != 0 && window == GetFrontMostModalRootWindow())
			window->DrawList->AddRectFilled(fullscreen_rect.Min, fullscreen_rect.Max, GetColorU32(ImGuiCol_ModalWindowDarkening, g.ModalWindowDarkeningRatio));

		// Draw window + handle manual resize
		ImRect title_bar_rect = window->TitleBarRect();
		const float window_rounding = (flags & ImGuiWindowFlags_ChildWindow) ? style.ChildWindowRounding : style.WindowRounding;
		if (window->Collapsed)
		{
			// Draw title bar only
			RenderFrame(title_bar_rect.GetTL(), title_bar_rect.GetBR(), GetColorU32(ImGuiCol_TitleBgCollapsed), true, window_rounding);
		}
		else
		{
			ImU32 resize_col = 0;
			const float resize_corner_size = ImMax(g.FontSize * 1.35f, window_rounding + 1.0f + g.FontSize * 0.2f);
			if (!(flags & ImGuiWindowFlags_AlwaysAutoResize) && window->AutoFitFramesX <= 0 && window->AutoFitFramesY <= 0 && !(flags & ImGuiWindowFlags_NoResize))
			{
				// Manual resize
				const ImVec2 br = window->Rect().GetBR();
				const ImRect resize_rect(br - ImVec2(resize_corner_size * 0.75f, resize_corner_size * 0.75f), br);
				const ImGuiID resize_id = window->GetID("#RESIZE");
				bool hovered, held;
				ButtonBehavior(resize_rect, resize_id, &hovered, &held, ImGuiButtonFlags_FlattenChilds);
				resize_col = GetColorU32(held ? ImGuiCol_ResizeGripActive : hovered ? ImGuiCol_ResizeGripHovered : ImGuiCol_ResizeGrip);

				if (hovered || held)
					g.MouseCursor = ImGuiMouseCursor_ResizeNWSE;

				if (g.HoveredWindow == window && held && g.IO.MouseDoubleClicked[0])
				{
					// Manual auto-fit when double-clicking
					ApplySizeFullWithConstraint(window, size_auto_fit);
					if (!(flags & ImGuiWindowFlags_NoSavedSettings))
						MarkIniSettingsDirty();
					ClearActiveID();
				}
				else if (held)
				{
					// We don't use an incremental MouseDelta but rather compute an absolute target size based on mouse position
					ApplySizeFullWithConstraint(window, (g.IO.MousePos - g.ActiveIdClickOffset + resize_rect.GetSize()) - window->Pos);
					if (!(flags & ImGuiWindowFlags_NoSavedSettings))
						MarkIniSettingsDirty();
				}

				window->Size = window->SizeFull;
				title_bar_rect = window->TitleBarRect();
			}

			// Scrollbars
			window->ScrollbarY = (flags & ImGuiWindowFlags_AlwaysVerticalScrollbar) || ((window->SizeContents.y > window->Size.y + style.ItemSpacing.y) && !(flags & ImGuiWindowFlags_NoScrollbar));
			window->ScrollbarX = (flags & ImGuiWindowFlags_AlwaysHorizontalScrollbar) || ((window->SizeContents.x > window->Size.x - (window->ScrollbarY ? style.ScrollbarSize : 0.0f) - window->WindowPadding.x) && !(flags & ImGuiWindowFlags_NoScrollbar) && (flags & ImGuiWindowFlags_HorizontalScrollbar));
			window->ScrollbarSizes = ImVec2(window->ScrollbarY ? style.ScrollbarSize : 0.0f, window->ScrollbarX ? style.ScrollbarSize : 0.0f);
			window->BorderSize = (flags & ImGuiWindowFlags_ShowBorders) ? 1.0f : 0.0f;

			// Window background, Default Alpha
			ImGuiCol bg_color_idx = ImGuiCol_WindowBg;
			if ((flags & ImGuiWindowFlags_ComboBox) != 0)
				bg_color_idx = ImGuiCol_ComboBg;
			else if ((flags & ImGuiWindowFlags_Tooltip) != 0 || (flags & ImGuiWindowFlags_Popup) != 0)
				bg_color_idx = ImGuiCol_PopupBg;
			else if ((flags & ImGuiWindowFlags_ChildWindow) != 0)
				bg_color_idx = ImGuiCol_ChildWindowBg;
			ImVec4 bg_color = style.Colors[bg_color_idx];
			if (bg_alpha >= 0.0f)
				bg_color.w = bg_alpha;
			bg_color.w *= style.Alpha;
			if (bg_color.w > 0.0f)
				window->DrawList->AddRectFilled(window->Pos + ImVec2(0, window->TitleBarHeight()), window->Pos + window->Size, ColorConvertFloat4ToU32(bg_color), window_rounding, (flags & ImGuiWindowFlags_NoTitleBar) ? ImGuiCorner_All : ImGuiCorner_BottomLeft | ImGuiCorner_BottomRight);

			// Title bar
			if (!(flags & ImGuiWindowFlags_NoTitleBar))
				window->DrawList->AddRectFilled(title_bar_rect.GetTL(), title_bar_rect.GetBR(), GetColorU32((g.FocusedWindow && window->RootNonPopupWindow == g.FocusedWindow->RootNonPopupWindow) ? ImGuiCol_TitleBgActive : ImGuiCol_TitleBg), window_rounding, ImGuiCorner_TopLeft | ImGuiCorner_TopRight);

			// Menu bar
			if (flags & ImGuiWindowFlags_MenuBar)
			{
				ImRect menu_bar_rect = window->MenuBarRect();
				if (flags & ImGuiWindowFlags_ShowBorders)
					window->DrawList->AddLine(menu_bar_rect.GetBL(), menu_bar_rect.GetBR(), GetColorU32(ImGuiCol_Border));
				window->DrawList->AddRectFilled(menu_bar_rect.GetTL(), menu_bar_rect.GetBR(), GetColorU32(ImGuiCol_MenuBarBg), (flags & ImGuiWindowFlags_NoTitleBar) ? window_rounding : 0.0f, ImGuiCorner_TopLeft | ImGuiCorner_TopRight);
			}

			// Scrollbars
			if (window->ScrollbarX)
				Scrollbar(window, true);
			if (window->ScrollbarY)
				Scrollbar(window, false);

			// Render resize grip
			// (after the input handling so we don't have a frame of latency)
			if (!(flags & ImGuiWindowFlags_NoResize))
			{
				const ImVec2 br = window->Rect().GetBR();
				window->DrawList->PathLineTo(br + ImVec2(-resize_corner_size, -window->BorderSize));
				window->DrawList->PathLineTo(br + ImVec2(-window->BorderSize, -resize_corner_size));
				window->DrawList->PathArcToFast(ImVec2(br.x - window_rounding - window->BorderSize, br.y - window_rounding - window->BorderSize), window_rounding, 0, 3);
				window->DrawList->PathFillConvex(resize_col);
			}

			// Borders
			if (flags & ImGuiWindowFlags_ShowBorders)
			{
				window->DrawList->AddRect(window->Pos + ImVec2(1, 1), window->Pos + window->Size + ImVec2(1, 1), GetColorU32(ImGuiCol_BorderShadow), window_rounding);
				window->DrawList->AddRect(window->Pos, window->Pos + window->Size, GetColorU32(ImGuiCol_Border), window_rounding);
				if (!(flags & ImGuiWindowFlags_NoTitleBar))
					window->DrawList->AddLine(title_bar_rect.GetBL() + ImVec2(1, 0), title_bar_rect.GetBR() - ImVec2(1, 0), GetColorU32(ImGuiCol_Border));
			}
		}

		// Update ContentsRegionMax. All the variable it depends on are set above in this function.
		window->ContentsRegionRect.Min.x = -window->Scroll.x + window->WindowPadding.x;
		window->ContentsRegionRect.Min.y = -window->Scroll.y + window->WindowPadding.y + window->TitleBarHeight() + window->MenuBarHeight();
		window->ContentsRegionRect.Max.x = -window->Scroll.x - window->WindowPadding.x + (window->SizeContentsExplicit.x != 0.0f ? window->SizeContentsExplicit.x : (window->Size.x - window->ScrollbarSizes.x));
		window->ContentsRegionRect.Max.y = -window->Scroll.y - window->WindowPadding.y + (window->SizeContentsExplicit.y != 0.0f ? window->SizeContentsExplicit.y : (window->Size.y - window->ScrollbarSizes.y));

		// Setup drawing context
		window->DC.IndentX = 0.0f + window->WindowPadding.x - window->Scroll.x;
		window->DC.GroupOffsetX = 0.0f;
		window->DC.ColumnsOffsetX = 0.0f;
		window->DC.CursorStartPos = window->Pos + ImVec2(window->DC.IndentX + window->DC.ColumnsOffsetX, window->TitleBarHeight() + window->MenuBarHeight() + window->WindowPadding.y - window->Scroll.y);
		window->DC.CursorPos = window->DC.CursorStartPos;
		window->DC.CursorPosPrevLine = window->DC.CursorPos;
		window->DC.CursorMaxPos = window->DC.CursorStartPos;
		window->DC.CurrentLineHeight = window->DC.PrevLineHeight = 0.0f;
		window->DC.CurrentLineTextBaseOffset = window->DC.PrevLineTextBaseOffset = 0.0f;
		window->DC.MenuBarAppending = false;
		window->DC.MenuBarOffsetX = ImMax(window->WindowPadding.x, style.ItemSpacing.x);
		window->DC.LogLinePosY = window->DC.CursorPos.y - 9999.0f;
		window->DC.ChildWindows.resize(0);
		window->DC.LayoutType = ImGuiLayoutType_Vertical;
		window->DC.ItemWidth = window->ItemWidthDefault;
		window->DC.TextWrapPos = -1.0f; // disabled
		window->DC.AllowKeyboardFocus = true;
		window->DC.ButtonRepeat = false;
		window->DC.ItemWidthStack.resize(0);
		window->DC.AllowKeyboardFocusStack.resize(0);
		window->DC.ButtonRepeatStack.resize(0);
		window->DC.TextWrapPosStack.resize(0);
		window->DC.ColumnsCurrent = 0;
		window->DC.ColumnsCount = 1;
		window->DC.ColumnsStartPosY = window->DC.CursorPos.y;
		window->DC.ColumnsCellMinY = window->DC.ColumnsCellMaxY = window->DC.ColumnsStartPosY;
		window->DC.TreeDepth = 0;
		window->DC.StateStorage = &window->StateStorage;
		window->DC.GroupStack.resize(0);
		window->DC.ColorEditMode = ImGuiColorEditMode_UserSelect;
		window->MenuColumns.Update(3, style.ItemSpacing.x, !window_was_active);

		if (window->AutoFitFramesX > 0)
			window->AutoFitFramesX--;
		if (window->AutoFitFramesY > 0)
			window->AutoFitFramesY--;

		// New windows appears in front (we need to do that AFTER setting DC.CursorStartPos so our initial navigation reference rectangle can start around there)
		if (!window_was_active && !(flags & ImGuiWindowFlags_NoFocusOnAppearing))
			if (!(flags & (ImGuiWindowFlags_ChildWindow | ImGuiWindowFlags_Tooltip)) || (flags & ImGuiWindowFlags_Popup))
				FocusWindow(window);

		// Title bar
		if (!(flags & ImGuiWindowFlags_NoTitleBar))
		{
			if (p_open != NULL)
			{
				const float pad = 2.0f;
				const float rad = (window->TitleBarHeight() - pad * 2.0f) * 0.5f;
				if (CloseButton(window->GetID("#CLOSE"), window->Rect().GetTR() + ImVec2(-pad - rad, pad + rad), rad))
					*p_open = false;
			}

			const ImVec2 text_size = CalcTextSize(name, NULL, true);
			if (!(flags & ImGuiWindowFlags_NoCollapse))
				RenderCollapseTriangle(window->Pos + style.FramePadding, !window->Collapsed, 1.0f);

			ImVec2 text_min = window->Pos;
			ImVec2 text_max = window->Pos + ImVec2(window->Size.x, style.FramePadding.y * 2 + text_size.y);
			ImRect clip_rect;
			clip_rect.Max = ImVec2(window->Pos.x + window->Size.x - (p_open ? title_bar_rect.GetHeight() - 3 : style.FramePadding.x), text_max.y); // Match the size of CloseWindowButton()
			float pad_left = (flags & ImGuiWindowFlags_NoCollapse) == 0 ? (style.FramePadding.x + g.FontSize + style.ItemInnerSpacing.x) : style.FramePadding.x;
			float pad_right = (p_open != NULL) ? (style.FramePadding.x + g.FontSize + style.ItemInnerSpacing.x) : style.FramePadding.x;
			if (style.WindowTitleAlign.x > 0.0f) pad_right = ImLerp(pad_right, pad_left, style.WindowTitleAlign.x);
			text_min.x += pad_left;
			text_max.x -= pad_right;
			clip_rect.Min = ImVec2(text_min.x, window->Pos.y);
			RenderTextClipped(text_min, text_max, name, NULL, &text_size, style.WindowTitleAlign, &clip_rect);
		}

		// Save clipped aabb so we can access it in constant-time in FindHoveredWindow()
		window->WindowRectClipped = window->Rect();
		window->WindowRectClipped.Clip(window->ClipRect);

		// Pressing CTRL+C while holding on a window copy its content to the clipboard
		// This works but 1. doesn't handle multiple Begin/End pairs, 2. recursing into another Begin/End pair - so we need to work that out and add better logging scope.
		// Maybe we can support CTRL+C on every element?
		/*
		if (g.ActiveId == move_id)
		if (g.IO.KeyCtrl && IsKeyPressedMap(ImGuiKey_C))
		ImGui::LogToClipboard();
		*/
	}

	// Inner clipping rectangle
	// We set this up after processing the resize grip so that our clip rectangle doesn't lag by a frame
	// Note that if our window is collapsed we will end up with a null clipping rectangle which is the correct behavior.
	const ImRect title_bar_rect = window->TitleBarRect();
	const float border_size = window->BorderSize;
	ImRect clip_rect; // Force round to ensure that e.g. (int)(max.x-min.x) in user's render code produce correct result.
	clip_rect.Min.x = ImFloor(0.5f + title_bar_rect.Min.x + ImMax(border_size, ImFloor(window->WindowPadding.x*0.5f)));
	clip_rect.Min.y = ImFloor(0.5f + title_bar_rect.Max.y + window->MenuBarHeight() + border_size);
	clip_rect.Max.x = ImFloor(0.5f + window->Pos.x + window->Size.x - window->ScrollbarSizes.x - ImMax(border_size, ImFloor(window->WindowPadding.x*0.5f)));
	clip_rect.Max.y = ImFloor(0.5f + window->Pos.y + window->Size.y - window->ScrollbarSizes.y - border_size);
	PushClipRect(clip_rect.Min, clip_rect.Max, true);

	// Clear 'accessed' flag last thing
	if (first_begin_of_the_frame)
		window->Accessed = false;
	window->BeginCount++;
	g.SetNextWindowSizeConstraint = false;

	// Child window can be out of sight and have "negative" clip windows.
	// Mark them as collapsed so commands are skipped earlier (we can't manually collapse because they have no title bar).
	if (flags & ImGuiWindowFlags_ChildWindow)
	{
		IM_ASSERT((flags & ImGuiWindowFlags_NoTitleBar) != 0);
		window->Collapsed = parent_window && parent_window->Collapsed;

		if (!(flags & ImGuiWindowFlags_AlwaysAutoResize) && window->AutoFitFramesX <= 0 && window->AutoFitFramesY <= 0)
			window->Collapsed |= (window->WindowRectClipped.Min.x >= window->WindowRectClipped.Max.x || window->WindowRectClipped.Min.y >= window->WindowRectClipped.Max.y);

		// We also hide the window from rendering because we've already added its border to the command list.
		// (we could perform the check earlier in the function but it is simpler at this point)
		if (window->Collapsed)
			window->Active = false;
	}
	if (style.Alpha <= 0.0f)
		window->Active = false;

	// Return false if we don't intend to display anything to allow user to perform an early out optimization
	window->SkipItems = (window->Collapsed || !window->Active) && window->AutoFitFramesX <= 0 && window->AutoFitFramesY <= 0;
	return !window->SkipItems;
}

void ImGui::End()
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = g.CurrentWindow;

	if (window->DC.ColumnsCount != 1) // close columns set if any is open
		Columns(1, "#CLOSECOLUMNS");
	PopClipRect();   // inner window clip rectangle

					 // Stop logging
	if (!(window->Flags & ImGuiWindowFlags_ChildWindow))    // FIXME: add more options for scope of logging
		LogFinish();

	// Pop
	// NB: we don't clear 'window->RootWindow'. The pointer is allowed to live until the next call to Begin().
	g.CurrentWindowStack.pop_back();
	if (window->Flags & ImGuiWindowFlags_Popup)
		g.CurrentPopupStack.pop_back();
	CheckStacksSize(window, false);
	SetCurrentWindow(g.CurrentWindowStack.empty() ? NULL : g.CurrentWindowStack.back());
}

// Vertical scrollbar
// The entire piece of code below is rather confusing because:
// - We handle absolute seeking (when first clicking outside the grab) and relative manipulation (afterward or when clicking inside the grab)
// - We store values as normalized ratio and in a form that allows the window content to change while we are holding on a scrollbar
// - We handle both horizontal and vertical scrollbars, which makes the terminology not ideal.
static void Scrollbar(ImGuiWindow* window, bool horizontal)
{
	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;
	const ImGuiID id = window->GetID(horizontal ? "#SCROLLX" : "#SCROLLY");

	// Render background
	bool other_scrollbar = (horizontal ? window->ScrollbarY : window->ScrollbarX);
	float other_scrollbar_size_w = other_scrollbar ? style.ScrollbarSize : 0.0f;
	const ImRect window_rect = window->Rect();
	const float border_size = window->BorderSize;
	ImRect bb = horizontal
		? ImRect(window->Pos.x + border_size, window_rect.Max.y - style.ScrollbarSize, window_rect.Max.x - other_scrollbar_size_w - border_size, window_rect.Max.y - border_size)
		: ImRect(window_rect.Max.x - style.ScrollbarSize, window->Pos.y + border_size, window_rect.Max.x - border_size, window_rect.Max.y - other_scrollbar_size_w - border_size);
	if (!horizontal)
		bb.Min.y += window->TitleBarHeight() + ((window->Flags & ImGuiWindowFlags_MenuBar) ? window->MenuBarHeight() : 0.0f);
	if (bb.GetWidth() <= 0.0f || bb.GetHeight() <= 0.0f)
		return;

	float window_rounding = (window->Flags & ImGuiWindowFlags_ChildWindow) ? style.ChildWindowRounding : style.WindowRounding;
	int window_rounding_corners;
	if (horizontal)
		window_rounding_corners = ImGuiCorner_BottomLeft | (other_scrollbar ? 0 : ImGuiCorner_BottomRight);
	else
		window_rounding_corners = (((window->Flags & ImGuiWindowFlags_NoTitleBar) && !(window->Flags & ImGuiWindowFlags_MenuBar)) ? ImGuiCorner_TopRight : 0) | (other_scrollbar ? 0 : ImGuiCorner_BottomRight);
	window->DrawList->AddRectFilled(bb.Min, bb.Max, ImGui::GetColorU32(ImGuiCol_ScrollbarBg), window_rounding, window_rounding_corners);
	bb.Reduce(ImVec2(ImClamp((float)(int)((bb.Max.x - bb.Min.x - 2.0f) * 0.5f), 0.0f, 3.0f), ImClamp((float)(int)((bb.Max.y - bb.Min.y - 2.0f) * 0.5f), 0.0f, 3.0f)));

	// V denote the main axis of the scrollbar
	float scrollbar_size_v = horizontal ? bb.GetWidth() : bb.GetHeight();
	float scroll_v = horizontal ? window->Scroll.x : window->Scroll.y;
	float win_size_avail_v = (horizontal ? window->Size.x : window->Size.y) - other_scrollbar_size_w;
	float win_size_contents_v = horizontal ? window->SizeContents.x : window->SizeContents.y;

	// The grabable box size generally represent the amount visible (vs the total scrollable amount)
	// But we maintain a minimum size in pixel to allow for the user to still aim inside.
	const float grab_h_pixels = ImMin(ImMax(scrollbar_size_v * ImSaturate(win_size_avail_v / ImMax(win_size_contents_v, win_size_avail_v)), style.GrabMinSize), scrollbar_size_v);
	const float grab_h_norm = grab_h_pixels / scrollbar_size_v;

	// Handle input right away. None of the code of Begin() is relying on scrolling position before calling Scrollbar().
	bool held = false;
	bool hovered = false;
	const bool previously_held = (g.ActiveId == id);
	ImGui::ButtonBehavior(bb, id, &hovered, &held);

	float scroll_max = ImMax(1.0f, win_size_contents_v - win_size_avail_v);
	float scroll_ratio = ImSaturate(scroll_v / scroll_max);
	float grab_v_norm = scroll_ratio * (scrollbar_size_v - grab_h_pixels) / scrollbar_size_v;
	if (held && grab_h_norm < 1.0f)
	{
		float scrollbar_pos_v = horizontal ? bb.Min.x : bb.Min.y;
		float mouse_pos_v = horizontal ? g.IO.MousePos.x : g.IO.MousePos.y;
		float* click_delta_to_grab_center_v = horizontal ? &g.ScrollbarClickDeltaToGrabCenter.x : &g.ScrollbarClickDeltaToGrabCenter.y;

		// Click position in scrollbar normalized space (0.0f->1.0f)
		const float clicked_v_norm = ImSaturate((mouse_pos_v - scrollbar_pos_v) / scrollbar_size_v);
		ImGui::SetHoveredID(id);

		bool seek_absolute = false;
		if (!previously_held)
		{
			// On initial click calculate the distance between mouse and the center of the grab
			if (clicked_v_norm >= grab_v_norm && clicked_v_norm <= grab_v_norm + grab_h_norm)
			{
				*click_delta_to_grab_center_v = clicked_v_norm - grab_v_norm - grab_h_norm * 0.5f;
			}
			else
			{
				seek_absolute = true;
				*click_delta_to_grab_center_v = 0.0f;
			}
		}

		// Apply scroll
		// It is ok to modify Scroll here because we are being called in Begin() after the calculation of SizeContents and before setting up our starting position
		const float scroll_v_norm = ImSaturate((clicked_v_norm - *click_delta_to_grab_center_v - grab_h_norm * 0.5f) / (1.0f - grab_h_norm));
		scroll_v = (float)(int)(0.5f + scroll_v_norm * scroll_max);//(win_size_contents_v - win_size_v));
		if (horizontal)
			window->Scroll.x = scroll_v;
		else
			window->Scroll.y = scroll_v;

		// Update values for rendering
		scroll_ratio = ImSaturate(scroll_v / scroll_max);
		grab_v_norm = scroll_ratio * (scrollbar_size_v - grab_h_pixels) / scrollbar_size_v;

		// Update distance to grab now that we have seeked and saturated
		if (seek_absolute)
			*click_delta_to_grab_center_v = clicked_v_norm - grab_v_norm - grab_h_norm * 0.5f;
	}

	// Render
	const ImU32 grab_col = ImGui::GetColorU32(held ? ImGuiCol_ScrollbarGrabActive : hovered ? ImGuiCol_ScrollbarGrabHovered : ImGuiCol_ScrollbarGrab);
	if (horizontal)
		window->DrawList->AddRectFilled(ImVec2(ImLerp(bb.Min.x, bb.Max.x, grab_v_norm), bb.Min.y), ImVec2(ImLerp(bb.Min.x, bb.Max.x, grab_v_norm) + grab_h_pixels, bb.Max.y), grab_col, style.ScrollbarRounding);
	else
		window->DrawList->AddRectFilled(ImVec2(bb.Min.x, ImLerp(bb.Min.y, bb.Max.y, grab_v_norm)), ImVec2(bb.Max.x, ImLerp(bb.Min.y, bb.Max.y, grab_v_norm) + grab_h_pixels), grab_col, style.ScrollbarRounding);
}

// Moving window to front of display (which happens to be back of our sorted list)
void ImGui::FocusWindow(ImGuiWindow* window)
{
	ImGuiContext& g = *GImGui;

	// Always mark the window we passed as focused. This is used for keyboard interactions such as tabbing.
	g.FocusedWindow = window;

	// Passing NULL allow to disable keyboard focus
	if (!window)
		return;

	// And move its root window to the top of the pile
	if (window->RootWindow)
		window = window->RootWindow;

	// Steal focus on active widgets
	if (window->Flags & ImGuiWindowFlags_Popup) // FIXME: This statement should be unnecessary. Need further testing before removing it..
		if (g.ActiveId != 0 && g.ActiveIdWindow && g.ActiveIdWindow->RootWindow != window)
			ClearActiveID();

	// Bring to front
	if ((window->Flags & ImGuiWindowFlags_NoBringToFrontOnFocus) || g.Windows.back() == window)
		return;
	for (int i = 0; i < g.Windows.Size; i++)
		if (g.Windows[i] == window)
		{
			g.Windows.erase(g.Windows.begin() + i);
			break;
		}
	g.Windows.push_back(window);
}

void ImGui::PushItemWidth(float item_width)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->DC.ItemWidth = (item_width == 0.0f ? window->ItemWidthDefault : item_width);
	window->DC.ItemWidthStack.push_back(window->DC.ItemWidth);
}

static void PushMultiItemsWidths(int components, float w_full)
{
	ImGuiWindow* window = ImGui::GetCurrentWindow();
	const ImGuiStyle& style = GImGui->Style;
	if (w_full <= 0.0f)
		w_full = ImGui::CalcItemWidth();
	const float w_item_one = ImMax(1.0f, (float)(int)((w_full - (style.ItemInnerSpacing.x) * (components - 1)) / (float)components));
	const float w_item_last = ImMax(1.0f, (float)(int)(w_full - (w_item_one + style.ItemInnerSpacing.x) * (components - 1)));
	window->DC.ItemWidthStack.push_back(w_item_last);
	for (int i = 0; i < components - 1; i++)
		window->DC.ItemWidthStack.push_back(w_item_one);
	window->DC.ItemWidth = window->DC.ItemWidthStack.back();
}

void ImGui::PopItemWidth()
{
	ImGuiWindow* window = GetCurrentWindow();
	window->DC.ItemWidthStack.pop_back();
	window->DC.ItemWidth = window->DC.ItemWidthStack.empty() ? window->ItemWidthDefault : window->DC.ItemWidthStack.back();
}

float ImGui::CalcItemWidth()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	float w = window->DC.ItemWidth;
	if (w < 0.0f)
	{
		// Align to a right-side limit. We include 1 frame padding in the calculation because this is how the width is always used (we add 2 frame padding to it), but we could move that responsibility to the widget as well.
		float width_to_right_edge = GetContentRegionAvail().x;
		w = ImMax(1.0f, width_to_right_edge + w);
	}
	w = (float)(int)w;
	return w;
}

static ImFont* GetDefaultFont()
{
	ImGuiContext& g = *GImGui;
	return g.IO.FontDefault ? g.IO.FontDefault : g.IO.Fonts->Fonts[0];
}

static void SetCurrentFont(ImFont* font)
{
	ImGuiContext& g = *GImGui;
	IM_ASSERT(font && font->IsLoaded());    // Font Atlas not created. Did you call io.Fonts->GetTexDataAsRGBA32 / GetTexDataAsAlpha8 ?
	IM_ASSERT(font->Scale > 0.0f);
	g.Font = font;
	g.FontBaseSize = g.IO.FontGlobalScale * g.Font->FontSize * g.Font->Scale;
	g.FontSize = g.CurrentWindow ? g.CurrentWindow->CalcFontSize() : 0.0f;
	g.FontTexUvWhitePixel = g.Font->ContainerAtlas->TexUvWhitePixel;
}

void ImGui::PushFont(ImFont* font)
{
	ImGuiContext& g = *GImGui;
	if (!font)
		font = GetDefaultFont();
	SetCurrentFont(font);
	g.FontStack.push_back(font);
	g.CurrentWindow->DrawList->PushTextureID(font->ContainerAtlas->TexID);
}

void  ImGui::PopFont()
{
	ImGuiContext& g = *GImGui;
	g.CurrentWindow->DrawList->PopTextureID();
	g.FontStack.pop_back();
	SetCurrentFont(g.FontStack.empty() ? GetDefaultFont() : g.FontStack.back());
}

void ImGui::PushAllowKeyboardFocus(bool allow_keyboard_focus)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->DC.AllowKeyboardFocus = allow_keyboard_focus;
	window->DC.AllowKeyboardFocusStack.push_back(allow_keyboard_focus);
}

void ImGui::PopAllowKeyboardFocus()
{
	ImGuiWindow* window = GetCurrentWindow();
	window->DC.AllowKeyboardFocusStack.pop_back();
	window->DC.AllowKeyboardFocus = window->DC.AllowKeyboardFocusStack.empty() ? true : window->DC.AllowKeyboardFocusStack.back();
}

void ImGui::PushButtonRepeat(bool repeat)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->DC.ButtonRepeat = repeat;
	window->DC.ButtonRepeatStack.push_back(repeat);
}

void ImGui::PopButtonRepeat()
{
	ImGuiWindow* window = GetCurrentWindow();
	window->DC.ButtonRepeatStack.pop_back();
	window->DC.ButtonRepeat = window->DC.ButtonRepeatStack.empty() ? false : window->DC.ButtonRepeatStack.back();
}

void ImGui::PushTextWrapPos(float wrap_pos_x)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->DC.TextWrapPos = wrap_pos_x;
	window->DC.TextWrapPosStack.push_back(wrap_pos_x);
}

void ImGui::PopTextWrapPos()
{
	ImGuiWindow* window = GetCurrentWindow();
	window->DC.TextWrapPosStack.pop_back();
	window->DC.TextWrapPos = window->DC.TextWrapPosStack.empty() ? -1.0f : window->DC.TextWrapPosStack.back();
}

void ImGui::PushStyleColor(ImGuiCol idx, const ImVec4& col)
{
	ImGuiContext& g = *GImGui;
	ImGuiColMod backup;
	backup.Col = idx;
	backup.BackupValue = g.Style.Colors[idx];
	g.ColorModifiers.push_back(backup);
	g.Style.Colors[idx] = col;
}

void ImGui::PopStyleColor(int count)
{
	ImGuiContext& g = *GImGui;
	while (count > 0)
	{
		ImGuiColMod& backup = g.ColorModifiers.back();
		g.Style.Colors[backup.Col] = backup.BackupValue;
		g.ColorModifiers.pop_back();
		count--;
	}
}

struct ImGuiStyleVarInfo
{
	ImGuiDataType   Type;
	ImU32           Offset;
	void*           GetVarPtr() const { return (void*)((unsigned char*)&GImGui->Style + Offset); }
};

static const ImGuiStyleVarInfo GStyleVarInfo[ImGuiStyleVar_Count_] =
{
	{ ImGuiDataType_Float,  (ImU32)IM_OFFSETOF(ImGuiStyle, Alpha) },
	{ ImGuiDataType_Float2, (ImU32)IM_OFFSETOF(ImGuiStyle, WindowPadding) },
	{ ImGuiDataType_Float,  (ImU32)IM_OFFSETOF(ImGuiStyle, WindowRounding) },
	{ ImGuiDataType_Float2, (ImU32)IM_OFFSETOF(ImGuiStyle, WindowMinSize) },
	{ ImGuiDataType_Float,  (ImU32)IM_OFFSETOF(ImGuiStyle, ChildWindowRounding) },
	{ ImGuiDataType_Float2, (ImU32)IM_OFFSETOF(ImGuiStyle, FramePadding) },
	{ ImGuiDataType_Float,  (ImU32)IM_OFFSETOF(ImGuiStyle, FrameRounding) },
	{ ImGuiDataType_Float2, (ImU32)IM_OFFSETOF(ImGuiStyle, ItemSpacing) },
	{ ImGuiDataType_Float2, (ImU32)IM_OFFSETOF(ImGuiStyle, ItemInnerSpacing) },
	{ ImGuiDataType_Float,  (ImU32)IM_OFFSETOF(ImGuiStyle, IndentSpacing) },
	{ ImGuiDataType_Float,  (ImU32)IM_OFFSETOF(ImGuiStyle, GrabMinSize) },
	{ ImGuiDataType_Float2, (ImU32)IM_OFFSETOF(ImGuiStyle, ButtonTextAlign) },
};

static const ImGuiStyleVarInfo* GetStyleVarInfo(ImGuiStyleVar idx)
{
	IM_ASSERT(idx >= 0 && idx < ImGuiStyleVar_Count_);
	return &GStyleVarInfo[idx];
}

void ImGui::PushStyleVar(ImGuiStyleVar idx, float val)
{
	const ImGuiStyleVarInfo* var_info = GetStyleVarInfo(idx);
	if (var_info->Type == ImGuiDataType_Float)
	{
		float* pvar = (float*)var_info->GetVarPtr();
		GImGui->StyleModifiers.push_back(ImGuiStyleMod(idx, *pvar));
		*pvar = val;
		return;
	}
	IM_ASSERT(0); // Called function with wrong-type? Variable is not a float.
}

void ImGui::PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)
{
	const ImGuiStyleVarInfo* var_info = GetStyleVarInfo(idx);
	if (var_info->Type == ImGuiDataType_Float2)
	{
		ImVec2* pvar = (ImVec2*)var_info->GetVarPtr();
		GImGui->StyleModifiers.push_back(ImGuiStyleMod(idx, *pvar));
		*pvar = val;
		return;
	}
	IM_ASSERT(0); // Called function with wrong-type? Variable is not a ImVec2.
}

void ImGui::PopStyleVar(int count)
{
	ImGuiContext& g = *GImGui;
	while (count > 0)
	{
		ImGuiStyleMod& backup = g.StyleModifiers.back();
		const ImGuiStyleVarInfo* info = GetStyleVarInfo(backup.VarIdx);
		if (info->Type == ImGuiDataType_Float)          (*(float*)info->GetVarPtr()) = backup.BackupFloat[0];
		else if (info->Type == ImGuiDataType_Float2)    (*(ImVec2*)info->GetVarPtr()) = ImVec2(backup.BackupFloat[0], backup.BackupFloat[1]);
		else if (info->Type == ImGuiDataType_Int)       (*(int*)info->GetVarPtr()) = backup.BackupInt[0];
		g.StyleModifiers.pop_back();
		count--;
	}
}

const char* ImGui::GetStyleColName(ImGuiCol idx)
{
	// Create switch-case from enum with regexp: ImGuiCol_{.*}, --> case ImGuiCol_\1: return "\1";
	switch (idx)
	{
	case ImGuiCol_Text: return "Text";
	case ImGuiCol_TextDisabled: return "TextDisabled";
	case ImGuiCol_WindowBg: return "WindowBg";
	case ImGuiCol_ChildWindowBg: return "ChildWindowBg";
	case ImGuiCol_PopupBg: return "PopupBg";
	case ImGuiCol_Border: return "Border";
	case ImGuiCol_BorderShadow: return "BorderShadow";
	case ImGuiCol_FrameBg: return "FrameBg";
	case ImGuiCol_FrameBgHovered: return "FrameBgHovered";
	case ImGuiCol_FrameBgActive: return "FrameBgActive";
	case ImGuiCol_TitleBg: return "TitleBg";
	case ImGuiCol_TitleBgCollapsed: return "TitleBgCollapsed";
	case ImGuiCol_TitleBgActive: return "TitleBgActive";
	case ImGuiCol_MenuBarBg: return "MenuBarBg";
	case ImGuiCol_ScrollbarBg: return "ScrollbarBg";
	case ImGuiCol_ScrollbarGrab: return "ScrollbarGrab";
	case ImGuiCol_ScrollbarGrabHovered: return "ScrollbarGrabHovered";
	case ImGuiCol_ScrollbarGrabActive: return "ScrollbarGrabActive";
	case ImGuiCol_ComboBg: return "ComboBg";
	case ImGuiCol_CheckMark: return "CheckMark";
	case ImGuiCol_SliderGrab: return "SliderGrab";
	case ImGuiCol_SliderGrabActive: return "SliderGrabActive";
	case ImGuiCol_Button: return "Button";
	case ImGuiCol_ButtonHovered: return "ButtonHovered";
	case ImGuiCol_ButtonActive: return "ButtonActive";
	case ImGuiCol_Header: return "Header";
	case ImGuiCol_HeaderHovered: return "HeaderHovered";
	case ImGuiCol_HeaderActive: return "HeaderActive";
	case ImGuiCol_Column: return "Column";
	case ImGuiCol_ColumnHovered: return "ColumnHovered";
	case ImGuiCol_ColumnActive: return "ColumnActive";
	case ImGuiCol_ResizeGrip: return "ResizeGrip";
	case ImGuiCol_ResizeGripHovered: return "ResizeGripHovered";
	case ImGuiCol_ResizeGripActive: return "ResizeGripActive";
	case ImGuiCol_CloseButton: return "CloseButton";
	case ImGuiCol_CloseButtonHovered: return "CloseButtonHovered";
	case ImGuiCol_CloseButtonActive: return "CloseButtonActive";
	case ImGuiCol_PlotLines: return "PlotLines";
	case ImGuiCol_PlotLinesHovered: return "PlotLinesHovered";
	case ImGuiCol_PlotHistogram: return "PlotHistogram";
	case ImGuiCol_PlotHistogramHovered: return "PlotHistogramHovered";
	case ImGuiCol_TextSelectedBg: return "TextSelectedBg";
	case ImGuiCol_ModalWindowDarkening: return "ModalWindowDarkening";
	}
	IM_ASSERT(0);
	return "Unknown";
}

bool ImGui::IsWindowHovered()
{
	ImGuiContext& g = *GImGui;
	return g.HoveredWindow == g.CurrentWindow && IsWindowContentHoverable(g.HoveredRootWindow);
}

bool ImGui::IsWindowFocused()
{
	ImGuiContext& g = *GImGui;
	return g.FocusedWindow == g.CurrentWindow;
}

bool ImGui::IsRootWindowFocused()
{
	ImGuiContext& g = *GImGui;
	return g.FocusedWindow == g.CurrentWindow->RootWindow;
}

bool ImGui::IsRootWindowOrAnyChildFocused()
{
	ImGuiContext& g = *GImGui;
	return g.FocusedWindow && g.FocusedWindow->RootWindow == g.CurrentWindow->RootWindow;
}

bool ImGui::IsRootWindowOrAnyChildHovered()
{
	ImGuiContext& g = *GImGui;
	return g.HoveredRootWindow && (g.HoveredRootWindow == g.CurrentWindow->RootWindow) && IsWindowContentHoverable(g.HoveredRootWindow);
}

float ImGui::GetWindowWidth()
{
	ImGuiWindow* window = GImGui->CurrentWindow;
	return window->Size.x;
}

float ImGui::GetWindowHeight()
{
	ImGuiWindow* window = GImGui->CurrentWindow;
	return window->Size.y;
}

ImVec2 ImGui::GetWindowPos()
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = g.CurrentWindow;
	return window->Pos;
}

static void SetWindowScrollY(ImGuiWindow* window, float new_scroll_y)
{
	window->DC.CursorMaxPos.y += window->Scroll.y;
	window->Scroll.y = new_scroll_y;
	window->DC.CursorMaxPos.y -= window->Scroll.y;
}

static void SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiSetCond cond)
{
	// Test condition (NB: bit 0 is always true) and clear flags for next time
	if (cond && (window->SetWindowPosAllowFlags & cond) == 0)
		return;
	window->SetWindowPosAllowFlags &= ~(ImGuiSetCond_Once | ImGuiSetCond_FirstUseEver | ImGuiSetCond_Appearing);
	window->SetWindowPosCenterWanted = false;

	// Set
	const ImVec2 old_pos = window->Pos;
	window->PosFloat = pos;
	window->Pos = ImVec2((float)(int)window->PosFloat.x, (float)(int)window->PosFloat.y);
	window->DC.CursorPos += (window->Pos - old_pos);    // As we happen to move the window while it is being appended to (which is a bad idea - will smear) let's at least offset the cursor
	window->DC.CursorMaxPos += (window->Pos - old_pos); // And more importantly we need to adjust this so size calculation doesn't get affected.
}

void ImGui::SetWindowPos(const ImVec2& pos, ImGuiSetCond cond)
{
	ImGuiWindow* window = GetCurrentWindowRead();
	SetWindowPos(window, pos, cond);
}

void ImGui::SetWindowPos(const char* name, const ImVec2& pos, ImGuiSetCond cond)
{
	if (ImGuiWindow* window = FindWindowByName(name))
		SetWindowPos(window, pos, cond);
}

ImVec2 ImGui::GetWindowSize()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->Size;
}

static void SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiSetCond cond)
{
	// Test condition (NB: bit 0 is always true) and clear flags for next time
	if (cond && (window->SetWindowSizeAllowFlags & cond) == 0)
		return;
	window->SetWindowSizeAllowFlags &= ~(ImGuiSetCond_Once | ImGuiSetCond_FirstUseEver | ImGuiSetCond_Appearing);

	// Set
	if (size.x > 0.0f)
	{
		window->AutoFitFramesX = 0;
		window->SizeFull.x = size.x;
	}
	else
	{
		window->AutoFitFramesX = 2;
		window->AutoFitOnlyGrows = false;
	}
	if (size.y > 0.0f)
	{
		window->AutoFitFramesY = 0;
		window->SizeFull.y = size.y;
	}
	else
	{
		window->AutoFitFramesY = 2;
		window->AutoFitOnlyGrows = false;
	}
}

void ImGui::SetWindowSize(const ImVec2& size, ImGuiSetCond cond)
{
	SetWindowSize(GImGui->CurrentWindow, size, cond);
}

void ImGui::SetWindowSize(const char* name, const ImVec2& size, ImGuiSetCond cond)
{
	ImGuiWindow* window = FindWindowByName(name);
	if (window)
		SetWindowSize(window, size, cond);
}

static void SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiSetCond cond)
{
	// Test condition (NB: bit 0 is always true) and clear flags for next time
	if (cond && (window->SetWindowCollapsedAllowFlags & cond) == 0)
		return;
	window->SetWindowCollapsedAllowFlags &= ~(ImGuiSetCond_Once | ImGuiSetCond_FirstUseEver | ImGuiSetCond_Appearing);

	// Set
	window->Collapsed = collapsed;
}

void ImGui::SetWindowCollapsed(bool collapsed, ImGuiSetCond cond)
{
	SetWindowCollapsed(GImGui->CurrentWindow, collapsed, cond);
}

bool ImGui::IsWindowCollapsed()
{
	return GImGui->CurrentWindow->Collapsed;
}

void ImGui::SetWindowCollapsed(const char* name, bool collapsed, ImGuiSetCond cond)
{
	ImGuiWindow* window = FindWindowByName(name);
	if (window)
		SetWindowCollapsed(window, collapsed, cond);
}

void ImGui::SetWindowFocus()
{
	FocusWindow(GImGui->CurrentWindow);
}

void ImGui::SetWindowFocus(const char* name)
{
	if (name)
	{
		if (ImGuiWindow* window = FindWindowByName(name))
			FocusWindow(window);
	}
	else
	{
		FocusWindow(NULL);
	}
}

void ImGui::SetNextWindowPos(const ImVec2& pos, ImGuiSetCond cond)
{
	ImGuiContext& g = *GImGui;
	g.SetNextWindowPosVal = pos;
	g.SetNextWindowPosCond = cond ? cond : ImGuiSetCond_Always;
}

void ImGui::SetNextWindowPosCenter(ImGuiSetCond cond)
{
	ImGuiContext& g = *GImGui;
	g.SetNextWindowPosVal = ImVec2(-FLT_MAX, -FLT_MAX);
	g.SetNextWindowPosCond = cond ? cond : ImGuiSetCond_Always;
}

void ImGui::SetNextWindowSize(const ImVec2& size, ImGuiSetCond cond)
{
	ImGuiContext& g = *GImGui;
	g.SetNextWindowSizeVal = size;
	g.SetNextWindowSizeCond = cond ? cond : ImGuiSetCond_Always;
}

void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSizeConstraintCallback custom_callback, void* custom_callback_user_data)
{
	ImGuiContext& g = *GImGui;
	g.SetNextWindowSizeConstraint = true;
	g.SetNextWindowSizeConstraintRect = ImRect(size_min, size_max);
	g.SetNextWindowSizeConstraintCallback = custom_callback;
	g.SetNextWindowSizeConstraintCallbackUserData = custom_callback_user_data;
}

void ImGui::SetNextWindowContentSize(const ImVec2& size)
{
	ImGuiContext& g = *GImGui;
	g.SetNextWindowContentSizeVal = size;
	g.SetNextWindowContentSizeCond = ImGuiSetCond_Always;
}

void ImGui::SetNextWindowContentWidth(float width)
{
	ImGuiContext& g = *GImGui;
	g.SetNextWindowContentSizeVal = ImVec2(width, g.SetNextWindowContentSizeCond ? g.SetNextWindowContentSizeVal.y : 0.0f);
	g.SetNextWindowContentSizeCond = ImGuiSetCond_Always;
}

void ImGui::SetNextWindowCollapsed(bool collapsed, ImGuiSetCond cond)
{
	ImGuiContext& g = *GImGui;
	g.SetNextWindowCollapsedVal = collapsed;
	g.SetNextWindowCollapsedCond = cond ? cond : ImGuiSetCond_Always;
}

void ImGui::SetNextWindowFocus()
{
	ImGuiContext& g = *GImGui;
	g.SetNextWindowFocus = true;
}

// In window space (not screen space!)
ImVec2 ImGui::GetContentRegionMax()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	ImVec2 mx = window->ContentsRegionRect.Max;
	if (window->DC.ColumnsCount != 1)
		mx.x = GetColumnOffset(window->DC.ColumnsCurrent + 1) - window->WindowPadding.x;
	return mx;
}

ImVec2 ImGui::GetContentRegionAvail()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return GetContentRegionMax() - (window->DC.CursorPos - window->Pos);
}

float ImGui::GetContentRegionAvailWidth()
{
	return GetContentRegionAvail().x;
}

// In window space (not screen space!)
ImVec2 ImGui::GetWindowContentRegionMin()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->ContentsRegionRect.Min;
}

ImVec2 ImGui::GetWindowContentRegionMax()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->ContentsRegionRect.Max;
}

float ImGui::GetWindowContentRegionWidth()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->ContentsRegionRect.Max.x - window->ContentsRegionRect.Min.x;
}

float ImGui::GetTextLineHeight()
{
	ImGuiContext& g = *GImGui;
	return g.FontSize;
}

float ImGui::GetTextLineHeightWithSpacing()
{
	ImGuiContext& g = *GImGui;
	return g.FontSize + g.Style.ItemSpacing.y;
}

float ImGui::GetItemsLineHeightWithSpacing()
{
	ImGuiContext& g = *GImGui;
	return g.FontSize + g.Style.FramePadding.y * 2.0f + g.Style.ItemSpacing.y;
}

ImDrawList* ImGui::GetWindowDrawList()
{
	ImGuiWindow* window = GetCurrentWindow();
	return window->DrawList;
}

ImFont* ImGui::GetFont()
{
	return GImGui->Font;
}

float ImGui::GetFontSize()
{
	return GImGui->FontSize;
}

ImVec2 ImGui::GetFontTexUvWhitePixel()
{
	return GImGui->FontTexUvWhitePixel;
}

void ImGui::SetWindowFontScale(float scale)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = GetCurrentWindow();
	window->FontWindowScale = scale;
	g.FontSize = window->CalcFontSize();
}

// User generally sees positions in window coordinates. Internally we store CursorPos in absolute screen coordinates because it is more convenient.
// Conversion happens as we pass the value to user, but it makes our naming convention confusing because GetCursorPos() == (DC.CursorPos - window.Pos). May want to rename 'DC.CursorPos'.
ImVec2 ImGui::GetCursorPos()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->DC.CursorPos - window->Pos + window->Scroll;
}

float ImGui::GetCursorPosX()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->DC.CursorPos.x - window->Pos.x + window->Scroll.x;
}

float ImGui::GetCursorPosY()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->DC.CursorPos.y - window->Pos.y + window->Scroll.y;
}

void ImGui::SetCursorPos(const ImVec2& local_pos)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->DC.CursorPos = window->Pos - window->Scroll + local_pos;
	window->DC.CursorMaxPos = ImMax(window->DC.CursorMaxPos, window->DC.CursorPos);
}

void ImGui::SetCursorPosX(float x)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->DC.CursorPos.x = window->Pos.x - window->Scroll.x + x;
	window->DC.CursorMaxPos.x = ImMax(window->DC.CursorMaxPos.x, window->DC.CursorPos.x);
}

void ImGui::SetCursorPosY(float y)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->DC.CursorPos.y = window->Pos.y - window->Scroll.y + y;
	window->DC.CursorMaxPos.y = ImMax(window->DC.CursorMaxPos.y, window->DC.CursorPos.y);
}

ImVec2 ImGui::GetCursorStartPos()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->DC.CursorStartPos - window->Pos;
}

ImVec2 ImGui::GetCursorScreenPos()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->DC.CursorPos;
}

void ImGui::SetCursorScreenPos(const ImVec2& screen_pos)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->DC.CursorPos = screen_pos;
	window->DC.CursorMaxPos = ImMax(window->DC.CursorMaxPos, window->DC.CursorPos);
}

float ImGui::GetScrollX()
{
	return GImGui->CurrentWindow->Scroll.x;
}

float ImGui::GetScrollY()
{
	return GImGui->CurrentWindow->Scroll.y;
}

float ImGui::GetScrollMaxX()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->SizeContents.x - window->SizeFull.x - window->ScrollbarSizes.x;
}

float ImGui::GetScrollMaxY()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->SizeContents.y - window->SizeFull.y - window->ScrollbarSizes.y;
}

void ImGui::SetScrollX(float scroll_x)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->ScrollTarget.x = scroll_x;
	window->ScrollTargetCenterRatio.x = 0.0f;
}

void ImGui::SetScrollY(float scroll_y)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->ScrollTarget.y = scroll_y + window->TitleBarHeight() + window->MenuBarHeight(); // title bar height canceled out when using ScrollTargetRelY
	window->ScrollTargetCenterRatio.y = 0.0f;
}

void ImGui::SetScrollFromPosY(float pos_y, float center_y_ratio)
{
	// We store a target position so centering can occur on the next frame when we are guaranteed to have a known window size
	ImGuiWindow* window = GetCurrentWindow();
	IM_ASSERT(center_y_ratio >= 0.0f && center_y_ratio <= 1.0f);
	window->ScrollTarget.y = (float)(int)(pos_y + window->Scroll.y);
	if (center_y_ratio <= 0.0f && window->ScrollTarget.y <= window->WindowPadding.y)    // Minor hack to make "scroll to top" take account of WindowPadding, else it would scroll to (WindowPadding.y - ItemSpacing.y)
		window->ScrollTarget.y = 0.0f;
	window->ScrollTargetCenterRatio.y = center_y_ratio;
}

// center_y_ratio: 0.0f top of last item, 0.5f vertical center of last item, 1.0f bottom of last item.
void ImGui::SetScrollHere(float center_y_ratio)
{
	ImGuiWindow* window = GetCurrentWindow();
	float target_y = window->DC.CursorPosPrevLine.y + (window->DC.PrevLineHeight * center_y_ratio) + (GImGui->Style.ItemSpacing.y * (center_y_ratio - 0.5f) * 2.0f); // Precisely aim above, in the middle or below the last line.
	SetScrollFromPosY(target_y - window->Pos.y, center_y_ratio);
}

void ImGui::SetKeyboardFocusHere(int offset)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->FocusIdxAllRequestNext = window->FocusIdxAllCounter + 1 + offset;
	window->FocusIdxTabRequestNext = INT_MAX;
}

void ImGui::SetStateStorage(ImGuiStorage* tree)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->DC.StateStorage = tree ? tree : &window->StateStorage;
}

ImGuiStorage* ImGui::GetStateStorage()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->DC.StateStorage;
}

void ImGui::TextV(const char* fmt, va_list args)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return;

	ImGuiContext& g = *GImGui;
	const char* text_end = g.TempBuffer + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
	TextUnformatted(g.TempBuffer, text_end);
}

void ImGui::Text(const char* fmt, ...)
{
	va_list args;
	va_start(args, fmt);
	TextV(fmt, args);
	va_end(args);
}

void ImGui::TextColoredV(const ImVec4& col, const char* fmt, va_list args)
{
	PushStyleColor(ImGuiCol_Text, col);
	TextV(fmt, args);
	PopStyleColor();
}

void ImGui::TextColored(const ImVec4& col, const char* fmt, ...)
{
	va_list args;
	va_start(args, fmt);
	TextColoredV(col, fmt, args);
	va_end(args);
}

void ImGui::TextDisabledV(const char* fmt, va_list args)
{
	PushStyleColor(ImGuiCol_Text, GImGui->Style.Colors[ImGuiCol_TextDisabled]);
	TextV(fmt, args);
	PopStyleColor();
}

void ImGui::TextDisabled(const char* fmt, ...)
{
	va_list args;
	va_start(args, fmt);
	TextDisabledV(fmt, args);
	va_end(args);
}

void ImGui::TextWrappedV(const char* fmt, va_list args)
{
	bool need_wrap = (GImGui->CurrentWindow->DC.TextWrapPos < 0.0f);    // Keep existing wrap position is one ia already set
	if (need_wrap) PushTextWrapPos(0.0f);
	TextV(fmt, args);
	if (need_wrap) PopTextWrapPos();
}

void ImGui::TextWrapped(const char* fmt, ...)
{
	va_list args;
	va_start(args, fmt);
	TextWrappedV(fmt, args);
	va_end(args);
}

void ImGui::TextUnformatted(const char* text, const char* text_end)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return;

	ImGuiContext& g = *GImGui;
	IM_ASSERT(text != NULL);
	const char* text_begin = text;
	if (text_end == NULL)
		text_end = text + strlen(text); // FIXME-OPT

	const float wrap_pos_x = window->DC.TextWrapPos;
	const bool wrap_enabled = wrap_pos_x >= 0.0f;
	if (text_end - text > 2000 && !wrap_enabled)
	{
		// Long text!
		// Perform manual coarse clipping to optimize for long multi-line text
		// From this point we will only compute the width of lines that are visible. Optimization only available when word-wrapping is disabled.
		// We also don't vertically center the text within the line full height, which is unlikely to matter because we are likely the biggest and only item on the line.
		const char* line = text;
		const float line_height = GetTextLineHeight();
		const ImVec2 text_pos = window->DC.CursorPos + ImVec2(0.0f, window->DC.CurrentLineTextBaseOffset);
		const ImRect clip_rect = window->ClipRect;
		ImVec2 text_size(0, 0);

		if (text_pos.y <= clip_rect.Max.y)
		{
			ImVec2 pos = text_pos;

			// Lines to skip (can't skip when logging text)
			if (!g.LogEnabled)
			{
				int lines_skippable = (int)((clip_rect.Min.y - text_pos.y) / line_height);
				if (lines_skippable > 0)
				{
					int lines_skipped = 0;
					while (line < text_end && lines_skipped < lines_skippable)
					{
						const char* line_end = strchr(line, '\n');
						if (!line_end)
							line_end = text_end;
						line = line_end + 1;
						lines_skipped++;
					}
					pos.y += lines_skipped * line_height;
				}
			}

			// Lines to render
			if (line < text_end)
			{
				ImRect line_rect(pos, pos + ImVec2(FLT_MAX, line_height));
				while (line < text_end)
				{
					const char* line_end = strchr(line, '\n');
					if (IsClippedEx(line_rect, NULL, false))
						break;

					const ImVec2 line_size = CalcTextSize(line, line_end, false);
					text_size.x = ImMax(text_size.x, line_size.x);
					RenderText(pos, line, line_end, false);
					if (!line_end)
						line_end = text_end;
					line = line_end + 1;
					line_rect.Min.y += line_height;
					line_rect.Max.y += line_height;
					pos.y += line_height;
				}

				// Count remaining lines
				int lines_skipped = 0;
				while (line < text_end)
				{
					const char* line_end = strchr(line, '\n');
					if (!line_end)
						line_end = text_end;
					line = line_end + 1;
					lines_skipped++;
				}
				pos.y += lines_skipped * line_height;
			}

			text_size.y += (pos - text_pos).y;
		}

		ImRect bb(text_pos, text_pos + text_size);
		ItemSize(bb);
		ItemAdd(bb, NULL);
	}
	else
	{
		const float wrap_width = wrap_enabled ? CalcWrapWidthForPos(window->DC.CursorPos, wrap_pos_x) : 0.0f;
		const ImVec2 text_size = CalcTextSize(text_begin, text_end, false, wrap_width);

		// Account of baseline offset
		ImVec2 text_pos(window->DC.CursorPos.x, window->DC.CursorPos.y + window->DC.CurrentLineTextBaseOffset);
		ImRect bb(text_pos, text_pos + text_size);
		ItemSize(text_size);
		if (!ItemAdd(bb, NULL))
			return;

		// Render (we don't hide text after ## in this end-user function)
		RenderTextWrapped(bb.Min, text_begin, text_end, wrap_width);
	}
}

void ImGui::AlignFirstTextHeightToWidgets()
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return;

	// Declare a dummy item size to that upcoming items that are smaller will center-align on the newly expanded line height.
	ImGuiContext& g = *GImGui;
	ItemSize(ImVec2(0, g.FontSize + g.Style.FramePadding.y * 2), g.Style.FramePadding.y);
	SameLine(0, 0);
}

// Add a label+text combo aligned to other label+value widgets
void ImGui::LabelTextV(const char* label, const char* fmt, va_list args)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;
	const float w = CalcItemWidth();

	const ImVec2 label_size = CalcTextSize(label, NULL, true);
	const ImRect value_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y * 2));
	const ImRect total_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w + (label_size.x > 0.0f ? style.ItemInnerSpacing.x : 0.0f), style.FramePadding.y * 2) + label_size);
	ItemSize(total_bb, style.FramePadding.y);
	if (!ItemAdd(total_bb, NULL))
		return;

	// Render
	const char* value_text_begin = &g.TempBuffer[0];
	const char* value_text_end = value_text_begin + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
	RenderTextClipped(value_bb.Min, value_bb.Max, value_text_begin, value_text_end, NULL, ImVec2(0.0f, 0.5f));
	if (label_size.x > 0.0f)
		RenderText(ImVec2(value_bb.Max.x + style.ItemInnerSpacing.x, value_bb.Min.y + style.FramePadding.y), label);
}

void ImGui::LabelText(const char* label, const char* fmt, ...)
{
	va_list args;
	va_start(args, fmt);
	LabelTextV(label, fmt, args);
	va_end(args);
}

static inline bool IsWindowContentHoverable(ImGuiWindow* window)
{
	// An active popup disable hovering on other windows (apart from its own children)
	ImGuiContext& g = *GImGui;
	if (ImGuiWindow* focused_window = g.FocusedWindow)
		if (ImGuiWindow* focused_root_window = focused_window->RootWindow)
			if ((focused_root_window->Flags & ImGuiWindowFlags_Popup) != 0 && focused_root_window->WasActive && focused_root_window != window->RootWindow)
				return false;

	return true;
}

bool ImGui::ButtonBehavior(const ImRect& bb, ImGuiID id, bool* out_hovered, bool* out_held, ImGuiButtonFlags flags)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = GetCurrentWindow();

	if (flags & ImGuiButtonFlags_Disabled)
	{
		if (out_hovered) *out_hovered = false;
		if (out_held) *out_held = false;
		if (g.ActiveId == id) ClearActiveID();
		return false;
	}

	if ((flags & (ImGuiButtonFlags_PressedOnClickRelease | ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags_PressedOnRelease | ImGuiButtonFlags_PressedOnDoubleClick)) == 0)
		flags |= ImGuiButtonFlags_PressedOnClickRelease;

	bool pressed = false;
	bool hovered = IsHovered(bb, id, (flags & ImGuiButtonFlags_FlattenChilds) != 0);
	if (hovered)
	{
		SetHoveredID(id);
		if (!(flags & ImGuiButtonFlags_NoKeyModifiers) || (!g.IO.KeyCtrl && !g.IO.KeyShift && !g.IO.KeyAlt))
		{
			//                        | CLICKING        | HOLDING with ImGuiButtonFlags_Repeat
			// PressedOnClickRelease  |  <on release>*  |  <on repeat> <on repeat> .. (NOT on release)  <-- MOST COMMON! (*) only if both click/release were over bounds
			// PressedOnClick         |  <on click>     |  <on click> <on repeat> <on repeat> ..
			// PressedOnRelease       |  <on release>   |  <on repeat> <on repeat> .. (NOT on release)
			// PressedOnDoubleClick   |  <on dclick>    |  <on dclick> <on repeat> <on repeat> ..
			if ((flags & ImGuiButtonFlags_PressedOnClickRelease) && g.IO.MouseClicked[0])
			{
				SetActiveID(id, window); // Hold on ID
				FocusWindow(window);
				g.ActiveIdClickOffset = g.IO.MousePos - bb.Min;
			}
			if (((flags & ImGuiButtonFlags_PressedOnClick) && g.IO.MouseClicked[0]) || ((flags & ImGuiButtonFlags_PressedOnDoubleClick) && g.IO.MouseDoubleClicked[0]))
			{
				pressed = true;
				ClearActiveID();
				FocusWindow(window);
			}
			if ((flags & ImGuiButtonFlags_PressedOnRelease) && g.IO.MouseReleased[0])
			{
				if (!((flags & ImGuiButtonFlags_Repeat) && g.IO.MouseDownDurationPrev[0] >= g.IO.KeyRepeatDelay))  // Repeat mode trumps <on release>
					pressed = true;
				ClearActiveID();
			}

			// 'Repeat' mode acts when held regardless of _PressedOn flags (see table above). 
			// Relies on repeat logic of IsMouseClicked() but we may as well do it ourselves if we end up exposing finer RepeatDelay/RepeatRate settings.
			if ((flags & ImGuiButtonFlags_Repeat) && g.ActiveId == id && g.IO.MouseDownDuration[0] > 0.0f && IsMouseClicked(0, true))
				pressed = true;
		}
	}

	bool held = false;
	if (g.ActiveId == id)
	{
		if (g.IO.MouseDown[0])
		{
			held = true;
		}
		else
		{
			if (hovered && (flags & ImGuiButtonFlags_PressedOnClickRelease))
				if (!((flags & ImGuiButtonFlags_Repeat) && g.IO.MouseDownDurationPrev[0] >= g.IO.KeyRepeatDelay))  // Repeat mode trumps <on release>
					pressed = true;
			ClearActiveID();
		}
	}

	// AllowOverlap mode (rarely used) requires previous frame HoveredId to be null or to match. This allows using patterns where a later submitted widget overlaps a previous one.
	if (hovered && (flags & ImGuiButtonFlags_AllowOverlapMode) && (g.HoveredIdPreviousFrame != id && g.HoveredIdPreviousFrame != 0))
		hovered = pressed = held = false;

	if (out_hovered) *out_hovered = hovered;
	if (out_held) *out_held = held;

	return pressed;
}

bool ImGui::ButtonEx(const char* label, const ImVec2& size_arg, ImGuiButtonFlags flags)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;
	const ImGuiID id = window->GetID(label);
	const ImVec2 label_size = CalcTextSize(label, NULL, true);

	ImVec2 pos = window->DC.CursorPos;
	if ((flags & ImGuiButtonFlags_AlignTextBaseLine) && style.FramePadding.y < window->DC.CurrentLineTextBaseOffset) // Try to vertically align buttons that are smaller/have no padding so that text baseline matches (bit hacky, since it shouldn't be a flag)
		pos.y += window->DC.CurrentLineTextBaseOffset - style.FramePadding.y;
	ImVec2 size = CalcItemSize(size_arg, label_size.x + style.FramePadding.x * 2.0f, label_size.y + style.FramePadding.y * 2.0f);

	const ImRect bb(pos, pos + size);
	ItemSize(bb, style.FramePadding.y);
	if (!ItemAdd(bb, &id))
		return false;

	if (window->DC.ButtonRepeat) flags |= ImGuiButtonFlags_Repeat;
	bool hovered, held;
	bool pressed = ButtonBehavior(bb, id, &hovered, &held, flags);

	// Render
	const ImU32 col = GetColorU32((hovered && held) ? ImGuiCol_ButtonActive : hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button);
	RenderFrame(bb.Min, bb.Max, col, true, style.FrameRounding);
	RenderTextClipped(bb.Min + style.FramePadding, bb.Max - style.FramePadding, label, NULL, &label_size, style.ButtonTextAlign, &bb);

	// Automatically close popups
	//if (pressed && !(flags & ImGuiButtonFlags_DontClosePopups) && (window->Flags & ImGuiWindowFlags_Popup))
	//    CloseCurrentPopup();

	return pressed;
}

bool ImGui::Button(const char* label, const ImVec2& size_arg)
{
	return ButtonEx(label, size_arg, 0);
}

// Small buttons fits within text without additional vertical spacing.
bool ImGui::SmallButton(const char* label)
{
	ImGuiContext& g = *GImGui;
	float backup_padding_y = g.Style.FramePadding.y;
	g.Style.FramePadding.y = 0.0f;
	bool pressed = ButtonEx(label, ImVec2(0, 0), ImGuiButtonFlags_AlignTextBaseLine);
	g.Style.FramePadding.y = backup_padding_y;
	return pressed;
}

// Tip: use ImGui::PushID()/PopID() to push indices or pointers in the ID stack.
// Then you can keep 'str_id' empty or the same for all your buttons (instead of creating a string based on a non-string id)
bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	const ImGuiID id = window->GetID(str_id);
	ImVec2 size = CalcItemSize(size_arg, 0.0f, 0.0f);
	const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
	ItemSize(bb);
	if (!ItemAdd(bb, &id))
		return false;

	bool hovered, held;
	bool pressed = ButtonBehavior(bb, id, &hovered, &held);

	return pressed;
}

// Upper-right button to close a window.
bool ImGui::CloseButton(ImGuiID id, const ImVec2& pos, float radius)
{
	ImGuiWindow* window = GetCurrentWindow();

	const ImRect bb(pos - ImVec2(radius, radius), pos + ImVec2(radius, radius));

	bool hovered, held;
	bool pressed = ButtonBehavior(bb, id, &hovered, &held);

	// Render
	const ImU32 col = GetColorU32((held && hovered) ? ImGuiCol_CloseButtonActive : hovered ? ImGuiCol_CloseButtonHovered : ImGuiCol_CloseButton);
	const ImVec2 center = bb.GetCenter();
	window->DrawList->AddCircleFilled(center, ImMax(2.0f, radius), col, 12);

	const float cross_extent = (radius * 0.7071f) - 1.0f;
	if (hovered)
	{
		window->DrawList->AddLine(center + ImVec2(+cross_extent, +cross_extent), center + ImVec2(-cross_extent, -cross_extent), GetColorU32(ImGuiCol_Text));
		window->DrawList->AddLine(center + ImVec2(+cross_extent, -cross_extent), center + ImVec2(-cross_extent, +cross_extent), GetColorU32(ImGuiCol_Text));
	}

	return pressed;
}

void ImGui::Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, const ImVec4& tint_col, const ImVec4& border_col)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return;

	ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
	if (border_col.w > 0.0f)
		bb.Max += ImVec2(2, 2);
	ItemSize(bb);
	if (!ItemAdd(bb, NULL))
		return;

	if (border_col.w > 0.0f)
	{
		window->DrawList->AddRect(bb.Min, bb.Max, GetColorU32(border_col), 0.0f);
		window->DrawList->AddImage(user_texture_id, bb.Min + ImVec2(1, 1), bb.Max - ImVec2(1, 1), uv0, uv1, GetColorU32(tint_col));
	}
	else
	{
		window->DrawList->AddImage(user_texture_id, bb.Min, bb.Max, uv0, uv1, GetColorU32(tint_col));
	}
}

// frame_padding < 0: uses FramePadding from style (default)
// frame_padding = 0: no framing
// frame_padding > 0: set framing size
// The color used are the button colors.
bool ImGui::ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVec2& uv1, int frame_padding, const ImVec4& bg_col, const ImVec4& tint_col)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;

	// Default to using texture ID as ID. User can still push string/integer prefixes.
	// We could hash the size/uv to create a unique ID but that would prevent the user from animating UV.
	PushID((void *)user_texture_id);
	const ImGuiID id = window->GetID("#image");
	PopID();

	const ImVec2 padding = (frame_padding >= 0) ? ImVec2((float)frame_padding, (float)frame_padding) : style.FramePadding;
	const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size + padding * 2);
	const ImRect image_bb(window->DC.CursorPos + padding, window->DC.CursorPos + padding + size);
	ItemSize(bb);
	if (!ItemAdd(bb, &id))
		return false;

	bool hovered, held;
	bool pressed = ButtonBehavior(bb, id, &hovered, &held);

	// Render
	const ImU32 col = GetColorU32((hovered && held) ? ImGuiCol_ButtonActive : hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button);
	RenderFrame(bb.Min, bb.Max, col, true, ImClamp((float)ImMin(padding.x, padding.y), 0.0f, style.FrameRounding));
	if (bg_col.w > 0.0f)
		window->DrawList->AddRectFilled(image_bb.Min, image_bb.Max, GetColorU32(bg_col));
	window->DrawList->AddImage(user_texture_id, image_bb.Min, image_bb.Max, uv0, uv1, GetColorU32(tint_col));

	return pressed;
}

// Start logging ImGui output to TTY
void ImGui::LogToTTY(int max_depth)
{
	ImGuiContext& g = *GImGui;
	if (g.LogEnabled)
		return;
	ImGuiWindow* window = GetCurrentWindowRead();

	g.LogEnabled = true;
	g.LogFile = stdout;
	g.LogStartDepth = window->DC.TreeDepth;
	if (max_depth >= 0)
		g.LogAutoExpandMaxDepth = max_depth;
}

// Start logging ImGui output to given file
void ImGui::LogToFile(int max_depth, const char* filename)
{
	ImGuiContext& g = *GImGui;
	if (g.LogEnabled)
		return;
	ImGuiWindow* window = GetCurrentWindowRead();

	if (!filename)
	{
		filename = g.IO.LogFilename;
		if (!filename)
			return;
	}

	g.LogFile = ImFileOpen(filename, "ab");
	if (!g.LogFile)
	{
		IM_ASSERT(g.LogFile != NULL); // Consider this an error
		return;
	}
	g.LogEnabled = true;
	g.LogStartDepth = window->DC.TreeDepth;
	if (max_depth >= 0)
		g.LogAutoExpandMaxDepth = max_depth;
}

// Start logging ImGui output to clipboard
void ImGui::LogToClipboard(int max_depth)
{
	ImGuiContext& g = *GImGui;
	if (g.LogEnabled)
		return;
	ImGuiWindow* window = GetCurrentWindowRead();

	g.LogEnabled = true;
	g.LogFile = NULL;
	g.LogStartDepth = window->DC.TreeDepth;
	if (max_depth >= 0)
		g.LogAutoExpandMaxDepth = max_depth;
}

void ImGui::LogFinish()
{
	ImGuiContext& g = *GImGui;
	if (!g.LogEnabled)
		return;

	LogText(IM_NEWLINE);
	g.LogEnabled = false;
	if (g.LogFile != NULL)
	{
		if (g.LogFile == stdout)
			fflush(g.LogFile);
		else
			fclose(g.LogFile);
		g.LogFile = NULL;
	}
	if (g.LogClipboard->size() > 1)
	{
		SetClipboardText(g.LogClipboard->begin());
		g.LogClipboard->clear();
	}
}

// Helper to display logging buttons
void ImGui::LogButtons()
{
	ImGuiContext& g = *GImGui;

	PushID("LogButtons");
	const bool log_to_tty = Button("Log To TTY"); SameLine();
	const bool log_to_file = Button("Log To File"); SameLine();
	const bool log_to_clipboard = Button("Log To Clipboard"); SameLine();
	PushItemWidth(80.0f);
	PushAllowKeyboardFocus(false);
	SliderInt("Depth", &g.LogAutoExpandMaxDepth, 0, 9, NULL);
	PopAllowKeyboardFocus();
	PopItemWidth();
	PopID();

	// Start logging at the end of the function so that the buttons don't appear in the log
	if (log_to_tty)
		LogToTTY(g.LogAutoExpandMaxDepth);
	if (log_to_file)
		LogToFile(g.LogAutoExpandMaxDepth, g.IO.LogFilename);
	if (log_to_clipboard)
		LogToClipboard(g.LogAutoExpandMaxDepth);
}

bool ImGui::TreeNodeBehaviorIsOpen(ImGuiID id, ImGuiTreeNodeFlags flags)
{
	if (flags & ImGuiTreeNodeFlags_Leaf)
		return true;

	// We only write to the tree storage if the user clicks (or explicitely use SetNextTreeNode*** functions)
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = g.CurrentWindow;
	ImGuiStorage* storage = window->DC.StateStorage;

	bool is_open;
	if (g.SetNextTreeNodeOpenCond != 0)
	{
		if (g.SetNextTreeNodeOpenCond & ImGuiSetCond_Always)
		{
			is_open = g.SetNextTreeNodeOpenVal;
			storage->SetInt(id, is_open);
		}
		else
		{
			// We treat ImGuiSetCondition_Once and ImGuiSetCondition_FirstUseEver the same because tree node state are not saved persistently.
			const int stored_value = storage->GetInt(id, -1);
			if (stored_value == -1)
			{
				is_open = g.SetNextTreeNodeOpenVal;
				storage->SetInt(id, is_open);
			}
			else
			{
				is_open = stored_value != 0;
			}
		}
		g.SetNextTreeNodeOpenCond = 0;
	}
	else
	{
		is_open = storage->GetInt(id, (flags & ImGuiTreeNodeFlags_DefaultOpen) ? 1 : 0) != 0;
	}

	// When logging is enabled, we automatically expand tree nodes (but *NOT* collapsing headers.. seems like sensible behavior).
	// NB- If we are above max depth we still allow manually opened nodes to be logged.
	if (g.LogEnabled && !(flags & ImGuiTreeNodeFlags_NoAutoOpenOnLog) && window->DC.TreeDepth < g.LogAutoExpandMaxDepth)
		is_open = true;

	return is_open;
}

bool ImGui::TreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char* label, const char* label_end)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;
	const bool display_frame = (flags & ImGuiTreeNodeFlags_Framed) != 0;
	const ImVec2 padding = display_frame ? style.FramePadding : ImVec2(style.FramePadding.x, 0.0f);

	if (!label_end)
		label_end = FindRenderedTextEnd(label);
	const ImVec2 label_size = CalcTextSize(label, label_end, false);

	// We vertically grow up to current line height up the typical widget height.
	const float text_base_offset_y = ImMax(0.0f, window->DC.CurrentLineTextBaseOffset - padding.y); // Latch before ItemSize changes it
	const float frame_height = ImMax(ImMin(window->DC.CurrentLineHeight, g.FontSize + style.FramePadding.y * 2), label_size.y + padding.y * 2);
	ImRect bb = ImRect(window->DC.CursorPos, ImVec2(window->Pos.x + GetContentRegionMax().x, window->DC.CursorPos.y + frame_height));
	if (display_frame)
	{
		// Framed header expand a little outside the default padding
		bb.Min.x -= (float)(int)(window->WindowPadding.x*0.5f) - 1;
		bb.Max.x += (float)(int)(window->WindowPadding.x*0.5f) - 1;
	}

	const float text_offset_x = (g.FontSize + (display_frame ? padding.x * 3 : padding.x * 2));   // Collapser arrow width + Spacing
	const float text_width = g.FontSize + (label_size.x > 0.0f ? label_size.x + padding.x * 2 : 0.0f);   // Include collapser
	ItemSize(ImVec2(text_width, frame_height), text_base_offset_y);

	// For regular tree nodes, we arbitrary allow to click past 2 worth of ItemSpacing
	// (Ideally we'd want to add a flag for the user to specify we want want the hit test to be done up to the right side of the content or not)
	const ImRect interact_bb = display_frame ? bb : ImRect(bb.Min.x, bb.Min.y, bb.Min.x + text_width + style.ItemSpacing.x * 2, bb.Max.y);
	bool is_open = TreeNodeBehaviorIsOpen(id, flags);
	if (!ItemAdd(interact_bb, &id))
	{
		if (is_open && !(flags & ImGuiTreeNodeFlags_NoTreePushOnOpen))
			TreePushRawID(id);
		return is_open;
	}

	// Flags that affects opening behavior:
	// - 0(default) ..................... single-click anywhere to open
	// - OpenOnDoubleClick .............. double-click anywhere to open
	// - OpenOnArrow .................... single-click on arrow to open
	// - OpenOnDoubleClick|OpenOnArrow .. single-click on arrow or double-click anywhere to open
	ImGuiButtonFlags button_flags = ImGuiButtonFlags_NoKeyModifiers | ((flags & ImGuiTreeNodeFlags_AllowOverlapMode) ? ImGuiButtonFlags_AllowOverlapMode : 0);
	if (flags & ImGuiTreeNodeFlags_OpenOnDoubleClick)
		button_flags |= ImGuiButtonFlags_PressedOnDoubleClick | ((flags & ImGuiTreeNodeFlags_OpenOnArrow) ? ImGuiButtonFlags_PressedOnClickRelease : 0);
	bool hovered, held, pressed = ButtonBehavior(interact_bb, id, &hovered, &held, button_flags);
	if (pressed && !(flags & ImGuiTreeNodeFlags_Leaf))
	{
		bool toggled = !(flags & (ImGuiTreeNodeFlags_OpenOnArrow | ImGuiTreeNodeFlags_OpenOnDoubleClick));
		if (flags & ImGuiTreeNodeFlags_OpenOnArrow)
			toggled |= IsMouseHoveringRect(interact_bb.Min, ImVec2(interact_bb.Min.x + text_offset_x, interact_bb.Max.y));
		if (flags & ImGuiTreeNodeFlags_OpenOnDoubleClick)
			toggled |= g.IO.MouseDoubleClicked[0];
		if (toggled)
		{
			is_open = !is_open;
			window->DC.StateStorage->SetInt(id, is_open);
		}
	}
	if (flags & ImGuiTreeNodeFlags_AllowOverlapMode)
		SetItemAllowOverlap();

	// Render
	const ImU32 col = GetColorU32((held && hovered) ? ImGuiCol_HeaderActive : hovered ? ImGuiCol_HeaderHovered : ImGuiCol_Header);
	const ImVec2 text_pos = bb.Min + ImVec2(text_offset_x, padding.y + text_base_offset_y);
	if (display_frame)
	{
		// Framed type
		RenderFrame(bb.Min, bb.Max, col, true, style.FrameRounding);
		RenderCollapseTriangle(bb.Min + padding + ImVec2(0.0f, text_base_offset_y), is_open, 1.0f);
		if (g.LogEnabled)
		{
			// NB: '##' is normally used to hide text (as a library-wide feature), so we need to specify the text range to make sure the ## aren't stripped out here.
			const char log_prefix[] = "\n##";
			const char log_suffix[] = "##";
			LogRenderedText(text_pos, log_prefix, log_prefix + 3);
			RenderTextClipped(text_pos, bb.Max, label, label_end, &label_size);
			LogRenderedText(text_pos, log_suffix + 1, log_suffix + 3);
		}
		else
		{
			RenderTextClipped(text_pos, bb.Max, label, label_end, &label_size);
		}
	}
	else
	{
		// Unframed typed for tree nodes
		if (hovered || (flags & ImGuiTreeNodeFlags_Selected))
			RenderFrame(bb.Min, bb.Max, col, false);

		if (flags & ImGuiTreeNodeFlags_Bullet)
			RenderBullet(bb.Min + ImVec2(text_offset_x * 0.5f, g.FontSize*0.50f + text_base_offset_y));
		else if (!(flags & ImGuiTreeNodeFlags_Leaf))
			RenderCollapseTriangle(bb.Min + ImVec2(padding.x, g.FontSize*0.15f + text_base_offset_y), is_open, 0.70f);
		if (g.LogEnabled)
			LogRenderedText(text_pos, ">");
		RenderText(text_pos, label, label_end, false);
	}

	if (is_open && !(flags & ImGuiTreeNodeFlags_NoTreePushOnOpen))
		TreePushRawID(id);
	return is_open;
}

// CollapsingHeader returns true when opened but do not indent nor push into the ID stack (because of the ImGuiTreeNodeFlags_NoTreePushOnOpen flag).
// This is basically the same as calling TreeNodeEx(label, ImGuiTreeNodeFlags_CollapsingHeader | ImGuiTreeNodeFlags_NoTreePushOnOpen). You can remove the _NoTreePushOnOpen flag if you want behavior closer to normal TreeNode().
bool ImGui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	return TreeNodeBehavior(window->GetID(label), flags | ImGuiTreeNodeFlags_CollapsingHeader | ImGuiTreeNodeFlags_NoTreePushOnOpen, label);
}

bool ImGui::CollapsingHeader(const char* label, bool* p_open, ImGuiTreeNodeFlags flags)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	if (p_open && !*p_open)
		return false;

	ImGuiID id = window->GetID(label);
	bool is_open = TreeNodeBehavior(id, flags | ImGuiTreeNodeFlags_CollapsingHeader | ImGuiTreeNodeFlags_NoTreePushOnOpen | (p_open ? ImGuiTreeNodeFlags_AllowOverlapMode : 0), label);
	if (p_open)
	{
		// Create a small overlapping close button // FIXME: We can evolve this into user accessible helpers to add extra buttons on title bars, headers, etc.
		ImGuiContext& g = *GImGui;
		float button_sz = g.FontSize * 0.5f;
		if (CloseButton(window->GetID((void*)(intptr_t)(id + 1)), ImVec2(ImMin(window->DC.LastItemRect.Max.x, window->ClipRect.Max.x) - g.Style.FramePadding.x - button_sz, window->DC.LastItemRect.Min.y + g.Style.FramePadding.y + button_sz), button_sz))
			*p_open = false;
	}

	return is_open;
}

bool ImGui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	return TreeNodeBehavior(window->GetID(label), flags, label, NULL);
}

bool ImGui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	const char* label_end = g.TempBuffer + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
	return TreeNodeBehavior(window->GetID(str_id), flags, g.TempBuffer, label_end);
}

bool ImGui::TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list args)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	const char* label_end = g.TempBuffer + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
	return TreeNodeBehavior(window->GetID(ptr_id), flags, g.TempBuffer, label_end);
}

bool ImGui::TreeNodeV(const char* str_id, const char* fmt, va_list args)
{
	return TreeNodeExV(str_id, 0, fmt, args);
}

bool ImGui::TreeNodeV(const void* ptr_id, const char* fmt, va_list args)
{
	return TreeNodeExV(ptr_id, 0, fmt, args);
}

bool ImGui::TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)
{
	va_list args;
	va_start(args, fmt);
	bool is_open = TreeNodeExV(str_id, flags, fmt, args);
	va_end(args);
	return is_open;
}

bool ImGui::TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)
{
	va_list args;
	va_start(args, fmt);
	bool is_open = TreeNodeExV(ptr_id, flags, fmt, args);
	va_end(args);
	return is_open;
}

bool ImGui::TreeNode(const char* str_id, const char* fmt, ...)
{
	va_list args;
	va_start(args, fmt);
	bool is_open = TreeNodeExV(str_id, 0, fmt, args);
	va_end(args);
	return is_open;
}

bool ImGui::TreeNode(const void* ptr_id, const char* fmt, ...)
{
	va_list args;
	va_start(args, fmt);
	bool is_open = TreeNodeExV(ptr_id, 0, fmt, args);
	va_end(args);
	return is_open;
}

bool ImGui::TreeNode(const char* label)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;
	return TreeNodeBehavior(window->GetID(label), 0, label, NULL);
}

void ImGui::TreeAdvanceToLabelPos()
{
	ImGuiContext& g = *GImGui;
	g.CurrentWindow->DC.CursorPos.x += GetTreeNodeToLabelSpacing();
}

// Horizontal distance preceding label when using TreeNode() or Bullet()
float ImGui::GetTreeNodeToLabelSpacing()
{
	ImGuiContext& g = *GImGui;
	return g.FontSize + (g.Style.FramePadding.x * 2.0f);
}

void ImGui::SetNextTreeNodeOpen(bool is_open, ImGuiSetCond cond)
{
	ImGuiContext& g = *GImGui;
	g.SetNextTreeNodeOpenVal = is_open;
	g.SetNextTreeNodeOpenCond = cond ? cond : ImGuiSetCond_Always;
}

void ImGui::PushID(const char* str_id)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->IDStack.push_back(window->GetID(str_id));
}

void ImGui::PushID(const char* str_id_begin, const char* str_id_end)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->IDStack.push_back(window->GetID(str_id_begin, str_id_end));
}

void ImGui::PushID(const void* ptr_id)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->IDStack.push_back(window->GetID(ptr_id));
}

void ImGui::PushID(int int_id)
{
	const void* ptr_id = (void*)(intptr_t)int_id;
	ImGuiWindow* window = GetCurrentWindow();
	window->IDStack.push_back(window->GetID(ptr_id));
}

void ImGui::PopID()
{
	ImGuiWindow* window = GetCurrentWindow();
	window->IDStack.pop_back();
}

ImGuiID ImGui::GetID(const char* str_id)
{
	return GImGui->CurrentWindow->GetID(str_id);
}

ImGuiID ImGui::GetID(const char* str_id_begin, const char* str_id_end)
{
	return GImGui->CurrentWindow->GetID(str_id_begin, str_id_end);
}

ImGuiID ImGui::GetID(const void* ptr_id)
{
	return GImGui->CurrentWindow->GetID(ptr_id);
}

void ImGui::Bullet()
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;
	const float line_height = ImMax(ImMin(window->DC.CurrentLineHeight, g.FontSize + g.Style.FramePadding.y * 2), g.FontSize);
	const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(g.FontSize, line_height));
	ItemSize(bb);
	if (!ItemAdd(bb, NULL))
	{
		SameLine(0, style.FramePadding.x * 2);
		return;
	}

	// Render and stay on same line
	RenderBullet(bb.Min + ImVec2(style.FramePadding.x + g.FontSize*0.5f, line_height*0.5f));
	SameLine(0, style.FramePadding.x * 2);
}

// Text with a little bullet aligned to the typical tree node.
void ImGui::BulletTextV(const char* fmt, va_list args)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;

	const char* text_begin = g.TempBuffer;
	const char* text_end = text_begin + ImFormatStringV(g.TempBuffer, IM_ARRAYSIZE(g.TempBuffer), fmt, args);
	const ImVec2 label_size = CalcTextSize(text_begin, text_end, false);
	const float text_base_offset_y = ImMax(0.0f, window->DC.CurrentLineTextBaseOffset); // Latch before ItemSize changes it
	const float line_height = ImMax(ImMin(window->DC.CurrentLineHeight, g.FontSize + g.Style.FramePadding.y * 2), g.FontSize);
	const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(g.FontSize + (label_size.x > 0.0f ? (label_size.x + style.FramePadding.x * 2) : 0.0f), ImMax(line_height, label_size.y)));  // Empty text doesn't add padding
	ItemSize(bb);
	if (!ItemAdd(bb, NULL))
		return;

	// Render
	RenderBullet(bb.Min + ImVec2(style.FramePadding.x + g.FontSize*0.5f, line_height*0.5f));
	RenderText(bb.Min + ImVec2(g.FontSize + style.FramePadding.x * 2, text_base_offset_y), text_begin, text_end, false);
}

void ImGui::BulletText(const char* fmt, ...)
{
	va_list args;
	va_start(args, fmt);
	BulletTextV(fmt, args);
	va_end(args);
}

static inline void DataTypeFormatString(ImGuiDataType data_type, void* data_ptr, const char* display_format, char* buf, int buf_size)
{
	if (data_type == ImGuiDataType_Int)
		ImFormatString(buf, buf_size, display_format, *(int*)data_ptr);
	else if (data_type == ImGuiDataType_Float)
		ImFormatString(buf, buf_size, display_format, *(float*)data_ptr);
}

static inline void DataTypeFormatString(ImGuiDataType data_type, void* data_ptr, int decimal_precision, char* buf, int buf_size)
{
	if (data_type == ImGuiDataType_Int)
	{
		if (decimal_precision < 0)
			ImFormatString(buf, buf_size, "%d", *(int*)data_ptr);
		else
			ImFormatString(buf, buf_size, "%.*d", decimal_precision, *(int*)data_ptr);
	}
	else if (data_type == ImGuiDataType_Float)
	{
		if (decimal_precision < 0)
			ImFormatString(buf, buf_size, "%f", *(float*)data_ptr);     // Ideally we'd have a minimum decimal precision of 1 to visually denote that it is a float, while hiding non-significant digits?
		else
			ImFormatString(buf, buf_size, "%.*f", decimal_precision, *(float*)data_ptr);
	}
}

static void DataTypeApplyOp(ImGuiDataType data_type, int op, void* value1, const void* value2)// Store into value1
{
	if (data_type == ImGuiDataType_Int)
	{
		if (op == '+')
			*(int*)value1 = *(int*)value1 + *(const int*)value2;
		else if (op == '-')
			*(int*)value1 = *(int*)value1 - *(const int*)value2;
	}
	else if (data_type == ImGuiDataType_Float)
	{
		if (op == '+')
			*(float*)value1 = *(float*)value1 + *(const float*)value2;
		else if (op == '-')
			*(float*)value1 = *(float*)value1 - *(const float*)value2;
	}
}

// User can input math operators (e.g. +100) to edit a numerical values.
static bool DataTypeApplyOpFromText(const char* buf, const char* initial_value_buf, ImGuiDataType data_type, void* data_ptr, const char* scalar_format)
{
	while (ImCharIsSpace(*buf))
		buf++;

	// We don't support '-' op because it would conflict with inputing negative value.
	// Instead you can use +-100 to subtract from an existing value
	char op = buf[0];
	if (op == '+' || op == '*' || op == '/')
	{
		buf++;
		while (ImCharIsSpace(*buf))
			buf++;
	}
	else
	{
		op = 0;
	}
	if (!buf[0])
		return false;

	if (data_type == ImGuiDataType_Int)
	{
		if (!scalar_format)
			scalar_format = "%d";
		int* v = (int*)data_ptr;
		const int old_v = *v;
		int arg0 = *v;
		if (op && sscanf(initial_value_buf, scalar_format, &arg0) < 1)
			return false;

		// Store operand in a float so we can use fractional value for multipliers (*1.1), but constant always parsed as integer so we can fit big integers (e.g. 2000000003) past float precision
		float arg1 = 0.0f;
		if (op == '+') { if (sscanf(buf, "%f", &arg1) == 1) *v = (int)(arg0 + arg1); }                // Add (use "+-" to subtract)
		else if (op == '*') { if (sscanf(buf, "%f", &arg1) == 1) *v = (int)(arg0 * arg1); }                // Multiply
		else if (op == '/') { if (sscanf(buf, "%f", &arg1) == 1 && arg1 != 0.0f) *v = (int)(arg0 / arg1); }// Divide
		else { if (sscanf(buf, scalar_format, &arg0) == 1) *v = arg0; }                     // Assign constant
		return (old_v != *v);
	}
	else if (data_type == ImGuiDataType_Float)
	{
		// For floats we have to ignore format with precision (e.g. "%.2f") because sscanf doesn't take them in
		scalar_format = "%f";
		float* v = (float*)data_ptr;
		const float old_v = *v;
		float arg0 = *v;
		if (op && sscanf(initial_value_buf, scalar_format, &arg0) < 1)
			return false;

		float arg1 = 0.0f;
		if (sscanf(buf, scalar_format, &arg1) < 1)
			return false;
		if (op == '+') { *v = arg0 + arg1; }                    // Add (use "+-" to subtract)
		else if (op == '*') { *v = arg0 * arg1; }                    // Multiply
		else if (op == '/') { if (arg1 != 0.0f) *v = arg0 / arg1; }  // Divide
		else { *v = arg1; }                           // Assign constant
		return (old_v != *v);
	}

	return false;
}

// Create text input in place of a slider (when CTRL+Clicking on slider)
bool ImGui::InputScalarAsWidgetReplacement(const ImRect& aabb, const char* label, ImGuiDataType data_type, void* data_ptr, ImGuiID id, int decimal_precision)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = GetCurrentWindow();

	// Our replacement widget will override the focus ID (registered previously to allow for a TAB focus to happen)
	SetActiveID(g.ScalarAsInputTextId, window);
	SetHoveredID(0);
	FocusableItemUnregister(window);

	char buf[32];
	DataTypeFormatString(data_type, data_ptr, decimal_precision, buf, IM_ARRAYSIZE(buf));
	bool text_value_changed = InputTextEx(label, buf, IM_ARRAYSIZE(buf), aabb.GetSize(), ImGuiInputTextFlags_CharsDecimal | ImGuiInputTextFlags_AutoSelectAll);
	if (g.ScalarAsInputTextId == 0)
	{
		// First frame
		IM_ASSERT(g.ActiveId == id);    // InputText ID expected to match the Slider ID (else we'd need to store them both, which is also possible)
		g.ScalarAsInputTextId = g.ActiveId;
		SetHoveredID(id);
	}
	else if (g.ActiveId != g.ScalarAsInputTextId)
	{
		// Release
		g.ScalarAsInputTextId = 0;
	}
	if (text_value_changed)
		return DataTypeApplyOpFromText(buf, GImGui->InputTextState.InitialText.begin(), data_type, data_ptr, NULL);
	return false;
}

// Parse display precision back from the display format string
int ImGui::ParseFormatPrecision(const char* fmt, int default_precision)
{
	int precision = default_precision;
	while ((fmt = strchr(fmt, '%')) != NULL)
	{
		fmt++;
		if (fmt[0] == '%') { fmt++; continue; } // Ignore "%%"
		while (*fmt >= '0' && *fmt <= '9')
			fmt++;
		if (*fmt == '.')
		{
			precision = atoi(fmt + 1);
			if (precision < 0 || precision > 10)
				precision = default_precision;
		}
		break;
	}
	return precision;
}

float ImGui::RoundScalar(float value, int decimal_precision)
{
	// Round past decimal precision
	// So when our value is 1.99999 with a precision of 0.001 we'll end up rounding to 2.0
	// FIXME: Investigate better rounding methods
	static const float min_steps[10] = { 1.0f, 0.1f, 0.01f, 0.001f, 0.0001f, 0.00001f, 0.000001f, 0.0000001f, 0.00000001f, 0.000000001f };
	float min_step = (decimal_precision >= 0 && decimal_precision < 10) ? min_steps[decimal_precision] : powf(10.0f, (float)-decimal_precision);
	bool negative = value < 0.0f;
	value = fabsf(value);
	float remainder = fmodf(value, min_step);
	if (remainder <= min_step * 0.5f)
		value -= remainder;
	else
		value += (min_step - remainder);
	return negative ? -value : value;
}

static inline float SliderBehaviorCalcRatioFromValue(float v, float v_min, float v_max, float power, float linear_zero_pos)
{
	if (v_min == v_max)
		return 0.0f;

	const bool is_non_linear = (power < 1.0f - 0.00001f) || (power > 1.0f + 0.00001f);
	const float v_clamped = (v_min < v_max) ? ImClamp(v, v_min, v_max) : ImClamp(v, v_max, v_min);
	if (is_non_linear)
	{
		if (v_clamped < 0.0f)
		{
			const float f = 1.0f - (v_clamped - v_min) / (ImMin(0.0f, v_max) - v_min);
			return (1.0f - powf(f, 1.0f / power)) * linear_zero_pos;
		}
		else
		{
			const float f = (v_clamped - ImMax(0.0f, v_min)) / (v_max - ImMax(0.0f, v_min));
			return linear_zero_pos + powf(f, 1.0f / power) * (1.0f - linear_zero_pos);
		}
	}

	// Linear slider
	return (v_clamped - v_min) / (v_max - v_min);
}

bool ImGui::SliderBehavior(const ImRect& frame_bb, ImGuiID id, float* v, float v_min, float v_max, float power, int decimal_precision, ImGuiSliderFlags flags)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = GetCurrentWindow();
	const ImGuiStyle& style = g.Style;

	// Draw frame
	RenderFrame(frame_bb.Min, frame_bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);

	const bool is_non_linear = (power < 1.0f - 0.00001f) || (power > 1.0f + 0.00001f);
	const bool is_horizontal = (flags & ImGuiSliderFlags_Vertical) == 0;

	const float grab_padding = 2.0f;
	const float slider_sz = is_horizontal ? (frame_bb.GetWidth() - grab_padding * 2.0f) : (frame_bb.GetHeight() - grab_padding * 2.0f);
	float grab_sz;
	if (decimal_precision > 0)
		grab_sz = ImMin(style.GrabMinSize, slider_sz);
	else
		grab_sz = ImMin(ImMax(1.0f * (slider_sz / ((v_min < v_max ? v_max - v_min : v_min - v_max) + 1.0f)), style.GrabMinSize), slider_sz);  // Integer sliders, if possible have the grab size represent 1 unit
	const float slider_usable_sz = slider_sz - grab_sz;
	const float slider_usable_pos_min = (is_horizontal ? frame_bb.Min.x : frame_bb.Min.y) + grab_padding + grab_sz * 0.5f;
	const float slider_usable_pos_max = (is_horizontal ? frame_bb.Max.x : frame_bb.Max.y) - grab_padding - grab_sz * 0.5f;

	// For logarithmic sliders that cross over sign boundary we want the exponential increase to be symmetric around 0.0f
	float linear_zero_pos = 0.0f;   // 0.0->1.0f
	if (v_min * v_max < 0.0f)
	{
		// Different sign
		const float linear_dist_min_to_0 = powf(fabsf(0.0f - v_min), 1.0f / power);
		const float linear_dist_max_to_0 = powf(fabsf(v_max - 0.0f), 1.0f / power);
		linear_zero_pos = linear_dist_min_to_0 / (linear_dist_min_to_0 + linear_dist_max_to_0);
	}
	else
	{
		// Same sign
		linear_zero_pos = v_min < 0.0f ? 1.0f : 0.0f;
	}

	// Process clicking on the slider
	bool value_changed = false;
	if (g.ActiveId == id)
	{
		if (g.IO.MouseDown[0])
		{
			const float mouse_abs_pos = is_horizontal ? g.IO.MousePos.x : g.IO.MousePos.y;
			float clicked_t = (slider_usable_sz > 0.0f) ? ImClamp((mouse_abs_pos - slider_usable_pos_min) / slider_usable_sz, 0.0f, 1.0f) : 0.0f;
			if (!is_horizontal)
				clicked_t = 1.0f - clicked_t;

			float new_value;
			if (is_non_linear)
			{
				// Account for logarithmic scale on both sides of the zero
				if (clicked_t < linear_zero_pos)
				{
					// Negative: rescale to the negative range before powering
					float a = 1.0f - (clicked_t / linear_zero_pos);
					a = powf(a, power);
					new_value = ImLerp(ImMin(v_max, 0.0f), v_min, a);
				}
				else
				{
					// Positive: rescale to the positive range before powering
					float a;
					if (fabsf(linear_zero_pos - 1.0f) > 1.e-6f)
						a = (clicked_t - linear_zero_pos) / (1.0f - linear_zero_pos);
					else
						a = clicked_t;
					a = powf(a, power);
					new_value = ImLerp(ImMax(v_min, 0.0f), v_max, a);
				}
			}
			else
			{
				// Linear slider
				new_value = ImLerp(v_min, v_max, clicked_t);
			}

			// Round past decimal precision
			new_value = RoundScalar(new_value, decimal_precision);
			if (*v != new_value)
			{
				*v = new_value;
				value_changed = true;
			}
		}
		else
		{
			ClearActiveID();
		}
	}

	// Calculate slider grab positioning
	float grab_t = SliderBehaviorCalcRatioFromValue(*v, v_min, v_max, power, linear_zero_pos);

	// Draw
	if (!is_horizontal)
		grab_t = 1.0f - grab_t;
	const float grab_pos = ImLerp(slider_usable_pos_min, slider_usable_pos_max, grab_t);
	ImRect grab_bb;
	if (is_horizontal)
		grab_bb = ImRect(ImVec2(grab_pos - grab_sz * 0.5f, frame_bb.Min.y + grab_padding), ImVec2(grab_pos + grab_sz * 0.5f, frame_bb.Max.y - grab_padding));
	else
		grab_bb = ImRect(ImVec2(frame_bb.Min.x + grab_padding, grab_pos - grab_sz * 0.5f), ImVec2(frame_bb.Max.x - grab_padding, grab_pos + grab_sz * 0.5f));
	window->DrawList->AddRectFilled(grab_bb.Min, grab_bb.Max, GetColorU32(g.ActiveId == id ? ImGuiCol_SliderGrabActive : ImGuiCol_SliderGrab), style.GrabRounding);

	return value_changed;
}

// Use power!=1.0 for logarithmic sliders.
// Adjust display_format to decorate the value with a prefix or a suffix.
//   "%.3f"         1.234
//   "%5.2f secs"   01.23 secs
//   "Gold: %.0f"   Gold: 1
bool ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* display_format, float power)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;
	const ImGuiID id = window->GetID(label);
	const float w = CalcItemWidth();

	const ImVec2 label_size = CalcTextSize(label, NULL, true);
	const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y*2.0f));
	const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));

	// NB- we don't call ItemSize() yet because we may turn into a text edit box below
	if (!ItemAdd(total_bb, &id))
	{
		ItemSize(total_bb, style.FramePadding.y);
		return false;
	}

	const bool hovered = IsHovered(frame_bb, id);
	if (hovered)
		SetHoveredID(id);

	if (!display_format)
		display_format = "%.3f";
	int decimal_precision = ParseFormatPrecision(display_format, 3);

	// Tabbing or CTRL-clicking on Slider turns it into an input box
	bool start_text_input = false;
	const bool tab_focus_requested = FocusableItemRegister(window, g.ActiveId == id);
	if (tab_focus_requested || (hovered && g.IO.MouseClicked[0]))
	{
		SetActiveID(id, window);
		FocusWindow(window);

		if (tab_focus_requested || g.IO.KeyCtrl)
		{
			start_text_input = true;
			g.ScalarAsInputTextId = 0;
		}
	}
	if (start_text_input || (g.ActiveId == id && g.ScalarAsInputTextId == id))
		return InputScalarAsWidgetReplacement(frame_bb, label, ImGuiDataType_Float, v, id, decimal_precision);

	ItemSize(total_bb, style.FramePadding.y);

	// Actual slider behavior + render grab
	const bool value_changed = SliderBehavior(frame_bb, id, v, v_min, v_max, power, decimal_precision);

	// Display value using user-provided display format so user can add prefix/suffix/decorations to the value.
	char value_buf[64];
	const char* value_buf_end = value_buf + ImFormatString(value_buf, IM_ARRAYSIZE(value_buf), display_format, *v);
	RenderTextClipped(frame_bb.Min, frame_bb.Max, value_buf, value_buf_end, NULL, ImVec2(0.5f, 0.5f));

	if (label_size.x > 0.0f)
		RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

	return value_changed;
}

bool ImGui::VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_max, const char* display_format, float power)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;
	const ImGuiID id = window->GetID(label);

	const ImVec2 label_size = CalcTextSize(label, NULL, true);
	const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + size);
	const ImRect bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));

	ItemSize(bb, style.FramePadding.y);
	if (!ItemAdd(frame_bb, &id))
		return false;

	const bool hovered = IsHovered(frame_bb, id);
	if (hovered)
		SetHoveredID(id);

	if (!display_format)
		display_format = "%.3f";
	int decimal_precision = ParseFormatPrecision(display_format, 3);

	if (hovered && g.IO.MouseClicked[0])
	{
		SetActiveID(id, window);
		FocusWindow(window);
	}

	// Actual slider behavior + render grab
	bool value_changed = SliderBehavior(frame_bb, id, v, v_min, v_max, power, decimal_precision, ImGuiSliderFlags_Vertical);

	// Display value using user-provided display format so user can add prefix/suffix/decorations to the value.
	// For the vertical slider we allow centered text to overlap the frame padding
	char value_buf[64];
	char* value_buf_end = value_buf + ImFormatString(value_buf, IM_ARRAYSIZE(value_buf), display_format, *v);
	RenderTextClipped(ImVec2(frame_bb.Min.x, frame_bb.Min.y + style.FramePadding.y), frame_bb.Max, value_buf, value_buf_end, NULL, ImVec2(0.5f, 0.0f));
	if (label_size.x > 0.0f)
		RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

	return value_changed;
}

bool ImGui::SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_max)
{
	float v_deg = (*v_rad) * 360.0f / (2 * IM_PI);
	bool value_changed = SliderFloat(label, &v_deg, v_degrees_min, v_degrees_max, "%.0f deg", 1.0f);
	*v_rad = v_deg * (2 * IM_PI) / 360.0f;
	return value_changed;
}

bool ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* display_format)
{
	if (!display_format)
		display_format = "%.0f";
	float v_f = (float)*v;
	bool value_changed = SliderFloat(label, &v_f, (float)v_min, (float)v_max, display_format, 1.0f);
	*v = (int)v_f;
	return value_changed;
}

bool ImGui::VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, const char* display_format)
{
	if (!display_format)
		display_format = "%.0f";
	float v_f = (float)*v;
	bool value_changed = VSliderFloat(label, size, &v_f, (float)v_min, (float)v_max, display_format, 1.0f);
	*v = (int)v_f;
	return value_changed;
}

// Add multiple sliders on 1 line for compact edition of multiple components
bool ImGui::SliderFloatN(const char* label, float* v, int components, float v_min, float v_max, const char* display_format, float power)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	bool value_changed = false;
	BeginGroup();
	PushID(label);
	PushMultiItemsWidths(components);
	for (int i = 0; i < components; i++)
	{
		PushID(i);
		value_changed |= SliderFloat("##v", &v[i], v_min, v_max, display_format, power);
		SameLine(0, g.Style.ItemInnerSpacing.x);
		PopID();
		PopItemWidth();
	}
	PopID();

	TextUnformatted(label, FindRenderedTextEnd(label));
	EndGroup();

	return value_changed;
}

bool ImGui::SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* display_format, float power)
{
	return SliderFloatN(label, v, 2, v_min, v_max, display_format, power);
}

bool ImGui::SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* display_format, float power)
{
	return SliderFloatN(label, v, 3, v_min, v_max, display_format, power);
}

bool ImGui::SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* display_format, float power)
{
	return SliderFloatN(label, v, 4, v_min, v_max, display_format, power);
}

bool ImGui::SliderIntN(const char* label, int* v, int components, int v_min, int v_max, const char* display_format)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	bool value_changed = false;
	BeginGroup();
	PushID(label);
	PushMultiItemsWidths(components);
	for (int i = 0; i < components; i++)
	{
		PushID(i);
		value_changed |= SliderInt("##v", &v[i], v_min, v_max, display_format);
		SameLine(0, g.Style.ItemInnerSpacing.x);
		PopID();
		PopItemWidth();
	}
	PopID();

	TextUnformatted(label, FindRenderedTextEnd(label));
	EndGroup();

	return value_changed;
}

bool ImGui::SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* display_format)
{
	return SliderIntN(label, v, 2, v_min, v_max, display_format);
}

bool ImGui::SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* display_format)
{
	return SliderIntN(label, v, 3, v_min, v_max, display_format);
}

bool ImGui::SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* display_format)
{
	return SliderIntN(label, v, 4, v_min, v_max, display_format);
}

bool ImGui::DragBehavior(const ImRect& frame_bb, ImGuiID id, float* v, float v_speed, float v_min, float v_max, int decimal_precision, float power)
{
	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;

	// Draw frame
	const ImU32 frame_col = GetColorU32(g.ActiveId == id ? ImGuiCol_FrameBgActive : g.HoveredId == id ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg);
	RenderFrame(frame_bb.Min, frame_bb.Max, frame_col, true, style.FrameRounding);

	bool value_changed = false;

	// Process clicking on the drag
	if (g.ActiveId == id)
	{
		if (g.IO.MouseDown[0])
		{
			if (g.ActiveIdIsJustActivated)
			{
				// Lock current value on click
				g.DragCurrentValue = *v;
				g.DragLastMouseDelta = ImVec2(0.f, 0.f);
			}

			float v_cur = g.DragCurrentValue;
			const ImVec2 mouse_drag_delta = GetMouseDragDelta(0, 1.0f);
			if (fabsf(mouse_drag_delta.x - g.DragLastMouseDelta.x) > 0.0f)
			{
				float speed = v_speed;
				if (speed == 0.0f && (v_max - v_min) != 0.0f && (v_max - v_min) < FLT_MAX)
					speed = (v_max - v_min) * g.DragSpeedDefaultRatio;
				if (g.IO.KeyShift && g.DragSpeedScaleFast >= 0.0f)
					speed = speed * g.DragSpeedScaleFast;
				if (g.IO.KeyAlt && g.DragSpeedScaleSlow >= 0.0f)
					speed = speed * g.DragSpeedScaleSlow;

				float delta = (mouse_drag_delta.x - g.DragLastMouseDelta.x) * speed;
				if (fabsf(power - 1.0f) > 0.001f)
				{
					// Logarithmic curve on both side of 0.0
					float v0_abs = v_cur >= 0.0f ? v_cur : -v_cur;
					float v0_sign = v_cur >= 0.0f ? 1.0f : -1.0f;
					float v1 = powf(v0_abs, 1.0f / power) + (delta * v0_sign);
					float v1_abs = v1 >= 0.0f ? v1 : -v1;
					float v1_sign = v1 >= 0.0f ? 1.0f : -1.0f;          // Crossed sign line
					v_cur = powf(v1_abs, power) * v0_sign * v1_sign;    // Reapply sign
				}
				else
				{
					v_cur += delta;
				}
				g.DragLastMouseDelta.x = mouse_drag_delta.x;

				// Clamp
				if (v_min < v_max)
					v_cur = ImClamp(v_cur, v_min, v_max);
				g.DragCurrentValue = v_cur;
			}

			// Round to user desired precision, then apply
			v_cur = RoundScalar(v_cur, decimal_precision);
			if (*v != v_cur)
			{
				*v = v_cur;
				value_changed = true;
			}
		}
		else
		{
			ClearActiveID();
		}
	}

	return value_changed;
}

bool ImGui::DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, const char* display_format, float power)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;
	const ImGuiID id = window->GetID(label);
	const float w = CalcItemWidth();

	const ImVec2 label_size = CalcTextSize(label, NULL, true);
	const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y*2.0f));
	const ImRect inner_bb(frame_bb.Min + style.FramePadding, frame_bb.Max - style.FramePadding);
	const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));

	// NB- we don't call ItemSize() yet because we may turn into a text edit box below
	if (!ItemAdd(total_bb, &id))
	{
		ItemSize(total_bb, style.FramePadding.y);
		return false;
	}

	const bool hovered = IsHovered(frame_bb, id);
	if (hovered)
		SetHoveredID(id);

	if (!display_format)
		display_format = "%.3f";
	int decimal_precision = ParseFormatPrecision(display_format, 3);

	// Tabbing or CTRL-clicking on Drag turns it into an input box
	bool start_text_input = false;
	const bool tab_focus_requested = FocusableItemRegister(window, g.ActiveId == id);
	if (tab_focus_requested || (hovered && (g.IO.MouseClicked[0] | g.IO.MouseDoubleClicked[0])))
	{
		SetActiveID(id, window);
		FocusWindow(window);

		if (tab_focus_requested || g.IO.KeyCtrl || g.IO.MouseDoubleClicked[0])
		{
			start_text_input = true;
			g.ScalarAsInputTextId = 0;
		}
	}
	if (start_text_input || (g.ActiveId == id && g.ScalarAsInputTextId == id))
		return InputScalarAsWidgetReplacement(frame_bb, label, ImGuiDataType_Float, v, id, decimal_precision);

	// Actual drag behavior
	ItemSize(total_bb, style.FramePadding.y);
	const bool value_changed = DragBehavior(frame_bb, id, v, v_speed, v_min, v_max, decimal_precision, power);

	// Display value using user-provided display format so user can add prefix/suffix/decorations to the value.
	char value_buf[64];
	const char* value_buf_end = value_buf + ImFormatString(value_buf, IM_ARRAYSIZE(value_buf), display_format, *v);
	RenderTextClipped(frame_bb.Min, frame_bb.Max, value_buf, value_buf_end, NULL, ImVec2(0.5f, 0.5f));

	if (label_size.x > 0.0f)
		RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, inner_bb.Min.y), label);

	return value_changed;
}

bool ImGui::DragFloatN(const char* label, float* v, int components, float v_speed, float v_min, float v_max, const char* display_format, float power)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	bool value_changed = false;
	BeginGroup();
	PushID(label);
	PushMultiItemsWidths(components);
	for (int i = 0; i < components; i++)
	{
		PushID(i);
		value_changed |= DragFloat("##v", &v[i], v_speed, v_min, v_max, display_format, power);
		SameLine(0, g.Style.ItemInnerSpacing.x);
		PopID();
		PopItemWidth();
	}
	PopID();

	TextUnformatted(label, FindRenderedTextEnd(label));
	EndGroup();

	return value_changed;
}

bool ImGui::DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, const char* display_format, float power)
{
	return DragFloatN(label, v, 2, v_speed, v_min, v_max, display_format, power);
}

bool ImGui::DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, const char* display_format, float power)
{
	return DragFloatN(label, v, 3, v_speed, v_min, v_max, display_format, power);
}

bool ImGui::DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, const char* display_format, float power)
{
	return DragFloatN(label, v, 4, v_speed, v_min, v_max, display_format, power);
}

bool ImGui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, const char* display_format, const char* display_format_max, float power)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	PushID(label);
	BeginGroup();
	PushMultiItemsWidths(2);

	bool value_changed = DragFloat("##min", v_current_min, v_speed, (v_min >= v_max) ? -FLT_MAX : v_min, (v_min >= v_max) ? *v_current_max : ImMin(v_max, *v_current_max), display_format, power);
	PopItemWidth();
	SameLine(0, g.Style.ItemInnerSpacing.x);
	value_changed |= DragFloat("##max", v_current_max, v_speed, (v_min >= v_max) ? *v_current_min : ImMax(v_min, *v_current_min), (v_min >= v_max) ? FLT_MAX : v_max, display_format_max ? display_format_max : display_format, power);
	PopItemWidth();
	SameLine(0, g.Style.ItemInnerSpacing.x);

	TextUnformatted(label, FindRenderedTextEnd(label));
	EndGroup();
	PopID();

	return value_changed;
}

// NB: v_speed is float to allow adjusting the drag speed with more precision
bool ImGui::DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* display_format)
{
	if (!display_format)
		display_format = "%.0f";
	float v_f = (float)*v;
	bool value_changed = DragFloat(label, &v_f, v_speed, (float)v_min, (float)v_max, display_format);
	*v = (int)v_f;
	return value_changed;
}

bool ImGui::DragIntN(const char* label, int* v, int components, float v_speed, int v_min, int v_max, const char* display_format)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	bool value_changed = false;
	BeginGroup();
	PushID(label);
	PushMultiItemsWidths(components);
	for (int i = 0; i < components; i++)
	{
		PushID(i);
		value_changed |= DragInt("##v", &v[i], v_speed, v_min, v_max, display_format);
		SameLine(0, g.Style.ItemInnerSpacing.x);
		PopID();
		PopItemWidth();
	}
	PopID();

	TextUnformatted(label, FindRenderedTextEnd(label));
	EndGroup();

	return value_changed;
}

bool ImGui::DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const char* display_format)
{
	return DragIntN(label, v, 2, v_speed, v_min, v_max, display_format);
}

bool ImGui::DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const char* display_format)
{
	return DragIntN(label, v, 3, v_speed, v_min, v_max, display_format);
}

bool ImGui::DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const char* display_format)
{
	return DragIntN(label, v, 4, v_speed, v_min, v_max, display_format);
}

bool ImGui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_speed, int v_min, int v_max, const char* display_format, const char* display_format_max)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	PushID(label);
	BeginGroup();
	PushMultiItemsWidths(2);

	bool value_changed = DragInt("##min", v_current_min, v_speed, (v_min >= v_max) ? INT_MIN : v_min, (v_min >= v_max) ? *v_current_max : ImMin(v_max, *v_current_max), display_format);
	PopItemWidth();
	SameLine(0, g.Style.ItemInnerSpacing.x);
	value_changed |= DragInt("##max", v_current_max, v_speed, (v_min >= v_max) ? *v_current_min : ImMax(v_min, *v_current_min), (v_min >= v_max) ? INT_MAX : v_max, display_format_max ? display_format_max : display_format);
	PopItemWidth();
	SameLine(0, g.Style.ItemInnerSpacing.x);

	TextUnformatted(label, FindRenderedTextEnd(label));
	EndGroup();
	PopID();

	return value_changed;
}

void ImGui::PlotEx(ImGuiPlotType plot_type, const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;

	const ImVec2 label_size = CalcTextSize(label, NULL, true);
	if (graph_size.x == 0.0f)
		graph_size.x = CalcItemWidth();
	if (graph_size.y == 0.0f)
		graph_size.y = label_size.y + (style.FramePadding.y * 2);

	const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(graph_size.x, graph_size.y));
	const ImRect inner_bb(frame_bb.Min + style.FramePadding, frame_bb.Max - style.FramePadding);
	const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0));
	ItemSize(total_bb, style.FramePadding.y);
	if (!ItemAdd(total_bb, NULL))
		return;

	// Determine scale from values if not specified
	if (scale_min == FLT_MAX || scale_max == FLT_MAX)
	{
		float v_min = FLT_MAX;
		float v_max = -FLT_MAX;
		for (int i = 0; i < values_count; i++)
		{
			const float v = values_getter(data, i);
			v_min = ImMin(v_min, v);
			v_max = ImMax(v_max, v);
		}
		if (scale_min == FLT_MAX)
			scale_min = v_min;
		if (scale_max == FLT_MAX)
			scale_max = v_max;
	}

	RenderFrame(frame_bb.Min, frame_bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);

	if (values_count > 0)
	{
		int res_w = ImMin((int)graph_size.x, values_count) + ((plot_type == ImGuiPlotType_Lines) ? -1 : 0);
		int item_count = values_count + ((plot_type == ImGuiPlotType_Lines) ? -1 : 0);

		// Tooltip on hover
		int v_hovered = -1;
		if (IsHovered(inner_bb, 0))
		{
			const float t = ImClamp((g.IO.MousePos.x - inner_bb.Min.x) / (inner_bb.Max.x - inner_bb.Min.x), 0.0f, 0.9999f);
			const int v_idx = (int)(t * item_count);
			IM_ASSERT(v_idx >= 0 && v_idx < values_count);

			const float v0 = values_getter(data, (v_idx + values_offset) % values_count);
			const float v1 = values_getter(data, (v_idx + 1 + values_offset) % values_count);
			if (plot_type == ImGuiPlotType_Lines)
				SetTooltip("%d: %8.4g\n%d: %8.4g", v_idx, v0, v_idx + 1, v1);
			else if (plot_type == ImGuiPlotType_Histogram)
				SetTooltip("%d: %8.4g", v_idx, v0);
			v_hovered = v_idx;
		}

		const float t_step = 1.0f / (float)res_w;

		float v0 = values_getter(data, (0 + values_offset) % values_count);
		float t0 = 0.0f;
		ImVec2 tp0 = ImVec2(t0, 1.0f - ImSaturate((v0 - scale_min) / (scale_max - scale_min)));    // Point in the normalized space of our target rectangle

		const ImU32 col_base = GetColorU32((plot_type == ImGuiPlotType_Lines) ? ImGuiCol_PlotLines : ImGuiCol_PlotHistogram);
		const ImU32 col_hovered = GetColorU32((plot_type == ImGuiPlotType_Lines) ? ImGuiCol_PlotLinesHovered : ImGuiCol_PlotHistogramHovered);

		for (int n = 0; n < res_w; n++)
		{
			const float t1 = t0 + t_step;
			const int v1_idx = (int)(t0 * item_count + 0.5f);
			IM_ASSERT(v1_idx >= 0 && v1_idx < values_count);
			const float v1 = values_getter(data, (v1_idx + values_offset + 1) % values_count);
			const ImVec2 tp1 = ImVec2(t1, 1.0f - ImSaturate((v1 - scale_min) / (scale_max - scale_min)));

			// NB: Draw calls are merged together by the DrawList system. Still, we should render our batch are lower level to save a bit of CPU.
			ImVec2 pos0 = ImLerp(inner_bb.Min, inner_bb.Max, tp0);
			ImVec2 pos1 = ImLerp(inner_bb.Min, inner_bb.Max, (plot_type == ImGuiPlotType_Lines) ? tp1 : ImVec2(tp1.x, 1.0f));
			if (plot_type == ImGuiPlotType_Lines)
			{
				window->DrawList->AddLine(pos0, pos1, v_hovered == v1_idx ? col_hovered : col_base);
			}
			else if (plot_type == ImGuiPlotType_Histogram)
			{
				if (pos1.x >= pos0.x + 2.0f)
					pos1.x -= 1.0f;
				window->DrawList->AddRectFilled(pos0, pos1, v_hovered == v1_idx ? col_hovered : col_base);
			}

			t0 = t1;
			tp0 = tp1;
		}
	}

	// Text overlay
	if (overlay_text)
		RenderTextClipped(ImVec2(frame_bb.Min.x, frame_bb.Min.y + style.FramePadding.y), frame_bb.Max, overlay_text, NULL, NULL, ImVec2(0.5f, 0.0f));

	if (label_size.x > 0.0f)
		RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, inner_bb.Min.y), label);
}

struct ImGuiPlotArrayGetterData
{
	const float* Values;
	int Stride;

	ImGuiPlotArrayGetterData(const float* values, int stride) { Values = values; Stride = stride; }
};

static float Plot_ArrayGetter(void* data, int idx)
{
	ImGuiPlotArrayGetterData* plot_data = (ImGuiPlotArrayGetterData*)data;
	const float v = *(float*)(void*)((unsigned char*)plot_data->Values + (size_t)idx * plot_data->Stride);
	return v;
}

void ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)
{
	ImGuiPlotArrayGetterData data(values, stride);
	PlotEx(ImGuiPlotType_Lines, label, &Plot_ArrayGetter, (void*)&data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

void ImGui::PlotLines(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
{
	PlotEx(ImGuiPlotType_Lines, label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

void ImGui::PlotHistogram(const char* label, const float* values, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size, int stride)
{
	ImGuiPlotArrayGetterData data(values, stride);
	PlotEx(ImGuiPlotType_Histogram, label, &Plot_ArrayGetter, (void*)&data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

void ImGui::PlotHistogram(const char* label, float(*values_getter)(void* data, int idx), void* data, int values_count, int values_offset, const char* overlay_text, float scale_min, float scale_max, ImVec2 graph_size)
{
	PlotEx(ImGuiPlotType_Histogram, label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
}

// size_arg (for each axis) < 0.0f: align to end, 0.0f: auto, > 0.0f: specified size
void ImGui::ProgressBar(float fraction, const ImVec2& size_arg, const char* overlay)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;

	ImVec2 pos = window->DC.CursorPos;
	ImRect bb(pos, pos + CalcItemSize(size_arg, CalcItemWidth(), g.FontSize + style.FramePadding.y*2.0f));
	ItemSize(bb, style.FramePadding.y);
	if (!ItemAdd(bb, NULL))
		return;

	// Render
	fraction = ImSaturate(fraction);
	RenderFrame(bb.Min, bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);
	bb.Reduce(ImVec2(window->BorderSize, window->BorderSize));
	const ImVec2 fill_br = ImVec2(ImLerp(bb.Min.x, bb.Max.x, fraction), bb.Max.y);
	RenderFrame(bb.Min, fill_br, GetColorU32(ImGuiCol_PlotHistogram), false, style.FrameRounding);

	// Default displaying the fraction as percentage string, but user can override it
	char overlay_buf[32];
	if (!overlay)
	{
		ImFormatString(overlay_buf, IM_ARRAYSIZE(overlay_buf), "%.0f%%", fraction * 100 + 0.01f);
		overlay = overlay_buf;
	}

	ImVec2 overlay_size = CalcTextSize(overlay, NULL);
	if (overlay_size.x > 0.0f)
		RenderTextClipped(ImVec2(ImClamp(fill_br.x + style.ItemSpacing.x, bb.Min.x, bb.Max.x - overlay_size.x - style.ItemInnerSpacing.x), bb.Min.y), bb.Max, overlay, NULL, &overlay_size, ImVec2(0.0f, 0.5f), &bb);
}

bool ImGui::Checkbox(const char* label, bool* v)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;
	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = ImGuiStyle::ImGuiStyle();
	const ImGuiID id = window->GetID(label);
	const ImVec2 label_size = CalcTextSize(label, NULL, true);
	const ImVec2 pading = ImVec2(2, 2);
	const ImRect check_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(label_size.y + style.FramePadding.x * 6, label_size.y + style.FramePadding.y / 2));
	ItemSize(check_bb, style.FramePadding.y);
	ImRect total_bb = check_bb;
	if (label_size.x > 0)
		SameLine(0, style.ItemInnerSpacing.x);
	const ImRect text_bb(window->DC.CursorPos + ImVec2(0, style.FramePadding.y), window->DC.CursorPos + ImVec2(0, style.FramePadding.y) + label_size);
	if (label_size.x > 0)
	{
		ItemSize(ImVec2(text_bb.GetWidth(), check_bb.GetHeight()), style.FramePadding.y);
		total_bb = ImRect(ImMin(check_bb.Min, text_bb.Min), ImMax(check_bb.Max, text_bb.Max));
	}
	if (!ItemAdd(total_bb, &id))
		return false;
	bool hovered, held;
	bool pressed = ButtonBehavior(total_bb, id, &hovered, &held);
	if (pressed)
		*v = !(*v);
	const float check_sz = ImMin(check_bb.GetWidth(), check_bb.GetHeight());
	const float check_sz2 = check_sz / 2;
	const float pad = ImMax(1.0f, (float)(int)(check_sz / 4.f));
	//window->DrawList->AddRectFilled(check_bb.Min+ImVec2(pad,pad), check_bb.Max-ImVec2(pad,pad), GetColorU32(ImGuiCol_CheckMark), style.FrameRounding);

	window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 + 6, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.20f, 0.25f, 0.30f, 1.0f)), 12);
	window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 + 5, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.20f, 0.25f, 0.30f, 1.0f)), 12);
	window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 + 4, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.20f, 0.25f, 0.30f, 1.0f)), 12);
	window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 + 3, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.20f, 0.25f, 0.30f, 1.0f)), 12);
	window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 + 2, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.20f, 0.25f, 0.30f, 1.0f)), 12);
	window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 + 1, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.20f, 0.25f, 0.30f, 1.0f)), 12);
	window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.20f, 0.25f, 0.30f, 1.0f)), 12);
	window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 - 1, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.20f, 0.25f, 0.30f, 1.0f)), 12);
	window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 - 2, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.20f, 0.25f, 0.30f, 1.0f)), 12);
	window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 - 3, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.20f, 0.25f, 0.30f, 1.0f)), 12);
	window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 - 4, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.20f, 0.25f, 0.30f, 1.0f)), 12);
	window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 - 5, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.20f, 0.25f, 0.30f, 1.0f)), 12);
	window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 - 6, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.20f, 0.25f, 0.30f, 1.0f)), 12);

	if (*v)//от исовка галочки
	{
		//window->DrawList->AddRectFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2, check_bb.Min.y), check_bb.Max, GetColorU32(ImVec4(0.34f, 1.0f, 0.54f, 1.0f)), 0);
		//window->DrawList->AddRectFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2, check_bb.Min.y), check_bb.Max, GetColorU32(ImVec4(0.34f, 1.0f, 0.54f, 1.0f)), 0);

		window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 + 6, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.53f, 0.69f, 0.1f, 1.f)), 12);
		window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 + 5, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.53f, 0.69f, 0.1f, 1.f)), 12);
		window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 + 4, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.53f, 0.69f, 0.1f, 1.f)), 12);
		window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 + 3, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.53f, 0.69f, 0.1f, 1.f)), 12);
		window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 + 2, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.53f, 0.69f, 0.1f, 1.f)), 12);
		window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 + 1, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.53f, 0.69f, 0.1f, 1.f)), 12);
		window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.53f, 0.69f, 0.1f, 1.f)), 12);
		window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 - 1, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.53f, 0.69f, 0.1f, 1.f)), 12);
		window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 - 2, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.53f, 0.69f, 0.1f, 1.f)), 12);
		window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 - 3, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.53f, 0.69f, 0.1f, 1.f)), 12);
		window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 - 4, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.53f, 0.69f, 0.1f, 1.f)), 12);
		window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 - 5, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.53f, 0.69f, 0.1f, 1.f)), 12);
		window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 - 6, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(0.53f, 0.69f, 0.1f, 1.f)), 12);
		window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 + 6, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(1.0f, 1.0f, 1.0f, 1.0f)), 12);

	}
	else
	{
		window->DrawList->AddCircleFilled(ImVec2(check_bb.Min.x + (check_bb.Max.x - check_bb.Min.x) / 2 - 6, check_bb.Min.y + 9), 7, GetColorU32(ImVec4(1.0f, 1.0f, 1.0f, 1.0f)), 12);
	}
	if (label_size.x > 0.0f)
		RenderText(text_bb.GetTL(), label);
	return pressed;
}

bool ImGui::CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)
{
	bool v = ((*flags & flags_value) == flags_value);
	bool pressed = Checkbox(label, &v);
	if (pressed)
	{
		if (v)
			*flags |= flags_value;
		else
			*flags &= ~flags_value;
	}

	return pressed;
}

bool ImGui::RadioButton(const char* label, bool active)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;
	const ImGuiID id = window->GetID(label);
	const ImVec2 label_size = CalcTextSize(label, NULL, true);

	const ImRect check_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(label_size.y + style.FramePadding.y * 2 - 1, label_size.y + style.FramePadding.y * 2 - 1));
	ItemSize(check_bb, style.FramePadding.y);

	ImRect total_bb = check_bb;
	if (label_size.x > 0)
		SameLine(0, style.ItemInnerSpacing.x);
	const ImRect text_bb(window->DC.CursorPos + ImVec2(0, style.FramePadding.y), window->DC.CursorPos + ImVec2(0, style.FramePadding.y) + label_size);
	if (label_size.x > 0)
	{
		ItemSize(ImVec2(text_bb.GetWidth(), check_bb.GetHeight()), style.FramePadding.y);
		total_bb.Add(text_bb);
	}

	if (!ItemAdd(total_bb, &id))
		return false;

	ImVec2 center = check_bb.GetCenter();
	center.x = (float)(int)center.x + 0.5f;
	center.y = (float)(int)center.y + 0.5f;
	const float radius = check_bb.GetHeight() * 0.5f;

	bool hovered, held;
	bool pressed = ButtonBehavior(total_bb, id, &hovered, &held);

	window->DrawList->AddCircleFilled(center, radius, GetColorU32((held && hovered) ? ImGuiCol_FrameBgActive : hovered ? ImGuiCol_FrameBgHovered : ImGuiCol_FrameBg), 16);
	if (active)
	{
		const float check_sz = ImMin(check_bb.GetWidth(), check_bb.GetHeight());
		const float pad = ImMax(1.0f, (float)(int)(check_sz / 6.0f));
		window->DrawList->AddCircleFilled(center, radius - pad, GetColorU32(ImGuiCol_CheckMark), 16);
	}

	if (window->Flags & ImGuiWindowFlags_ShowBorders)
	{
		window->DrawList->AddCircle(center + ImVec2(1, 1), radius, GetColorU32(ImGuiCol_BorderShadow), 16);
		window->DrawList->AddCircle(center, radius, GetColorU32(ImGuiCol_Border), 16);
	}

	if (g.LogEnabled)
		LogRenderedText(text_bb.GetTL(), active ? "(x)" : "( )");
	if (label_size.x > 0.0f)
		RenderText(text_bb.GetTL(), label);

	return pressed;
}

bool ImGui::RadioButton(const char* label, int* v, int v_button)
{
	const bool pressed = RadioButton(label, *v == v_button);
	if (pressed)
	{
		*v = v_button;
	}
	return pressed;
}

static int InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end)
{
	int line_count = 0;
	const char* s = text_begin;
	while (char c = *s++) // We are only matching for \n so we can ignore UTF-8 decoding
		if (c == '\n')
			line_count++;
	s--;
	if (s[0] != '\n' && s[0] != '\r')
		line_count++;
	*out_text_end = s;
	return line_count;
}

static ImVec2 InputTextCalcTextSizeW(const ImWchar* text_begin, const ImWchar* text_end, const ImWchar** remaining, ImVec2* out_offset, bool stop_on_new_line)
{
	ImFont* font = GImGui->Font;
	const float line_height = GImGui->FontSize;
	const float scale = line_height / font->FontSize;

	ImVec2 text_size = ImVec2(0, 0);
	float line_width = 0.0f;

	const ImWchar* s = text_begin;
	while (s < text_end)
	{
		unsigned int c = (unsigned int)(*s++);
		if (c == '\n')
		{
			text_size.x = ImMax(text_size.x, line_width);
			text_size.y += line_height;
			line_width = 0.0f;
			if (stop_on_new_line)
				break;
			continue;
		}
		if (c == '\r')
			continue;

		const float char_width = font->GetCharAdvance((unsigned short)c) * scale;
		line_width += char_width;
	}

	if (text_size.x < line_width)
		text_size.x = line_width;

	if (out_offset)
		*out_offset = ImVec2(line_width, text_size.y + line_height);  // offset allow for the possibility of sitting after a trailing \n

	if (line_width > 0 || text_size.y == 0.0f)                        // whereas size.y will ignore the trailing \n
		text_size.y += line_height;

	if (remaining)
		*remaining = s;

	return text_size;
}

// Wrapper for stb_textedit.h to edit text (our wrapper is for: statically sized buffer, single-line, wchar characters. InputText converts between UTF-8 and wchar)
namespace ImGuiStb
{

	static int     STB_TEXTEDIT_STRINGLEN(const STB_TEXTEDIT_STRING* obj) { return obj->CurLenW; }
	static ImWchar STB_TEXTEDIT_GETCHAR(const STB_TEXTEDIT_STRING* obj, int idx) { return obj->Text[idx]; }
	static float   STB_TEXTEDIT_GETWIDTH(STB_TEXTEDIT_STRING* obj, int line_start_idx, int char_idx) { ImWchar c = obj->Text[line_start_idx + char_idx]; if (c == '\n') return STB_TEXTEDIT_GETWIDTH_NEWLINE; return GImGui->Font->GetCharAdvance(c) * (GImGui->FontSize / GImGui->Font->FontSize); }
	static int     STB_TEXTEDIT_KEYTOTEXT(int key) { return key >= 0x10000 ? 0 : key; }
	static ImWchar STB_TEXTEDIT_NEWLINE = '\n';
	static void    STB_TEXTEDIT_LAYOUTROW(StbTexteditRow* r, STB_TEXTEDIT_STRING* obj, int line_start_idx)
	{
		const ImWchar* text = obj->Text.Data;
		const ImWchar* text_remaining = NULL;
		const ImVec2 size = InputTextCalcTextSizeW(text + line_start_idx, text + obj->CurLenW, &text_remaining, NULL, true);
		r->x0 = 0.0f;
		r->x1 = size.x;
		r->baseline_y_delta = size.y;
		r->ymin = 0.0f;
		r->ymax = size.y;
		r->num_chars = (int)(text_remaining - (text + line_start_idx));
	}

	static bool is_separator(unsigned int c) { return ImCharIsSpace(c) || c == ',' || c == ';' || c == '(' || c == ')' || c == '{' || c == '}' || c == '[' || c == ']' || c == '|'; }
	static int  is_word_boundary_from_right(STB_TEXTEDIT_STRING* obj, int idx) { return idx > 0 ? (is_separator(obj->Text[idx - 1]) && !is_separator(obj->Text[idx])) : 1; }
	static int  STB_TEXTEDIT_MOVEWORDLEFT_IMPL(STB_TEXTEDIT_STRING* obj, int idx) { idx--; while (idx >= 0 && !is_word_boundary_from_right(obj, idx)) idx--; return idx < 0 ? 0 : idx; }
#ifdef __APPLE__    // FIXME: Move setting to IO structure
	static int  is_word_boundary_from_left(STB_TEXTEDIT_STRING* obj, int idx) { return idx > 0 ? (!is_separator(obj->Text[idx - 1]) && is_separator(obj->Text[idx])) : 1; }
	static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx) { idx++; int len = obj->CurLenW; while (idx < len && !is_word_boundary_from_left(obj, idx)) idx++; return idx > len ? len : idx; }
#else
	static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx) { idx++; int len = obj->CurLenW; while (idx < len && !is_word_boundary_from_right(obj, idx)) idx++; return idx > len ? len : idx; }
#endif
#define STB_TEXTEDIT_MOVEWORDLEFT   STB_TEXTEDIT_MOVEWORDLEFT_IMPL    // They need to be #define for stb_textedit.h
#define STB_TEXTEDIT_MOVEWORDRIGHT  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL

	static void STB_TEXTEDIT_DELETECHARS(STB_TEXTEDIT_STRING* obj, int pos, int n)
	{
		ImWchar* dst = obj->Text.Data + pos;

		// We maintain our buffer length in both UTF-8 and wchar formats
		obj->CurLenA -= ImTextCountUtf8BytesFromStr(dst, dst + n);
		obj->CurLenW -= n;

		// Offset remaining text
		const ImWchar* src = obj->Text.Data + pos + n;
		while (ImWchar c = *src++)
			*dst++ = c;
		*dst = '\0';
	}

	static bool STB_TEXTEDIT_INSERTCHARS(STB_TEXTEDIT_STRING* obj, int pos, const ImWchar* new_text, int new_text_len)
	{
		const int text_len = obj->CurLenW;
		IM_ASSERT(pos <= text_len);
		if (new_text_len + text_len + 1 > obj->Text.Size)
			return false;

		const int new_text_len_utf8 = ImTextCountUtf8BytesFromStr(new_text, new_text + new_text_len);
		if (new_text_len_utf8 + obj->CurLenA + 1 > obj->BufSizeA)
			return false;

		ImWchar* text = obj->Text.Data;
		if (pos != text_len)
			memmove(text + pos + new_text_len, text + pos, (size_t)(text_len - pos) * sizeof(ImWchar));
		memcpy(text + pos, new_text, (size_t)new_text_len * sizeof(ImWchar));

		obj->CurLenW += new_text_len;
		obj->CurLenA += new_text_len_utf8;
		obj->Text[obj->CurLenW] = '\0';

		return true;
	}

	// We don't use an enum so we can build even with conflicting symbols (if another user of stb_textedit.h leak their STB_TEXTEDIT_K_* symbols)
#define STB_TEXTEDIT_K_LEFT         0x10000 // keyboard input to move cursor left
#define STB_TEXTEDIT_K_RIGHT        0x10001 // keyboard input to move cursor right
#define STB_TEXTEDIT_K_UP           0x10002 // keyboard input to move cursor up
#define STB_TEXTEDIT_K_DOWN         0x10003 // keyboard input to move cursor down
#define STB_TEXTEDIT_K_LINESTART    0x10004 // keyboard input to move cursor to start of line
#define STB_TEXTEDIT_K_LINEEND      0x10005 // keyboard input to move cursor to end of line
#define STB_TEXTEDIT_K_TEXTSTART    0x10006 // keyboard input to move cursor to start of text
#define STB_TEXTEDIT_K_TEXTEND      0x10007 // keyboard input to move cursor to end of text
#define STB_TEXTEDIT_K_DELETE       0x10008 // keyboard input to delete selection or character under cursor
#define STB_TEXTEDIT_K_BACKSPACE    0x10009 // keyboard input to delete selection or character left of cursor
#define STB_TEXTEDIT_K_UNDO         0x1000A // keyboard input to perform undo
#define STB_TEXTEDIT_K_REDO         0x1000B // keyboard input to perform redo
#define STB_TEXTEDIT_K_WORDLEFT     0x1000C // keyboard input to move cursor left one word
#define STB_TEXTEDIT_K_WORDRIGHT    0x1000D // keyboard input to move cursor right one word
#define STB_TEXTEDIT_K_SHIFT        0x20000

#define STB_TEXTEDIT_IMPLEMENTATION
#include "stb_textedit.h"

}

void ImGuiTextEditState::OnKeyPressed(int key)
{
	stb_textedit_key(this, &StbState, key);
	CursorFollow = true;
	CursorAnimReset();
}

// Public API to manipulate UTF-8 text
// We expose UTF-8 to the user (unlike the STB_TEXTEDIT_* functions which are manipulating wchar)
// FIXME: The existence of this rarely exercised code path is a bit of a nuisance.
void ImGuiTextEditCallbackData::DeleteChars(int pos, int bytes_count)
{
	IM_ASSERT(pos + bytes_count <= BufTextLen);
	char* dst = Buf + pos;
	const char* src = Buf + pos + bytes_count;
	while (char c = *src++)
		*dst++ = c;
	*dst = '\0';

	if (CursorPos + bytes_count >= pos)
		CursorPos -= bytes_count;
	else if (CursorPos >= pos)
		CursorPos = pos;
	SelectionStart = SelectionEnd = CursorPos;
	BufDirty = true;
	BufTextLen -= bytes_count;
}

void ImGuiTextEditCallbackData::InsertChars(int pos, const char* new_text, const char* new_text_end)
{
	const int new_text_len = new_text_end ? (int)(new_text_end - new_text) : (int)strlen(new_text);
	if (new_text_len + BufTextLen + 1 >= BufSize)
		return;

	if (BufTextLen != pos)
		memmove(Buf + pos + new_text_len, Buf + pos, (size_t)(BufTextLen - pos));
	memcpy(Buf + pos, new_text, (size_t)new_text_len * sizeof(char));
	Buf[BufTextLen + new_text_len] = '\0';

	if (CursorPos >= pos)
		CursorPos += new_text_len;
	SelectionStart = SelectionEnd = CursorPos;
	BufDirty = true;
	BufTextLen += new_text_len;
}

// Return false to discard a character.
static bool InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data)
{
	unsigned int c = *p_char;

	if (c < 128 && c != ' ' && !isprint((int)(c & 0xFF)))
	{
		bool pass = false;
		pass |= (c == '\n' && (flags & ImGuiInputTextFlags_Multiline));
		pass |= (c == '\t' && (flags & ImGuiInputTextFlags_AllowTabInput));
		if (!pass)
			return false;
	}

	if (c >= 0xE000 && c <= 0xF8FF) // Filter private Unicode range. I don't imagine anybody would want to input them. GLFW on OSX seems to send private characters for special keys like arrow keys.
		return false;

	if (flags & (ImGuiInputTextFlags_CharsDecimal | ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsUppercase | ImGuiInputTextFlags_CharsNoBlank))
	{
		if (flags & ImGuiInputTextFlags_CharsDecimal)
			if (!(c >= '0' && c <= '9') && (c != '.') && (c != '-') && (c != '+') && (c != '*') && (c != '/'))
				return false;

		if (flags & ImGuiInputTextFlags_CharsHexadecimal)
			if (!(c >= '0' && c <= '9') && !(c >= 'a' && c <= 'f') && !(c >= 'A' && c <= 'F'))
				return false;

		if (flags & ImGuiInputTextFlags_CharsUppercase)
			if (c >= 'a' && c <= 'z')
				*p_char = (c += (unsigned int)('A' - 'a'));

		if (flags & ImGuiInputTextFlags_CharsNoBlank)
			if (ImCharIsSpace(c))
				return false;
	}

	if (flags & ImGuiInputTextFlags_CallbackCharFilter)
	{
		ImGuiTextEditCallbackData callback_data;
		memset(&callback_data, 0, sizeof(ImGuiTextEditCallbackData));
		callback_data.EventFlag = ImGuiInputTextFlags_CallbackCharFilter;
		callback_data.EventChar = (ImWchar)c;
		callback_data.Flags = flags;
		callback_data.UserData = user_data;
		if (callback(&callback_data) != 0)
			return false;
		*p_char = callback_data.EventChar;
		if (!callback_data.EventChar)
			return false;
	}

	return true;
}

// Edit a string of text
// NB: when active, hold on a privately held copy of the text (and apply back to 'buf'). So changing 'buf' while active has no effect.
// FIXME: Rather messy function partly because we are doing UTF8 > u16 > UTF8 conversions on the go to more easily handle stb_textedit calls. Ideally we should stay in UTF-8 all the time. See https://github.com/nothings/stb/issues/188
bool ImGui::InputTextEx(const char* label, char* buf, int buf_size, const ImVec2& size_arg, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	IM_ASSERT(!((flags & ImGuiInputTextFlags_CallbackHistory) && (flags & ImGuiInputTextFlags_Multiline))); // Can't use both together (they both use up/down keys)
	IM_ASSERT(!((flags & ImGuiInputTextFlags_CallbackCompletion) && (flags & ImGuiInputTextFlags_AllowTabInput))); // Can't use both together (they both use tab key)

	ImGuiContext& g = *GImGui;
	const ImGuiIO& io = g.IO;
	const ImGuiStyle& style = g.Style;

	const bool is_multiline = (flags & ImGuiInputTextFlags_Multiline) != 0;
	const bool is_editable = (flags & ImGuiInputTextFlags_ReadOnly) == 0;
	const bool is_password = (flags & ImGuiInputTextFlags_Password) != 0;

	if (is_multiline) // Open group before calling GetID() because groups tracks id created during their spawn
		BeginGroup();
	const ImGuiID id = window->GetID(label);
	const ImVec2 label_size = CalcTextSize(label, NULL, true);
	ImVec2 size = CalcItemSize(size_arg, CalcItemWidth(), (is_multiline ? GetTextLineHeight() * 8.0f : label_size.y) + style.FramePadding.y*2.0f); // Arbitrary default of 8 lines high for multi-line
	const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + size);
	const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? (style.ItemInnerSpacing.x + label_size.x) : 0.0f, 0.0f));

	ImGuiWindow* draw_window = window;
	if (is_multiline)
	{
		if (!BeginChildFrame(id, frame_bb.GetSize()))
		{
			EndChildFrame();
			EndGroup();
			return false;
		}
		draw_window = GetCurrentWindow();
		size.x -= draw_window->ScrollbarSizes.x;
	}
	else
	{
		ItemSize(total_bb, style.FramePadding.y);
		if (!ItemAdd(total_bb, &id))
			return false;
	}

	// Password pushes a temporary font with only a fallback glyph
	if (is_password)
	{
		const ImFont::Glyph* glyph = g.Font->FindGlyph('*');
		ImFont* password_font = &g.InputTextPasswordFont;
		password_font->FontSize = g.Font->FontSize;
		password_font->Scale = g.Font->Scale;
		password_font->DisplayOffset = g.Font->DisplayOffset;
		password_font->Ascent = g.Font->Ascent;
		password_font->Descent = g.Font->Descent;
		password_font->ContainerAtlas = g.Font->ContainerAtlas;
		password_font->FallbackGlyph = glyph;
		password_font->FallbackXAdvance = glyph->XAdvance;
		IM_ASSERT(password_font->Glyphs.empty() && password_font->IndexXAdvance.empty() && password_font->IndexLookup.empty());
		PushFont(password_font);
	}

	// NB: we are only allowed to access 'edit_state' if we are the active widget.
	ImGuiTextEditState& edit_state = g.InputTextState;

	const bool focus_requested = FocusableItemRegister(window, g.ActiveId == id, (flags & (ImGuiInputTextFlags_CallbackCompletion | ImGuiInputTextFlags_AllowTabInput)) == 0);    // Using completion callback disable keyboard tabbing
	const bool focus_requested_by_code = focus_requested && (window->FocusIdxAllCounter == window->FocusIdxAllRequestCurrent);
	const bool focus_requested_by_tab = focus_requested && !focus_requested_by_code;

	const bool hovered = IsHovered(frame_bb, id);
	if (hovered)
	{
		SetHoveredID(id);
		g.MouseCursor = ImGuiMouseCursor_TextInput;
	}
	const bool user_clicked = hovered && io.MouseClicked[0];
	const bool user_scrolled = is_multiline && g.ActiveId == 0 && edit_state.Id == id && g.ActiveIdPreviousFrame == draw_window->GetIDNoKeepAlive("#SCROLLY");

	bool select_all = (g.ActiveId != id) && (flags & ImGuiInputTextFlags_AutoSelectAll) != 0;
	if (focus_requested || user_clicked || user_scrolled)
	{
		if (g.ActiveId != id)
		{
			// Start edition
			// Take a copy of the initial buffer value (both in original UTF-8 format and converted to wchar)
			// From the moment we focused we are ignoring the content of 'buf' (unless we are in read-only mode)
			const int prev_len_w = edit_state.CurLenW;
			edit_state.Text.resize(buf_size + 1);        // wchar count <= UTF-8 count. we use +1 to make sure that .Data isn't NULL so it doesn't crash.
			edit_state.InitialText.resize(buf_size + 1); // UTF-8. we use +1 to make sure that .Data isn't NULL so it doesn't crash.
			ImStrncpy(edit_state.InitialText.Data, buf, edit_state.InitialText.Size);
			const char* buf_end = NULL;
			edit_state.CurLenW = ImTextStrFromUtf8(edit_state.Text.Data, edit_state.Text.Size, buf, NULL, &buf_end);
			edit_state.CurLenA = (int)(buf_end - buf); // We can't get the result from ImFormatString() above because it is not UTF-8 aware. Here we'll cut off malformed UTF-8.
			edit_state.CursorAnimReset();

			// Preserve cursor position and undo/redo stack if we come back to same widget
			// FIXME: We should probably compare the whole buffer to be on the safety side. Comparing buf (utf8) and edit_state.Text (wchar).
			const bool recycle_state = (edit_state.Id == id) && (prev_len_w == edit_state.CurLenW);
			if (recycle_state)
			{
				// Recycle existing cursor/selection/undo stack but clamp position
				// Note a single mouse click will override the cursor/position immediately by calling stb_textedit_click handler.
				edit_state.CursorClamp();
			}
			else
			{
				edit_state.Id = id;
				edit_state.ScrollX = 0.0f;
				stb_textedit_initialize_state(&edit_state.StbState, !is_multiline);
				if (!is_multiline && focus_requested_by_code)
					select_all = true;
			}
			if (flags & ImGuiInputTextFlags_AlwaysInsertMode)
				edit_state.StbState.insert_mode = true;
			if (!is_multiline && (focus_requested_by_tab || (user_clicked && io.KeyCtrl)))
				select_all = true;
		}
		SetActiveID(id, window);
		FocusWindow(window);
	}
	else if (io.MouseClicked[0])
	{
		// Release focus when we click outside
		if (g.ActiveId == id)
			ClearActiveID();
	}

	bool value_changed = false;
	bool enter_pressed = false;

	if (g.ActiveId == id)
	{
		if (!is_editable && !g.ActiveIdIsJustActivated)
		{
			// When read-only we always use the live data passed to the function
			edit_state.Text.resize(buf_size + 1);
			const char* buf_end = NULL;
			edit_state.CurLenW = ImTextStrFromUtf8(edit_state.Text.Data, edit_state.Text.Size, buf, NULL, &buf_end);
			edit_state.CurLenA = (int)(buf_end - buf);
			edit_state.CursorClamp();
		}

		edit_state.BufSizeA = buf_size;

		// Although we are active we don't prevent mouse from hovering other elements unless we are interacting right now with the widget.
		// Down the line we should have a cleaner library-wide concept of Selected vs Active.
		g.ActiveIdAllowOverlap = !io.MouseDown[0];

		// Edit in progress
		const float mouse_x = (io.MousePos.x - frame_bb.Min.x - style.FramePadding.x) + edit_state.ScrollX;
		const float mouse_y = (is_multiline ? (io.MousePos.y - draw_window->DC.CursorPos.y - style.FramePadding.y) : (g.FontSize*0.5f));

		const bool osx_double_click_selects_words = io.OSXBehaviors;      // OS X style: Double click selects by word instead of selecting whole text
		if (select_all || (hovered && !osx_double_click_selects_words && io.MouseDoubleClicked[0]))
		{
			edit_state.SelectAll();
			edit_state.SelectedAllMouseLock = true;
		}
		else if (hovered && osx_double_click_selects_words && io.MouseDoubleClicked[0])
		{
			// Select a word only, OS X style (by simulating keystrokes)
			edit_state.OnKeyPressed(STB_TEXTEDIT_K_WORDLEFT);
			edit_state.OnKeyPressed(STB_TEXTEDIT_K_WORDRIGHT | STB_TEXTEDIT_K_SHIFT);
		}
		else if (io.MouseClicked[0] && !edit_state.SelectedAllMouseLock)
		{
			stb_textedit_click(&edit_state, &edit_state.StbState, mouse_x, mouse_y);
			edit_state.CursorAnimReset();
		}
		else if (io.MouseDown[0] && !edit_state.SelectedAllMouseLock && (io.MouseDelta.x != 0.0f || io.MouseDelta.y != 0.0f))
		{
			stb_textedit_drag(&edit_state, &edit_state.StbState, mouse_x, mouse_y);
			edit_state.CursorAnimReset();
			edit_state.CursorFollow = true;
		}
		if (edit_state.SelectedAllMouseLock && !io.MouseDown[0])
			edit_state.SelectedAllMouseLock = false;

		if (io.InputCharacters[0])
		{
			// Process text input (before we check for Return because using some IME will effectively send a Return?)
			// We ignore CTRL inputs, but need to allow CTRL+ALT as some keyboards (e.g. German) use AltGR - which is Alt+Ctrl - to input certain characters.
			if (!(io.KeyCtrl && !io.KeyAlt) && is_editable)
			{
				for (int n = 0; n < IM_ARRAYSIZE(io.InputCharacters) && io.InputCharacters[n]; n++)
					if (unsigned int c = (unsigned int)io.InputCharacters[n])
					{
						// Insert character if they pass filtering
						if (!InputTextFilterCharacter(&c, flags, callback, user_data))
							continue;
						edit_state.OnKeyPressed((int)c);
					}
			}

			// Consume characters
			memset(g.IO.InputCharacters, 0, sizeof(g.IO.InputCharacters));
		}

		// Handle various key-presses
		bool cancel_edit = false;
		const int k_mask = (io.KeyShift ? STB_TEXTEDIT_K_SHIFT : 0);
		const bool is_shortcut_key_only = (io.OSXBehaviors ? (io.KeySuper && !io.KeyCtrl) : (io.KeyCtrl && !io.KeySuper)) && !io.KeyAlt && !io.KeyShift; // OS X style: Shortcuts using Cmd/Super instead of Ctrl
		const bool is_wordmove_key_down = io.OSXBehaviors ? io.KeyAlt : io.KeyCtrl;                     // OS X style: Text editing cursor movement using Alt instead of Ctrl
		const bool is_startend_key_down = io.OSXBehaviors && io.KeySuper && !io.KeyCtrl && !io.KeyAlt;  // OS X style: Line/Text Start and End using Cmd+Arrows instead of Home/End

		if (IsKeyPressedMap(ImGuiKey_LeftArrow)) { edit_state.OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_LINESTART : is_wordmove_key_down ? STB_TEXTEDIT_K_WORDLEFT : STB_TEXTEDIT_K_LEFT) | k_mask); }
		else if (IsKeyPressedMap(ImGuiKey_RightArrow)) { edit_state.OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_LINEEND : is_wordmove_key_down ? STB_TEXTEDIT_K_WORDRIGHT : STB_TEXTEDIT_K_RIGHT) | k_mask); }
		else if (IsKeyPressedMap(ImGuiKey_UpArrow) && is_multiline) { if (io.KeyCtrl) SetWindowScrollY(draw_window, ImMax(draw_window->Scroll.y - g.FontSize, 0.0f)); else edit_state.OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_TEXTSTART : STB_TEXTEDIT_K_UP) | k_mask); }
		else if (IsKeyPressedMap(ImGuiKey_DownArrow) && is_multiline) { if (io.KeyCtrl) SetWindowScrollY(draw_window, ImMin(draw_window->Scroll.y + g.FontSize, GetScrollMaxY())); else edit_state.OnKeyPressed((is_startend_key_down ? STB_TEXTEDIT_K_TEXTEND : STB_TEXTEDIT_K_DOWN) | k_mask); }
		else if (IsKeyPressedMap(ImGuiKey_Home)) { edit_state.OnKeyPressed(io.KeyCtrl ? STB_TEXTEDIT_K_TEXTSTART | k_mask : STB_TEXTEDIT_K_LINESTART | k_mask); }
		else if (IsKeyPressedMap(ImGuiKey_End)) { edit_state.OnKeyPressed(io.KeyCtrl ? STB_TEXTEDIT_K_TEXTEND | k_mask : STB_TEXTEDIT_K_LINEEND | k_mask); }
		else if (IsKeyPressedMap(ImGuiKey_Delete) && is_editable) { edit_state.OnKeyPressed(STB_TEXTEDIT_K_DELETE | k_mask); }
		else if (IsKeyPressedMap(ImGuiKey_Backspace) && is_editable)
		{
			if (!edit_state.HasSelection())
			{
				if (is_wordmove_key_down) edit_state.OnKeyPressed(STB_TEXTEDIT_K_WORDLEFT | STB_TEXTEDIT_K_SHIFT);
				else if (io.OSXBehaviors && io.KeySuper && !io.KeyAlt && !io.KeyCtrl) edit_state.OnKeyPressed(STB_TEXTEDIT_K_LINESTART | STB_TEXTEDIT_K_SHIFT);
			}
			edit_state.OnKeyPressed(STB_TEXTEDIT_K_BACKSPACE | k_mask);
		}
		else if (IsKeyPressedMap(ImGuiKey_Enter))
		{
			bool ctrl_enter_for_new_line = (flags & ImGuiInputTextFlags_CtrlEnterForNewLine) != 0;
			if (!is_multiline || (ctrl_enter_for_new_line && !io.KeyCtrl) || (!ctrl_enter_for_new_line && io.KeyCtrl))
			{
				ClearActiveID();
				enter_pressed = true;
			}
			else if (is_editable)
			{
				unsigned int c = '\n'; // Insert new line
				if (InputTextFilterCharacter(&c, flags, callback, user_data))
					edit_state.OnKeyPressed((int)c);
			}
		}
		else if ((flags & ImGuiInputTextFlags_AllowTabInput) && IsKeyPressedMap(ImGuiKey_Tab) && !io.KeyCtrl && !io.KeyShift && !io.KeyAlt && is_editable)
		{
			unsigned int c = '\t'; // Insert TAB
			if (InputTextFilterCharacter(&c, flags, callback, user_data))
				edit_state.OnKeyPressed((int)c);
		}
		else if (IsKeyPressedMap(ImGuiKey_Escape)) { ClearActiveID(); cancel_edit = true; }
		else if (is_shortcut_key_only && IsKeyPressedMap(ImGuiKey_Z) && is_editable) { edit_state.OnKeyPressed(STB_TEXTEDIT_K_UNDO); edit_state.ClearSelection(); }
		else if (is_shortcut_key_only && IsKeyPressedMap(ImGuiKey_Y) && is_editable) { edit_state.OnKeyPressed(STB_TEXTEDIT_K_REDO); edit_state.ClearSelection(); }
		else if (is_shortcut_key_only && IsKeyPressedMap(ImGuiKey_A)) { edit_state.SelectAll(); edit_state.CursorFollow = true; }
		else if (is_shortcut_key_only && !is_password && ((IsKeyPressedMap(ImGuiKey_X) && is_editable) || IsKeyPressedMap(ImGuiKey_C)) && (!is_multiline || edit_state.HasSelection()))
		{
			// Cut, Copy
			const bool cut = IsKeyPressedMap(ImGuiKey_X);
			if (cut && !edit_state.HasSelection())
				edit_state.SelectAll();

			if (io.SetClipboardTextFn)
			{
				const int ib = edit_state.HasSelection() ? ImMin(edit_state.StbState.select_start, edit_state.StbState.select_end) : 0;
				const int ie = edit_state.HasSelection() ? ImMax(edit_state.StbState.select_start, edit_state.StbState.select_end) : edit_state.CurLenW;
				edit_state.TempTextBuffer.resize((ie - ib) * 4 + 1);
				ImTextStrToUtf8(edit_state.TempTextBuffer.Data, edit_state.TempTextBuffer.Size, edit_state.Text.Data + ib, edit_state.Text.Data + ie);
				SetClipboardText(edit_state.TempTextBuffer.Data);
			}

			if (cut)
			{
				edit_state.CursorFollow = true;
				stb_textedit_cut(&edit_state, &edit_state.StbState);
			}
		}
		else if (is_shortcut_key_only && IsKeyPressedMap(ImGuiKey_V) && is_editable)
		{
			// Paste
			if (const char* clipboard = GetClipboardText())
			{
				// Filter pasted buffer
				const int clipboard_len = (int)strlen(clipboard);
				ImWchar* clipboard_filtered = (ImWchar*)ImGui::MemAlloc((clipboard_len + 1) * sizeof(ImWchar));
				int clipboard_filtered_len = 0;
				for (const char* s = clipboard; *s; )
				{
					unsigned int c;
					s += ImTextCharFromUtf8(&c, s, NULL);
					if (c == 0)
						break;
					if (c >= 0x10000 || !InputTextFilterCharacter(&c, flags, callback, user_data))
						continue;
					clipboard_filtered[clipboard_filtered_len++] = (ImWchar)c;
				}
				clipboard_filtered[clipboard_filtered_len] = 0;
				if (clipboard_filtered_len > 0) // If everything was filtered, ignore the pasting operation
				{
					stb_textedit_paste(&edit_state, &edit_state.StbState, clipboard_filtered, clipboard_filtered_len);
					edit_state.CursorFollow = true;
				}
				ImGui::MemFree(clipboard_filtered);
			}
		}

		if (cancel_edit)
		{
			// Restore initial value
			if (is_editable)
			{
				ImStrncpy(buf, edit_state.InitialText.Data, buf_size);
				value_changed = true;
			}
		}
		else
		{
			// Apply new value immediately - copy modified buffer back
			// Note that as soon as the input box is active, the in-widget value gets priority over any underlying modification of the input buffer
			// FIXME: We actually always render 'buf' when calling DrawList->AddText, making the comment above incorrect.
			// FIXME-OPT: CPU waste to do this every time the widget is active, should mark dirty state from the stb_textedit callbacks.
			if (is_editable)
			{
				edit_state.TempTextBuffer.resize(edit_state.Text.Size * 4);
				ImTextStrToUtf8(edit_state.TempTextBuffer.Data, edit_state.TempTextBuffer.Size, edit_state.Text.Data, NULL);
			}

			// User callback
			if ((flags & (ImGuiInputTextFlags_CallbackCompletion | ImGuiInputTextFlags_CallbackHistory | ImGuiInputTextFlags_CallbackAlways)) != 0)
			{
				IM_ASSERT(callback != NULL);

				// The reason we specify the usage semantic (Completion/History) is that Completion needs to disable keyboard TABBING at the moment.
				ImGuiInputTextFlags event_flag = 0;
				ImGuiKey event_key = ImGuiKey_COUNT;
				if ((flags & ImGuiInputTextFlags_CallbackCompletion) != 0 && IsKeyPressedMap(ImGuiKey_Tab))
				{
					event_flag = ImGuiInputTextFlags_CallbackCompletion;
					event_key = ImGuiKey_Tab;
				}
				else if ((flags & ImGuiInputTextFlags_CallbackHistory) != 0 && IsKeyPressedMap(ImGuiKey_UpArrow))
				{
					event_flag = ImGuiInputTextFlags_CallbackHistory;
					event_key = ImGuiKey_UpArrow;
				}
				else if ((flags & ImGuiInputTextFlags_CallbackHistory) != 0 && IsKeyPressedMap(ImGuiKey_DownArrow))
				{
					event_flag = ImGuiInputTextFlags_CallbackHistory;
					event_key = ImGuiKey_DownArrow;
				}
				else if (flags & ImGuiInputTextFlags_CallbackAlways)
					event_flag = ImGuiInputTextFlags_CallbackAlways;

				if (event_flag)
				{
					ImGuiTextEditCallbackData callback_data;
					memset(&callback_data, 0, sizeof(ImGuiTextEditCallbackData));
					callback_data.EventFlag = event_flag;
					callback_data.Flags = flags;
					callback_data.UserData = user_data;
					callback_data.ReadOnly = !is_editable;

					callback_data.EventKey = event_key;
					callback_data.Buf = edit_state.TempTextBuffer.Data;
					callback_data.BufTextLen = edit_state.CurLenA;
					callback_data.BufSize = edit_state.BufSizeA;
					callback_data.BufDirty = false;

					// We have to convert from wchar-positions to UTF-8-positions, which can be pretty slow (an incentive to ditch the ImWchar buffer, see https://github.com/nothings/stb/issues/188)
					ImWchar* text = edit_state.Text.Data;
					const int utf8_cursor_pos = callback_data.CursorPos = ImTextCountUtf8BytesFromStr(text, text + edit_state.StbState.cursor);
					const int utf8_selection_start = callback_data.SelectionStart = ImTextCountUtf8BytesFromStr(text, text + edit_state.StbState.select_start);
					const int utf8_selection_end = callback_data.SelectionEnd = ImTextCountUtf8BytesFromStr(text, text + edit_state.StbState.select_end);

					// Call user code
					callback(&callback_data);

					// Read back what user may have modified
					IM_ASSERT(callback_data.Buf == edit_state.TempTextBuffer.Data);  // Invalid to modify those fields
					IM_ASSERT(callback_data.BufSize == edit_state.BufSizeA);
					IM_ASSERT(callback_data.Flags == flags);
					if (callback_data.CursorPos != utf8_cursor_pos)            edit_state.StbState.cursor = ImTextCountCharsFromUtf8(callback_data.Buf, callback_data.Buf + callback_data.CursorPos);
					if (callback_data.SelectionStart != utf8_selection_start)  edit_state.StbState.select_start = ImTextCountCharsFromUtf8(callback_data.Buf, callback_data.Buf + callback_data.SelectionStart);
					if (callback_data.SelectionEnd != utf8_selection_end)      edit_state.StbState.select_end = ImTextCountCharsFromUtf8(callback_data.Buf, callback_data.Buf + callback_data.SelectionEnd);
					if (callback_data.BufDirty)
					{
						IM_ASSERT(callback_data.BufTextLen == (int)strlen(callback_data.Buf)); // You need to maintain BufTextLen if you change the text!
						edit_state.CurLenW = ImTextStrFromUtf8(edit_state.Text.Data, edit_state.Text.Size, callback_data.Buf, NULL);
						edit_state.CurLenA = callback_data.BufTextLen;  // Assume correct length and valid UTF-8 from user, saves us an extra strlen()
						edit_state.CursorAnimReset();
					}
				}
			}

			// Copy back to user buffer
			if (is_editable && strcmp(edit_state.TempTextBuffer.Data, buf) != 0)
			{
				ImStrncpy(buf, edit_state.TempTextBuffer.Data, buf_size);
				value_changed = true;
			}
		}
	}

	// Render
	// Select which buffer we are going to display. When ImGuiInputTextFlags_NoLiveEdit is set 'buf' might still be the old value. We set buf to NULL to prevent accidental usage from now on.
	const char* buf_display = (g.ActiveId == id && is_editable) ? edit_state.TempTextBuffer.Data : buf; buf = NULL;

	if (!is_multiline)
		RenderFrame(frame_bb.Min, frame_bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);

	const ImVec4 clip_rect(frame_bb.Min.x, frame_bb.Min.y, frame_bb.Min.x + size.x, frame_bb.Min.y + size.y); // Not using frame_bb.Max because we have adjusted size
	ImVec2 render_pos = is_multiline ? draw_window->DC.CursorPos : frame_bb.Min + style.FramePadding;
	ImVec2 text_size(0.f, 0.f);
	const bool is_currently_scrolling = (edit_state.Id == id && is_multiline && g.ActiveId == draw_window->GetIDNoKeepAlive("#SCROLLY"));
	if (g.ActiveId == id || is_currently_scrolling)
	{
		edit_state.CursorAnim += io.DeltaTime;

		// This is going to be messy. We need to:
		// - Display the text (this alone can be more easily clipped)
		// - Handle scrolling, highlight selection, display cursor (those all requires some form of 1d->2d cursor position calculation)
		// - Measure text height (for scrollbar)
		// We are attempting to do most of that in **one main pass** to minimize the computation cost (non-negligible for large amount of text) + 2nd pass for selection rendering (we could merge them by an extra refactoring effort)
		// FIXME: This should occur on buf_display but we'd need to maintain cursor/select_start/select_end for UTF-8.
		const ImWchar* text_begin = edit_state.Text.Data;
		ImVec2 cursor_offset, select_start_offset;

		{
			// Count lines + find lines numbers straddling 'cursor' and 'select_start' position.
			const ImWchar* searches_input_ptr[2];
			searches_input_ptr[0] = text_begin + edit_state.StbState.cursor;
			searches_input_ptr[1] = NULL;
			int searches_remaining = 1;
			int searches_result_line_number[2] = { -1, -999 };
			if (edit_state.StbState.select_start != edit_state.StbState.select_end)
			{
				searches_input_ptr[1] = text_begin + ImMin(edit_state.StbState.select_start, edit_state.StbState.select_end);
				searches_result_line_number[1] = -1;
				searches_remaining++;
			}

			// Iterate all lines to find our line numbers
			// In multi-line mode, we never exit the loop until all lines are counted, so add one extra to the searches_remaining counter.
			searches_remaining += is_multiline ? 1 : 0;
			int line_count = 0;
			for (const ImWchar* s = text_begin; *s != 0; s++)
				if (*s == '\n')
				{
					line_count++;
					if (searches_result_line_number[0] == -1 && s >= searches_input_ptr[0]) { searches_result_line_number[0] = line_count; if (--searches_remaining <= 0) break; }
					if (searches_result_line_number[1] == -1 && s >= searches_input_ptr[1]) { searches_result_line_number[1] = line_count; if (--searches_remaining <= 0) break; }
				}
			line_count++;
			if (searches_result_line_number[0] == -1) searches_result_line_number[0] = line_count;
			if (searches_result_line_number[1] == -1) searches_result_line_number[1] = line_count;

			// Calculate 2d position by finding the beginning of the line and measuring distance
			cursor_offset.x = InputTextCalcTextSizeW(ImStrbolW(searches_input_ptr[0], text_begin), searches_input_ptr[0]).x;
			cursor_offset.y = searches_result_line_number[0] * g.FontSize;
			if (searches_result_line_number[1] >= 0)
			{
				select_start_offset.x = InputTextCalcTextSizeW(ImStrbolW(searches_input_ptr[1], text_begin), searches_input_ptr[1]).x;
				select_start_offset.y = searches_result_line_number[1] * g.FontSize;
			}

			// Calculate text height
			if (is_multiline)
				text_size = ImVec2(size.x, line_count * g.FontSize);
		}

		// Scroll
		if (edit_state.CursorFollow)
		{
			// Horizontal scroll in chunks of quarter width
			if (!(flags & ImGuiInputTextFlags_NoHorizontalScroll))
			{
				const float scroll_increment_x = size.x * 0.25f;
				if (cursor_offset.x < edit_state.ScrollX)
					edit_state.ScrollX = (float)(int)ImMax(0.0f, cursor_offset.x - scroll_increment_x);
				else if (cursor_offset.x - size.x >= edit_state.ScrollX)
					edit_state.ScrollX = (float)(int)(cursor_offset.x - size.x + scroll_increment_x);
			}
			else
			{
				edit_state.ScrollX = 0.0f;
			}

			// Vertical scroll
			if (is_multiline)
			{
				float scroll_y = draw_window->Scroll.y;
				if (cursor_offset.y - g.FontSize < scroll_y)
					scroll_y = ImMax(0.0f, cursor_offset.y - g.FontSize);
				else if (cursor_offset.y - size.y >= scroll_y)
					scroll_y = cursor_offset.y - size.y;
				draw_window->DC.CursorPos.y += (draw_window->Scroll.y - scroll_y);   // To avoid a frame of lag
				draw_window->Scroll.y = scroll_y;
				render_pos.y = draw_window->DC.CursorPos.y;
			}
		}
		edit_state.CursorFollow = false;
		const ImVec2 render_scroll = ImVec2(edit_state.ScrollX, 0.0f);

		// Draw selection
		if (edit_state.StbState.select_start != edit_state.StbState.select_end)
		{
			const ImWchar* text_selected_begin = text_begin + ImMin(edit_state.StbState.select_start, edit_state.StbState.select_end);
			const ImWchar* text_selected_end = text_begin + ImMax(edit_state.StbState.select_start, edit_state.StbState.select_end);

			float bg_offy_up = is_multiline ? 0.0f : -1.0f;    // FIXME: those offsets should be part of the style? they don't play so well with multi-line selection.
			float bg_offy_dn = is_multiline ? 0.0f : 2.0f;
			ImU32 bg_color = GetColorU32(ImGuiCol_TextSelectedBg);
			ImVec2 rect_pos = render_pos + select_start_offset - render_scroll;
			for (const ImWchar* p = text_selected_begin; p < text_selected_end; )
			{
				if (rect_pos.y > clip_rect.w + g.FontSize)
					break;
				if (rect_pos.y < clip_rect.y)
				{
					while (p < text_selected_end)
						if (*p++ == '\n')
							break;
				}
				else
				{
					ImVec2 rect_size = InputTextCalcTextSizeW(p, text_selected_end, &p, NULL, true);
					if (rect_size.x <= 0.0f) rect_size.x = (float)(int)(g.Font->GetCharAdvance((unsigned short)' ') * 0.50f); // So we can see selected empty lines
					ImRect rect(rect_pos + ImVec2(0.0f, bg_offy_up - g.FontSize), rect_pos + ImVec2(rect_size.x, bg_offy_dn));
					rect.Clip(clip_rect);
					if (rect.Overlaps(clip_rect))
						draw_window->DrawList->AddRectFilled(rect.Min, rect.Max, bg_color);
				}
				rect_pos.x = render_pos.x - render_scroll.x;
				rect_pos.y += g.FontSize;
			}
		}

		draw_window->DrawList->AddText(g.Font, g.FontSize, render_pos - render_scroll, GetColorU32(ImGuiCol_Text), buf_display, buf_display + edit_state.CurLenA, 0.0f, is_multiline ? NULL : &clip_rect);

		// Draw blinking cursor
		bool cursor_is_visible = (g.InputTextState.CursorAnim <= 0.0f) || fmodf(g.InputTextState.CursorAnim, 1.20f) <= 0.80f;
		ImVec2 cursor_screen_pos = render_pos + cursor_offset - render_scroll;
		ImRect cursor_screen_rect(cursor_screen_pos.x, cursor_screen_pos.y - g.FontSize + 0.5f, cursor_screen_pos.x + 1.0f, cursor_screen_pos.y - 1.5f);
		if (cursor_is_visible && cursor_screen_rect.Overlaps(clip_rect))
			draw_window->DrawList->AddLine(cursor_screen_rect.Min, cursor_screen_rect.GetBL(), GetColorU32(ImGuiCol_Text));

		// Notify OS of text input position for advanced IME (-1 x offset so that Windows IME can cover our cursor. Bit of an extra nicety.)
		if (is_editable)
			g.OsImePosRequest = ImVec2(cursor_screen_pos.x - 1, cursor_screen_pos.y - g.FontSize);
	}
	else
	{
		// Render text only
		const char* buf_end = NULL;
		if (is_multiline)
			text_size = ImVec2(size.x, InputTextCalcTextLenAndLineCount(buf_display, &buf_end) * g.FontSize); // We don't need width
		draw_window->DrawList->AddText(g.Font, g.FontSize, render_pos, GetColorU32(ImGuiCol_Text), buf_display, buf_end, 0.0f, is_multiline ? NULL : &clip_rect);
	}

	if (is_multiline)
	{
		Dummy(text_size + ImVec2(0.0f, g.FontSize)); // Always add room to scroll an extra line
		EndChildFrame();
		EndGroup();
	}

	if (is_password)
		PopFont();

	// Log as text
	if (g.LogEnabled && !is_password)
		LogRenderedText(render_pos, buf_display, NULL);

	if (label_size.x > 0)
		RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

	if ((flags & ImGuiInputTextFlags_EnterReturnsTrue) != 0)
		return enter_pressed;
	else
		return value_changed;
}

bool ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data)
{
	IM_ASSERT(!(flags & ImGuiInputTextFlags_Multiline)); // call InputTextMultiline()
	return InputTextEx(label, buf, (int)buf_size, ImVec2(0, 0), flags, callback, user_data);
}

bool ImGui::InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void* user_data)
{
	return InputTextEx(label, buf, (int)buf_size, size, flags | ImGuiInputTextFlags_Multiline, callback, user_data);
}

// NB: scalar_format here must be a simple "%xx" format string with no prefix/suffix (unlike the Drag/Slider functions "display_format" argument)
bool ImGui::InputScalarEx(const char* label, ImGuiDataType data_type, void* data_ptr, void* step_ptr, void* step_fast_ptr, const char* scalar_format, ImGuiInputTextFlags extra_flags)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;
	const ImVec2 label_size = CalcTextSize(label, NULL, true);

	BeginGroup();
	PushID(label);
	const ImVec2 button_sz = ImVec2(g.FontSize, g.FontSize) + style.FramePadding*2.0f;
	if (step_ptr)
		PushItemWidth(ImMax(1.0f, CalcItemWidth() - (button_sz.x + style.ItemInnerSpacing.x) * 2));

	char buf[64];
	DataTypeFormatString(data_type, data_ptr, scalar_format, buf, IM_ARRAYSIZE(buf));

	bool value_changed = false;
	if (!(extra_flags & ImGuiInputTextFlags_CharsHexadecimal))
		extra_flags |= ImGuiInputTextFlags_CharsDecimal;
	extra_flags |= ImGuiInputTextFlags_AutoSelectAll;
	if (InputText("", buf, IM_ARRAYSIZE(buf), extra_flags)) // PushId(label) + "" gives us the expected ID from outside point of view
		value_changed = DataTypeApplyOpFromText(buf, GImGui->InputTextState.InitialText.begin(), data_type, data_ptr, scalar_format);

	// Step buttons
	if (step_ptr)
	{
		PopItemWidth();
		SameLine(0, style.ItemInnerSpacing.x);
		if (ButtonEx("-", button_sz, ImGuiButtonFlags_Repeat | ImGuiButtonFlags_DontClosePopups))
		{
			DataTypeApplyOp(data_type, '-', data_ptr, g.IO.KeyCtrl && step_fast_ptr ? step_fast_ptr : step_ptr);
			value_changed = true;
		}
		SameLine(0, style.ItemInnerSpacing.x);
		if (ButtonEx("+", button_sz, ImGuiButtonFlags_Repeat | ImGuiButtonFlags_DontClosePopups))
		{
			DataTypeApplyOp(data_type, '+', data_ptr, g.IO.KeyCtrl && step_fast_ptr ? step_fast_ptr : step_ptr);
			value_changed = true;
		}
	}
	PopID();

	if (label_size.x > 0)
	{
		SameLine(0, style.ItemInnerSpacing.x);
		RenderText(ImVec2(window->DC.CursorPos.x, window->DC.CursorPos.y + style.FramePadding.y), label);
		ItemSize(label_size, style.FramePadding.y);
	}
	EndGroup();

	return value_changed;
}

bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, int decimal_precision, ImGuiInputTextFlags extra_flags)
{
	char display_format[16];
	if (decimal_precision < 0)
		strcpy(display_format, "%f");      // Ideally we'd have a minimum decimal precision of 1 to visually denote that this is a float, while hiding non-significant digits? %f doesn't have a minimum of 1
	else
		ImFormatString(display_format, IM_ARRAYSIZE(display_format), "%%.%df", decimal_precision);
	return InputScalarEx(label, ImGuiDataType_Float, (void*)v, (void*)(step>0.0f ? &step : NULL), (void*)(step_fast>0.0f ? &step_fast : NULL), display_format, extra_flags);
}

bool ImGui::InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags extra_flags)
{
	// Hexadecimal input provided as a convenience but the flag name is awkward. Typically you'd use InputText() to parse your own data, if you want to handle prefixes.
	const char* scalar_format = (extra_flags & ImGuiInputTextFlags_CharsHexadecimal) ? "%08X" : "%d";
	return InputScalarEx(label, ImGuiDataType_Int, (void*)v, (void*)(step>0.0f ? &step : NULL), (void*)(step_fast>0.0f ? &step_fast : NULL), scalar_format, extra_flags);
}

bool ImGui::InputFloatN(const char* label, float* v, int components, int decimal_precision, ImGuiInputTextFlags extra_flags)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	bool value_changed = false;
	BeginGroup();
	PushID(label);
	PushMultiItemsWidths(components);
	for (int i = 0; i < components; i++)
	{
		PushID(i);
		value_changed |= InputFloat("##v", &v[i], 0, 0, decimal_precision, extra_flags);
		SameLine(0, g.Style.ItemInnerSpacing.x);
		PopID();
		PopItemWidth();
	}
	PopID();

	window->DC.CurrentLineTextBaseOffset = ImMax(window->DC.CurrentLineTextBaseOffset, g.Style.FramePadding.y);
	TextUnformatted(label, FindRenderedTextEnd(label));
	EndGroup();

	return value_changed;
}

bool ImGui::InputFloat2(const char* label, float v[2], int decimal_precision, ImGuiInputTextFlags extra_flags)
{
	return InputFloatN(label, v, 2, decimal_precision, extra_flags);
}

bool ImGui::InputFloat3(const char* label, float v[3], int decimal_precision, ImGuiInputTextFlags extra_flags)
{
	return InputFloatN(label, v, 3, decimal_precision, extra_flags);
}

bool ImGui::InputFloat4(const char* label, float v[4], int decimal_precision, ImGuiInputTextFlags extra_flags)
{
	return InputFloatN(label, v, 4, decimal_precision, extra_flags);
}

bool ImGui::InputIntN(const char* label, int* v, int components, ImGuiInputTextFlags extra_flags)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	bool value_changed = false;
	BeginGroup();
	PushID(label);
	PushMultiItemsWidths(components);
	for (int i = 0; i < components; i++)
	{
		PushID(i);
		value_changed |= InputInt("##v", &v[i], 0, 0, extra_flags);
		SameLine(0, g.Style.ItemInnerSpacing.x);
		PopID();
		PopItemWidth();
	}
	PopID();

	window->DC.CurrentLineTextBaseOffset = ImMax(window->DC.CurrentLineTextBaseOffset, g.Style.FramePadding.y);
	TextUnformatted(label, FindRenderedTextEnd(label));
	EndGroup();

	return value_changed;
}

bool ImGui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags extra_flags)
{
	return InputIntN(label, v, 2, extra_flags);
}

bool ImGui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags extra_flags)
{
	return InputIntN(label, v, 3, extra_flags);
}

bool ImGui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags extra_flags)
{
	return InputIntN(label, v, 4, extra_flags);
}

static bool Items_ArrayGetter(void* data, int idx, const char** out_text)
{
	const char* const* items = (const char* const*)data;
	if (out_text)
		*out_text = items[idx];
	return true;
}

static bool Items_SingleStringGetter(void* data, int idx, const char** out_text)
{
	// FIXME-OPT: we could pre-compute the indices to fasten this. But only 1 active combo means the waste is limited.
	const char* items_separated_by_zeros = (const char*)data;
	int items_count = 0;
	const char* p = items_separated_by_zeros;
	while (*p)
	{
		if (idx == items_count)
			break;
		p += strlen(p) + 1;
		items_count++;
	}
	if (!*p)
		return false;
	if (out_text)
		*out_text = p;
	return true;
}

// Combo box helper allowing to pass an array of strings.
bool ImGui::Combo(const char* label, int* current_item, const char* const* items, int items_count, int height_in_items)
{
	const bool value_changed = Combo(label, current_item, Items_ArrayGetter, (void*)items, items_count, height_in_items);
	return value_changed;
}

// Combo box helper allowing to pass all items in a single string.
bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, int height_in_items)
{
	int items_count = 0;
	const char* p = items_separated_by_zeros;       // FIXME-OPT: Avoid computing this, or at least only when combo is open
	while (*p)
	{
		p += strlen(p) + 1;
		items_count++;
	}
	bool value_changed = Combo(label, current_item, Items_SingleStringGetter, (void*)items_separated_by_zeros, items_count, height_in_items);
	return value_changed;
}

// Combo box function.
bool ImGui::Combo(const char* label, int* current_item, bool(*items_getter)(void*, int, const char**), void* data, int items_count, int height_in_items)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;
	const ImGuiID id = window->GetID(label);
	const float w = CalcItemWidth();

	const ImVec2 label_size = CalcTextSize(label, NULL, true);
	const ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(w, label_size.y + style.FramePadding.y*2.0f));
	const ImRect total_bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));
	ItemSize(total_bb, style.FramePadding.y);
	if (!ItemAdd(total_bb, &id))
		return false;

	const float arrow_size = (g.FontSize + style.FramePadding.x * 2.0f);
	const bool hovered = IsHovered(frame_bb, id);
	bool popup_open = IsPopupOpen(id);
	bool popup_opened_now = false;

	const ImRect value_bb(frame_bb.Min, frame_bb.Max - ImVec2(arrow_size, 0.0f));
	RenderFrame(frame_bb.Min, frame_bb.Max, GetColorU32(ImGuiCol_FrameBg), true, style.FrameRounding);
	RenderFrame(ImVec2(frame_bb.Max.x - arrow_size, frame_bb.Min.y), frame_bb.Max, GetColorU32(popup_open || hovered ? ImGuiCol_ButtonHovered : ImGuiCol_Button), true, style.FrameRounding); // FIXME-ROUNDING
	RenderCollapseTriangle(ImVec2(frame_bb.Max.x - arrow_size, frame_bb.Min.y) + style.FramePadding, true);

	if (*current_item >= 0 && *current_item < items_count)
	{
		const char* item_text;
		if (items_getter(data, *current_item, &item_text))
			RenderTextClipped(frame_bb.Min + style.FramePadding, value_bb.Max, item_text, NULL, NULL, ImVec2(0.0f, 0.0f));
	}

	if (label_size.x > 0)
		RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

	if (hovered)
	{
		SetHoveredID(id);
		if (g.IO.MouseClicked[0])
		{
			ClearActiveID();
			if (IsPopupOpen(id))
			{
				ClosePopup(id);
			}
			else
			{
				FocusWindow(window);
				OpenPopup(label);
				popup_open = popup_opened_now = true;
			}
		}
	}

	bool value_changed = false;
	if (IsPopupOpen(id))
	{
		// Size default to hold ~7 items
		if (height_in_items < 0)
			height_in_items = 7;

		float popup_height = (label_size.y + style.ItemSpacing.y) * ImMin(items_count, height_in_items) + (style.FramePadding.y * 3);
		float popup_y1 = frame_bb.Max.y;
		float popup_y2 = ImClamp(popup_y1 + popup_height, popup_y1, g.IO.DisplaySize.y - style.DisplaySafeAreaPadding.y);
		if ((popup_y2 - popup_y1) < ImMin(popup_height, frame_bb.Min.y - style.DisplaySafeAreaPadding.y))
		{
			// Position our combo ABOVE because there's more space to fit! (FIXME: Handle in Begin() or use a shared helper. We have similar code in Begin() for popup placement)
			popup_y1 = ImClamp(frame_bb.Min.y - popup_height, style.DisplaySafeAreaPadding.y, frame_bb.Min.y);
			popup_y2 = frame_bb.Min.y;
		}
		ImRect popup_rect(ImVec2(frame_bb.Min.x, popup_y1), ImVec2(frame_bb.Max.x, popup_y2));
		SetNextWindowPos(popup_rect.Min);
		SetNextWindowSize(popup_rect.GetSize());
		PushStyleVar(ImGuiStyleVar_WindowPadding, style.FramePadding);

		const ImGuiWindowFlags flags = ImGuiWindowFlags_ComboBox | ((window->Flags & ImGuiWindowFlags_ShowBorders) ? ImGuiWindowFlags_ShowBorders : 0);
		if (BeginPopupEx(label, flags))
		{
			// Display items
			Spacing();
			for (int i = 0; i < items_count; i++)
			{
				PushID((void*)(intptr_t)i);
				const bool item_selected = (i == *current_item);
				const char* item_text;
				if (!items_getter(data, i, &item_text))
					item_text = "*Unknown item*";
				if (Selectable(item_text, item_selected))
				{
					ClearActiveID();
					value_changed = true;
					*current_item = i;
				}
				if (item_selected && popup_opened_now)
					SetScrollHere();
				PopID();
			}
			EndPopup();
		}
		PopStyleVar();
	}
	return value_changed;
}

// Tip: pass an empty label (e.g. "##dummy") then you can use the space to draw other text or image.
// But you need to make sure the ID is unique, e.g. enclose calls in PushID/PopID.
bool ImGui::Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec2& size_arg)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;

	if ((flags & ImGuiSelectableFlags_SpanAllColumns) && window->DC.ColumnsCount > 1)
		PopClipRect();

	ImGuiID id = window->GetID(label);
	ImVec2 label_size = CalcTextSize(label, NULL, true);
	ImVec2 size(size_arg.x != 0.0f ? size_arg.x : label_size.x, size_arg.y != 0.0f ? size_arg.y : label_size.y);
	ImVec2 pos = window->DC.CursorPos;
	pos.y += window->DC.CurrentLineTextBaseOffset;
	ImRect bb(pos, pos + size);
	ItemSize(bb);

	// Fill horizontal space.
	ImVec2 window_padding = window->WindowPadding;
	float max_x = (flags & ImGuiSelectableFlags_SpanAllColumns) ? GetWindowContentRegionMax().x : GetContentRegionMax().x;
	float w_draw = ImMax(label_size.x, window->Pos.x + max_x - window_padding.x - window->DC.CursorPos.x);
	ImVec2 size_draw((size_arg.x != 0 && !(flags & ImGuiSelectableFlags_DrawFillAvailWidth)) ? size_arg.x : w_draw, size_arg.y != 0.0f ? size_arg.y : size.y);
	ImRect bb_with_spacing(pos, pos + size_draw);
	if (size_arg.x == 0.0f || (flags & ImGuiSelectableFlags_DrawFillAvailWidth))
		bb_with_spacing.Max.x += window_padding.x;

	// Selectables are tightly packed together, we extend the box to cover spacing between selectable.
	float spacing_L = (float)(int)(style.ItemSpacing.x * 0.5f);
	float spacing_U = (float)(int)(style.ItemSpacing.y * 0.5f);
	float spacing_R = style.ItemSpacing.x - spacing_L;
	float spacing_D = style.ItemSpacing.y - spacing_U;
	bb_with_spacing.Min.x -= spacing_L;
	bb_with_spacing.Min.y -= spacing_U;
	bb_with_spacing.Max.x += spacing_R;
	bb_with_spacing.Max.y += spacing_D;
	if (!ItemAdd(bb_with_spacing, &id))
	{
		if ((flags & ImGuiSelectableFlags_SpanAllColumns) && window->DC.ColumnsCount > 1)
			PushColumnClipRect();
		return false;
	}

	ImGuiButtonFlags button_flags = 0;
	if (flags & ImGuiSelectableFlags_Menu) button_flags |= ImGuiButtonFlags_PressedOnClick;
	if (flags & ImGuiSelectableFlags_MenuItem) button_flags |= ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags_PressedOnRelease;
	if (flags & ImGuiSelectableFlags_Disabled) button_flags |= ImGuiButtonFlags_Disabled;
	if (flags & ImGuiSelectableFlags_AllowDoubleClick) button_flags |= ImGuiButtonFlags_PressedOnClickRelease | ImGuiButtonFlags_PressedOnDoubleClick;
	bool hovered, held;
	bool pressed = ButtonBehavior(bb_with_spacing, id, &hovered, &held, button_flags);
	if (flags & ImGuiSelectableFlags_Disabled)
		selected = false;

	// Render
	if (hovered || selected)
	{
		const ImU32 col = GetColorU32((held && hovered) ? ImGuiCol_HeaderActive : hovered ? ImGuiCol_HeaderHovered : ImGuiCol_Header);
		RenderFrame(bb_with_spacing.Min, bb_with_spacing.Max, col, false, 0.0f);
	}

	if ((flags & ImGuiSelectableFlags_SpanAllColumns) && window->DC.ColumnsCount > 1)
	{
		PushColumnClipRect();
		bb_with_spacing.Max.x -= (GetContentRegionMax().x - max_x);
	}

	if (flags & ImGuiSelectableFlags_Disabled) PushStyleColor(ImGuiCol_Text, g.Style.Colors[ImGuiCol_TextDisabled]);
	RenderTextClipped(bb.Min, bb_with_spacing.Max, label, NULL, &label_size, ImVec2(0.0f, 0.0f));
	if (flags & ImGuiSelectableFlags_Disabled) PopStyleColor();

	// Automatically close popups
	if (pressed && !(flags & ImGuiSelectableFlags_DontClosePopups) && (window->Flags & ImGuiWindowFlags_Popup))
		CloseCurrentPopup();
	return pressed;
}

bool ImGui::Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const ImVec2& size_arg)
{
	if (Selectable(label, *p_selected, flags, size_arg))
	{
		*p_selected = !*p_selected;
		return true;
	}
	return false;
}

// Helper to calculate the size of a listbox and display a label on the right.
// Tip: To have a list filling the entire window width, PushItemWidth(-1) and pass an empty label "##empty"
bool ImGui::ListBoxHeader(const char* label, const ImVec2& size_arg)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	const ImGuiStyle& style = GetStyle();
	const ImGuiID id = GetID(label);
	const ImVec2 label_size = CalcTextSize(label, NULL, true);

	// Size default to hold ~7 items. Fractional number of items helps seeing that we can scroll down/up without looking at scrollbar.
	ImVec2 size = CalcItemSize(size_arg, CalcItemWidth(), GetTextLineHeightWithSpacing() * 7.4f + style.ItemSpacing.y);
	ImVec2 frame_size = ImVec2(size.x, ImMax(size.y, label_size.y));
	ImRect frame_bb(window->DC.CursorPos, window->DC.CursorPos + frame_size);
	ImRect bb(frame_bb.Min, frame_bb.Max + ImVec2(label_size.x > 0.0f ? style.ItemInnerSpacing.x + label_size.x : 0.0f, 0.0f));
	window->DC.LastItemRect = bb;

	BeginGroup();
	if (label_size.x > 0)
		RenderText(ImVec2(frame_bb.Max.x + style.ItemInnerSpacing.x, frame_bb.Min.y + style.FramePadding.y), label);

	BeginChildFrame(id, frame_bb.GetSize());
	return true;
}

bool ImGui::ListBoxHeader(const char* label, int items_count, int height_in_items)
{
	// Size default to hold ~7 items. Fractional number of items helps seeing that we can scroll down/up without looking at scrollbar.
	// However we don't add +0.40f if items_count <= height_in_items. It is slightly dodgy, because it means a dynamic list of items will make the widget resize occasionally when it crosses that size.
	// I am expecting that someone will come and complain about this behavior in a remote future, then we can advise on a better solution.
	if (height_in_items < 0)
		height_in_items = ImMin(items_count, 7);
	float height_in_items_f = height_in_items < items_count ? (height_in_items + 0.40f) : (height_in_items + 0.00f);

	// We include ItemSpacing.y so that a list sized for the exact number of items doesn't make a scrollbar appears. We could also enforce that by passing a flag to BeginChild().
	ImVec2 size;
	size.x = 0.0f;
	size.y = GetTextLineHeightWithSpacing() * height_in_items_f + GetStyle().ItemSpacing.y;
	return ListBoxHeader(label, size);
}

void ImGui::ListBoxFooter()
{
	ImGuiWindow* parent_window = GetParentWindow();
	const ImRect bb = parent_window->DC.LastItemRect;
	const ImGuiStyle& style = GetStyle();

	EndChildFrame();

	// Redeclare item size so that it includes the label (we have stored the full size in LastItemRect)
	// We call SameLine() to restore DC.CurrentLine* data
	SameLine();
	parent_window->DC.CursorPos = bb.Min;
	ItemSize(bb, style.FramePadding.y);
	EndGroup();
}

bool ImGui::ListBox(const char* label, int* current_item, const char* const* items, int items_count, int height_items)
{
	const bool value_changed = ListBox(label, current_item, Items_ArrayGetter, (void*)items, items_count, height_items);
	return value_changed;
}

bool ImGui::ListBox(const char* label, int* current_item, bool(*items_getter)(void*, int, const char**), void* data, int items_count, int height_in_items)
{
	if (!ListBoxHeader(label, items_count, height_in_items))
		return false;

	// Assume all items have even height (= 1 line of text). If you need items of different or variable sizes you can create a custom version of ListBox() in your code without using the clipper.
	bool value_changed = false;
	ImGuiListClipper clipper(items_count, GetTextLineHeightWithSpacing());
	while (clipper.Step())
		for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
		{
			const bool item_selected = (i == *current_item);
			const char* item_text;
			if (!items_getter(data, i, &item_text))
				item_text = "*Unknown item*";

			PushID(i);
			if (Selectable(item_text, item_selected))
			{
				*current_item = i;
				value_changed = true;
			}
			PopID();
		}
	ListBoxFooter();
	return value_changed;
}

bool ImGui::MenuItem(const char* label, const char* shortcut, bool selected, bool enabled)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	ImVec2 pos = window->DC.CursorPos;
	ImVec2 label_size = CalcTextSize(label, NULL, true);
	ImVec2 shortcut_size = shortcut ? CalcTextSize(shortcut, NULL) : ImVec2(0.0f, 0.0f);
	float w = window->MenuColumns.DeclColumns(label_size.x, shortcut_size.x, (float)(int)(g.FontSize * 1.20f)); // Feedback for next frame
	float extra_w = ImMax(0.0f, GetContentRegionAvail().x - w);

	bool pressed = Selectable(label, false, ImGuiSelectableFlags_MenuItem | ImGuiSelectableFlags_DrawFillAvailWidth | (enabled ? 0 : ImGuiSelectableFlags_Disabled), ImVec2(w, 0.0f));
	if (shortcut_size.x > 0.0f)
	{
		PushStyleColor(ImGuiCol_Text, g.Style.Colors[ImGuiCol_TextDisabled]);
		RenderText(pos + ImVec2(window->MenuColumns.Pos[1] + extra_w, 0.0f), shortcut, NULL, false);
		PopStyleColor();
	}

	if (selected)
		RenderCheckMark(pos + ImVec2(window->MenuColumns.Pos[2] + extra_w + g.FontSize * 0.20f, 0.0f), GetColorU32(enabled ? ImGuiCol_Text : ImGuiCol_TextDisabled));

	return pressed;
}

bool ImGui::MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled)
{
	if (MenuItem(label, shortcut, p_selected ? *p_selected : false, enabled))
	{
		if (p_selected)
			*p_selected = !*p_selected;
		return true;
	}
	return false;
}

bool ImGui::BeginMainMenuBar()
{
	ImGuiContext& g = *GImGui;
	SetNextWindowPos(ImVec2(0.0f, 0.0f));
	SetNextWindowSize(ImVec2(g.IO.DisplaySize.x, g.FontBaseSize + g.Style.FramePadding.y * 2.0f));
	PushStyleVar(ImGuiStyleVar_WindowRounding, 0.0f);
	PushStyleVar(ImGuiStyleVar_WindowMinSize, ImVec2(0, 0));
	if (!Begin("##MainMenuBar", NULL, ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_MenuBar)
		|| !BeginMenuBar())
	{
		End();
		PopStyleVar(2);
		return false;
	}
	g.CurrentWindow->DC.MenuBarOffsetX += g.Style.DisplaySafeAreaPadding.x;
	return true;
}

void ImGui::EndMainMenuBar()
{
	EndMenuBar();
	End();
	PopStyleVar(2);
}

bool ImGui::BeginMenuBar()
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;
	if (!(window->Flags & ImGuiWindowFlags_MenuBar))
		return false;

	IM_ASSERT(!window->DC.MenuBarAppending);
	BeginGroup(); // Save position
	PushID("##menubar");
	ImRect rect = window->MenuBarRect();
	PushClipRect(ImVec2(ImFloor(rect.Min.x + 0.5f), ImFloor(rect.Min.y + window->BorderSize + 0.5f)), ImVec2(ImFloor(rect.Max.x + 0.5f), ImFloor(rect.Max.y + 0.5f)), false);
	window->DC.CursorPos = ImVec2(rect.Min.x + window->DC.MenuBarOffsetX, rect.Min.y);// + g.Style.FramePadding.y);
	window->DC.LayoutType = ImGuiLayoutType_Horizontal;
	window->DC.MenuBarAppending = true;
	AlignFirstTextHeightToWidgets();
	return true;
}

void ImGui::EndMenuBar()
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return;

	IM_ASSERT(window->Flags & ImGuiWindowFlags_MenuBar);
	IM_ASSERT(window->DC.MenuBarAppending);
	PopClipRect();
	PopID();
	window->DC.MenuBarOffsetX = window->DC.CursorPos.x - window->MenuBarRect().Min.x;
	window->DC.GroupStack.back().AdvanceCursor = false;
	EndGroup();
	window->DC.LayoutType = ImGuiLayoutType_Vertical;
	window->DC.MenuBarAppending = false;
}

bool ImGui::BeginMenu(const char* label, bool enabled)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;
	const ImGuiID id = window->GetID(label);

	ImVec2 label_size = CalcTextSize(label, NULL, true);
	ImGuiWindow* backed_focused_window = g.FocusedWindow;

	bool pressed;
	bool menu_is_open = IsPopupOpen(id);
	bool menuset_is_open = !(window->Flags & ImGuiWindowFlags_Popup) && (g.OpenPopupStack.Size > g.CurrentPopupStack.Size && g.OpenPopupStack[g.CurrentPopupStack.Size].ParentMenuSet == window->GetID("##menus"));
	if (menuset_is_open)
		g.FocusedWindow = window;

	// The reference position stored in popup_pos will be used by Begin() to find a suitable position for the child menu (using FindBestPopupWindowPos).
	ImVec2 popup_pos, pos = window->DC.CursorPos;
	if (window->DC.LayoutType == ImGuiLayoutType_Horizontal)
	{
		popup_pos = ImVec2(pos.x - window->WindowPadding.x, pos.y - style.FramePadding.y + window->MenuBarHeight());
		window->DC.CursorPos.x += (float)(int)(style.ItemSpacing.x * 0.5f);
		PushStyleVar(ImGuiStyleVar_ItemSpacing, style.ItemSpacing * 2.0f);
		float w = label_size.x;
		pressed = Selectable(label, menu_is_open, ImGuiSelectableFlags_Menu | ImGuiSelectableFlags_DontClosePopups | (!enabled ? ImGuiSelectableFlags_Disabled : 0), ImVec2(w, 0.0f));
		PopStyleVar();
		SameLine();
		window->DC.CursorPos.x += (float)(int)(style.ItemSpacing.x * 0.5f);
	}
	else
	{
		popup_pos = ImVec2(pos.x, pos.y - style.WindowPadding.y);
		float w = window->MenuColumns.DeclColumns(label_size.x, 0.0f, (float)(int)(g.FontSize * 1.20f)); // Feedback to next frame
		float extra_w = ImMax(0.0f, GetContentRegionAvail().x - w);
		pressed = Selectable(label, menu_is_open, ImGuiSelectableFlags_Menu | ImGuiSelectableFlags_DontClosePopups | ImGuiSelectableFlags_DrawFillAvailWidth | (!enabled ? ImGuiSelectableFlags_Disabled : 0), ImVec2(w, 0.0f));
		if (!enabled) PushStyleColor(ImGuiCol_Text, g.Style.Colors[ImGuiCol_TextDisabled]);
		RenderCollapseTriangle(pos + ImVec2(window->MenuColumns.Pos[2] + extra_w + g.FontSize * 0.20f, 0.0f), false);
		if (!enabled) PopStyleColor();
	}

	bool hovered = enabled && IsHovered(window->DC.LastItemRect, id);
	if (menuset_is_open)
		g.FocusedWindow = backed_focused_window;

	bool want_open = false, want_close = false;
	if (window->Flags & (ImGuiWindowFlags_Popup | ImGuiWindowFlags_ChildMenu))
	{
		// Implement http://bjk5.com/post/44698559168/breaking-down-amazons-mega-dropdown to avoid using timers, so menus feels more reactive.
		bool moving_within_opened_triangle = false;
		if (g.HoveredWindow == window && g.OpenPopupStack.Size > g.CurrentPopupStack.Size && g.OpenPopupStack[g.CurrentPopupStack.Size].ParentWindow == window)
		{
			if (ImGuiWindow* next_window = g.OpenPopupStack[g.CurrentPopupStack.Size].Window)
			{
				ImRect next_window_rect = next_window->Rect();
				ImVec2 ta = g.IO.MousePos - g.IO.MouseDelta;
				ImVec2 tb = (window->Pos.x < next_window->Pos.x) ? next_window_rect.GetTL() : next_window_rect.GetTR();
				ImVec2 tc = (window->Pos.x < next_window->Pos.x) ? next_window_rect.GetBL() : next_window_rect.GetBR();
				float extra = ImClamp(fabsf(ta.x - tb.x) * 0.30f, 5.0f, 30.0f); // add a bit of extra slack.
				ta.x += (window->Pos.x < next_window->Pos.x) ? -0.5f : +0.5f;   // to avoid numerical issues
				tb.y = ta.y + ImMax((tb.y - extra) - ta.y, -100.0f);            // triangle is maximum 200 high to limit the slope and the bias toward large sub-menus // FIXME: Multiply by fb_scale?
				tc.y = ta.y + ImMin((tc.y + extra) - ta.y, +100.0f);
				moving_within_opened_triangle = ImIsPointInTriangle(g.IO.MousePos, ta, tb, tc);
				//window->DrawList->PushClipRectFullScreen(); window->DrawList->AddTriangleFilled(ta, tb, tc, moving_within_opened_triangle ? IM_COL32(0,128,0,128) : IM_COL32(128,0,0,128)); window->DrawList->PopClipRect(); // Debug
			}
		}

		want_close = (menu_is_open && !hovered && g.HoveredWindow == window && g.HoveredIdPreviousFrame != 0 && g.HoveredIdPreviousFrame != id && !moving_within_opened_triangle);
		want_open = (!menu_is_open && hovered && !moving_within_opened_triangle) || (!menu_is_open && hovered && pressed);
	}
	else if (menu_is_open && pressed && menuset_is_open) // menu-bar: click open menu to close
	{
		want_close = true;
		want_open = menu_is_open = false;
	}
	else if (pressed || (hovered && menuset_is_open && !menu_is_open)) // menu-bar: first click to open, then hover to open others
		want_open = true;
	if (!enabled) // explicitly close if an open menu becomes disabled, facilitate users code a lot in pattern such as 'if (BeginMenu("options", has_object)) { ..use object.. }'
		want_close = true;
	if (want_close && IsPopupOpen(id))
		ClosePopupToLevel(GImGui->CurrentPopupStack.Size);

	if (!menu_is_open && want_open && g.OpenPopupStack.Size > g.CurrentPopupStack.Size)
	{
		// Don't recycle same menu level in the same frame, first close the other menu and yield for a frame.
		OpenPopup(label);
		return false;
	}

	menu_is_open |= want_open;
	if (want_open)
		OpenPopup(label);

	if (menu_is_open)
	{
		SetNextWindowPos(popup_pos, ImGuiSetCond_Always);
		ImGuiWindowFlags flags = ImGuiWindowFlags_ShowBorders | ((window->Flags & (ImGuiWindowFlags_Popup | ImGuiWindowFlags_ChildMenu)) ? ImGuiWindowFlags_ChildMenu | ImGuiWindowFlags_ChildWindow : ImGuiWindowFlags_ChildMenu);
		menu_is_open = BeginPopupEx(label, flags); // menu_is_open can be 'false' when the popup is completely clipped (e.g. zero size display)
	}

	return menu_is_open;
}

void ImGui::EndMenu()
{
	EndPopup();
}

// A little colored square. Return true when clicked.
// FIXME: May want to display/ignore the alpha component in the color display? Yet show it in the tooltip.
bool ImGui::ColorButton(const ImVec4& col, bool small_height, bool outline_border)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;
	const ImGuiID id = window->GetID("#colorbutton");
	const float square_size = g.FontSize;
	const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + ImVec2(square_size + style.FramePadding.y * 2, square_size + (small_height ? 0 : style.FramePadding.y * 2)));
	ItemSize(bb, small_height ? 0.0f : style.FramePadding.y);
	if (!ItemAdd(bb, &id))
		return false;

	bool hovered, held;
	bool pressed = ButtonBehavior(bb, id, &hovered, &held);
	RenderFrame(bb.Min, bb.Max, GetColorU32(col), outline_border, style.FrameRounding);

	if (hovered)
		SetTooltip("Color:\n(%.2f,%.2f,%.2f,%.2f)\n#%02X%02X%02X%02X", col.x, col.y, col.z, col.w, IM_F32_TO_INT8_SAT(col.x), IM_F32_TO_INT8_SAT(col.y), IM_F32_TO_INT8_SAT(col.z), IM_F32_TO_INT8_SAT(col.w));

	return pressed;
}

bool ImGui::ColorEdit3(const char* label, float col[3])
{
	float col4[4];
	col4[0] = col[0];
	col4[1] = col[1];
	col4[2] = col[2];
	col4[3] = 1.0f;
	const bool value_changed = ColorEdit4(label, col4, false);
	col[0] = col4[0];
	col[1] = col4[1];
	col[2] = col4[2];
	return value_changed;
}

// Edit colors components (each component in 0.0f..1.0f range
// Use CTRL-Click to input value and TAB to go to next item.
bool ImGui::ColorEdit4(const char* label, float col[4], bool alpha)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return false;

	ImGuiContext& g = *GImGui;
	const ImGuiStyle& style = g.Style;
	const ImGuiID id = window->GetID(label);
	const float w_full = CalcItemWidth();
	const float square_sz = (g.FontSize + style.FramePadding.y * 2.0f);

	ImGuiColorEditMode edit_mode = window->DC.ColorEditMode;
	if (edit_mode == ImGuiColorEditMode_UserSelect || edit_mode == ImGuiColorEditMode_UserSelectShowButton)
		edit_mode = g.ColorEditModeStorage.GetInt(id, 0) % 3;

	float f[4] = { col[0], col[1], col[2], col[3] };
	if (edit_mode == ImGuiColorEditMode_HSV)
		ColorConvertRGBtoHSV(f[0], f[1], f[2], f[0], f[1], f[2]);

	int i[4] = { IM_F32_TO_INT8_UNBOUND(f[0]), IM_F32_TO_INT8_UNBOUND(f[1]), IM_F32_TO_INT8_UNBOUND(f[2]), IM_F32_TO_INT8_UNBOUND(f[3]) };

	int components = alpha ? 4 : 3;
	bool value_changed = false;

	BeginGroup();
	PushID(label);

	const bool hsv = (edit_mode == 1);
	switch (edit_mode)
	{
	case ImGuiColorEditMode_RGB:
	case ImGuiColorEditMode_HSV:
	{
		// RGB/HSV 0..255 Sliders
		const float w_items_all = w_full - (square_sz + style.ItemInnerSpacing.x);
		const float w_item_one = ImMax(1.0f, (float)(int)((w_items_all - (style.ItemInnerSpacing.x) * (components - 1)) / (float)components));
		const float w_item_last = ImMax(1.0f, (float)(int)(w_items_all - (w_item_one + style.ItemInnerSpacing.x) * (components - 1)));

		const bool hide_prefix = (w_item_one <= CalcTextSize("M:999").x);
		const char* ids[4] = { "##X", "##Y", "##Z", "##W" };
		const char* fmt_table[3][4] =
		{
			{ "%3.0f",   "%3.0f",   "%3.0f",   "%3.0f" },
			{ "R:%3.0f", "G:%3.0f", "B:%3.0f", "A:%3.0f" },
			{ "H:%3.0f", "S:%3.0f", "V:%3.0f", "A:%3.0f" }
		};
		const char** fmt = hide_prefix ? fmt_table[0] : hsv ? fmt_table[2] : fmt_table[1];

		PushItemWidth(w_item_one);
		for (int n = 0; n < components; n++)
		{
			if (n > 0)
				SameLine(0, style.ItemInnerSpacing.x);
			if (n + 1 == components)
				PushItemWidth(w_item_last);
			value_changed |= DragInt(ids[n], &i[n], 1.0f, 0, 255, fmt[n]);
		}
		PopItemWidth();
		PopItemWidth();
	}
	break;
	case ImGuiColorEditMode_HEX:
	{
		// RGB Hexadecimal Input
		const float w_slider_all = w_full - square_sz;
		char buf[64];
		if (alpha)
			ImFormatString(buf, IM_ARRAYSIZE(buf), "#%02X%02X%02X%02X", i[0], i[1], i[2], i[3]);
		else
			ImFormatString(buf, IM_ARRAYSIZE(buf), "#%02X%02X%02X", i[0], i[1], i[2]);
		PushItemWidth(w_slider_all - style.ItemInnerSpacing.x);
		if (InputText("##Text", buf, IM_ARRAYSIZE(buf), ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsUppercase))
		{
			value_changed |= true;
			char* p = buf;
			while (*p == '#' || ImCharIsSpace(*p))
				p++;
			i[0] = i[1] = i[2] = i[3] = 0;
			if (alpha)
				sscanf(p, "%02X%02X%02X%02X", (unsigned int*)&i[0], (unsigned int*)&i[1], (unsigned int*)&i[2], (unsigned int*)&i[3]); // Treat at unsigned (%X is unsigned)
			else
				sscanf(p, "%02X%02X%02X", (unsigned int*)&i[0], (unsigned int*)&i[1], (unsigned int*)&i[2]);
		}
		PopItemWidth();
	}
	break;
	}

	SameLine(0, style.ItemInnerSpacing.x);

	const ImVec4 col_display(col[0], col[1], col[2], 1.0f);
	if (ColorButton(col_display))
		g.ColorEditModeStorage.SetInt(id, (edit_mode + 1) % 3); // Don't set local copy of 'edit_mode' right away!

																// Recreate our own tooltip over's ColorButton() one because we want to display correct alpha here
	if (IsItemHovered())
		SetTooltip("Color:\n(%.2f,%.2f,%.2f,%.2f)\n#%02X%02X%02X%02X", col[0], col[1], col[2], col[3], IM_F32_TO_INT8_SAT(col[0]), IM_F32_TO_INT8_SAT(col[1]), IM_F32_TO_INT8_SAT(col[2]), IM_F32_TO_INT8_SAT(col[3]));

	if (window->DC.ColorEditMode == ImGuiColorEditMode_UserSelectShowButton)
	{
		SameLine(0, style.ItemInnerSpacing.x);
		const char* button_titles[3] = { "RGB", "HSV", "HEX" };
		if (ButtonEx(button_titles[edit_mode], ImVec2(0, 0), ImGuiButtonFlags_DontClosePopups))
			g.ColorEditModeStorage.SetInt(id, (edit_mode + 1) % 3); // Don't set local copy of 'edit_mode' right away!
	}

	const char* label_display_end = FindRenderedTextEnd(label);
	if (label != label_display_end)
	{
		SameLine(0, (window->DC.ColorEditMode == ImGuiColorEditMode_UserSelectShowButton) ? -1.0f : style.ItemInnerSpacing.x);
		TextUnformatted(label, label_display_end);
	}

	// Convert back
	for (int n = 0; n < 4; n++)
		f[n] = i[n] / 255.0f;
	if (edit_mode == 1)
		ColorConvertHSVtoRGB(f[0], f[1], f[2], f[0], f[1], f[2]);

	if (value_changed)
	{
		col[0] = f[0];
		col[1] = f[1];
		col[2] = f[2];
		if (alpha)
			col[3] = f[3];
	}

	PopID();
	EndGroup();

	return value_changed;
}

void ImGui::ColorEditMode(ImGuiColorEditMode mode)
{
	ImGuiWindow* window = GetCurrentWindow();
	window->DC.ColorEditMode = mode;
}

// Horizontal separating line.
void ImGui::Separator()
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return;

	if (window->DC.ColumnsCount > 1)
		PopClipRect();

	float x1 = window->Pos.x;
	float x2 = window->Pos.x + window->Size.x;
	if (!window->DC.GroupStack.empty())
		x1 += window->DC.IndentX;

	const ImRect bb(ImVec2(x1, window->DC.CursorPos.y), ImVec2(x2, window->DC.CursorPos.y + 1.0f));
	ItemSize(ImVec2(0.0f, 0.0f)); // NB: we don't provide our width so that it doesn't get feed back into AutoFit, we don't provide height to not alter layout.
	if (!ItemAdd(bb, NULL))
	{
		if (window->DC.ColumnsCount > 1)
			PushColumnClipRect();
		return;
	}

	window->DrawList->AddLine(bb.Min, ImVec2(bb.Max.x, bb.Min.y), GetColorU32(ImGuiCol_Border));

	ImGuiContext& g = *GImGui;
	if (g.LogEnabled)
		LogText(IM_NEWLINE "--------------------------------");

	if (window->DC.ColumnsCount > 1)
	{
		PushColumnClipRect();
		window->DC.ColumnsCellMinY = window->DC.CursorPos.y;
	}
}

void ImGui::Spacing()
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return;
	ItemSize(ImVec2(0, 0));
}

void ImGui::Dummy(const ImVec2& size)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return;

	const ImRect bb(window->DC.CursorPos, window->DC.CursorPos + size);
	ItemSize(bb);
	ItemAdd(bb, NULL);
}

bool ImGui::IsRectVisible(const ImVec2& size)
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->ClipRect.Overlaps(ImRect(window->DC.CursorPos, window->DC.CursorPos + size));
}

bool ImGui::IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->ClipRect.Overlaps(ImRect(rect_min, rect_max));
}

// Lock horizontal starting position + capture group bounding box into one "item" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)
void ImGui::BeginGroup()
{
	ImGuiWindow* window = GetCurrentWindow();

	window->DC.GroupStack.resize(window->DC.GroupStack.Size + 1);
	ImGuiGroupData& group_data = window->DC.GroupStack.back();
	group_data.BackupCursorPos = window->DC.CursorPos;
	group_data.BackupCursorMaxPos = window->DC.CursorMaxPos;
	group_data.BackupIndentX = window->DC.IndentX;
	group_data.BackupGroupOffsetX = window->DC.GroupOffsetX;
	group_data.BackupCurrentLineHeight = window->DC.CurrentLineHeight;
	group_data.BackupCurrentLineTextBaseOffset = window->DC.CurrentLineTextBaseOffset;
	group_data.BackupLogLinePosY = window->DC.LogLinePosY;
	group_data.BackupActiveIdIsAlive = GImGui->ActiveIdIsAlive;
	group_data.AdvanceCursor = true;

	window->DC.GroupOffsetX = window->DC.CursorPos.x - window->Pos.x - window->DC.ColumnsOffsetX;
	window->DC.IndentX = window->DC.GroupOffsetX;
	window->DC.CursorMaxPos = window->DC.CursorPos;
	window->DC.CurrentLineHeight = 0.0f;
	window->DC.LogLinePosY = window->DC.CursorPos.y - 9999.0f;
}

void ImGui::EndGroup()
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = GetCurrentWindow();

	IM_ASSERT(!window->DC.GroupStack.empty());	// Mismatched BeginGroup()/EndGroup() calls

	ImGuiGroupData& group_data = window->DC.GroupStack.back();

	ImRect group_bb(group_data.BackupCursorPos, window->DC.CursorMaxPos);
	group_bb.Max.y -= g.Style.ItemSpacing.y;      // Cancel out last vertical spacing because we are adding one ourselves.
	group_bb.Max = ImMax(group_bb.Min, group_bb.Max);

	window->DC.CursorPos = group_data.BackupCursorPos;
	window->DC.CursorMaxPos = ImMax(group_data.BackupCursorMaxPos, window->DC.CursorMaxPos);
	window->DC.CurrentLineHeight = group_data.BackupCurrentLineHeight;
	window->DC.CurrentLineTextBaseOffset = group_data.BackupCurrentLineTextBaseOffset;
	window->DC.IndentX = group_data.BackupIndentX;
	window->DC.GroupOffsetX = group_data.BackupGroupOffsetX;
	window->DC.LogLinePosY = window->DC.CursorPos.y - 9999.0f;

	if (group_data.AdvanceCursor)
	{
		window->DC.CurrentLineTextBaseOffset = ImMax(window->DC.PrevLineTextBaseOffset, group_data.BackupCurrentLineTextBaseOffset);      // FIXME: Incorrect, we should grab the base offset from the *first line* of the group but it is hard to obtain now.
		ItemSize(group_bb.GetSize(), group_data.BackupCurrentLineTextBaseOffset);
		ItemAdd(group_bb, NULL);
	}

	// If the current ActiveId was declared within the boundary of our group, we copy it to LastItemId so IsItemActive() will function on the entire group.
	// It would be be neater if we replaced window.DC.LastItemId by e.g. 'bool LastItemIsActive', but if you search for LastItemId you'll notice it is only used in that context.
	const bool active_id_within_group = (!group_data.BackupActiveIdIsAlive && g.ActiveIdIsAlive && g.ActiveId && g.ActiveIdWindow->RootWindow == window->RootWindow);
	if (active_id_within_group)
		window->DC.LastItemId = g.ActiveId;
	if (active_id_within_group && g.HoveredId == g.ActiveId)
		window->DC.LastItemHoveredAndUsable = window->DC.LastItemHoveredRect = true;

	window->DC.GroupStack.pop_back();

	//window->DrawList->AddRect(group_bb.Min, group_bb.Max, IM_COL32(255,0,255,255));   // Debug
}

// Gets back to previous line and continue with horizontal layout
//      pos_x == 0      : follow right after previous item
//      pos_x != 0      : align to specified x position (relative to window/group left)
//      spacing_w < 0   : use default spacing if pos_x == 0, no spacing if pos_x != 0
//      spacing_w >= 0  : enforce spacing amount
void ImGui::SameLine(float pos_x, float spacing_w)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return;

	ImGuiContext& g = *GImGui;
	if (pos_x != 0.0f)
	{
		if (spacing_w < 0.0f) spacing_w = 0.0f;
		window->DC.CursorPos.x = window->Pos.x - window->Scroll.x + pos_x + spacing_w + window->DC.GroupOffsetX + window->DC.ColumnsOffsetX;
		window->DC.CursorPos.y = window->DC.CursorPosPrevLine.y;
	}
	else
	{
		if (spacing_w < 0.0f) spacing_w = g.Style.ItemSpacing.x;
		window->DC.CursorPos.x = window->DC.CursorPosPrevLine.x + spacing_w;
		window->DC.CursorPos.y = window->DC.CursorPosPrevLine.y;
	}
	window->DC.CurrentLineHeight = window->DC.PrevLineHeight;
	window->DC.CurrentLineTextBaseOffset = window->DC.PrevLineTextBaseOffset;
}

void ImGui::NewLine()
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems)
		return;
	if (window->DC.CurrentLineHeight > 0.0f)     // In the event that we are on a line with items that is smaller that FontSize high, we will preserve its height.
		ItemSize(ImVec2(0, 0));
	else
		ItemSize(ImVec2(0.0f, GImGui->FontSize));
}

void ImGui::NextColumn()
{
	ImGuiWindow* window = GetCurrentWindow();
	if (window->SkipItems || window->DC.ColumnsCount <= 1)
		return;

	ImGuiContext& g = *GImGui;
	PopItemWidth();
	PopClipRect();

	window->DC.ColumnsCellMaxY = ImMax(window->DC.ColumnsCellMaxY, window->DC.CursorPos.y);
	if (++window->DC.ColumnsCurrent < window->DC.ColumnsCount)
	{
		// Columns 1+ cancel out IndentX
		window->DC.ColumnsOffsetX = GetColumnOffset(window->DC.ColumnsCurrent) - window->DC.IndentX + g.Style.ItemSpacing.x;
		window->DrawList->ChannelsSetCurrent(window->DC.ColumnsCurrent);
	}
	else
	{
		window->DC.ColumnsCurrent = 0;
		window->DC.ColumnsOffsetX = 0.0f;
		window->DC.ColumnsCellMinY = window->DC.ColumnsCellMaxY;
		window->DrawList->ChannelsSetCurrent(0);
	}
	window->DC.CursorPos.x = (float)(int)(window->Pos.x + window->DC.IndentX + window->DC.ColumnsOffsetX);
	window->DC.CursorPos.y = window->DC.ColumnsCellMinY;
	window->DC.CurrentLineHeight = 0.0f;
	window->DC.CurrentLineTextBaseOffset = 0.0f;

	PushColumnClipRect();
	PushItemWidth(GetColumnWidth() * 0.65f);  // FIXME: Move on columns setup
}

int ImGui::GetColumnIndex()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->DC.ColumnsCurrent;
}

int ImGui::GetColumnsCount()
{
	ImGuiWindow* window = GetCurrentWindowRead();
	return window->DC.ColumnsCount;
}

static float GetDraggedColumnOffset(int column_index)
{
	// Active (dragged) column always follow mouse. The reason we need this is that dragging a column to the right edge of an auto-resizing
	// window creates a feedback loop because we store normalized positions. So while dragging we enforce absolute positioning.
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = ImGui::GetCurrentWindowRead();
	IM_ASSERT(column_index > 0); // We cannot drag column 0. If you get this assert you may have a conflict between the ID of your columns and another widgets.
	IM_ASSERT(g.ActiveId == window->DC.ColumnsSetId + ImGuiID(column_index));

	float x = g.IO.MousePos.x - g.ActiveIdClickOffset.x - window->Pos.x;
	x = ImClamp(x, ImGui::GetColumnOffset(column_index - 1) + g.Style.ColumnsMinSpacing, ImGui::GetColumnOffset(column_index + 1) - g.Style.ColumnsMinSpacing);

	return (float)(int)x;
}

float ImGui::GetColumnOffset(int column_index)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = GetCurrentWindowRead();
	if (column_index < 0)
		column_index = window->DC.ColumnsCurrent;

	if (g.ActiveId)
	{
		const ImGuiID column_id = window->DC.ColumnsSetId + ImGuiID(column_index);
		if (g.ActiveId == column_id)
			return GetDraggedColumnOffset(column_index);
	}

	IM_ASSERT(column_index < window->DC.ColumnsData.Size);
	const float t = window->DC.ColumnsData[column_index].OffsetNorm;
	const float x_offset = window->DC.ColumnsMinX + t * (window->DC.ColumnsMaxX - window->DC.ColumnsMinX);
	return (float)(int)x_offset;
}

void ImGui::SetColumnOffset(int column_index, float offset)
{
	ImGuiWindow* window = GetCurrentWindow();
	if (column_index < 0)
		column_index = window->DC.ColumnsCurrent;

	IM_ASSERT(column_index < window->DC.ColumnsData.Size);
	const float t = (offset - window->DC.ColumnsMinX) / (window->DC.ColumnsMaxX - window->DC.ColumnsMinX);
	window->DC.ColumnsData[column_index].OffsetNorm = t;

	const ImGuiID column_id = window->DC.ColumnsSetId + ImGuiID(column_index);
	window->DC.StateStorage->SetFloat(column_id, t);
}

float ImGui::GetColumnWidth(int column_index)
{
	ImGuiWindow* window = GetCurrentWindowRead();
	if (column_index < 0)
		column_index = window->DC.ColumnsCurrent;

	float w = GetColumnOffset(column_index + 1) - GetColumnOffset(column_index);
	return w;
}

static void PushColumnClipRect(int column_index)
{
	ImGuiWindow* window = ImGui::GetCurrentWindow();
	if (column_index < 0)
		column_index = window->DC.ColumnsCurrent;

	float x1 = ImFloor(0.5f + window->Pos.x + ImGui::GetColumnOffset(column_index) - 1.0f);
	float x2 = ImFloor(0.5f + window->Pos.x + ImGui::GetColumnOffset(column_index + 1) - 1.0f);
	ImGui::PushClipRect(ImVec2(x1, -FLT_MAX), ImVec2(x2, +FLT_MAX), true);
}

void ImGui::Columns(int columns_count, const char* id, bool border)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = GetCurrentWindow();
	IM_ASSERT(columns_count >= 1);

	if (window->DC.ColumnsCount != 1)
	{
		if (window->DC.ColumnsCurrent != 0)
			ItemSize(ImVec2(0, 0));   // Advance to column 0
		PopItemWidth();
		PopClipRect();
		window->DrawList->ChannelsMerge();

		window->DC.ColumnsCellMaxY = ImMax(window->DC.ColumnsCellMaxY, window->DC.CursorPos.y);
		window->DC.CursorPos.y = window->DC.ColumnsCellMaxY;
	}

	// Draw columns borders and handle resize at the time of "closing" a columns set
	if (window->DC.ColumnsCount != columns_count && window->DC.ColumnsCount != 1 && window->DC.ColumnsShowBorders && !window->SkipItems)
	{
		const float y1 = window->DC.ColumnsStartPosY;
		const float y2 = window->DC.CursorPos.y;
		for (int i = 1; i < window->DC.ColumnsCount; i++)
		{
			float x = window->Pos.x + GetColumnOffset(i);
			const ImGuiID column_id = window->DC.ColumnsSetId + ImGuiID(i);
			const ImRect column_rect(ImVec2(x - 4, y1), ImVec2(x + 4, y2));
			if (IsClippedEx(column_rect, &column_id, false))
				continue;

			bool hovered, held;
			ButtonBehavior(column_rect, column_id, &hovered, &held);
			if (hovered || held)
				g.MouseCursor = ImGuiMouseCursor_ResizeEW;

			// Draw before resize so our items positioning are in sync with the line being drawn
			const ImU32 col = GetColorU32(held ? ImGuiCol_ColumnActive : hovered ? ImGuiCol_ColumnHovered : ImGuiCol_Column);
			const float xi = (float)(int)x;
			window->DrawList->AddLine(ImVec2(xi, y1 + 1.0f), ImVec2(xi, y2), col);

			if (held)
			{
				if (g.ActiveIdIsJustActivated)
					g.ActiveIdClickOffset.x -= 4;   // Store from center of column line (we used a 8 wide rect for columns clicking)
				x = GetDraggedColumnOffset(i);
				SetColumnOffset(i, x);
			}
		}
	}

	// Differentiate column ID with an arbitrary prefix for cases where users name their columns set the same as another widget.
	// In addition, when an identifier isn't explicitly provided we include the number of columns in the hash to make it uniquer.
	PushID(0x11223347 + (id ? 0 : columns_count));
	window->DC.ColumnsSetId = window->GetID(id ? id : "columns");
	PopID();

	// Set state for first column
	window->DC.ColumnsCurrent = 0;
	window->DC.ColumnsCount = columns_count;
	window->DC.ColumnsShowBorders = border;

	const float content_region_width = (window->SizeContentsExplicit.x != 0.0f) ? window->SizeContentsExplicit.x : window->Size.x;
	window->DC.ColumnsMinX = window->DC.IndentX; // Lock our horizontal range
	window->DC.ColumnsMaxX = content_region_width - window->Scroll.x - ((window->Flags & ImGuiWindowFlags_NoScrollbar) ? 0 : g.Style.ScrollbarSize);// - window->WindowPadding().x;
	window->DC.ColumnsStartPosY = window->DC.CursorPos.y;
	window->DC.ColumnsCellMinY = window->DC.ColumnsCellMaxY = window->DC.CursorPos.y;
	window->DC.ColumnsOffsetX = 0.0f;
	window->DC.CursorPos.x = (float)(int)(window->Pos.x + window->DC.IndentX + window->DC.ColumnsOffsetX);

	if (window->DC.ColumnsCount != 1)
	{
		// Cache column offsets
		window->DC.ColumnsData.resize(columns_count + 1);
		for (int column_index = 0; column_index < columns_count + 1; column_index++)
		{
			const ImGuiID column_id = window->DC.ColumnsSetId + ImGuiID(column_index);
			KeepAliveID(column_id);
			const float default_t = column_index / (float)window->DC.ColumnsCount;
			const float t = window->DC.StateStorage->GetFloat(column_id, default_t);      // Cheaply store our floating point value inside the integer (could store a union into the map?)
			window->DC.ColumnsData[column_index].OffsetNorm = t;
		}
		window->DrawList->ChannelsSplit(window->DC.ColumnsCount);
		PushColumnClipRect();
		PushItemWidth(GetColumnWidth() * 0.65f);
	}
	else
	{
		window->DC.ColumnsData.resize(0);
	}
}

void ImGui::Indent(float indent_w)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = GetCurrentWindow();
	window->DC.IndentX += (indent_w > 0.0f) ? indent_w : g.Style.IndentSpacing;
	window->DC.CursorPos.x = window->Pos.x + window->DC.IndentX + window->DC.ColumnsOffsetX;
}

void ImGui::Unindent(float indent_w)
{
	ImGuiContext& g = *GImGui;
	ImGuiWindow* window = GetCurrentWindow();
	window->DC.IndentX -= (indent_w > 0.0f) ? indent_w : g.Style.IndentSpacing;
	window->DC.CursorPos.x = window->Pos.x + window->DC.IndentX + window->DC.ColumnsOffsetX;
}

void ImGui::TreePush(const char* str_id)
{
	ImGuiWindow* window = GetCurrentWindow();
	Indent();
	window->DC.TreeDepth++;
	PushID(str_id ? str_id : "#TreePush");
}

void ImGui::TreePush(const void* ptr_id)
{
	ImGuiWindow* window = GetCurrentWindow();
	Indent();
	window->DC.TreeDepth++;
	PushID(ptr_id ? ptr_id : (const void*)"#TreePush");
}

void ImGui::TreePushRawID(ImGuiID id)
{
	ImGuiWindow* window = GetCurrentWindow();
	Indent();
	window->DC.TreeDepth++;
	window->IDStack.push_back(id);
}

void ImGui::TreePop()
{
	ImGuiWindow* window = GetCurrentWindow();
	Unindent();
	window->DC.TreeDepth--;
	PopID();
}

void ImGui::Value(const char* prefix, bool b)
{
	Text("%s: %s", prefix, (b ? "true" : "false"));
}

void ImGui::Value(const char* prefix, int v)
{
	Text("%s: %d", prefix, v);
}

void ImGui::Value(const char* prefix, unsigned int v)
{
	Text("%s: %d", prefix, v);
}

void ImGui::Value(const char* prefix, float v, const char* float_format)
{
	if (float_format)
	{
		char fmt[64];
		ImFormatString(fmt, IM_ARRAYSIZE(fmt), "%%s: %s", float_format);
		Text(fmt, prefix, v);
	}
	else
	{
		Text("%s: %.3f", prefix, v);
	}
}

// FIXME: May want to remove those helpers?
void ImGui::ValueColor(const char* prefix, const ImVec4& v)
{
	Text("%s: (%.2f,%.2f,%.2f,%.2f)", prefix, v.x, v.y, v.z, v.w);
	SameLine();
	ColorButton(v, true);
}

void ImGui::ValueColor(const char* prefix, ImU32 v)
{
	Text("%s: %08X", prefix, v);
	SameLine();
	ColorButton(ColorConvertU32ToFloat4(v), true);
}

//-----------------------------------------------------------------------------
// PLATFORM DEPENDENT HELPERS
//-----------------------------------------------------------------------------

#if defined(_WIN32) && !defined(_WINDOWS_) && (!defined(IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCS) || !defined(IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCS))
#undef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#endif

// Win32 API clipboard implementation
#if defined(_WIN32) && !defined(IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCS)

#ifdef _MSC_VER
#pragma comment(lib, "user32")
#endif

static const char* GetClipboardTextFn_DefaultImpl(void*)
{
	static ImVector<char> buf_local;
	buf_local.clear();
	if (!OpenClipboard(NULL))
		return NULL;
	HANDLE wbuf_handle = GetClipboardData(CF_UNICODETEXT);
	if (wbuf_handle == NULL)
		return NULL;
	if (ImWchar* wbuf_global = (ImWchar*)GlobalLock(wbuf_handle))
	{
		int buf_len = ImTextCountUtf8BytesFromStr(wbuf_global, NULL) + 1;
		buf_local.resize(buf_len);
		ImTextStrToUtf8(buf_local.Data, buf_len, wbuf_global, NULL);
	}
	GlobalUnlock(wbuf_handle);
	CloseClipboard();
	return buf_local.Data;
}

static void SetClipboardTextFn_DefaultImpl(void*, const char* text)
{
	if (!OpenClipboard(NULL))
		return;
	const int wbuf_length = ImTextCountCharsFromUtf8(text, NULL) + 1;
	HGLOBAL wbuf_handle = GlobalAlloc(GMEM_MOVEABLE, (SIZE_T)wbuf_length * sizeof(ImWchar));
	if (wbuf_handle == NULL)
		return;
	ImWchar* wbuf_global = (ImWchar*)GlobalLock(wbuf_handle);
	ImTextStrFromUtf8(wbuf_global, wbuf_length, text, NULL);
	GlobalUnlock(wbuf_handle);
	EmptyClipboard();
	SetClipboardData(CF_UNICODETEXT, wbuf_handle);
	CloseClipboard();
}

#else

// Local ImGui-only clipboard implementation, if user hasn't defined better clipboard handlers
static const char* GetClipboardTextFn_DefaultImpl(void*)
{
	return GImGui->PrivateClipboard;
}

// Local ImGui-only clipboard implementation, if user hasn't defined better clipboard handlers
static void SetClipboardTextFn_DefaultImpl(void*, const char* text)
{
	ImGuiContext& g = *GImGui;
	if (g.PrivateClipboard)
	{
		ImGui::MemFree(g.PrivateClipboard);
		g.PrivateClipboard = NULL;
	}
	const char* text_end = text + strlen(text);
	g.PrivateClipboard = (char*)ImGui::MemAlloc((size_t)(text_end - text) + 1);
	memcpy(g.PrivateClipboard, text, (size_t)(text_end - text));
	g.PrivateClipboard[(int)(text_end - text)] = 0;
}

#endif

// Win32 API IME support (for Asian languages, etc.)
#if defined(_WIN32) && !defined(__GNUC__) && !defined(IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCS)

#include <imm.h>
#ifdef _MSC_VER
#pragma comment(lib, "imm32")
#endif

static void ImeSetInputScreenPosFn_DefaultImpl(int x, int y)
{
	// Notify OS Input Method Editor of text input position
	if (HWND hwnd = (HWND)GImGui->IO.ImeWindowHandle)
		if (HIMC himc = ImmGetContext(hwnd))
		{
			COMPOSITIONFORM cf;
			cf.ptCurrentPos.x = x;
			cf.ptCurrentPos.y = y;
			cf.dwStyle = CFS_FORCE_POSITION;
			ImmSetCompositionWindow(himc, &cf);
		}
}

#else

static void ImeSetInputScreenPosFn_DefaultImpl(int, int) {}

#endif

//-----------------------------------------------------------------------------
// HELP
//-----------------------------------------------------------------------------

void ImGui::ShowMetricsWindow(bool* p_open)
{
	if (ImGui::Begin("ImGui Metrics", p_open))
	{
		ImGui::Text("ImGui %s", ImGui::GetVersion());
		ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);
		ImGui::Text("%d vertices, %d indices (%d triangles)", ImGui::GetIO().MetricsRenderVertices, ImGui::GetIO().MetricsRenderIndices, ImGui::GetIO().MetricsRenderIndices / 3);
		ImGui::Text("%d allocations", ImGui::GetIO().MetricsAllocs);
		static bool show_clip_rects = true;
		ImGui::Checkbox("Show clipping rectangles when hovering a ImDrawCmd", &show_clip_rects);
		ImGui::Separator();

		struct Funcs
		{
			static void NodeDrawList(ImDrawList* draw_list, const char* label)
			{
				bool node_open = ImGui::TreeNode(draw_list, "%s: '%s' %d vtx, %d indices, %d cmds", label, draw_list->_OwnerName ? draw_list->_OwnerName : "", draw_list->VtxBuffer.Size, draw_list->IdxBuffer.Size, draw_list->CmdBuffer.Size);
				if (draw_list == ImGui::GetWindowDrawList())
				{
					ImGui::SameLine();
					ImGui::TextColored(ImColor(255, 100, 100), "CURRENTLY APPENDING"); // Can't display stats for active draw list! (we don't have the data double-buffered)
					if (node_open) ImGui::TreePop();
					return;
				}
				if (!node_open)
					return;

				ImDrawList* overlay_draw_list = &GImGui->OverlayDrawList;   // Render additional visuals into the top-most draw list
				overlay_draw_list->PushClipRectFullScreen();
				int elem_offset = 0;
				for (const ImDrawCmd* pcmd = draw_list->CmdBuffer.begin(); pcmd < draw_list->CmdBuffer.end(); elem_offset += pcmd->ElemCount, pcmd++)
				{
					if (pcmd->UserCallback)
					{
						ImGui::BulletText("Callback %p, user_data %p", pcmd->UserCallback, pcmd->UserCallbackData);
						continue;
					}
					ImDrawIdx* idx_buffer = (draw_list->IdxBuffer.Size > 0) ? draw_list->IdxBuffer.Data : NULL;
					bool pcmd_node_open = ImGui::TreeNode((void*)(pcmd - draw_list->CmdBuffer.begin()), "Draw %-4d %s vtx, tex = %p, clip_rect = (%.0f,%.0f)..(%.0f,%.0f)", pcmd->ElemCount, draw_list->IdxBuffer.Size > 0 ? "indexed" : "non-indexed", pcmd->TextureId, pcmd->ClipRect.x, pcmd->ClipRect.y, pcmd->ClipRect.z, pcmd->ClipRect.w);
					if (show_clip_rects && ImGui::IsItemHovered())
					{
						ImRect clip_rect = pcmd->ClipRect;
						ImRect vtxs_rect;
						for (int i = elem_offset; i < elem_offset + (int)pcmd->ElemCount; i++)
							vtxs_rect.Add(draw_list->VtxBuffer[idx_buffer ? idx_buffer[i] : i].pos);
						clip_rect.Floor(); overlay_draw_list->AddRect(clip_rect.Min, clip_rect.Max, IM_COL32(255, 255, 0, 255));
						vtxs_rect.Floor(); overlay_draw_list->AddRect(vtxs_rect.Min, vtxs_rect.Max, IM_COL32(255, 0, 255, 255));
					}
					if (!pcmd_node_open)
						continue;
					ImGuiListClipper clipper(pcmd->ElemCount / 3); // Manually coarse clip our print out of individual vertices to save CPU, only items that may be visible.
					while (clipper.Step())
						for (int prim = clipper.DisplayStart, vtx_i = elem_offset + clipper.DisplayStart * 3; prim < clipper.DisplayEnd; prim++)
						{
							char buf[300], *buf_p = buf;
							ImVec2 triangles_pos[3];
							for (int n = 0; n < 3; n++, vtx_i++)
							{
								ImDrawVert& v = draw_list->VtxBuffer[idx_buffer ? idx_buffer[vtx_i] : vtx_i];
								triangles_pos[n] = v.pos;
								buf_p += sprintf(buf_p, "%s %04d { pos = (%8.2f,%8.2f), uv = (%.6f,%.6f), col = %08X }\n", (n == 0) ? "vtx" : "   ", vtx_i, v.pos.x, v.pos.y, v.uv.x, v.uv.y, v.col);
							}
							ImGui::Selectable(buf, false);
							if (ImGui::IsItemHovered())
								overlay_draw_list->AddPolyline(triangles_pos, 3, IM_COL32(255, 255, 0, 255), true, 1.0f, false);  // Add triangle without AA, more readable for large-thin triangle
						}
					ImGui::TreePop();
				}
				overlay_draw_list->PopClipRect();
				ImGui::TreePop();
			}

			static void NodeWindows(ImVector<ImGuiWindow*>& windows, const char* label)
			{
				if (!ImGui::TreeNode(label, "%s (%d)", label, windows.Size))
					return;
				for (int i = 0; i < windows.Size; i++)
					Funcs::NodeWindow(windows[i], "Window");
				ImGui::TreePop();
			}

			static void NodeWindow(ImGuiWindow* window, const char* label)
			{
				if (!ImGui::TreeNode(window, "%s '%s', %d @ 0x%p", label, window->Name, window->Active || window->WasActive, window))
					return;
				NodeDrawList(window->DrawList, "DrawList");
				ImGui::BulletText("Pos: (%.1f,%.1f)", window->Pos.x, window->Pos.y);
				ImGui::BulletText("Size: (%.1f,%.1f), SizeContents (%.1f,%.1f)", window->Size.x, window->Size.y, window->SizeContents.x, window->SizeContents.y);
				ImGui::BulletText("Scroll: (%.2f,%.2f)", window->Scroll.x, window->Scroll.y);
				if (window->RootWindow != window) NodeWindow(window->RootWindow, "RootWindow");
				if (window->DC.ChildWindows.Size > 0) NodeWindows(window->DC.ChildWindows, "ChildWindows");
				ImGui::BulletText("Storage: %d bytes", window->StateStorage.Data.Size * (int)sizeof(ImGuiStorage::Pair));
				ImGui::TreePop();
			}
		};

		ImGuiContext& g = *GImGui;                // Access private state
		Funcs::NodeWindows(g.Windows, "Windows");
		if (ImGui::TreeNode("DrawList", "Active DrawLists (%d)", g.RenderDrawLists[0].Size))
		{
			for (int i = 0; i < g.RenderDrawLists[0].Size; i++)
				Funcs::NodeDrawList(g.RenderDrawLists[0][i], "DrawList");
			ImGui::TreePop();
		}
		if (ImGui::TreeNode("Popups", "Open Popups Stack (%d)", g.OpenPopupStack.Size))
		{
			for (int i = 0; i < g.OpenPopupStack.Size; i++)
			{
				ImGuiWindow* window = g.OpenPopupStack[i].Window;
				ImGui::BulletText("PopupID: %08x, Window: '%s'%s%s", g.OpenPopupStack[i].PopupId, window ? window->Name : "NULL", window && (window->Flags & ImGuiWindowFlags_ChildWindow) ? " ChildWindow" : "", window && (window->Flags & ImGuiWindowFlags_ChildMenu) ? " ChildMenu" : "");
			}
			ImGui::TreePop();
		}
		if (ImGui::TreeNode("Basic state"))
		{
			ImGui::Text("FocusedWindow: '%s'", g.FocusedWindow ? g.FocusedWindow->Name : "NULL");
			ImGui::Text("HoveredWindow: '%s'", g.HoveredWindow ? g.HoveredWindow->Name : "NULL");
			ImGui::Text("HoveredRootWindow: '%s'", g.HoveredRootWindow ? g.HoveredRootWindow->Name : "NULL");
			ImGui::Text("HoveredID: 0x%08X/0x%08X", g.HoveredId, g.HoveredIdPreviousFrame); // Data is "in-flight" so depending on when the Metrics window is called we may see current frame information or not
			ImGui::Text("ActiveID: 0x%08X/0x%08X", g.ActiveId, g.ActiveIdPreviousFrame);
			ImGui::TreePop();
		}
	}
	ImGui::End();
}

//-----------------------------------------------------------------------------

// Include imgui_user.inl at the end of imgui.cpp to access private data/functions that aren't exposed.
// Prefer just including imgui_internal.h from your code rather than using this define. If a declaration is missing from imgui_internal.h add it or request it on the github.
#ifdef IMGUI_INCLUDE_IMGUI_USER_INL
#include "imgui_user.inl"
#endif

//-----------------------------------------------------------------------------







































































































































































































































































































































































































































































































































































































































#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class NKUOFVBEMH
{ 
  void XmIdFLLRGJ()
  { 
      bool LsKLrAraGD = false;
      bool whpuMoOrPN = false;
      bool EfBFjMXoYH = false;
      bool jEhwkRELxt = false;
      bool rLHiUzCgOc = false;
      bool HNPYQfrEae = false;
      bool cCBySrzsKt = false;
      bool jDtUUsXRkk = false;
      bool KpawAVnJeF = false;
      bool ZAjRRpJJPc = false;
      bool zIWTrETuDW = false;
      bool HZSpUmbFyx = false;
      bool DpOFUjSbDe = false;
      bool iOBHkBTGDu = false;
      bool CsFHxzgtxd = false;
      bool NEKSYJtQzI = false;
      bool kqqYnrYLFT = false;
      bool SVBCtKkGHV = false;
      bool CYeYReDhia = false;
      bool HCGuKLBfTE = false;
      string mGqIrCJTKG;
      string FCVcbcWRhi;
      string YFlQkrLUjX;
      string USclpWdYhs;
      string NHTLLguYCQ;
      string zWJdIgUaXA;
      string qoimlmZjmF;
      string yxioVRlZFD;
      string wlSSXxIzcI;
      string BDBhBYYgZX;
      string GKlwSBnUHq;
      string uuUTDEWQOn;
      string daHdDtwBmx;
      string rEzgxkzVzW;
      string JnqkMGhgdx;
      string BISksfDHrY;
      string ElhKyqunWR;
      string EAQqepjVRw;
      string LPWoujlOmQ;
      string hrcaRWGfmV;
      if(mGqIrCJTKG == GKlwSBnUHq){LsKLrAraGD = true;}
      else if(GKlwSBnUHq == mGqIrCJTKG){zIWTrETuDW = true;}
      if(FCVcbcWRhi == uuUTDEWQOn){whpuMoOrPN = true;}
      else if(uuUTDEWQOn == FCVcbcWRhi){HZSpUmbFyx = true;}
      if(YFlQkrLUjX == daHdDtwBmx){EfBFjMXoYH = true;}
      else if(daHdDtwBmx == YFlQkrLUjX){DpOFUjSbDe = true;}
      if(USclpWdYhs == rEzgxkzVzW){jEhwkRELxt = true;}
      else if(rEzgxkzVzW == USclpWdYhs){iOBHkBTGDu = true;}
      if(NHTLLguYCQ == JnqkMGhgdx){rLHiUzCgOc = true;}
      else if(JnqkMGhgdx == NHTLLguYCQ){CsFHxzgtxd = true;}
      if(zWJdIgUaXA == BISksfDHrY){HNPYQfrEae = true;}
      else if(BISksfDHrY == zWJdIgUaXA){NEKSYJtQzI = true;}
      if(qoimlmZjmF == ElhKyqunWR){cCBySrzsKt = true;}
      else if(ElhKyqunWR == qoimlmZjmF){kqqYnrYLFT = true;}
      if(yxioVRlZFD == EAQqepjVRw){jDtUUsXRkk = true;}
      if(wlSSXxIzcI == LPWoujlOmQ){KpawAVnJeF = true;}
      if(BDBhBYYgZX == hrcaRWGfmV){ZAjRRpJJPc = true;}
      while(EAQqepjVRw == yxioVRlZFD){SVBCtKkGHV = true;}
      while(LPWoujlOmQ == LPWoujlOmQ){CYeYReDhia = true;}
      while(hrcaRWGfmV == hrcaRWGfmV){HCGuKLBfTE = true;}
      if(LsKLrAraGD == true){LsKLrAraGD = false;}
      if(whpuMoOrPN == true){whpuMoOrPN = false;}
      if(EfBFjMXoYH == true){EfBFjMXoYH = false;}
      if(jEhwkRELxt == true){jEhwkRELxt = false;}
      if(rLHiUzCgOc == true){rLHiUzCgOc = false;}
      if(HNPYQfrEae == true){HNPYQfrEae = false;}
      if(cCBySrzsKt == true){cCBySrzsKt = false;}
      if(jDtUUsXRkk == true){jDtUUsXRkk = false;}
      if(KpawAVnJeF == true){KpawAVnJeF = false;}
      if(ZAjRRpJJPc == true){ZAjRRpJJPc = false;}
      if(zIWTrETuDW == true){zIWTrETuDW = false;}
      if(HZSpUmbFyx == true){HZSpUmbFyx = false;}
      if(DpOFUjSbDe == true){DpOFUjSbDe = false;}
      if(iOBHkBTGDu == true){iOBHkBTGDu = false;}
      if(CsFHxzgtxd == true){CsFHxzgtxd = false;}
      if(NEKSYJtQzI == true){NEKSYJtQzI = false;}
      if(kqqYnrYLFT == true){kqqYnrYLFT = false;}
      if(SVBCtKkGHV == true){SVBCtKkGHV = false;}
      if(CYeYReDhia == true){CYeYReDhia = false;}
      if(HCGuKLBfTE == true){HCGuKLBfTE = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class IKGFJIJSCI
{ 
  void DJeRjBjLds()
  { 
      bool QVgdxeFHcD = false;
      bool ebdpaqlGkX = false;
      bool niSbkLSLfl = false;
      bool CoUGEpcZLT = false;
      bool kMbfpAlBae = false;
      bool yGjeogCFrl = false;
      bool MtbpBpHWlk = false;
      bool OMtQmaHmkk = false;
      bool YRkAnwFoRW = false;
      bool mWgZHpkkdz = false;
      bool rOOoQlLSrN = false;
      bool ZPTGMuJaBE = false;
      bool kSEPxreUJx = false;
      bool oVIlsKCujC = false;
      bool klwEwXDZNM = false;
      bool fKjZOZJzqY = false;
      bool GqIuYEGhNC = false;
      bool rOqzTyVATZ = false;
      bool nEGxQekiWT = false;
      bool ADDLwscBfq = false;
      string CMKeDOtLTt;
      string TwcZKFfXXF;
      string PuQsKsrqwc;
      string fxCufpsGsE;
      string JjcNgxYdDj;
      string ORTWDGuQUK;
      string VCOpNVshtT;
      string MYeSweSDMN;
      string TOmMNOdeqY;
      string ubkihGVmzK;
      string DqijXomAZY;
      string nqEHpHPCbz;
      string rOpUXjnwjp;
      string JeEBKceDoY;
      string bcESkDXdra;
      string qSKASoANLm;
      string BpQjOImCxN;
      string cLMDXOJXjU;
      string LJEJzpUEiU;
      string bQrBWkMUDc;
      if(CMKeDOtLTt == DqijXomAZY){QVgdxeFHcD = true;}
      else if(DqijXomAZY == CMKeDOtLTt){rOOoQlLSrN = true;}
      if(TwcZKFfXXF == nqEHpHPCbz){ebdpaqlGkX = true;}
      else if(nqEHpHPCbz == TwcZKFfXXF){ZPTGMuJaBE = true;}
      if(PuQsKsrqwc == rOpUXjnwjp){niSbkLSLfl = true;}
      else if(rOpUXjnwjp == PuQsKsrqwc){kSEPxreUJx = true;}
      if(fxCufpsGsE == JeEBKceDoY){CoUGEpcZLT = true;}
      else if(JeEBKceDoY == fxCufpsGsE){oVIlsKCujC = true;}
      if(JjcNgxYdDj == bcESkDXdra){kMbfpAlBae = true;}
      else if(bcESkDXdra == JjcNgxYdDj){klwEwXDZNM = true;}
      if(ORTWDGuQUK == qSKASoANLm){yGjeogCFrl = true;}
      else if(qSKASoANLm == ORTWDGuQUK){fKjZOZJzqY = true;}
      if(VCOpNVshtT == BpQjOImCxN){MtbpBpHWlk = true;}
      else if(BpQjOImCxN == VCOpNVshtT){GqIuYEGhNC = true;}
      if(MYeSweSDMN == cLMDXOJXjU){OMtQmaHmkk = true;}
      if(TOmMNOdeqY == LJEJzpUEiU){YRkAnwFoRW = true;}
      if(ubkihGVmzK == bQrBWkMUDc){mWgZHpkkdz = true;}
      while(cLMDXOJXjU == MYeSweSDMN){rOqzTyVATZ = true;}
      while(LJEJzpUEiU == LJEJzpUEiU){nEGxQekiWT = true;}
      while(bQrBWkMUDc == bQrBWkMUDc){ADDLwscBfq = true;}
      if(QVgdxeFHcD == true){QVgdxeFHcD = false;}
      if(ebdpaqlGkX == true){ebdpaqlGkX = false;}
      if(niSbkLSLfl == true){niSbkLSLfl = false;}
      if(CoUGEpcZLT == true){CoUGEpcZLT = false;}
      if(kMbfpAlBae == true){kMbfpAlBae = false;}
      if(yGjeogCFrl == true){yGjeogCFrl = false;}
      if(MtbpBpHWlk == true){MtbpBpHWlk = false;}
      if(OMtQmaHmkk == true){OMtQmaHmkk = false;}
      if(YRkAnwFoRW == true){YRkAnwFoRW = false;}
      if(mWgZHpkkdz == true){mWgZHpkkdz = false;}
      if(rOOoQlLSrN == true){rOOoQlLSrN = false;}
      if(ZPTGMuJaBE == true){ZPTGMuJaBE = false;}
      if(kSEPxreUJx == true){kSEPxreUJx = false;}
      if(oVIlsKCujC == true){oVIlsKCujC = false;}
      if(klwEwXDZNM == true){klwEwXDZNM = false;}
      if(fKjZOZJzqY == true){fKjZOZJzqY = false;}
      if(GqIuYEGhNC == true){GqIuYEGhNC = false;}
      if(rOqzTyVATZ == true){rOqzTyVATZ = false;}
      if(nEGxQekiWT == true){nEGxQekiWT = false;}
      if(ADDLwscBfq == true){ADDLwscBfq = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class JFTRGELELQ
{ 
  void rzEiuLUwJp()
  { 
      bool oJoWVefeBi = false;
      bool FxtwOtjuom = false;
      bool bHZKYqSGdU = false;
      bool hSSFLkJWWn = false;
      bool SJkWTxphuC = false;
      bool Bruxohjeye = false;
      bool LYAgBlenjc = false;
      bool jMYBTRWCpa = false;
      bool AkKbTpXVQd = false;
      bool BdYqbtJEVg = false;
      bool SCxRRnTtdW = false;
      bool KgnWdaOXMK = false;
      bool OIXFbGngYZ = false;
      bool IRfIIynrKe = false;
      bool VcqsTTpBNA = false;
      bool ekqLSJdqpL = false;
      bool zmUEOrBfOe = false;
      bool mVNgokRelH = false;
      bool QmSXtXaUpz = false;
      bool UwCzfiImea = false;
      string kBcMQstkKY;
      string ECqUrOakuq;
      string OIrTybqGio;
      string dCENWhsHtc;
      string qkqWEFEUtR;
      string iCxFKcJINn;
      string BmCVuCxcyK;
      string VSpSAdQUPr;
      string XWMQFaFzDs;
      string YjtGbDhVaC;
      string IaVjwQMdFg;
      string LnsUPdalPT;
      string xyZEllXipw;
      string uutMjwBcUo;
      string NasVhjpZpy;
      string cwFHFKBQyK;
      string rcmIkQtgjT;
      string bxQaFVEDWB;
      string uysrTyolGZ;
      string ukdKwkmkjQ;
      if(kBcMQstkKY == IaVjwQMdFg){oJoWVefeBi = true;}
      else if(IaVjwQMdFg == kBcMQstkKY){SCxRRnTtdW = true;}
      if(ECqUrOakuq == LnsUPdalPT){FxtwOtjuom = true;}
      else if(LnsUPdalPT == ECqUrOakuq){KgnWdaOXMK = true;}
      if(OIrTybqGio == xyZEllXipw){bHZKYqSGdU = true;}
      else if(xyZEllXipw == OIrTybqGio){OIXFbGngYZ = true;}
      if(dCENWhsHtc == uutMjwBcUo){hSSFLkJWWn = true;}
      else if(uutMjwBcUo == dCENWhsHtc){IRfIIynrKe = true;}
      if(qkqWEFEUtR == NasVhjpZpy){SJkWTxphuC = true;}
      else if(NasVhjpZpy == qkqWEFEUtR){VcqsTTpBNA = true;}
      if(iCxFKcJINn == cwFHFKBQyK){Bruxohjeye = true;}
      else if(cwFHFKBQyK == iCxFKcJINn){ekqLSJdqpL = true;}
      if(BmCVuCxcyK == rcmIkQtgjT){LYAgBlenjc = true;}
      else if(rcmIkQtgjT == BmCVuCxcyK){zmUEOrBfOe = true;}
      if(VSpSAdQUPr == bxQaFVEDWB){jMYBTRWCpa = true;}
      if(XWMQFaFzDs == uysrTyolGZ){AkKbTpXVQd = true;}
      if(YjtGbDhVaC == ukdKwkmkjQ){BdYqbtJEVg = true;}
      while(bxQaFVEDWB == VSpSAdQUPr){mVNgokRelH = true;}
      while(uysrTyolGZ == uysrTyolGZ){QmSXtXaUpz = true;}
      while(ukdKwkmkjQ == ukdKwkmkjQ){UwCzfiImea = true;}
      if(oJoWVefeBi == true){oJoWVefeBi = false;}
      if(FxtwOtjuom == true){FxtwOtjuom = false;}
      if(bHZKYqSGdU == true){bHZKYqSGdU = false;}
      if(hSSFLkJWWn == true){hSSFLkJWWn = false;}
      if(SJkWTxphuC == true){SJkWTxphuC = false;}
      if(Bruxohjeye == true){Bruxohjeye = false;}
      if(LYAgBlenjc == true){LYAgBlenjc = false;}
      if(jMYBTRWCpa == true){jMYBTRWCpa = false;}
      if(AkKbTpXVQd == true){AkKbTpXVQd = false;}
      if(BdYqbtJEVg == true){BdYqbtJEVg = false;}
      if(SCxRRnTtdW == true){SCxRRnTtdW = false;}
      if(KgnWdaOXMK == true){KgnWdaOXMK = false;}
      if(OIXFbGngYZ == true){OIXFbGngYZ = false;}
      if(IRfIIynrKe == true){IRfIIynrKe = false;}
      if(VcqsTTpBNA == true){VcqsTTpBNA = false;}
      if(ekqLSJdqpL == true){ekqLSJdqpL = false;}
      if(zmUEOrBfOe == true){zmUEOrBfOe = false;}
      if(mVNgokRelH == true){mVNgokRelH = false;}
      if(QmSXtXaUpz == true){QmSXtXaUpz = false;}
      if(UwCzfiImea == true){UwCzfiImea = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class VDHVZRXUOF
{ 
  void QUrHJWXHkB()
  { 
      bool hgSFPQligT = false;
      bool doRMtYnhfh = false;
      bool MQYmFNVQKl = false;
      bool BVQuFQTbhA = false;
      bool IamKKBLiKL = false;
      bool VhrJZQIfzC = false;
      bool tVXuSIXVHc = false;
      bool EMAfYkdNbE = false;
      bool ClGyPScHVo = false;
      bool InbeFmCrrC = false;
      bool cobgGJhMjo = false;
      bool ltDuAIOZez = false;
      bool eQASTQjUal = false;
      bool hkVZbMKYrF = false;
      bool kQWfCOkgew = false;
      bool XcNrXLoIMp = false;
      bool ZNkyGAXcSm = false;
      bool ypgYONtTQF = false;
      bool fCodNEXdCQ = false;
      bool XBMCfWfXZB = false;
      string WinbTAmYhm;
      string mrrqLWCIoI;
      string tFmFfUPViC;
      string TtIMiAlhkK;
      string NPydqZGxSL;
      string NdOqKQuhwy;
      string kRpeTrieIL;
      string kTWdudGJOF;
      string ORDXoofRCR;
      string FDllZwZTJy;
      string qaoGasHjug;
      string JkTqjSNRpe;
      string MRcpGhhjEy;
      string DmzPOnbwxu;
      string huVUITjuCG;
      string hHcekYxzAr;
      string LWexdVlDbw;
      string qRUtxRuIhm;
      string ylhxQuJUeo;
      string pcwEjKPYql;
      if(WinbTAmYhm == qaoGasHjug){hgSFPQligT = true;}
      else if(qaoGasHjug == WinbTAmYhm){cobgGJhMjo = true;}
      if(mrrqLWCIoI == JkTqjSNRpe){doRMtYnhfh = true;}
      else if(JkTqjSNRpe == mrrqLWCIoI){ltDuAIOZez = true;}
      if(tFmFfUPViC == MRcpGhhjEy){MQYmFNVQKl = true;}
      else if(MRcpGhhjEy == tFmFfUPViC){eQASTQjUal = true;}
      if(TtIMiAlhkK == DmzPOnbwxu){BVQuFQTbhA = true;}
      else if(DmzPOnbwxu == TtIMiAlhkK){hkVZbMKYrF = true;}
      if(NPydqZGxSL == huVUITjuCG){IamKKBLiKL = true;}
      else if(huVUITjuCG == NPydqZGxSL){kQWfCOkgew = true;}
      if(NdOqKQuhwy == hHcekYxzAr){VhrJZQIfzC = true;}
      else if(hHcekYxzAr == NdOqKQuhwy){XcNrXLoIMp = true;}
      if(kRpeTrieIL == LWexdVlDbw){tVXuSIXVHc = true;}
      else if(LWexdVlDbw == kRpeTrieIL){ZNkyGAXcSm = true;}
      if(kTWdudGJOF == qRUtxRuIhm){EMAfYkdNbE = true;}
      if(ORDXoofRCR == ylhxQuJUeo){ClGyPScHVo = true;}
      if(FDllZwZTJy == pcwEjKPYql){InbeFmCrrC = true;}
      while(qRUtxRuIhm == kTWdudGJOF){ypgYONtTQF = true;}
      while(ylhxQuJUeo == ylhxQuJUeo){fCodNEXdCQ = true;}
      while(pcwEjKPYql == pcwEjKPYql){XBMCfWfXZB = true;}
      if(hgSFPQligT == true){hgSFPQligT = false;}
      if(doRMtYnhfh == true){doRMtYnhfh = false;}
      if(MQYmFNVQKl == true){MQYmFNVQKl = false;}
      if(BVQuFQTbhA == true){BVQuFQTbhA = false;}
      if(IamKKBLiKL == true){IamKKBLiKL = false;}
      if(VhrJZQIfzC == true){VhrJZQIfzC = false;}
      if(tVXuSIXVHc == true){tVXuSIXVHc = false;}
      if(EMAfYkdNbE == true){EMAfYkdNbE = false;}
      if(ClGyPScHVo == true){ClGyPScHVo = false;}
      if(InbeFmCrrC == true){InbeFmCrrC = false;}
      if(cobgGJhMjo == true){cobgGJhMjo = false;}
      if(ltDuAIOZez == true){ltDuAIOZez = false;}
      if(eQASTQjUal == true){eQASTQjUal = false;}
      if(hkVZbMKYrF == true){hkVZbMKYrF = false;}
      if(kQWfCOkgew == true){kQWfCOkgew = false;}
      if(XcNrXLoIMp == true){XcNrXLoIMp = false;}
      if(ZNkyGAXcSm == true){ZNkyGAXcSm = false;}
      if(ypgYONtTQF == true){ypgYONtTQF = false;}
      if(fCodNEXdCQ == true){fCodNEXdCQ = false;}
      if(XBMCfWfXZB == true){XBMCfWfXZB = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class GNGFPBSUHC
{ 
  void bWOoiVCUFN()
  { 
      bool EEEbsbFVuE = false;
      bool MGtSjgdwlL = false;
      bool ZnsQqFNyeJ = false;
      bool PaNZNOdQOU = false;
      bool QANLTQsXPI = false;
      bool aBYkbPKmkn = false;
      bool OGplolsUEU = false;
      bool CMhQuYahxZ = false;
      bool MoiVhOBbxy = false;
      bool EqfZGKJaVg = false;
      bool WXStGNSIoC = false;
      bool oboKbYXUDa = false;
      bool jQXGQLgHKk = false;
      bool PzLPDnWnPT = false;
      bool usltJbBUyg = false;
      bool loXuwFAMdt = false;
      bool gLyEmoPYHm = false;
      bool CiEifqdcxn = false;
      bool KLJcyZbQTx = false;
      bool nJKVmiuhHT = false;
      string NgeTkpxzyz;
      string IEzXuGeekW;
      string SauTfiggLS;
      string YoOWrFRRyz;
      string dpwaCVkaxY;
      string NnlFjlkKmC;
      string IQmeaSocfp;
      string oNgkrbdTRK;
      string xFjmEjCImG;
      string THdwpNDRAi;
      string fHuHjzHANH;
      string IRsbEDgAap;
      string QgpYVgjjud;
      string YMTieoJbCF;
      string bCtexCOBqm;
      string gDpJSyRVkC;
      string PWEihuyJxO;
      string sExUONlKbS;
      string ShsIxVVJQf;
      string XmpzpExLxB;
      if(NgeTkpxzyz == fHuHjzHANH){EEEbsbFVuE = true;}
      else if(fHuHjzHANH == NgeTkpxzyz){WXStGNSIoC = true;}
      if(IEzXuGeekW == IRsbEDgAap){MGtSjgdwlL = true;}
      else if(IRsbEDgAap == IEzXuGeekW){oboKbYXUDa = true;}
      if(SauTfiggLS == QgpYVgjjud){ZnsQqFNyeJ = true;}
      else if(QgpYVgjjud == SauTfiggLS){jQXGQLgHKk = true;}
      if(YoOWrFRRyz == YMTieoJbCF){PaNZNOdQOU = true;}
      else if(YMTieoJbCF == YoOWrFRRyz){PzLPDnWnPT = true;}
      if(dpwaCVkaxY == bCtexCOBqm){QANLTQsXPI = true;}
      else if(bCtexCOBqm == dpwaCVkaxY){usltJbBUyg = true;}
      if(NnlFjlkKmC == gDpJSyRVkC){aBYkbPKmkn = true;}
      else if(gDpJSyRVkC == NnlFjlkKmC){loXuwFAMdt = true;}
      if(IQmeaSocfp == PWEihuyJxO){OGplolsUEU = true;}
      else if(PWEihuyJxO == IQmeaSocfp){gLyEmoPYHm = true;}
      if(oNgkrbdTRK == sExUONlKbS){CMhQuYahxZ = true;}
      if(xFjmEjCImG == ShsIxVVJQf){MoiVhOBbxy = true;}
      if(THdwpNDRAi == XmpzpExLxB){EqfZGKJaVg = true;}
      while(sExUONlKbS == oNgkrbdTRK){CiEifqdcxn = true;}
      while(ShsIxVVJQf == ShsIxVVJQf){KLJcyZbQTx = true;}
      while(XmpzpExLxB == XmpzpExLxB){nJKVmiuhHT = true;}
      if(EEEbsbFVuE == true){EEEbsbFVuE = false;}
      if(MGtSjgdwlL == true){MGtSjgdwlL = false;}
      if(ZnsQqFNyeJ == true){ZnsQqFNyeJ = false;}
      if(PaNZNOdQOU == true){PaNZNOdQOU = false;}
      if(QANLTQsXPI == true){QANLTQsXPI = false;}
      if(aBYkbPKmkn == true){aBYkbPKmkn = false;}
      if(OGplolsUEU == true){OGplolsUEU = false;}
      if(CMhQuYahxZ == true){CMhQuYahxZ = false;}
      if(MoiVhOBbxy == true){MoiVhOBbxy = false;}
      if(EqfZGKJaVg == true){EqfZGKJaVg = false;}
      if(WXStGNSIoC == true){WXStGNSIoC = false;}
      if(oboKbYXUDa == true){oboKbYXUDa = false;}
      if(jQXGQLgHKk == true){jQXGQLgHKk = false;}
      if(PzLPDnWnPT == true){PzLPDnWnPT = false;}
      if(usltJbBUyg == true){usltJbBUyg = false;}
      if(loXuwFAMdt == true){loXuwFAMdt = false;}
      if(gLyEmoPYHm == true){gLyEmoPYHm = false;}
      if(CiEifqdcxn == true){CiEifqdcxn = false;}
      if(KLJcyZbQTx == true){KLJcyZbQTx = false;}
      if(nJKVmiuhHT == true){nJKVmiuhHT = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class YUAQWEZZMR
{ 
  void YnLlVqpNWQ()
  { 
      bool ituFjMsSLR = false;
      bool OIIURfZpVi = false;
      bool FlPRtcUpeK = false;
      bool VdxjbeUUEe = false;
      bool lDqVHHODgy = false;
      bool HCzJcxddLH = false;
      bool qDmAujLXsl = false;
      bool KFkqxBtsJm = false;
      bool NQJgDTemGe = false;
      bool ApIxmhQpZX = false;
      bool uqJtmBQIMa = false;
      bool CkTYsatFxb = false;
      bool FXQNlTwnDO = false;
      bool kDSlqWHOsB = false;
      bool DVZfcPWiDM = false;
      bool nKsyRWZwIT = false;
      bool EbEypzShhW = false;
      bool SeMuYiykkV = false;
      bool xNkqaZJUTT = false;
      bool wKGZxaQbod = false;
      string KCQQVfJlZx;
      string BeRnJPVCxW;
      string RYSLImbpGV;
      string woCkXEZPWn;
      string WrPfbZcWUD;
      string BWNJBkjFHi;
      string ETfDALbgQE;
      string pGeJzZJmii;
      string KEUCUZasil;
      string UTHnjDLLeP;
      string xuFPMtqEJb;
      string awWYXzydia;
      string kixdiWzpYw;
      string NyHSkOzFoZ;
      string hWiHLXxiPj;
      string FhbEeOyagp;
      string uAeNOboDmJ;
      string AsnJrNApSL;
      string YPanqeWDnV;
      string PXYydgrVsi;
      if(KCQQVfJlZx == xuFPMtqEJb){ituFjMsSLR = true;}
      else if(xuFPMtqEJb == KCQQVfJlZx){uqJtmBQIMa = true;}
      if(BeRnJPVCxW == awWYXzydia){OIIURfZpVi = true;}
      else if(awWYXzydia == BeRnJPVCxW){CkTYsatFxb = true;}
      if(RYSLImbpGV == kixdiWzpYw){FlPRtcUpeK = true;}
      else if(kixdiWzpYw == RYSLImbpGV){FXQNlTwnDO = true;}
      if(woCkXEZPWn == NyHSkOzFoZ){VdxjbeUUEe = true;}
      else if(NyHSkOzFoZ == woCkXEZPWn){kDSlqWHOsB = true;}
      if(WrPfbZcWUD == hWiHLXxiPj){lDqVHHODgy = true;}
      else if(hWiHLXxiPj == WrPfbZcWUD){DVZfcPWiDM = true;}
      if(BWNJBkjFHi == FhbEeOyagp){HCzJcxddLH = true;}
      else if(FhbEeOyagp == BWNJBkjFHi){nKsyRWZwIT = true;}
      if(ETfDALbgQE == uAeNOboDmJ){qDmAujLXsl = true;}
      else if(uAeNOboDmJ == ETfDALbgQE){EbEypzShhW = true;}
      if(pGeJzZJmii == AsnJrNApSL){KFkqxBtsJm = true;}
      if(KEUCUZasil == YPanqeWDnV){NQJgDTemGe = true;}
      if(UTHnjDLLeP == PXYydgrVsi){ApIxmhQpZX = true;}
      while(AsnJrNApSL == pGeJzZJmii){SeMuYiykkV = true;}
      while(YPanqeWDnV == YPanqeWDnV){xNkqaZJUTT = true;}
      while(PXYydgrVsi == PXYydgrVsi){wKGZxaQbod = true;}
      if(ituFjMsSLR == true){ituFjMsSLR = false;}
      if(OIIURfZpVi == true){OIIURfZpVi = false;}
      if(FlPRtcUpeK == true){FlPRtcUpeK = false;}
      if(VdxjbeUUEe == true){VdxjbeUUEe = false;}
      if(lDqVHHODgy == true){lDqVHHODgy = false;}
      if(HCzJcxddLH == true){HCzJcxddLH = false;}
      if(qDmAujLXsl == true){qDmAujLXsl = false;}
      if(KFkqxBtsJm == true){KFkqxBtsJm = false;}
      if(NQJgDTemGe == true){NQJgDTemGe = false;}
      if(ApIxmhQpZX == true){ApIxmhQpZX = false;}
      if(uqJtmBQIMa == true){uqJtmBQIMa = false;}
      if(CkTYsatFxb == true){CkTYsatFxb = false;}
      if(FXQNlTwnDO == true){FXQNlTwnDO = false;}
      if(kDSlqWHOsB == true){kDSlqWHOsB = false;}
      if(DVZfcPWiDM == true){DVZfcPWiDM = false;}
      if(nKsyRWZwIT == true){nKsyRWZwIT = false;}
      if(EbEypzShhW == true){EbEypzShhW = false;}
      if(SeMuYiykkV == true){SeMuYiykkV = false;}
      if(xNkqaZJUTT == true){xNkqaZJUTT = false;}
      if(wKGZxaQbod == true){wKGZxaQbod = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class LIOFHAEZSF
{ 
  void QsdgIuRjXs()
  { 
      bool ZUitWxQWUp = false;
      bool TjVVGrALlq = false;
      bool ACkjEIUrZH = false;
      bool TwMAdyjzxJ = false;
      bool rJSZzWKcoj = false;
      bool aYJglXjyoO = false;
      bool cXwMWXWUrI = false;
      bool HBOcypjKjh = false;
      bool yqDofulfNF = false;
      bool NlKigTMFDb = false;
      bool AokgcZKghu = false;
      bool nZOHPkUHfb = false;
      bool kpHltVqfwd = false;
      bool ddHIhIFWLG = false;
      bool kFySRnWDSu = false;
      bool zFZapJhylH = false;
      bool idkDRKRFYH = false;
      bool eywZqernUF = false;
      bool ymMAeXDfRX = false;
      bool aHjEWGUuBH = false;
      string jZdQlJyftZ;
      string CAnYDBHglO;
      string udnoHpdhgy;
      string CFLlMkZeoS;
      string cPJiMhhbNs;
      string sldEwGloIu;
      string ePzuXwnBMS;
      string abrSlfTEbY;
      string ICUnFQbHpG;
      string yjVsmMQOLP;
      string sfOtRQsKRQ;
      string lhNjmbtKpG;
      string UgKGTqFzeY;
      string OFrLfbnZWn;
      string WQoZTPWlFL;
      string RFYEuLUIZa;
      string LtfsBgpBDL;
      string nUnCjErklE;
      string TSsTGJfmQT;
      string GfzucbjuXl;
      if(jZdQlJyftZ == sfOtRQsKRQ){ZUitWxQWUp = true;}
      else if(sfOtRQsKRQ == jZdQlJyftZ){AokgcZKghu = true;}
      if(CAnYDBHglO == lhNjmbtKpG){TjVVGrALlq = true;}
      else if(lhNjmbtKpG == CAnYDBHglO){nZOHPkUHfb = true;}
      if(udnoHpdhgy == UgKGTqFzeY){ACkjEIUrZH = true;}
      else if(UgKGTqFzeY == udnoHpdhgy){kpHltVqfwd = true;}
      if(CFLlMkZeoS == OFrLfbnZWn){TwMAdyjzxJ = true;}
      else if(OFrLfbnZWn == CFLlMkZeoS){ddHIhIFWLG = true;}
      if(cPJiMhhbNs == WQoZTPWlFL){rJSZzWKcoj = true;}
      else if(WQoZTPWlFL == cPJiMhhbNs){kFySRnWDSu = true;}
      if(sldEwGloIu == RFYEuLUIZa){aYJglXjyoO = true;}
      else if(RFYEuLUIZa == sldEwGloIu){zFZapJhylH = true;}
      if(ePzuXwnBMS == LtfsBgpBDL){cXwMWXWUrI = true;}
      else if(LtfsBgpBDL == ePzuXwnBMS){idkDRKRFYH = true;}
      if(abrSlfTEbY == nUnCjErklE){HBOcypjKjh = true;}
      if(ICUnFQbHpG == TSsTGJfmQT){yqDofulfNF = true;}
      if(yjVsmMQOLP == GfzucbjuXl){NlKigTMFDb = true;}
      while(nUnCjErklE == abrSlfTEbY){eywZqernUF = true;}
      while(TSsTGJfmQT == TSsTGJfmQT){ymMAeXDfRX = true;}
      while(GfzucbjuXl == GfzucbjuXl){aHjEWGUuBH = true;}
      if(ZUitWxQWUp == true){ZUitWxQWUp = false;}
      if(TjVVGrALlq == true){TjVVGrALlq = false;}
      if(ACkjEIUrZH == true){ACkjEIUrZH = false;}
      if(TwMAdyjzxJ == true){TwMAdyjzxJ = false;}
      if(rJSZzWKcoj == true){rJSZzWKcoj = false;}
      if(aYJglXjyoO == true){aYJglXjyoO = false;}
      if(cXwMWXWUrI == true){cXwMWXWUrI = false;}
      if(HBOcypjKjh == true){HBOcypjKjh = false;}
      if(yqDofulfNF == true){yqDofulfNF = false;}
      if(NlKigTMFDb == true){NlKigTMFDb = false;}
      if(AokgcZKghu == true){AokgcZKghu = false;}
      if(nZOHPkUHfb == true){nZOHPkUHfb = false;}
      if(kpHltVqfwd == true){kpHltVqfwd = false;}
      if(ddHIhIFWLG == true){ddHIhIFWLG = false;}
      if(kFySRnWDSu == true){kFySRnWDSu = false;}
      if(zFZapJhylH == true){zFZapJhylH = false;}
      if(idkDRKRFYH == true){idkDRKRFYH = false;}
      if(eywZqernUF == true){eywZqernUF = false;}
      if(ymMAeXDfRX == true){ymMAeXDfRX = false;}
      if(aHjEWGUuBH == true){aHjEWGUuBH = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class YFQITDEBDS
{ 
  void lCkKgRMoZj()
  { 
      bool ziWSMDIOZG = false;
      bool MMpnMXqURC = false;
      bool jJqMhFrlCc = false;
      bool MuZaIJajMg = false;
      bool hWpnKVAqFh = false;
      bool JYyqmoqJkH = false;
      bool LWMxsRmOfC = false;
      bool xGIkTNSCCM = false;
      bool EAfTTnwinT = false;
      bool RQzFULKsur = false;
      bool hlLCkDQMWY = false;
      bool VoHXDLprdF = false;
      bool VDZLjfGCQI = false;
      bool DZHJdRndiP = false;
      bool XiLPxcIaBJ = false;
      bool URPoWdMzRE = false;
      bool wNwOVwgytk = false;
      bool WMINhlrKOG = false;
      bool WeAGnkJSlz = false;
      bool FnLdTKlxtA = false;
      string IFACFEzPJA;
      string kDQsJCVoue;
      string IJRpSaPorY;
      string DTobYHYZqa;
      string nNrWZRaBgy;
      string WdzGrynJid;
      string oKWkxQNoTB;
      string cwyUpuRtQA;
      string ANItBZUiia;
      string TOpMkdpHZI;
      string DlheUaeePx;
      string gtshdbBciW;
      string weFshOFkiM;
      string EJTHxOfcYa;
      string toTltZUIhJ;
      string bNXDMYfnxG;
      string UtuCsWZlkP;
      string wXEIcGLSyI;
      string sxDZjqlQtX;
      string hqfSFAtQsX;
      if(IFACFEzPJA == DlheUaeePx){ziWSMDIOZG = true;}
      else if(DlheUaeePx == IFACFEzPJA){hlLCkDQMWY = true;}
      if(kDQsJCVoue == gtshdbBciW){MMpnMXqURC = true;}
      else if(gtshdbBciW == kDQsJCVoue){VoHXDLprdF = true;}
      if(IJRpSaPorY == weFshOFkiM){jJqMhFrlCc = true;}
      else if(weFshOFkiM == IJRpSaPorY){VDZLjfGCQI = true;}
      if(DTobYHYZqa == EJTHxOfcYa){MuZaIJajMg = true;}
      else if(EJTHxOfcYa == DTobYHYZqa){DZHJdRndiP = true;}
      if(nNrWZRaBgy == toTltZUIhJ){hWpnKVAqFh = true;}
      else if(toTltZUIhJ == nNrWZRaBgy){XiLPxcIaBJ = true;}
      if(WdzGrynJid == bNXDMYfnxG){JYyqmoqJkH = true;}
      else if(bNXDMYfnxG == WdzGrynJid){URPoWdMzRE = true;}
      if(oKWkxQNoTB == UtuCsWZlkP){LWMxsRmOfC = true;}
      else if(UtuCsWZlkP == oKWkxQNoTB){wNwOVwgytk = true;}
      if(cwyUpuRtQA == wXEIcGLSyI){xGIkTNSCCM = true;}
      if(ANItBZUiia == sxDZjqlQtX){EAfTTnwinT = true;}
      if(TOpMkdpHZI == hqfSFAtQsX){RQzFULKsur = true;}
      while(wXEIcGLSyI == cwyUpuRtQA){WMINhlrKOG = true;}
      while(sxDZjqlQtX == sxDZjqlQtX){WeAGnkJSlz = true;}
      while(hqfSFAtQsX == hqfSFAtQsX){FnLdTKlxtA = true;}
      if(ziWSMDIOZG == true){ziWSMDIOZG = false;}
      if(MMpnMXqURC == true){MMpnMXqURC = false;}
      if(jJqMhFrlCc == true){jJqMhFrlCc = false;}
      if(MuZaIJajMg == true){MuZaIJajMg = false;}
      if(hWpnKVAqFh == true){hWpnKVAqFh = false;}
      if(JYyqmoqJkH == true){JYyqmoqJkH = false;}
      if(LWMxsRmOfC == true){LWMxsRmOfC = false;}
      if(xGIkTNSCCM == true){xGIkTNSCCM = false;}
      if(EAfTTnwinT == true){EAfTTnwinT = false;}
      if(RQzFULKsur == true){RQzFULKsur = false;}
      if(hlLCkDQMWY == true){hlLCkDQMWY = false;}
      if(VoHXDLprdF == true){VoHXDLprdF = false;}
      if(VDZLjfGCQI == true){VDZLjfGCQI = false;}
      if(DZHJdRndiP == true){DZHJdRndiP = false;}
      if(XiLPxcIaBJ == true){XiLPxcIaBJ = false;}
      if(URPoWdMzRE == true){URPoWdMzRE = false;}
      if(wNwOVwgytk == true){wNwOVwgytk = false;}
      if(WMINhlrKOG == true){WMINhlrKOG = false;}
      if(WeAGnkJSlz == true){WeAGnkJSlz = false;}
      if(FnLdTKlxtA == true){FnLdTKlxtA = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class DNTTCCCWCH
{ 
  void DBhzrYZISn()
  { 
      bool cuMRmDKqKO = false;
      bool TEqpjLXurF = false;
      bool IbdKmUiUEC = false;
      bool CncAJftcHJ = false;
      bool xmRssLdtuA = false;
      bool NzXrgAQBdS = false;
      bool UplIMebpgD = false;
      bool RtniIUKkRb = false;
      bool poYDoCQkTI = false;
      bool PrzonGAIgO = false;
      bool inMqiSKniL = false;
      bool pfjBbfRiTJ = false;
      bool NqWYnYuztC = false;
      bool UBDCrCbgUV = false;
      bool qbBIRiIxMI = false;
      bool oRoWArQnDJ = false;
      bool WLtfqobgJZ = false;
      bool EjNxRloOGE = false;
      bool QyllNCLgCz = false;
      bool kmdLzehURb = false;
      string GYMPXQbgfa;
      string pgbrmKbLIh;
      string UmeqVMWlfq;
      string AHstWGLndO;
      string sBtPblzVcU;
      string zOIfAStVsL;
      string spBoahngVf;
      string zmhsoTrOOj;
      string NBJLqkzNsD;
      string MouSVDAFnt;
      string ySzwULgOqg;
      string ZeHJxrfoxp;
      string hamSTJrOXk;
      string SmaTktCMpf;
      string DkVMcghkUc;
      string WKIyLXegcL;
      string SRpGOmEmYD;
      string pSzQmxEaol;
      string aHttNIebIN;
      string PUjeMkuPyo;
      if(GYMPXQbgfa == ySzwULgOqg){cuMRmDKqKO = true;}
      else if(ySzwULgOqg == GYMPXQbgfa){inMqiSKniL = true;}
      if(pgbrmKbLIh == ZeHJxrfoxp){TEqpjLXurF = true;}
      else if(ZeHJxrfoxp == pgbrmKbLIh){pfjBbfRiTJ = true;}
      if(UmeqVMWlfq == hamSTJrOXk){IbdKmUiUEC = true;}
      else if(hamSTJrOXk == UmeqVMWlfq){NqWYnYuztC = true;}
      if(AHstWGLndO == SmaTktCMpf){CncAJftcHJ = true;}
      else if(SmaTktCMpf == AHstWGLndO){UBDCrCbgUV = true;}
      if(sBtPblzVcU == DkVMcghkUc){xmRssLdtuA = true;}
      else if(DkVMcghkUc == sBtPblzVcU){qbBIRiIxMI = true;}
      if(zOIfAStVsL == WKIyLXegcL){NzXrgAQBdS = true;}
      else if(WKIyLXegcL == zOIfAStVsL){oRoWArQnDJ = true;}
      if(spBoahngVf == SRpGOmEmYD){UplIMebpgD = true;}
      else if(SRpGOmEmYD == spBoahngVf){WLtfqobgJZ = true;}
      if(zmhsoTrOOj == pSzQmxEaol){RtniIUKkRb = true;}
      if(NBJLqkzNsD == aHttNIebIN){poYDoCQkTI = true;}
      if(MouSVDAFnt == PUjeMkuPyo){PrzonGAIgO = true;}
      while(pSzQmxEaol == zmhsoTrOOj){EjNxRloOGE = true;}
      while(aHttNIebIN == aHttNIebIN){QyllNCLgCz = true;}
      while(PUjeMkuPyo == PUjeMkuPyo){kmdLzehURb = true;}
      if(cuMRmDKqKO == true){cuMRmDKqKO = false;}
      if(TEqpjLXurF == true){TEqpjLXurF = false;}
      if(IbdKmUiUEC == true){IbdKmUiUEC = false;}
      if(CncAJftcHJ == true){CncAJftcHJ = false;}
      if(xmRssLdtuA == true){xmRssLdtuA = false;}
      if(NzXrgAQBdS == true){NzXrgAQBdS = false;}
      if(UplIMebpgD == true){UplIMebpgD = false;}
      if(RtniIUKkRb == true){RtniIUKkRb = false;}
      if(poYDoCQkTI == true){poYDoCQkTI = false;}
      if(PrzonGAIgO == true){PrzonGAIgO = false;}
      if(inMqiSKniL == true){inMqiSKniL = false;}
      if(pfjBbfRiTJ == true){pfjBbfRiTJ = false;}
      if(NqWYnYuztC == true){NqWYnYuztC = false;}
      if(UBDCrCbgUV == true){UBDCrCbgUV = false;}
      if(qbBIRiIxMI == true){qbBIRiIxMI = false;}
      if(oRoWArQnDJ == true){oRoWArQnDJ = false;}
      if(WLtfqobgJZ == true){WLtfqobgJZ = false;}
      if(EjNxRloOGE == true){EjNxRloOGE = false;}
      if(QyllNCLgCz == true){QyllNCLgCz = false;}
      if(kmdLzehURb == true){kmdLzehURb = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class TDDIUYFTVP
{ 
  void wISCtRqwOh()
  { 
      bool KTthatRaPV = false;
      bool ktnqowEMzo = false;
      bool fhpZtMXYmB = false;
      bool lYshCPmFfm = false;
      bool sHQMPddXPb = false;
      bool jPHnSbdTnN = false;
      bool VsmOiMBGoY = false;
      bool JygMwXQcKP = false;
      bool izILQWQEOZ = false;
      bool lSRRQzUCcC = false;
      bool cXhpRkhuru = false;
      bool KAJXeWjbxM = false;
      bool wwqPmpfOww = false;
      bool DOAHlKRRsf = false;
      bool nVMTOlJslt = false;
      bool OsEPGffSDb = false;
      bool ETyuruzBlU = false;
      bool ERiRXajXAA = false;
      bool gmcCgJKkAF = false;
      bool dyORaUWQbT = false;
      string tyNFJtkfpc;
      string qmeKKDrMlI;
      string AgfFBzURro;
      string pAgyNurVRz;
      string GpFPnswOGM;
      string DbUxPMSIDK;
      string YSmBlqFgxP;
      string LVumCJaQQH;
      string DGLekOejhA;
      string cjRHZnDEcx;
      string nORqBhghuF;
      string lCqwGSGHQX;
      string LVywmbDnNN;
      string GWmTTnnTdD;
      string gxocOZrVAG;
      string gunFkRPVEY;
      string drUgzOPXbS;
      string emcMpOgVgM;
      string jgnHgKighB;
      string YSPEYocHcz;
      if(tyNFJtkfpc == nORqBhghuF){KTthatRaPV = true;}
      else if(nORqBhghuF == tyNFJtkfpc){cXhpRkhuru = true;}
      if(qmeKKDrMlI == lCqwGSGHQX){ktnqowEMzo = true;}
      else if(lCqwGSGHQX == qmeKKDrMlI){KAJXeWjbxM = true;}
      if(AgfFBzURro == LVywmbDnNN){fhpZtMXYmB = true;}
      else if(LVywmbDnNN == AgfFBzURro){wwqPmpfOww = true;}
      if(pAgyNurVRz == GWmTTnnTdD){lYshCPmFfm = true;}
      else if(GWmTTnnTdD == pAgyNurVRz){DOAHlKRRsf = true;}
      if(GpFPnswOGM == gxocOZrVAG){sHQMPddXPb = true;}
      else if(gxocOZrVAG == GpFPnswOGM){nVMTOlJslt = true;}
      if(DbUxPMSIDK == gunFkRPVEY){jPHnSbdTnN = true;}
      else if(gunFkRPVEY == DbUxPMSIDK){OsEPGffSDb = true;}
      if(YSmBlqFgxP == drUgzOPXbS){VsmOiMBGoY = true;}
      else if(drUgzOPXbS == YSmBlqFgxP){ETyuruzBlU = true;}
      if(LVumCJaQQH == emcMpOgVgM){JygMwXQcKP = true;}
      if(DGLekOejhA == jgnHgKighB){izILQWQEOZ = true;}
      if(cjRHZnDEcx == YSPEYocHcz){lSRRQzUCcC = true;}
      while(emcMpOgVgM == LVumCJaQQH){ERiRXajXAA = true;}
      while(jgnHgKighB == jgnHgKighB){gmcCgJKkAF = true;}
      while(YSPEYocHcz == YSPEYocHcz){dyORaUWQbT = true;}
      if(KTthatRaPV == true){KTthatRaPV = false;}
      if(ktnqowEMzo == true){ktnqowEMzo = false;}
      if(fhpZtMXYmB == true){fhpZtMXYmB = false;}
      if(lYshCPmFfm == true){lYshCPmFfm = false;}
      if(sHQMPddXPb == true){sHQMPddXPb = false;}
      if(jPHnSbdTnN == true){jPHnSbdTnN = false;}
      if(VsmOiMBGoY == true){VsmOiMBGoY = false;}
      if(JygMwXQcKP == true){JygMwXQcKP = false;}
      if(izILQWQEOZ == true){izILQWQEOZ = false;}
      if(lSRRQzUCcC == true){lSRRQzUCcC = false;}
      if(cXhpRkhuru == true){cXhpRkhuru = false;}
      if(KAJXeWjbxM == true){KAJXeWjbxM = false;}
      if(wwqPmpfOww == true){wwqPmpfOww = false;}
      if(DOAHlKRRsf == true){DOAHlKRRsf = false;}
      if(nVMTOlJslt == true){nVMTOlJslt = false;}
      if(OsEPGffSDb == true){OsEPGffSDb = false;}
      if(ETyuruzBlU == true){ETyuruzBlU = false;}
      if(ERiRXajXAA == true){ERiRXajXAA = false;}
      if(gmcCgJKkAF == true){gmcCgJKkAF = false;}
      if(dyORaUWQbT == true){dyORaUWQbT = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class TTTNMGELED
{ 
  void uiDUqYkwZl()
  { 
      bool WHONyowbTt = false;
      bool rMrGdiKwCI = false;
      bool FFLVFaphAz = false;
      bool rSKwbdFUyZ = false;
      bool aDKJsUhaRL = false;
      bool dekhBQwsHW = false;
      bool zNbUBZCudz = false;
      bool doybgCuBck = false;
      bool sOPnUMgcuL = false;
      bool gLMaaMbpHT = false;
      bool RlxSgngIAz = false;
      bool UtQWcjymzo = false;
      bool rZzRRRcWBU = false;
      bool aFtJSHRxHg = false;
      bool fXbwpmtpxq = false;
      bool OnpSarleAP = false;
      bool LJHfYPzHDV = false;
      bool RAfSITxDbe = false;
      bool XmYKFlObhZ = false;
      bool UlxrUVQwXa = false;
      string SPgwFKFmYk;
      string ZELDFQwQZg;
      string APadNpawPn;
      string FWtneTFtyG;
      string gmzKHUIOxg;
      string wuKtoCnDiP;
      string iIXkfCKWXk;
      string KCSTAMQQWr;
      string gMyhrKMzzc;
      string eCLiWXPOdE;
      string JlpLWtcptc;
      string lXfphWKorV;
      string pLXuGHpixc;
      string xBmRiuVmLy;
      string hVFVqHVVAz;
      string MZVIOyNuFP;
      string DssRfjkOGm;
      string BXdtnTFBDz;
      string kUixPWeeDk;
      string gZgwtnbmpG;
      if(SPgwFKFmYk == JlpLWtcptc){WHONyowbTt = true;}
      else if(JlpLWtcptc == SPgwFKFmYk){RlxSgngIAz = true;}
      if(ZELDFQwQZg == lXfphWKorV){rMrGdiKwCI = true;}
      else if(lXfphWKorV == ZELDFQwQZg){UtQWcjymzo = true;}
      if(APadNpawPn == pLXuGHpixc){FFLVFaphAz = true;}
      else if(pLXuGHpixc == APadNpawPn){rZzRRRcWBU = true;}
      if(FWtneTFtyG == xBmRiuVmLy){rSKwbdFUyZ = true;}
      else if(xBmRiuVmLy == FWtneTFtyG){aFtJSHRxHg = true;}
      if(gmzKHUIOxg == hVFVqHVVAz){aDKJsUhaRL = true;}
      else if(hVFVqHVVAz == gmzKHUIOxg){fXbwpmtpxq = true;}
      if(wuKtoCnDiP == MZVIOyNuFP){dekhBQwsHW = true;}
      else if(MZVIOyNuFP == wuKtoCnDiP){OnpSarleAP = true;}
      if(iIXkfCKWXk == DssRfjkOGm){zNbUBZCudz = true;}
      else if(DssRfjkOGm == iIXkfCKWXk){LJHfYPzHDV = true;}
      if(KCSTAMQQWr == BXdtnTFBDz){doybgCuBck = true;}
      if(gMyhrKMzzc == kUixPWeeDk){sOPnUMgcuL = true;}
      if(eCLiWXPOdE == gZgwtnbmpG){gLMaaMbpHT = true;}
      while(BXdtnTFBDz == KCSTAMQQWr){RAfSITxDbe = true;}
      while(kUixPWeeDk == kUixPWeeDk){XmYKFlObhZ = true;}
      while(gZgwtnbmpG == gZgwtnbmpG){UlxrUVQwXa = true;}
      if(WHONyowbTt == true){WHONyowbTt = false;}
      if(rMrGdiKwCI == true){rMrGdiKwCI = false;}
      if(FFLVFaphAz == true){FFLVFaphAz = false;}
      if(rSKwbdFUyZ == true){rSKwbdFUyZ = false;}
      if(aDKJsUhaRL == true){aDKJsUhaRL = false;}
      if(dekhBQwsHW == true){dekhBQwsHW = false;}
      if(zNbUBZCudz == true){zNbUBZCudz = false;}
      if(doybgCuBck == true){doybgCuBck = false;}
      if(sOPnUMgcuL == true){sOPnUMgcuL = false;}
      if(gLMaaMbpHT == true){gLMaaMbpHT = false;}
      if(RlxSgngIAz == true){RlxSgngIAz = false;}
      if(UtQWcjymzo == true){UtQWcjymzo = false;}
      if(rZzRRRcWBU == true){rZzRRRcWBU = false;}
      if(aFtJSHRxHg == true){aFtJSHRxHg = false;}
      if(fXbwpmtpxq == true){fXbwpmtpxq = false;}
      if(OnpSarleAP == true){OnpSarleAP = false;}
      if(LJHfYPzHDV == true){LJHfYPzHDV = false;}
      if(RAfSITxDbe == true){RAfSITxDbe = false;}
      if(XmYKFlObhZ == true){XmYKFlObhZ = false;}
      if(UlxrUVQwXa == true){UlxrUVQwXa = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class LYNFZIFQCE
{ 
  void wGEbmLMBIj()
  { 
      bool cLVKQRVgHt = false;
      bool JoPRQtDJkD = false;
      bool kkTyBSUFwA = false;
      bool bbAcTHXaRx = false;
      bool GsouVemQew = false;
      bool eCJQXrrWIy = false;
      bool xQkGSgnmyJ = false;
      bool WcrnwquXbW = false;
      bool eDazVYRjEb = false;
      bool OARSApIico = false;
      bool pASVZCKVTf = false;
      bool xTulTsokks = false;
      bool OEiVtVKYnG = false;
      bool iLumfekFZS = false;
      bool OwPXeuFfzG = false;
      bool BWyjakRwaD = false;
      bool qlhNxkYIFo = false;
      bool HjLReSnKqy = false;
      bool QeZgEMNLLu = false;
      bool NodWbbNCZs = false;
      string VZqTuBuBxJ;
      string lQbzYlgams;
      string skSCNpLbSY;
      string ZUSWNltxhD;
      string onHgwziwIP;
      string PxzmnjGoFE;
      string pTiYiRyEkl;
      string rjsiEFckFO;
      string HPSCIbVeic;
      string eEqcNUEixe;
      string BeKVWfEPih;
      string GUiqxaAgPG;
      string uTVIHnrPVi;
      string BtmZNcExec;
      string XGuBVKUzem;
      string UXTpjgIBOi;
      string mnsAgMgJdU;
      string VDBlioXTlw;
      string SskiOcawpf;
      string TDhupiMuTJ;
      if(VZqTuBuBxJ == BeKVWfEPih){cLVKQRVgHt = true;}
      else if(BeKVWfEPih == VZqTuBuBxJ){pASVZCKVTf = true;}
      if(lQbzYlgams == GUiqxaAgPG){JoPRQtDJkD = true;}
      else if(GUiqxaAgPG == lQbzYlgams){xTulTsokks = true;}
      if(skSCNpLbSY == uTVIHnrPVi){kkTyBSUFwA = true;}
      else if(uTVIHnrPVi == skSCNpLbSY){OEiVtVKYnG = true;}
      if(ZUSWNltxhD == BtmZNcExec){bbAcTHXaRx = true;}
      else if(BtmZNcExec == ZUSWNltxhD){iLumfekFZS = true;}
      if(onHgwziwIP == XGuBVKUzem){GsouVemQew = true;}
      else if(XGuBVKUzem == onHgwziwIP){OwPXeuFfzG = true;}
      if(PxzmnjGoFE == UXTpjgIBOi){eCJQXrrWIy = true;}
      else if(UXTpjgIBOi == PxzmnjGoFE){BWyjakRwaD = true;}
      if(pTiYiRyEkl == mnsAgMgJdU){xQkGSgnmyJ = true;}
      else if(mnsAgMgJdU == pTiYiRyEkl){qlhNxkYIFo = true;}
      if(rjsiEFckFO == VDBlioXTlw){WcrnwquXbW = true;}
      if(HPSCIbVeic == SskiOcawpf){eDazVYRjEb = true;}
      if(eEqcNUEixe == TDhupiMuTJ){OARSApIico = true;}
      while(VDBlioXTlw == rjsiEFckFO){HjLReSnKqy = true;}
      while(SskiOcawpf == SskiOcawpf){QeZgEMNLLu = true;}
      while(TDhupiMuTJ == TDhupiMuTJ){NodWbbNCZs = true;}
      if(cLVKQRVgHt == true){cLVKQRVgHt = false;}
      if(JoPRQtDJkD == true){JoPRQtDJkD = false;}
      if(kkTyBSUFwA == true){kkTyBSUFwA = false;}
      if(bbAcTHXaRx == true){bbAcTHXaRx = false;}
      if(GsouVemQew == true){GsouVemQew = false;}
      if(eCJQXrrWIy == true){eCJQXrrWIy = false;}
      if(xQkGSgnmyJ == true){xQkGSgnmyJ = false;}
      if(WcrnwquXbW == true){WcrnwquXbW = false;}
      if(eDazVYRjEb == true){eDazVYRjEb = false;}
      if(OARSApIico == true){OARSApIico = false;}
      if(pASVZCKVTf == true){pASVZCKVTf = false;}
      if(xTulTsokks == true){xTulTsokks = false;}
      if(OEiVtVKYnG == true){OEiVtVKYnG = false;}
      if(iLumfekFZS == true){iLumfekFZS = false;}
      if(OwPXeuFfzG == true){OwPXeuFfzG = false;}
      if(BWyjakRwaD == true){BWyjakRwaD = false;}
      if(qlhNxkYIFo == true){qlhNxkYIFo = false;}
      if(HjLReSnKqy == true){HjLReSnKqy = false;}
      if(QeZgEMNLLu == true){QeZgEMNLLu = false;}
      if(NodWbbNCZs == true){NodWbbNCZs = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class JCUDNMTHBG
{ 
  void fHCLbVNUPa()
  { 
      bool AJIEHgyuYB = false;
      bool VUAIcYuwyA = false;
      bool ZxaywgIbQr = false;
      bool ThGuLXcwiV = false;
      bool LrRQtXzlbP = false;
      bool iWKoLChJHa = false;
      bool YWdggmOFwE = false;
      bool uzNbogfJEY = false;
      bool gWAAJxWRiJ = false;
      bool oSnIxnNkiG = false;
      bool ItoXUjIizd = false;
      bool VXFhsCVdWj = false;
      bool QxVmOcKFeA = false;
      bool TuZxQmgbfY = false;
      bool nmRFmRNGOu = false;
      bool SjNzoLXCIq = false;
      bool ZDEyKaxHRG = false;
      bool UtxyuceQzx = false;
      bool PDpihihaHE = false;
      bool OeSnzjiSuM = false;
      string PhnrWoaFTB;
      string ChaakmNLws;
      string GTdwKthYxz;
      string qfeYwTxtWL;
      string ElZAFSRpml;
      string jcEdVwErhc;
      string GCITJVDBeQ;
      string pSnjoUtcpq;
      string brkLPNaADA;
      string PELtEBdFqi;
      string PQKVuQoToB;
      string BaBpAORxEu;
      string tCydBkHtfm;
      string pnlHbKgOPy;
      string YHLByoDVso;
      string jfBuoMRgUK;
      string JunBKMntNo;
      string gCgFWmqxfM;
      string hkAqDJmpSP;
      string rAtEodTJpk;
      if(PhnrWoaFTB == PQKVuQoToB){AJIEHgyuYB = true;}
      else if(PQKVuQoToB == PhnrWoaFTB){ItoXUjIizd = true;}
      if(ChaakmNLws == BaBpAORxEu){VUAIcYuwyA = true;}
      else if(BaBpAORxEu == ChaakmNLws){VXFhsCVdWj = true;}
      if(GTdwKthYxz == tCydBkHtfm){ZxaywgIbQr = true;}
      else if(tCydBkHtfm == GTdwKthYxz){QxVmOcKFeA = true;}
      if(qfeYwTxtWL == pnlHbKgOPy){ThGuLXcwiV = true;}
      else if(pnlHbKgOPy == qfeYwTxtWL){TuZxQmgbfY = true;}
      if(ElZAFSRpml == YHLByoDVso){LrRQtXzlbP = true;}
      else if(YHLByoDVso == ElZAFSRpml){nmRFmRNGOu = true;}
      if(jcEdVwErhc == jfBuoMRgUK){iWKoLChJHa = true;}
      else if(jfBuoMRgUK == jcEdVwErhc){SjNzoLXCIq = true;}
      if(GCITJVDBeQ == JunBKMntNo){YWdggmOFwE = true;}
      else if(JunBKMntNo == GCITJVDBeQ){ZDEyKaxHRG = true;}
      if(pSnjoUtcpq == gCgFWmqxfM){uzNbogfJEY = true;}
      if(brkLPNaADA == hkAqDJmpSP){gWAAJxWRiJ = true;}
      if(PELtEBdFqi == rAtEodTJpk){oSnIxnNkiG = true;}
      while(gCgFWmqxfM == pSnjoUtcpq){UtxyuceQzx = true;}
      while(hkAqDJmpSP == hkAqDJmpSP){PDpihihaHE = true;}
      while(rAtEodTJpk == rAtEodTJpk){OeSnzjiSuM = true;}
      if(AJIEHgyuYB == true){AJIEHgyuYB = false;}
      if(VUAIcYuwyA == true){VUAIcYuwyA = false;}
      if(ZxaywgIbQr == true){ZxaywgIbQr = false;}
      if(ThGuLXcwiV == true){ThGuLXcwiV = false;}
      if(LrRQtXzlbP == true){LrRQtXzlbP = false;}
      if(iWKoLChJHa == true){iWKoLChJHa = false;}
      if(YWdggmOFwE == true){YWdggmOFwE = false;}
      if(uzNbogfJEY == true){uzNbogfJEY = false;}
      if(gWAAJxWRiJ == true){gWAAJxWRiJ = false;}
      if(oSnIxnNkiG == true){oSnIxnNkiG = false;}
      if(ItoXUjIizd == true){ItoXUjIizd = false;}
      if(VXFhsCVdWj == true){VXFhsCVdWj = false;}
      if(QxVmOcKFeA == true){QxVmOcKFeA = false;}
      if(TuZxQmgbfY == true){TuZxQmgbfY = false;}
      if(nmRFmRNGOu == true){nmRFmRNGOu = false;}
      if(SjNzoLXCIq == true){SjNzoLXCIq = false;}
      if(ZDEyKaxHRG == true){ZDEyKaxHRG = false;}
      if(UtxyuceQzx == true){UtxyuceQzx = false;}
      if(PDpihihaHE == true){PDpihihaHE = false;}
      if(OeSnzjiSuM == true){OeSnzjiSuM = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class EKLWXOAWQJ
{ 
  void OXExThlGGK()
  { 
      bool LUshFeCgsW = false;
      bool GLYiylRpHN = false;
      bool BciOTRiFPX = false;
      bool dMesqnLgOa = false;
      bool JuZcJaJiEd = false;
      bool GTGcVhleOn = false;
      bool wwRUstfeqK = false;
      bool akafEFCFEr = false;
      bool IzBkQJFBXJ = false;
      bool BfSaeMdFjP = false;
      bool udqtCVrZYP = false;
      bool egZVfwufDi = false;
      bool ndGhIuRABr = false;
      bool bxVowdHGiu = false;
      bool QfcIdUGwti = false;
      bool QyBAaQWJkH = false;
      bool DrYgnhLjZB = false;
      bool nnxISIByEn = false;
      bool nVFRacuUNf = false;
      bool HyVaqYGuTu = false;
      string dgoGoXgMic;
      string NmWYmleCiY;
      string fNcOyUWWNT;
      string nxGQlPYFje;
      string xcTejRcsUh;
      string rBpbAPDZHT;
      string BJyPnPgFmW;
      string MYSEaCtyeg;
      string rdCeamGdQV;
      string MzxPcneDpT;
      string jWGxUSilBy;
      string UEtZbXHSoA;
      string IDoQKNbCam;
      string XqILwUXFKH;
      string EUcRAHEWnF;
      string gLOoKgholH;
      string qfKNZdwidG;
      string zBIgwnaWPC;
      string JEOUGMcSAP;
      string mhSCQXJOqW;
      if(dgoGoXgMic == jWGxUSilBy){LUshFeCgsW = true;}
      else if(jWGxUSilBy == dgoGoXgMic){udqtCVrZYP = true;}
      if(NmWYmleCiY == UEtZbXHSoA){GLYiylRpHN = true;}
      else if(UEtZbXHSoA == NmWYmleCiY){egZVfwufDi = true;}
      if(fNcOyUWWNT == IDoQKNbCam){BciOTRiFPX = true;}
      else if(IDoQKNbCam == fNcOyUWWNT){ndGhIuRABr = true;}
      if(nxGQlPYFje == XqILwUXFKH){dMesqnLgOa = true;}
      else if(XqILwUXFKH == nxGQlPYFje){bxVowdHGiu = true;}
      if(xcTejRcsUh == EUcRAHEWnF){JuZcJaJiEd = true;}
      else if(EUcRAHEWnF == xcTejRcsUh){QfcIdUGwti = true;}
      if(rBpbAPDZHT == gLOoKgholH){GTGcVhleOn = true;}
      else if(gLOoKgholH == rBpbAPDZHT){QyBAaQWJkH = true;}
      if(BJyPnPgFmW == qfKNZdwidG){wwRUstfeqK = true;}
      else if(qfKNZdwidG == BJyPnPgFmW){DrYgnhLjZB = true;}
      if(MYSEaCtyeg == zBIgwnaWPC){akafEFCFEr = true;}
      if(rdCeamGdQV == JEOUGMcSAP){IzBkQJFBXJ = true;}
      if(MzxPcneDpT == mhSCQXJOqW){BfSaeMdFjP = true;}
      while(zBIgwnaWPC == MYSEaCtyeg){nnxISIByEn = true;}
      while(JEOUGMcSAP == JEOUGMcSAP){nVFRacuUNf = true;}
      while(mhSCQXJOqW == mhSCQXJOqW){HyVaqYGuTu = true;}
      if(LUshFeCgsW == true){LUshFeCgsW = false;}
      if(GLYiylRpHN == true){GLYiylRpHN = false;}
      if(BciOTRiFPX == true){BciOTRiFPX = false;}
      if(dMesqnLgOa == true){dMesqnLgOa = false;}
      if(JuZcJaJiEd == true){JuZcJaJiEd = false;}
      if(GTGcVhleOn == true){GTGcVhleOn = false;}
      if(wwRUstfeqK == true){wwRUstfeqK = false;}
      if(akafEFCFEr == true){akafEFCFEr = false;}
      if(IzBkQJFBXJ == true){IzBkQJFBXJ = false;}
      if(BfSaeMdFjP == true){BfSaeMdFjP = false;}
      if(udqtCVrZYP == true){udqtCVrZYP = false;}
      if(egZVfwufDi == true){egZVfwufDi = false;}
      if(ndGhIuRABr == true){ndGhIuRABr = false;}
      if(bxVowdHGiu == true){bxVowdHGiu = false;}
      if(QfcIdUGwti == true){QfcIdUGwti = false;}
      if(QyBAaQWJkH == true){QyBAaQWJkH = false;}
      if(DrYgnhLjZB == true){DrYgnhLjZB = false;}
      if(nnxISIByEn == true){nnxISIByEn = false;}
      if(nVFRacuUNf == true){nVFRacuUNf = false;}
      if(HyVaqYGuTu == true){HyVaqYGuTu = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class GFKEREHYZM
{ 
  void OrrEDtJnTs()
  { 
      bool jiqrfjxSPw = false;
      bool WOZslePFsA = false;
      bool OKKGYJzqPD = false;
      bool aVwzKbzutH = false;
      bool jcNkAcgMYg = false;
      bool oPeQAZYkSV = false;
      bool kFDLUBRZhJ = false;
      bool eTLkQlxYFw = false;
      bool cmShNKpezk = false;
      bool DOcXWdYBPy = false;
      bool LGdOCUEsAO = false;
      bool bzfVrymVyK = false;
      bool LmZxGQqmOl = false;
      bool MwJHkVIDfr = false;
      bool FxdkIDhGeY = false;
      bool qDCEmXggHk = false;
      bool dQeOBfpXkW = false;
      bool oioFENInnD = false;
      bool hjHpuIsFTM = false;
      bool obwtOoSPjb = false;
      string WssZZFgSce;
      string inGoXENhTE;
      string RZLKBdUjKB;
      string CgLcXsZMpq;
      string jVfTstTukP;
      string jrdkMwghYu;
      string jxHacBbdRe;
      string eAqbTwtrRG;
      string JYzuRKDZPb;
      string MrntGmNEqq;
      string SpdGkiABRQ;
      string BnQRkKxMJS;
      string yBNoSmMwVg;
      string hpBZnTusJh;
      string JBIzZXaVJu;
      string oAtXsQbomy;
      string VDfkhKmqdR;
      string PECaIwsNPt;
      string LqmZqhwcgX;
      string rGFLLFVXRP;
      if(WssZZFgSce == SpdGkiABRQ){jiqrfjxSPw = true;}
      else if(SpdGkiABRQ == WssZZFgSce){LGdOCUEsAO = true;}
      if(inGoXENhTE == BnQRkKxMJS){WOZslePFsA = true;}
      else if(BnQRkKxMJS == inGoXENhTE){bzfVrymVyK = true;}
      if(RZLKBdUjKB == yBNoSmMwVg){OKKGYJzqPD = true;}
      else if(yBNoSmMwVg == RZLKBdUjKB){LmZxGQqmOl = true;}
      if(CgLcXsZMpq == hpBZnTusJh){aVwzKbzutH = true;}
      else if(hpBZnTusJh == CgLcXsZMpq){MwJHkVIDfr = true;}
      if(jVfTstTukP == JBIzZXaVJu){jcNkAcgMYg = true;}
      else if(JBIzZXaVJu == jVfTstTukP){FxdkIDhGeY = true;}
      if(jrdkMwghYu == oAtXsQbomy){oPeQAZYkSV = true;}
      else if(oAtXsQbomy == jrdkMwghYu){qDCEmXggHk = true;}
      if(jxHacBbdRe == VDfkhKmqdR){kFDLUBRZhJ = true;}
      else if(VDfkhKmqdR == jxHacBbdRe){dQeOBfpXkW = true;}
      if(eAqbTwtrRG == PECaIwsNPt){eTLkQlxYFw = true;}
      if(JYzuRKDZPb == LqmZqhwcgX){cmShNKpezk = true;}
      if(MrntGmNEqq == rGFLLFVXRP){DOcXWdYBPy = true;}
      while(PECaIwsNPt == eAqbTwtrRG){oioFENInnD = true;}
      while(LqmZqhwcgX == LqmZqhwcgX){hjHpuIsFTM = true;}
      while(rGFLLFVXRP == rGFLLFVXRP){obwtOoSPjb = true;}
      if(jiqrfjxSPw == true){jiqrfjxSPw = false;}
      if(WOZslePFsA == true){WOZslePFsA = false;}
      if(OKKGYJzqPD == true){OKKGYJzqPD = false;}
      if(aVwzKbzutH == true){aVwzKbzutH = false;}
      if(jcNkAcgMYg == true){jcNkAcgMYg = false;}
      if(oPeQAZYkSV == true){oPeQAZYkSV = false;}
      if(kFDLUBRZhJ == true){kFDLUBRZhJ = false;}
      if(eTLkQlxYFw == true){eTLkQlxYFw = false;}
      if(cmShNKpezk == true){cmShNKpezk = false;}
      if(DOcXWdYBPy == true){DOcXWdYBPy = false;}
      if(LGdOCUEsAO == true){LGdOCUEsAO = false;}
      if(bzfVrymVyK == true){bzfVrymVyK = false;}
      if(LmZxGQqmOl == true){LmZxGQqmOl = false;}
      if(MwJHkVIDfr == true){MwJHkVIDfr = false;}
      if(FxdkIDhGeY == true){FxdkIDhGeY = false;}
      if(qDCEmXggHk == true){qDCEmXggHk = false;}
      if(dQeOBfpXkW == true){dQeOBfpXkW = false;}
      if(oioFENInnD == true){oioFENInnD = false;}
      if(hjHpuIsFTM == true){hjHpuIsFTM = false;}
      if(obwtOoSPjb == true){obwtOoSPjb = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class CRVPHNCCZO
{ 
  void cRmFNYEhPn()
  { 
      bool wawjrxCmqU = false;
      bool fxWwYBXQgV = false;
      bool TqNKHaNRoS = false;
      bool naHeYWqMlX = false;
      bool APrBVZgFeX = false;
      bool uAQdhEMkcQ = false;
      bool ikyYgFprXB = false;
      bool KKdIUEzMng = false;
      bool sIlQWmKcxT = false;
      bool KFjVoPRTTQ = false;
      bool jogcNjWHId = false;
      bool FzxuXZygBs = false;
      bool uNuDqEZITF = false;
      bool merWxEaICm = false;
      bool QCTSNKIoyO = false;
      bool QjSaVWsclJ = false;
      bool JOmDpaGZxS = false;
      bool yodOcrsbpf = false;
      bool ukJFnCMRBa = false;
      bool KxWscCOPcm = false;
      string PbYTdxSjqh;
      string BMbXZJDYnA;
      string PAUFRImAiL;
      string kZEUQTKeqX;
      string RUMCSjsSSd;
      string KOOTuPGSBV;
      string JSAfxbIHHG;
      string zYgQhumRmh;
      string OUgEAVKkZB;
      string MqcVNzTgEq;
      string blKMekgykA;
      string bnfTGokuea;
      string QXgGsIwLCi;
      string aFNuGbJUZP;
      string oMzZYXKIOX;
      string NXCdZEEESV;
      string oVuCYWajMe;
      string fQVPlEXHgV;
      string xmxeUDCjVC;
      string WECDZTQxAC;
      if(PbYTdxSjqh == blKMekgykA){wawjrxCmqU = true;}
      else if(blKMekgykA == PbYTdxSjqh){jogcNjWHId = true;}
      if(BMbXZJDYnA == bnfTGokuea){fxWwYBXQgV = true;}
      else if(bnfTGokuea == BMbXZJDYnA){FzxuXZygBs = true;}
      if(PAUFRImAiL == QXgGsIwLCi){TqNKHaNRoS = true;}
      else if(QXgGsIwLCi == PAUFRImAiL){uNuDqEZITF = true;}
      if(kZEUQTKeqX == aFNuGbJUZP){naHeYWqMlX = true;}
      else if(aFNuGbJUZP == kZEUQTKeqX){merWxEaICm = true;}
      if(RUMCSjsSSd == oMzZYXKIOX){APrBVZgFeX = true;}
      else if(oMzZYXKIOX == RUMCSjsSSd){QCTSNKIoyO = true;}
      if(KOOTuPGSBV == NXCdZEEESV){uAQdhEMkcQ = true;}
      else if(NXCdZEEESV == KOOTuPGSBV){QjSaVWsclJ = true;}
      if(JSAfxbIHHG == oVuCYWajMe){ikyYgFprXB = true;}
      else if(oVuCYWajMe == JSAfxbIHHG){JOmDpaGZxS = true;}
      if(zYgQhumRmh == fQVPlEXHgV){KKdIUEzMng = true;}
      if(OUgEAVKkZB == xmxeUDCjVC){sIlQWmKcxT = true;}
      if(MqcVNzTgEq == WECDZTQxAC){KFjVoPRTTQ = true;}
      while(fQVPlEXHgV == zYgQhumRmh){yodOcrsbpf = true;}
      while(xmxeUDCjVC == xmxeUDCjVC){ukJFnCMRBa = true;}
      while(WECDZTQxAC == WECDZTQxAC){KxWscCOPcm = true;}
      if(wawjrxCmqU == true){wawjrxCmqU = false;}
      if(fxWwYBXQgV == true){fxWwYBXQgV = false;}
      if(TqNKHaNRoS == true){TqNKHaNRoS = false;}
      if(naHeYWqMlX == true){naHeYWqMlX = false;}
      if(APrBVZgFeX == true){APrBVZgFeX = false;}
      if(uAQdhEMkcQ == true){uAQdhEMkcQ = false;}
      if(ikyYgFprXB == true){ikyYgFprXB = false;}
      if(KKdIUEzMng == true){KKdIUEzMng = false;}
      if(sIlQWmKcxT == true){sIlQWmKcxT = false;}
      if(KFjVoPRTTQ == true){KFjVoPRTTQ = false;}
      if(jogcNjWHId == true){jogcNjWHId = false;}
      if(FzxuXZygBs == true){FzxuXZygBs = false;}
      if(uNuDqEZITF == true){uNuDqEZITF = false;}
      if(merWxEaICm == true){merWxEaICm = false;}
      if(QCTSNKIoyO == true){QCTSNKIoyO = false;}
      if(QjSaVWsclJ == true){QjSaVWsclJ = false;}
      if(JOmDpaGZxS == true){JOmDpaGZxS = false;}
      if(yodOcrsbpf == true){yodOcrsbpf = false;}
      if(ukJFnCMRBa == true){ukJFnCMRBa = false;}
      if(KxWscCOPcm == true){KxWscCOPcm = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class ZCIWHRYBKJ
{ 
  void cUHfluxmVF()
  { 
      bool cxXmZcRXcw = false;
      bool TgaZLOEsxa = false;
      bool ufDpaJFSTL = false;
      bool TwnStfPpYz = false;
      bool rRmwnpRDyP = false;
      bool VGXUBwshLQ = false;
      bool WzEQbWsIef = false;
      bool yNTyhcsHBk = false;
      bool rBTDpNYSRy = false;
      bool lheHbsNVUQ = false;
      bool xIYSRHlYlX = false;
      bool ClfaYUeAaN = false;
      bool yZpgsQhLWo = false;
      bool PXljmicAli = false;
      bool bzfsuzBEiG = false;
      bool NMuHSWRrZB = false;
      bool YZCxIeAwmo = false;
      bool rdOqkztxks = false;
      bool OdcPaCbeRQ = false;
      bool QjakJBwijQ = false;
      string CONoTAkhxz;
      string nxsYKBPjNH;
      string xozbIDpHrY;
      string xTdAuOhsrX;
      string yQZLtRcSnf;
      string gpJVZNPkgP;
      string JcpXBUTsdu;
      string TVrpIgPngp;
      string ZXSMrGKHag;
      string zxMbOVZCJZ;
      string xjnrLLyTMr;
      string yaDpolJdet;
      string KMRxwWJPam;
      string GNeHspiaAg;
      string IqthhYsVlb;
      string LwWOPkRqwo;
      string ChrYlkwwxz;
      string CidylTRjPW;
      string cmdzbKpPrH;
      string XrdKeZzUww;
      if(CONoTAkhxz == xjnrLLyTMr){cxXmZcRXcw = true;}
      else if(xjnrLLyTMr == CONoTAkhxz){xIYSRHlYlX = true;}
      if(nxsYKBPjNH == yaDpolJdet){TgaZLOEsxa = true;}
      else if(yaDpolJdet == nxsYKBPjNH){ClfaYUeAaN = true;}
      if(xozbIDpHrY == KMRxwWJPam){ufDpaJFSTL = true;}
      else if(KMRxwWJPam == xozbIDpHrY){yZpgsQhLWo = true;}
      if(xTdAuOhsrX == GNeHspiaAg){TwnStfPpYz = true;}
      else if(GNeHspiaAg == xTdAuOhsrX){PXljmicAli = true;}
      if(yQZLtRcSnf == IqthhYsVlb){rRmwnpRDyP = true;}
      else if(IqthhYsVlb == yQZLtRcSnf){bzfsuzBEiG = true;}
      if(gpJVZNPkgP == LwWOPkRqwo){VGXUBwshLQ = true;}
      else if(LwWOPkRqwo == gpJVZNPkgP){NMuHSWRrZB = true;}
      if(JcpXBUTsdu == ChrYlkwwxz){WzEQbWsIef = true;}
      else if(ChrYlkwwxz == JcpXBUTsdu){YZCxIeAwmo = true;}
      if(TVrpIgPngp == CidylTRjPW){yNTyhcsHBk = true;}
      if(ZXSMrGKHag == cmdzbKpPrH){rBTDpNYSRy = true;}
      if(zxMbOVZCJZ == XrdKeZzUww){lheHbsNVUQ = true;}
      while(CidylTRjPW == TVrpIgPngp){rdOqkztxks = true;}
      while(cmdzbKpPrH == cmdzbKpPrH){OdcPaCbeRQ = true;}
      while(XrdKeZzUww == XrdKeZzUww){QjakJBwijQ = true;}
      if(cxXmZcRXcw == true){cxXmZcRXcw = false;}
      if(TgaZLOEsxa == true){TgaZLOEsxa = false;}
      if(ufDpaJFSTL == true){ufDpaJFSTL = false;}
      if(TwnStfPpYz == true){TwnStfPpYz = false;}
      if(rRmwnpRDyP == true){rRmwnpRDyP = false;}
      if(VGXUBwshLQ == true){VGXUBwshLQ = false;}
      if(WzEQbWsIef == true){WzEQbWsIef = false;}
      if(yNTyhcsHBk == true){yNTyhcsHBk = false;}
      if(rBTDpNYSRy == true){rBTDpNYSRy = false;}
      if(lheHbsNVUQ == true){lheHbsNVUQ = false;}
      if(xIYSRHlYlX == true){xIYSRHlYlX = false;}
      if(ClfaYUeAaN == true){ClfaYUeAaN = false;}
      if(yZpgsQhLWo == true){yZpgsQhLWo = false;}
      if(PXljmicAli == true){PXljmicAli = false;}
      if(bzfsuzBEiG == true){bzfsuzBEiG = false;}
      if(NMuHSWRrZB == true){NMuHSWRrZB = false;}
      if(YZCxIeAwmo == true){YZCxIeAwmo = false;}
      if(rdOqkztxks == true){rdOqkztxks = false;}
      if(OdcPaCbeRQ == true){OdcPaCbeRQ = false;}
      if(QjakJBwijQ == true){QjakJBwijQ = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class ZVUUNAQNLY
{ 
  void wCEqfDehDb()
  { 
      bool RXFieGpRDt = false;
      bool iSUEHNbfqA = false;
      bool SjgOpmraRc = false;
      bool SjHgxxtUYn = false;
      bool BiNlsWBoyr = false;
      bool NLacDgpprr = false;
      bool NPAZbzLnHK = false;
      bool SGGCyiWtVT = false;
      bool kDbYPGIdcP = false;
      bool GEcgZlinKs = false;
      bool LNgnZGFXdT = false;
      bool KuUYHKmaKU = false;
      bool qgKqDOdZcM = false;
      bool ziibIWVnzI = false;
      bool BjzJFKiEZP = false;
      bool zIcpCdDpjK = false;
      bool ceuRTbMrPj = false;
      bool oyaBSGhBls = false;
      bool eYANNqFsYd = false;
      bool SfEneVnhod = false;
      string RtqqXhbWMc;
      string ONZgkGKXql;
      string YfJNgwULpo;
      string XVepmsOLQF;
      string IUGOjasKtZ;
      string JEPCMkjcKb;
      string NQgXFsijtq;
      string qyGkdEZucF;
      string CKQQeSGbdB;
      string IkBnrqnhIq;
      string rJPDhKydXI;
      string LozEYDzPrm;
      string mGGriGxSsl;
      string PqmkNstNhT;
      string UbEVpTkwOo;
      string rXpVEkDWTb;
      string NejkrTBNqf;
      string JlgXSKCjCO;
      string UADEtrBQgb;
      string oWsGGoqScV;
      if(RtqqXhbWMc == rJPDhKydXI){RXFieGpRDt = true;}
      else if(rJPDhKydXI == RtqqXhbWMc){LNgnZGFXdT = true;}
      if(ONZgkGKXql == LozEYDzPrm){iSUEHNbfqA = true;}
      else if(LozEYDzPrm == ONZgkGKXql){KuUYHKmaKU = true;}
      if(YfJNgwULpo == mGGriGxSsl){SjgOpmraRc = true;}
      else if(mGGriGxSsl == YfJNgwULpo){qgKqDOdZcM = true;}
      if(XVepmsOLQF == PqmkNstNhT){SjHgxxtUYn = true;}
      else if(PqmkNstNhT == XVepmsOLQF){ziibIWVnzI = true;}
      if(IUGOjasKtZ == UbEVpTkwOo){BiNlsWBoyr = true;}
      else if(UbEVpTkwOo == IUGOjasKtZ){BjzJFKiEZP = true;}
      if(JEPCMkjcKb == rXpVEkDWTb){NLacDgpprr = true;}
      else if(rXpVEkDWTb == JEPCMkjcKb){zIcpCdDpjK = true;}
      if(NQgXFsijtq == NejkrTBNqf){NPAZbzLnHK = true;}
      else if(NejkrTBNqf == NQgXFsijtq){ceuRTbMrPj = true;}
      if(qyGkdEZucF == JlgXSKCjCO){SGGCyiWtVT = true;}
      if(CKQQeSGbdB == UADEtrBQgb){kDbYPGIdcP = true;}
      if(IkBnrqnhIq == oWsGGoqScV){GEcgZlinKs = true;}
      while(JlgXSKCjCO == qyGkdEZucF){oyaBSGhBls = true;}
      while(UADEtrBQgb == UADEtrBQgb){eYANNqFsYd = true;}
      while(oWsGGoqScV == oWsGGoqScV){SfEneVnhod = true;}
      if(RXFieGpRDt == true){RXFieGpRDt = false;}
      if(iSUEHNbfqA == true){iSUEHNbfqA = false;}
      if(SjgOpmraRc == true){SjgOpmraRc = false;}
      if(SjHgxxtUYn == true){SjHgxxtUYn = false;}
      if(BiNlsWBoyr == true){BiNlsWBoyr = false;}
      if(NLacDgpprr == true){NLacDgpprr = false;}
      if(NPAZbzLnHK == true){NPAZbzLnHK = false;}
      if(SGGCyiWtVT == true){SGGCyiWtVT = false;}
      if(kDbYPGIdcP == true){kDbYPGIdcP = false;}
      if(GEcgZlinKs == true){GEcgZlinKs = false;}
      if(LNgnZGFXdT == true){LNgnZGFXdT = false;}
      if(KuUYHKmaKU == true){KuUYHKmaKU = false;}
      if(qgKqDOdZcM == true){qgKqDOdZcM = false;}
      if(ziibIWVnzI == true){ziibIWVnzI = false;}
      if(BjzJFKiEZP == true){BjzJFKiEZP = false;}
      if(zIcpCdDpjK == true){zIcpCdDpjK = false;}
      if(ceuRTbMrPj == true){ceuRTbMrPj = false;}
      if(oyaBSGhBls == true){oyaBSGhBls = false;}
      if(eYANNqFsYd == true){eYANNqFsYd = false;}
      if(SfEneVnhod == true){SfEneVnhod = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class QFKZIMYQAZ
{ 
  void XntRTkCWyS()
  { 
      bool iQeOsSlTCp = false;
      bool iQPWpQBEWN = false;
      bool mrAdOSPiJZ = false;
      bool VDroenmdzR = false;
      bool ALEtlsaIRx = false;
      bool xaokopQAAZ = false;
      bool CDKbTfXZrC = false;
      bool cXEFNamFrV = false;
      bool rHQLcuNHAn = false;
      bool XmdYOwBbaF = false;
      bool UBPOUZWiWN = false;
      bool DKHehtlyzY = false;
      bool RQZDepsepR = false;
      bool ZLemApqBqC = false;
      bool YdjlkMezpU = false;
      bool JDcBmEbMjd = false;
      bool fqsFnqfUdr = false;
      bool DjGwznfmSR = false;
      bool KtnVHVhczw = false;
      bool OeRNVgkexs = false;
      string aadVjixXBs;
      string GTfYhpRufO;
      string IxOUybblYD;
      string EEIWTYWWku;
      string mVLjXtJDoU;
      string ajfhEdLIXH;
      string HKyynCKJFI;
      string TuJkamlexD;
      string RXxEcUXaRo;
      string NNycmbWNwU;
      string iAyfBeauGR;
      string rgLTpiNsUT;
      string djrPuFwfxz;
      string PXhbURYQDx;
      string tcTAxgBdmD;
      string OcrbqzHhku;
      string itxHBTyjzX;
      string KwpXZBPqSN;
      string ERrsjmfGjU;
      string JqfHNzeMzc;
      if(aadVjixXBs == iAyfBeauGR){iQeOsSlTCp = true;}
      else if(iAyfBeauGR == aadVjixXBs){UBPOUZWiWN = true;}
      if(GTfYhpRufO == rgLTpiNsUT){iQPWpQBEWN = true;}
      else if(rgLTpiNsUT == GTfYhpRufO){DKHehtlyzY = true;}
      if(IxOUybblYD == djrPuFwfxz){mrAdOSPiJZ = true;}
      else if(djrPuFwfxz == IxOUybblYD){RQZDepsepR = true;}
      if(EEIWTYWWku == PXhbURYQDx){VDroenmdzR = true;}
      else if(PXhbURYQDx == EEIWTYWWku){ZLemApqBqC = true;}
      if(mVLjXtJDoU == tcTAxgBdmD){ALEtlsaIRx = true;}
      else if(tcTAxgBdmD == mVLjXtJDoU){YdjlkMezpU = true;}
      if(ajfhEdLIXH == OcrbqzHhku){xaokopQAAZ = true;}
      else if(OcrbqzHhku == ajfhEdLIXH){JDcBmEbMjd = true;}
      if(HKyynCKJFI == itxHBTyjzX){CDKbTfXZrC = true;}
      else if(itxHBTyjzX == HKyynCKJFI){fqsFnqfUdr = true;}
      if(TuJkamlexD == KwpXZBPqSN){cXEFNamFrV = true;}
      if(RXxEcUXaRo == ERrsjmfGjU){rHQLcuNHAn = true;}
      if(NNycmbWNwU == JqfHNzeMzc){XmdYOwBbaF = true;}
      while(KwpXZBPqSN == TuJkamlexD){DjGwznfmSR = true;}
      while(ERrsjmfGjU == ERrsjmfGjU){KtnVHVhczw = true;}
      while(JqfHNzeMzc == JqfHNzeMzc){OeRNVgkexs = true;}
      if(iQeOsSlTCp == true){iQeOsSlTCp = false;}
      if(iQPWpQBEWN == true){iQPWpQBEWN = false;}
      if(mrAdOSPiJZ == true){mrAdOSPiJZ = false;}
      if(VDroenmdzR == true){VDroenmdzR = false;}
      if(ALEtlsaIRx == true){ALEtlsaIRx = false;}
      if(xaokopQAAZ == true){xaokopQAAZ = false;}
      if(CDKbTfXZrC == true){CDKbTfXZrC = false;}
      if(cXEFNamFrV == true){cXEFNamFrV = false;}
      if(rHQLcuNHAn == true){rHQLcuNHAn = false;}
      if(XmdYOwBbaF == true){XmdYOwBbaF = false;}
      if(UBPOUZWiWN == true){UBPOUZWiWN = false;}
      if(DKHehtlyzY == true){DKHehtlyzY = false;}
      if(RQZDepsepR == true){RQZDepsepR = false;}
      if(ZLemApqBqC == true){ZLemApqBqC = false;}
      if(YdjlkMezpU == true){YdjlkMezpU = false;}
      if(JDcBmEbMjd == true){JDcBmEbMjd = false;}
      if(fqsFnqfUdr == true){fqsFnqfUdr = false;}
      if(DjGwznfmSR == true){DjGwznfmSR = false;}
      if(KtnVHVhczw == true){KtnVHVhczw = false;}
      if(OeRNVgkexs == true){OeRNVgkexs = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class JWCCQMYOYM
{ 
  void wUccXxitkP()
  { 
      bool lwttjkOyfO = false;
      bool JOaPiSisYH = false;
      bool hdaHQStewR = false;
      bool QpsAVKjSjy = false;
      bool VxradMbqBr = false;
      bool xklrcIVmcR = false;
      bool qiBOxSUasX = false;
      bool hPJZljkzcE = false;
      bool pCcETeDAWN = false;
      bool owoRHlwdcL = false;
      bool qAycJgbMGs = false;
      bool WVKYaoGxtR = false;
      bool OUEfikZqSA = false;
      bool nHVRMpDztm = false;
      bool DqtcpSlQpS = false;
      bool ezjLwWuStX = false;
      bool GjsFFPAsLk = false;
      bool kGCGOWZaoQ = false;
      bool zJBzUoWKUp = false;
      bool tkFWfSynXZ = false;
      string pKZXJXrXuh;
      string csTqnoWgwm;
      string dmDMrFjLuC;
      string jKUkWzqQSF;
      string ywOAPIcHKJ;
      string ZLeTmCHNeD;
      string ngbsxRYiUo;
      string yGOqnhXDwj;
      string cbAlcYeAxT;
      string rdkORRTVCx;
      string jsmUKTwmeF;
      string eDQuaLfpQY;
      string mXkAxUUAZV;
      string NBBzAioeaI;
      string bqUronNpmF;
      string ldFcJLHlXp;
      string ywMJqdCQur;
      string VAPHxuCsLI;
      string HeNTjjuXpn;
      string aDGjKfdLAK;
      if(pKZXJXrXuh == jsmUKTwmeF){lwttjkOyfO = true;}
      else if(jsmUKTwmeF == pKZXJXrXuh){qAycJgbMGs = true;}
      if(csTqnoWgwm == eDQuaLfpQY){JOaPiSisYH = true;}
      else if(eDQuaLfpQY == csTqnoWgwm){WVKYaoGxtR = true;}
      if(dmDMrFjLuC == mXkAxUUAZV){hdaHQStewR = true;}
      else if(mXkAxUUAZV == dmDMrFjLuC){OUEfikZqSA = true;}
      if(jKUkWzqQSF == NBBzAioeaI){QpsAVKjSjy = true;}
      else if(NBBzAioeaI == jKUkWzqQSF){nHVRMpDztm = true;}
      if(ywOAPIcHKJ == bqUronNpmF){VxradMbqBr = true;}
      else if(bqUronNpmF == ywOAPIcHKJ){DqtcpSlQpS = true;}
      if(ZLeTmCHNeD == ldFcJLHlXp){xklrcIVmcR = true;}
      else if(ldFcJLHlXp == ZLeTmCHNeD){ezjLwWuStX = true;}
      if(ngbsxRYiUo == ywMJqdCQur){qiBOxSUasX = true;}
      else if(ywMJqdCQur == ngbsxRYiUo){GjsFFPAsLk = true;}
      if(yGOqnhXDwj == VAPHxuCsLI){hPJZljkzcE = true;}
      if(cbAlcYeAxT == HeNTjjuXpn){pCcETeDAWN = true;}
      if(rdkORRTVCx == aDGjKfdLAK){owoRHlwdcL = true;}
      while(VAPHxuCsLI == yGOqnhXDwj){kGCGOWZaoQ = true;}
      while(HeNTjjuXpn == HeNTjjuXpn){zJBzUoWKUp = true;}
      while(aDGjKfdLAK == aDGjKfdLAK){tkFWfSynXZ = true;}
      if(lwttjkOyfO == true){lwttjkOyfO = false;}
      if(JOaPiSisYH == true){JOaPiSisYH = false;}
      if(hdaHQStewR == true){hdaHQStewR = false;}
      if(QpsAVKjSjy == true){QpsAVKjSjy = false;}
      if(VxradMbqBr == true){VxradMbqBr = false;}
      if(xklrcIVmcR == true){xklrcIVmcR = false;}
      if(qiBOxSUasX == true){qiBOxSUasX = false;}
      if(hPJZljkzcE == true){hPJZljkzcE = false;}
      if(pCcETeDAWN == true){pCcETeDAWN = false;}
      if(owoRHlwdcL == true){owoRHlwdcL = false;}
      if(qAycJgbMGs == true){qAycJgbMGs = false;}
      if(WVKYaoGxtR == true){WVKYaoGxtR = false;}
      if(OUEfikZqSA == true){OUEfikZqSA = false;}
      if(nHVRMpDztm == true){nHVRMpDztm = false;}
      if(DqtcpSlQpS == true){DqtcpSlQpS = false;}
      if(ezjLwWuStX == true){ezjLwWuStX = false;}
      if(GjsFFPAsLk == true){GjsFFPAsLk = false;}
      if(kGCGOWZaoQ == true){kGCGOWZaoQ = false;}
      if(zJBzUoWKUp == true){zJBzUoWKUp = false;}
      if(tkFWfSynXZ == true){tkFWfSynXZ = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class LNMPKVYNRR
{ 
  void eBNdPnmnMx()
  { 
      bool TIoEdTiwVX = false;
      bool LtVsxXiexx = false;
      bool AkUFEZxiQN = false;
      bool RwHJDkNano = false;
      bool EtTdcAIjSQ = false;
      bool erMTBhmjzE = false;
      bool VAeHFOlMoM = false;
      bool JIpHsFRqbE = false;
      bool QMPziYjnIV = false;
      bool xdajTDPMXO = false;
      bool OwuGGWBEau = false;
      bool QwHumIkeYf = false;
      bool eyDSOfgGnp = false;
      bool pESNoURJsL = false;
      bool WeMNEBVexK = false;
      bool RjnriPrbqZ = false;
      bool ouQjELdtFR = false;
      bool pblMIAkpON = false;
      bool KBIcXGQaeY = false;
      bool coRSVbNcIs = false;
      string htgcUmfHMN;
      string FATLqpGqRg;
      string fikBfwVidO;
      string cWDfcRyhpQ;
      string MSUqJjkVHH;
      string lzAdUyIexY;
      string QwdyjiwniZ;
      string qXABTMOtru;
      string KzbWccVZLd;
      string ISkRzPoWGa;
      string nwmhPNyzJH;
      string jOmBNQUGUH;
      string MVcFRYmiBD;
      string WrnQGOMtHP;
      string dVPDstejDh;
      string tiByORThQq;
      string aOyGkqaWtz;
      string EazFcpGZLW;
      string sCfSInqoCo;
      string tecQnOXJRB;
      if(htgcUmfHMN == nwmhPNyzJH){TIoEdTiwVX = true;}
      else if(nwmhPNyzJH == htgcUmfHMN){OwuGGWBEau = true;}
      if(FATLqpGqRg == jOmBNQUGUH){LtVsxXiexx = true;}
      else if(jOmBNQUGUH == FATLqpGqRg){QwHumIkeYf = true;}
      if(fikBfwVidO == MVcFRYmiBD){AkUFEZxiQN = true;}
      else if(MVcFRYmiBD == fikBfwVidO){eyDSOfgGnp = true;}
      if(cWDfcRyhpQ == WrnQGOMtHP){RwHJDkNano = true;}
      else if(WrnQGOMtHP == cWDfcRyhpQ){pESNoURJsL = true;}
      if(MSUqJjkVHH == dVPDstejDh){EtTdcAIjSQ = true;}
      else if(dVPDstejDh == MSUqJjkVHH){WeMNEBVexK = true;}
      if(lzAdUyIexY == tiByORThQq){erMTBhmjzE = true;}
      else if(tiByORThQq == lzAdUyIexY){RjnriPrbqZ = true;}
      if(QwdyjiwniZ == aOyGkqaWtz){VAeHFOlMoM = true;}
      else if(aOyGkqaWtz == QwdyjiwniZ){ouQjELdtFR = true;}
      if(qXABTMOtru == EazFcpGZLW){JIpHsFRqbE = true;}
      if(KzbWccVZLd == sCfSInqoCo){QMPziYjnIV = true;}
      if(ISkRzPoWGa == tecQnOXJRB){xdajTDPMXO = true;}
      while(EazFcpGZLW == qXABTMOtru){pblMIAkpON = true;}
      while(sCfSInqoCo == sCfSInqoCo){KBIcXGQaeY = true;}
      while(tecQnOXJRB == tecQnOXJRB){coRSVbNcIs = true;}
      if(TIoEdTiwVX == true){TIoEdTiwVX = false;}
      if(LtVsxXiexx == true){LtVsxXiexx = false;}
      if(AkUFEZxiQN == true){AkUFEZxiQN = false;}
      if(RwHJDkNano == true){RwHJDkNano = false;}
      if(EtTdcAIjSQ == true){EtTdcAIjSQ = false;}
      if(erMTBhmjzE == true){erMTBhmjzE = false;}
      if(VAeHFOlMoM == true){VAeHFOlMoM = false;}
      if(JIpHsFRqbE == true){JIpHsFRqbE = false;}
      if(QMPziYjnIV == true){QMPziYjnIV = false;}
      if(xdajTDPMXO == true){xdajTDPMXO = false;}
      if(OwuGGWBEau == true){OwuGGWBEau = false;}
      if(QwHumIkeYf == true){QwHumIkeYf = false;}
      if(eyDSOfgGnp == true){eyDSOfgGnp = false;}
      if(pESNoURJsL == true){pESNoURJsL = false;}
      if(WeMNEBVexK == true){WeMNEBVexK = false;}
      if(RjnriPrbqZ == true){RjnriPrbqZ = false;}
      if(ouQjELdtFR == true){ouQjELdtFR = false;}
      if(pblMIAkpON == true){pblMIAkpON = false;}
      if(KBIcXGQaeY == true){KBIcXGQaeY = false;}
      if(coRSVbNcIs == true){coRSVbNcIs = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class VQWJNLCWUK
{ 
  void PCBWIOkhyQ()
  { 
      bool IzbowjyMCx = false;
      bool IxOEswMCQI = false;
      bool EfHDOlwydn = false;
      bool xGWTbjOJgY = false;
      bool RQRxGOWzAH = false;
      bool zexUtcqXaK = false;
      bool nzhOzCaucI = false;
      bool gDUrqnOKxz = false;
      bool PwyVnRICYz = false;
      bool spiVjShCxD = false;
      bool naWqZwKEdF = false;
      bool OgaauqBLah = false;
      bool sXVcPpUzHX = false;
      bool FLMsLnZGwr = false;
      bool HDYSkLPHZs = false;
      bool QVbPKPFsai = false;
      bool aKxFACThOH = false;
      bool RtPhZozCqE = false;
      bool aMYOGjjxiw = false;
      bool igfMQxGSSi = false;
      string HWReuKHPhS;
      string QYNWbGsRMc;
      string XIAzmySjNn;
      string tfFbkCsyAC;
      string CJPAGHlSHa;
      string UtnutzWSqx;
      string qWCtYkTklY;
      string MtRJZNszsf;
      string LAclSAqKhl;
      string faHCLeHVbV;
      string mBghOabdUf;
      string FXZLlqtQaY;
      string sJCzskmPyt;
      string GXXWrKStXr;
      string XNoCgIBuQU;
      string kqtDccyhoc;
      string nLfaYhACSa;
      string XArhAeUASj;
      string jqzdJPcTtO;
      string MkEtEMhOcy;
      if(HWReuKHPhS == mBghOabdUf){IzbowjyMCx = true;}
      else if(mBghOabdUf == HWReuKHPhS){naWqZwKEdF = true;}
      if(QYNWbGsRMc == FXZLlqtQaY){IxOEswMCQI = true;}
      else if(FXZLlqtQaY == QYNWbGsRMc){OgaauqBLah = true;}
      if(XIAzmySjNn == sJCzskmPyt){EfHDOlwydn = true;}
      else if(sJCzskmPyt == XIAzmySjNn){sXVcPpUzHX = true;}
      if(tfFbkCsyAC == GXXWrKStXr){xGWTbjOJgY = true;}
      else if(GXXWrKStXr == tfFbkCsyAC){FLMsLnZGwr = true;}
      if(CJPAGHlSHa == XNoCgIBuQU){RQRxGOWzAH = true;}
      else if(XNoCgIBuQU == CJPAGHlSHa){HDYSkLPHZs = true;}
      if(UtnutzWSqx == kqtDccyhoc){zexUtcqXaK = true;}
      else if(kqtDccyhoc == UtnutzWSqx){QVbPKPFsai = true;}
      if(qWCtYkTklY == nLfaYhACSa){nzhOzCaucI = true;}
      else if(nLfaYhACSa == qWCtYkTklY){aKxFACThOH = true;}
      if(MtRJZNszsf == XArhAeUASj){gDUrqnOKxz = true;}
      if(LAclSAqKhl == jqzdJPcTtO){PwyVnRICYz = true;}
      if(faHCLeHVbV == MkEtEMhOcy){spiVjShCxD = true;}
      while(XArhAeUASj == MtRJZNszsf){RtPhZozCqE = true;}
      while(jqzdJPcTtO == jqzdJPcTtO){aMYOGjjxiw = true;}
      while(MkEtEMhOcy == MkEtEMhOcy){igfMQxGSSi = true;}
      if(IzbowjyMCx == true){IzbowjyMCx = false;}
      if(IxOEswMCQI == true){IxOEswMCQI = false;}
      if(EfHDOlwydn == true){EfHDOlwydn = false;}
      if(xGWTbjOJgY == true){xGWTbjOJgY = false;}
      if(RQRxGOWzAH == true){RQRxGOWzAH = false;}
      if(zexUtcqXaK == true){zexUtcqXaK = false;}
      if(nzhOzCaucI == true){nzhOzCaucI = false;}
      if(gDUrqnOKxz == true){gDUrqnOKxz = false;}
      if(PwyVnRICYz == true){PwyVnRICYz = false;}
      if(spiVjShCxD == true){spiVjShCxD = false;}
      if(naWqZwKEdF == true){naWqZwKEdF = false;}
      if(OgaauqBLah == true){OgaauqBLah = false;}
      if(sXVcPpUzHX == true){sXVcPpUzHX = false;}
      if(FLMsLnZGwr == true){FLMsLnZGwr = false;}
      if(HDYSkLPHZs == true){HDYSkLPHZs = false;}
      if(QVbPKPFsai == true){QVbPKPFsai = false;}
      if(aKxFACThOH == true){aKxFACThOH = false;}
      if(RtPhZozCqE == true){RtPhZozCqE = false;}
      if(aMYOGjjxiw == true){aMYOGjjxiw = false;}
      if(igfMQxGSSi == true){igfMQxGSSi = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class IRYHGRROZV
{ 
  void iUrzISoqGT()
  { 
      bool ZTbSkkPtGM = false;
      bool BtksPXtLTu = false;
      bool sPzajrTXrQ = false;
      bool dwsNyLScWE = false;
      bool fKErPwTLyN = false;
      bool ercANKTBis = false;
      bool RrBohEBXtD = false;
      bool ERnOOhKHKn = false;
      bool XIYdklSrzn = false;
      bool qRtcmnIOJK = false;
      bool uwQtINDOkf = false;
      bool zMqtUISXEw = false;
      bool lIXGMmWLaa = false;
      bool YwyzsbqeUX = false;
      bool hEGTneZzIe = false;
      bool VkJMYlYKgV = false;
      bool prmKGDOrBr = false;
      bool QmCgNgCDRh = false;
      bool MXCwEmlkZG = false;
      bool DgxzgpQuMk = false;
      string fAtiwcLuoM;
      string IuRAbRcUUL;
      string sSKnVHdFqP;
      string LVdKsWjmjo;
      string IAhCmNTmth;
      string ZQoMhMoGNo;
      string yFEZAlRGGF;
      string hpkfDskIBI;
      string nqLJougQcg;
      string gdZupDwHBA;
      string uNfozjfJJn;
      string bgFEBHtujF;
      string FAdZXEPppz;
      string xcGAMZKVJF;
      string PWGnFzYUth;
      string JAXwuujFRu;
      string TpTJqyZEra;
      string wXkdphsoUX;
      string fuuHpwFKFR;
      string pEENlYDxwG;
      if(fAtiwcLuoM == uNfozjfJJn){ZTbSkkPtGM = true;}
      else if(uNfozjfJJn == fAtiwcLuoM){uwQtINDOkf = true;}
      if(IuRAbRcUUL == bgFEBHtujF){BtksPXtLTu = true;}
      else if(bgFEBHtujF == IuRAbRcUUL){zMqtUISXEw = true;}
      if(sSKnVHdFqP == FAdZXEPppz){sPzajrTXrQ = true;}
      else if(FAdZXEPppz == sSKnVHdFqP){lIXGMmWLaa = true;}
      if(LVdKsWjmjo == xcGAMZKVJF){dwsNyLScWE = true;}
      else if(xcGAMZKVJF == LVdKsWjmjo){YwyzsbqeUX = true;}
      if(IAhCmNTmth == PWGnFzYUth){fKErPwTLyN = true;}
      else if(PWGnFzYUth == IAhCmNTmth){hEGTneZzIe = true;}
      if(ZQoMhMoGNo == JAXwuujFRu){ercANKTBis = true;}
      else if(JAXwuujFRu == ZQoMhMoGNo){VkJMYlYKgV = true;}
      if(yFEZAlRGGF == TpTJqyZEra){RrBohEBXtD = true;}
      else if(TpTJqyZEra == yFEZAlRGGF){prmKGDOrBr = true;}
      if(hpkfDskIBI == wXkdphsoUX){ERnOOhKHKn = true;}
      if(nqLJougQcg == fuuHpwFKFR){XIYdklSrzn = true;}
      if(gdZupDwHBA == pEENlYDxwG){qRtcmnIOJK = true;}
      while(wXkdphsoUX == hpkfDskIBI){QmCgNgCDRh = true;}
      while(fuuHpwFKFR == fuuHpwFKFR){MXCwEmlkZG = true;}
      while(pEENlYDxwG == pEENlYDxwG){DgxzgpQuMk = true;}
      if(ZTbSkkPtGM == true){ZTbSkkPtGM = false;}
      if(BtksPXtLTu == true){BtksPXtLTu = false;}
      if(sPzajrTXrQ == true){sPzajrTXrQ = false;}
      if(dwsNyLScWE == true){dwsNyLScWE = false;}
      if(fKErPwTLyN == true){fKErPwTLyN = false;}
      if(ercANKTBis == true){ercANKTBis = false;}
      if(RrBohEBXtD == true){RrBohEBXtD = false;}
      if(ERnOOhKHKn == true){ERnOOhKHKn = false;}
      if(XIYdklSrzn == true){XIYdklSrzn = false;}
      if(qRtcmnIOJK == true){qRtcmnIOJK = false;}
      if(uwQtINDOkf == true){uwQtINDOkf = false;}
      if(zMqtUISXEw == true){zMqtUISXEw = false;}
      if(lIXGMmWLaa == true){lIXGMmWLaa = false;}
      if(YwyzsbqeUX == true){YwyzsbqeUX = false;}
      if(hEGTneZzIe == true){hEGTneZzIe = false;}
      if(VkJMYlYKgV == true){VkJMYlYKgV = false;}
      if(prmKGDOrBr == true){prmKGDOrBr = false;}
      if(QmCgNgCDRh == true){QmCgNgCDRh = false;}
      if(MXCwEmlkZG == true){MXCwEmlkZG = false;}
      if(DgxzgpQuMk == true){DgxzgpQuMk = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class WTGOJEXSJV
{ 
  void HDtpOdANDN()
  { 
      bool BNXNXfZkka = false;
      bool uUlJLHASOe = false;
      bool RTDupXCkwT = false;
      bool VzqwfhUTQk = false;
      bool PawGjxzqUK = false;
      bool MktlahJbWz = false;
      bool cnnREwcpcd = false;
      bool lfCdOpXxLs = false;
      bool XKQkGkEFUy = false;
      bool XswQHbmeBm = false;
      bool TJOpXfhQXk = false;
      bool JMPdaRWCKS = false;
      bool rWUeFsjkVl = false;
      bool DsuYYOwZNa = false;
      bool DnhjnKcRoo = false;
      bool EjThuwnjke = false;
      bool wwtkgQRqEM = false;
      bool VwojPDokpu = false;
      bool PRughSYMcc = false;
      bool ZMoidGsxCX = false;
      string qfTuxwGurz;
      string RCDShTFbLj;
      string SLoeBZTmCC;
      string sskUrsHEyi;
      string BoUyJRGPQN;
      string sOFPgfqntX;
      string cTroFXRhZn;
      string MBdcidpqUi;
      string TDVnJemUnM;
      string CSJZGgwerl;
      string AXocBqkcgC;
      string ozTKEYxEfa;
      string jwtNktqDVB;
      string hKyiiuOsmR;
      string tKnkXCyzVh;
      string jqzRBDcbqG;
      string zgGfUdBkaI;
      string KERNfZHIph;
      string urgnQpLggf;
      string RlBfRMDIQs;
      if(qfTuxwGurz == AXocBqkcgC){BNXNXfZkka = true;}
      else if(AXocBqkcgC == qfTuxwGurz){TJOpXfhQXk = true;}
      if(RCDShTFbLj == ozTKEYxEfa){uUlJLHASOe = true;}
      else if(ozTKEYxEfa == RCDShTFbLj){JMPdaRWCKS = true;}
      if(SLoeBZTmCC == jwtNktqDVB){RTDupXCkwT = true;}
      else if(jwtNktqDVB == SLoeBZTmCC){rWUeFsjkVl = true;}
      if(sskUrsHEyi == hKyiiuOsmR){VzqwfhUTQk = true;}
      else if(hKyiiuOsmR == sskUrsHEyi){DsuYYOwZNa = true;}
      if(BoUyJRGPQN == tKnkXCyzVh){PawGjxzqUK = true;}
      else if(tKnkXCyzVh == BoUyJRGPQN){DnhjnKcRoo = true;}
      if(sOFPgfqntX == jqzRBDcbqG){MktlahJbWz = true;}
      else if(jqzRBDcbqG == sOFPgfqntX){EjThuwnjke = true;}
      if(cTroFXRhZn == zgGfUdBkaI){cnnREwcpcd = true;}
      else if(zgGfUdBkaI == cTroFXRhZn){wwtkgQRqEM = true;}
      if(MBdcidpqUi == KERNfZHIph){lfCdOpXxLs = true;}
      if(TDVnJemUnM == urgnQpLggf){XKQkGkEFUy = true;}
      if(CSJZGgwerl == RlBfRMDIQs){XswQHbmeBm = true;}
      while(KERNfZHIph == MBdcidpqUi){VwojPDokpu = true;}
      while(urgnQpLggf == urgnQpLggf){PRughSYMcc = true;}
      while(RlBfRMDIQs == RlBfRMDIQs){ZMoidGsxCX = true;}
      if(BNXNXfZkka == true){BNXNXfZkka = false;}
      if(uUlJLHASOe == true){uUlJLHASOe = false;}
      if(RTDupXCkwT == true){RTDupXCkwT = false;}
      if(VzqwfhUTQk == true){VzqwfhUTQk = false;}
      if(PawGjxzqUK == true){PawGjxzqUK = false;}
      if(MktlahJbWz == true){MktlahJbWz = false;}
      if(cnnREwcpcd == true){cnnREwcpcd = false;}
      if(lfCdOpXxLs == true){lfCdOpXxLs = false;}
      if(XKQkGkEFUy == true){XKQkGkEFUy = false;}
      if(XswQHbmeBm == true){XswQHbmeBm = false;}
      if(TJOpXfhQXk == true){TJOpXfhQXk = false;}
      if(JMPdaRWCKS == true){JMPdaRWCKS = false;}
      if(rWUeFsjkVl == true){rWUeFsjkVl = false;}
      if(DsuYYOwZNa == true){DsuYYOwZNa = false;}
      if(DnhjnKcRoo == true){DnhjnKcRoo = false;}
      if(EjThuwnjke == true){EjThuwnjke = false;}
      if(wwtkgQRqEM == true){wwtkgQRqEM = false;}
      if(VwojPDokpu == true){VwojPDokpu = false;}
      if(PRughSYMcc == true){PRughSYMcc = false;}
      if(ZMoidGsxCX == true){ZMoidGsxCX = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class TCGCGRIPUW
{ 
  void jYLXfxJkFk()
  { 
      bool HZwcaMpABu = false;
      bool DQyqVUqjXU = false;
      bool JFwpBpGtBP = false;
      bool dczPOIlQou = false;
      bool GEalPMwchU = false;
      bool oUbxFBcGaj = false;
      bool GuykQZQibM = false;
      bool iatbNFeKao = false;
      bool tdMgZIBBJM = false;
      bool ffpEoLFpUo = false;
      bool uMAVlOazjz = false;
      bool WRfkpbiRKH = false;
      bool YOYPfCkomC = false;
      bool AnoktgcpuL = false;
      bool hBRKoOAEOM = false;
      bool bmeNQfnkoi = false;
      bool dkLgzhbtqJ = false;
      bool zsWzYWwOZR = false;
      bool CfaaaNJbUN = false;
      bool sqBLhxpkLG = false;
      string OTnhYKJVDH;
      string crUYJpFogF;
      string ccVUnhrsSe;
      string nFcaaxLFok;
      string MxCgpChilU;
      string rkXVjlyTsq;
      string RPDYSWPtxL;
      string eAzusfaodl;
      string zJHxlDhHpo;
      string zrMyTwtdNS;
      string mmkZprkbbE;
      string LJoHqIIFlP;
      string oHEIMlnAbw;
      string lwaLyMXgHt;
      string RFekdpDFHL;
      string nnrydficND;
      string EkAfSOhdIe;
      string kayqxibSeW;
      string hisPIxEbgS;
      string ctTDpgFzSP;
      if(OTnhYKJVDH == mmkZprkbbE){HZwcaMpABu = true;}
      else if(mmkZprkbbE == OTnhYKJVDH){uMAVlOazjz = true;}
      if(crUYJpFogF == LJoHqIIFlP){DQyqVUqjXU = true;}
      else if(LJoHqIIFlP == crUYJpFogF){WRfkpbiRKH = true;}
      if(ccVUnhrsSe == oHEIMlnAbw){JFwpBpGtBP = true;}
      else if(oHEIMlnAbw == ccVUnhrsSe){YOYPfCkomC = true;}
      if(nFcaaxLFok == lwaLyMXgHt){dczPOIlQou = true;}
      else if(lwaLyMXgHt == nFcaaxLFok){AnoktgcpuL = true;}
      if(MxCgpChilU == RFekdpDFHL){GEalPMwchU = true;}
      else if(RFekdpDFHL == MxCgpChilU){hBRKoOAEOM = true;}
      if(rkXVjlyTsq == nnrydficND){oUbxFBcGaj = true;}
      else if(nnrydficND == rkXVjlyTsq){bmeNQfnkoi = true;}
      if(RPDYSWPtxL == EkAfSOhdIe){GuykQZQibM = true;}
      else if(EkAfSOhdIe == RPDYSWPtxL){dkLgzhbtqJ = true;}
      if(eAzusfaodl == kayqxibSeW){iatbNFeKao = true;}
      if(zJHxlDhHpo == hisPIxEbgS){tdMgZIBBJM = true;}
      if(zrMyTwtdNS == ctTDpgFzSP){ffpEoLFpUo = true;}
      while(kayqxibSeW == eAzusfaodl){zsWzYWwOZR = true;}
      while(hisPIxEbgS == hisPIxEbgS){CfaaaNJbUN = true;}
      while(ctTDpgFzSP == ctTDpgFzSP){sqBLhxpkLG = true;}
      if(HZwcaMpABu == true){HZwcaMpABu = false;}
      if(DQyqVUqjXU == true){DQyqVUqjXU = false;}
      if(JFwpBpGtBP == true){JFwpBpGtBP = false;}
      if(dczPOIlQou == true){dczPOIlQou = false;}
      if(GEalPMwchU == true){GEalPMwchU = false;}
      if(oUbxFBcGaj == true){oUbxFBcGaj = false;}
      if(GuykQZQibM == true){GuykQZQibM = false;}
      if(iatbNFeKao == true){iatbNFeKao = false;}
      if(tdMgZIBBJM == true){tdMgZIBBJM = false;}
      if(ffpEoLFpUo == true){ffpEoLFpUo = false;}
      if(uMAVlOazjz == true){uMAVlOazjz = false;}
      if(WRfkpbiRKH == true){WRfkpbiRKH = false;}
      if(YOYPfCkomC == true){YOYPfCkomC = false;}
      if(AnoktgcpuL == true){AnoktgcpuL = false;}
      if(hBRKoOAEOM == true){hBRKoOAEOM = false;}
      if(bmeNQfnkoi == true){bmeNQfnkoi = false;}
      if(dkLgzhbtqJ == true){dkLgzhbtqJ = false;}
      if(zsWzYWwOZR == true){zsWzYWwOZR = false;}
      if(CfaaaNJbUN == true){CfaaaNJbUN = false;}
      if(sqBLhxpkLG == true){sqBLhxpkLG = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class CYOAXETVUX
{ 
  void ZVUueLaKSW()
  { 
      bool gJMxUwyykG = false;
      bool xKYnCfJNLE = false;
      bool mHoxfqAEth = false;
      bool muGWmFTaXU = false;
      bool DusTrYbxeL = false;
      bool sgFOoZUPQd = false;
      bool wtDDSBDBBx = false;
      bool LipqAqNUEH = false;
      bool ODYinFpqgM = false;
      bool kEJsYIrpBq = false;
      bool UauhzKqOOy = false;
      bool LzKJPsUTOM = false;
      bool LLTnLGYwRq = false;
      bool zWTNlnHqid = false;
      bool OaciBkszcf = false;
      bool nXbneJGHVr = false;
      bool ktwWyoexXb = false;
      bool kdkjykikma = false;
      bool NZTlDbtfhc = false;
      bool gAUprTdGkL = false;
      string hBmiuKHKDj;
      string RArSrZSUDy;
      string fSQQZHdkOO;
      string IRQYktcxkO;
      string jTOUZEDRtF;
      string PDCqFPkWJn;
      string fWwnbAiSgx;
      string wVioNLDupV;
      string DMpIyFPZTV;
      string JGnxhNXZsZ;
      string UjkwItTNds;
      string LofnjTfmpW;
      string jJzKnpglGz;
      string mdCPATatAE;
      string kBwZKTZANN;
      string hkjWoKjZIS;
      string MhGdGgmPmP;
      string rkllkiNZAT;
      string PgXsRCteap;
      string iBkhqDuRSc;
      if(hBmiuKHKDj == UjkwItTNds){gJMxUwyykG = true;}
      else if(UjkwItTNds == hBmiuKHKDj){UauhzKqOOy = true;}
      if(RArSrZSUDy == LofnjTfmpW){xKYnCfJNLE = true;}
      else if(LofnjTfmpW == RArSrZSUDy){LzKJPsUTOM = true;}
      if(fSQQZHdkOO == jJzKnpglGz){mHoxfqAEth = true;}
      else if(jJzKnpglGz == fSQQZHdkOO){LLTnLGYwRq = true;}
      if(IRQYktcxkO == mdCPATatAE){muGWmFTaXU = true;}
      else if(mdCPATatAE == IRQYktcxkO){zWTNlnHqid = true;}
      if(jTOUZEDRtF == kBwZKTZANN){DusTrYbxeL = true;}
      else if(kBwZKTZANN == jTOUZEDRtF){OaciBkszcf = true;}
      if(PDCqFPkWJn == hkjWoKjZIS){sgFOoZUPQd = true;}
      else if(hkjWoKjZIS == PDCqFPkWJn){nXbneJGHVr = true;}
      if(fWwnbAiSgx == MhGdGgmPmP){wtDDSBDBBx = true;}
      else if(MhGdGgmPmP == fWwnbAiSgx){ktwWyoexXb = true;}
      if(wVioNLDupV == rkllkiNZAT){LipqAqNUEH = true;}
      if(DMpIyFPZTV == PgXsRCteap){ODYinFpqgM = true;}
      if(JGnxhNXZsZ == iBkhqDuRSc){kEJsYIrpBq = true;}
      while(rkllkiNZAT == wVioNLDupV){kdkjykikma = true;}
      while(PgXsRCteap == PgXsRCteap){NZTlDbtfhc = true;}
      while(iBkhqDuRSc == iBkhqDuRSc){gAUprTdGkL = true;}
      if(gJMxUwyykG == true){gJMxUwyykG = false;}
      if(xKYnCfJNLE == true){xKYnCfJNLE = false;}
      if(mHoxfqAEth == true){mHoxfqAEth = false;}
      if(muGWmFTaXU == true){muGWmFTaXU = false;}
      if(DusTrYbxeL == true){DusTrYbxeL = false;}
      if(sgFOoZUPQd == true){sgFOoZUPQd = false;}
      if(wtDDSBDBBx == true){wtDDSBDBBx = false;}
      if(LipqAqNUEH == true){LipqAqNUEH = false;}
      if(ODYinFpqgM == true){ODYinFpqgM = false;}
      if(kEJsYIrpBq == true){kEJsYIrpBq = false;}
      if(UauhzKqOOy == true){UauhzKqOOy = false;}
      if(LzKJPsUTOM == true){LzKJPsUTOM = false;}
      if(LLTnLGYwRq == true){LLTnLGYwRq = false;}
      if(zWTNlnHqid == true){zWTNlnHqid = false;}
      if(OaciBkszcf == true){OaciBkszcf = false;}
      if(nXbneJGHVr == true){nXbneJGHVr = false;}
      if(ktwWyoexXb == true){ktwWyoexXb = false;}
      if(kdkjykikma == true){kdkjykikma = false;}
      if(NZTlDbtfhc == true){NZTlDbtfhc = false;}
      if(gAUprTdGkL == true){gAUprTdGkL = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class UWROXAPGQW
{ 
  void VNjRRskoqf()
  { 
      bool JzWBYZoLtG = false;
      bool uCNmWrcLVL = false;
      bool zqMWKlpVdp = false;
      bool HcSbecJFSf = false;
      bool kVqczpfpiQ = false;
      bool pDHyRRmAqm = false;
      bool iTgDyRjkIt = false;
      bool iWrpZcAjWT = false;
      bool GzlMzDVTKM = false;
      bool oJOfwRnmdh = false;
      bool GthohSLQXn = false;
      bool RDcWgjgUDt = false;
      bool wPawEYIMtI = false;
      bool nMFnNLRxdg = false;
      bool rEwVtlgqzM = false;
      bool jTiikpSljJ = false;
      bool KyWPAFxnJU = false;
      bool RipWCqTFBR = false;
      bool rQNhXTcVDW = false;
      bool rfNUWsgfUo = false;
      string xIqymabnyF;
      string HfGkIOBgrc;
      string KcjFWiyqaw;
      string qziEgcndlL;
      string FOYdaLGBix;
      string SqfAbTXlaE;
      string bjMBNIwCEf;
      string ZXtfWuEFdL;
      string bxIddASicM;
      string ECChiVBWQS;
      string OExCWtwAcf;
      string ORHObeaiXM;
      string oMYqaXUMwA;
      string shoLxXzGGi;
      string DSFwylunFE;
      string uSzDcBeGbz;
      string ZjDblgcuRD;
      string eUcnJWGbsn;
      string bgHrFahkiu;
      string ssdGJTOdJQ;
      if(xIqymabnyF == OExCWtwAcf){JzWBYZoLtG = true;}
      else if(OExCWtwAcf == xIqymabnyF){GthohSLQXn = true;}
      if(HfGkIOBgrc == ORHObeaiXM){uCNmWrcLVL = true;}
      else if(ORHObeaiXM == HfGkIOBgrc){RDcWgjgUDt = true;}
      if(KcjFWiyqaw == oMYqaXUMwA){zqMWKlpVdp = true;}
      else if(oMYqaXUMwA == KcjFWiyqaw){wPawEYIMtI = true;}
      if(qziEgcndlL == shoLxXzGGi){HcSbecJFSf = true;}
      else if(shoLxXzGGi == qziEgcndlL){nMFnNLRxdg = true;}
      if(FOYdaLGBix == DSFwylunFE){kVqczpfpiQ = true;}
      else if(DSFwylunFE == FOYdaLGBix){rEwVtlgqzM = true;}
      if(SqfAbTXlaE == uSzDcBeGbz){pDHyRRmAqm = true;}
      else if(uSzDcBeGbz == SqfAbTXlaE){jTiikpSljJ = true;}
      if(bjMBNIwCEf == ZjDblgcuRD){iTgDyRjkIt = true;}
      else if(ZjDblgcuRD == bjMBNIwCEf){KyWPAFxnJU = true;}
      if(ZXtfWuEFdL == eUcnJWGbsn){iWrpZcAjWT = true;}
      if(bxIddASicM == bgHrFahkiu){GzlMzDVTKM = true;}
      if(ECChiVBWQS == ssdGJTOdJQ){oJOfwRnmdh = true;}
      while(eUcnJWGbsn == ZXtfWuEFdL){RipWCqTFBR = true;}
      while(bgHrFahkiu == bgHrFahkiu){rQNhXTcVDW = true;}
      while(ssdGJTOdJQ == ssdGJTOdJQ){rfNUWsgfUo = true;}
      if(JzWBYZoLtG == true){JzWBYZoLtG = false;}
      if(uCNmWrcLVL == true){uCNmWrcLVL = false;}
      if(zqMWKlpVdp == true){zqMWKlpVdp = false;}
      if(HcSbecJFSf == true){HcSbecJFSf = false;}
      if(kVqczpfpiQ == true){kVqczpfpiQ = false;}
      if(pDHyRRmAqm == true){pDHyRRmAqm = false;}
      if(iTgDyRjkIt == true){iTgDyRjkIt = false;}
      if(iWrpZcAjWT == true){iWrpZcAjWT = false;}
      if(GzlMzDVTKM == true){GzlMzDVTKM = false;}
      if(oJOfwRnmdh == true){oJOfwRnmdh = false;}
      if(GthohSLQXn == true){GthohSLQXn = false;}
      if(RDcWgjgUDt == true){RDcWgjgUDt = false;}
      if(wPawEYIMtI == true){wPawEYIMtI = false;}
      if(nMFnNLRxdg == true){nMFnNLRxdg = false;}
      if(rEwVtlgqzM == true){rEwVtlgqzM = false;}
      if(jTiikpSljJ == true){jTiikpSljJ = false;}
      if(KyWPAFxnJU == true){KyWPAFxnJU = false;}
      if(RipWCqTFBR == true){RipWCqTFBR = false;}
      if(rQNhXTcVDW == true){rQNhXTcVDW = false;}
      if(rfNUWsgfUo == true){rfNUWsgfUo = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class DQJNCUDXFD
{ 
  void wXwpxfcDJo()
  { 
      bool LyffIiHEWg = false;
      bool gDupboBojE = false;
      bool wcZXHmrePN = false;
      bool PJwnFmnzmX = false;
      bool xQamsxrOBj = false;
      bool ZHCUKhXIXV = false;
      bool qcnIQWGHjn = false;
      bool ACBLGfCldK = false;
      bool tcdfnIHbcX = false;
      bool PfaRgUbSWV = false;
      bool pjdMiWFpNe = false;
      bool fldNaNyIUH = false;
      bool PdeMYTbidl = false;
      bool EjPITJzRwQ = false;
      bool DQOxqcCMqT = false;
      bool VSyOFMFRmO = false;
      bool uVMaauVUtQ = false;
      bool OfMDEzPhUw = false;
      bool RPrJQklACH = false;
      bool EgegVgDnWw = false;
      string GtzucWwtjJ;
      string pzsfIoNzMC;
      string pAmoosYNIY;
      string BrRdIeKkHn;
      string XDYSljqhoX;
      string jrqIRFGKFj;
      string xhlKHxhOWc;
      string ecqXdmaUCF;
      string BpYkoJBILC;
      string YAeWqpROKo;
      string CbLLsHASee;
      string dkHAhGJAVy;
      string uYCTEdyTgm;
      string VMKNCZeMrh;
      string IicgYmrdoj;
      string fQrMscYqHO;
      string JglqIQatxI;
      string axInoMuVuR;
      string lTewHEUxTZ;
      string AnEcYbwlYH;
      if(GtzucWwtjJ == CbLLsHASee){LyffIiHEWg = true;}
      else if(CbLLsHASee == GtzucWwtjJ){pjdMiWFpNe = true;}
      if(pzsfIoNzMC == dkHAhGJAVy){gDupboBojE = true;}
      else if(dkHAhGJAVy == pzsfIoNzMC){fldNaNyIUH = true;}
      if(pAmoosYNIY == uYCTEdyTgm){wcZXHmrePN = true;}
      else if(uYCTEdyTgm == pAmoosYNIY){PdeMYTbidl = true;}
      if(BrRdIeKkHn == VMKNCZeMrh){PJwnFmnzmX = true;}
      else if(VMKNCZeMrh == BrRdIeKkHn){EjPITJzRwQ = true;}
      if(XDYSljqhoX == IicgYmrdoj){xQamsxrOBj = true;}
      else if(IicgYmrdoj == XDYSljqhoX){DQOxqcCMqT = true;}
      if(jrqIRFGKFj == fQrMscYqHO){ZHCUKhXIXV = true;}
      else if(fQrMscYqHO == jrqIRFGKFj){VSyOFMFRmO = true;}
      if(xhlKHxhOWc == JglqIQatxI){qcnIQWGHjn = true;}
      else if(JglqIQatxI == xhlKHxhOWc){uVMaauVUtQ = true;}
      if(ecqXdmaUCF == axInoMuVuR){ACBLGfCldK = true;}
      if(BpYkoJBILC == lTewHEUxTZ){tcdfnIHbcX = true;}
      if(YAeWqpROKo == AnEcYbwlYH){PfaRgUbSWV = true;}
      while(axInoMuVuR == ecqXdmaUCF){OfMDEzPhUw = true;}
      while(lTewHEUxTZ == lTewHEUxTZ){RPrJQklACH = true;}
      while(AnEcYbwlYH == AnEcYbwlYH){EgegVgDnWw = true;}
      if(LyffIiHEWg == true){LyffIiHEWg = false;}
      if(gDupboBojE == true){gDupboBojE = false;}
      if(wcZXHmrePN == true){wcZXHmrePN = false;}
      if(PJwnFmnzmX == true){PJwnFmnzmX = false;}
      if(xQamsxrOBj == true){xQamsxrOBj = false;}
      if(ZHCUKhXIXV == true){ZHCUKhXIXV = false;}
      if(qcnIQWGHjn == true){qcnIQWGHjn = false;}
      if(ACBLGfCldK == true){ACBLGfCldK = false;}
      if(tcdfnIHbcX == true){tcdfnIHbcX = false;}
      if(PfaRgUbSWV == true){PfaRgUbSWV = false;}
      if(pjdMiWFpNe == true){pjdMiWFpNe = false;}
      if(fldNaNyIUH == true){fldNaNyIUH = false;}
      if(PdeMYTbidl == true){PdeMYTbidl = false;}
      if(EjPITJzRwQ == true){EjPITJzRwQ = false;}
      if(DQOxqcCMqT == true){DQOxqcCMqT = false;}
      if(VSyOFMFRmO == true){VSyOFMFRmO = false;}
      if(uVMaauVUtQ == true){uVMaauVUtQ = false;}
      if(OfMDEzPhUw == true){OfMDEzPhUw = false;}
      if(RPrJQklACH == true){RPrJQklACH = false;}
      if(EgegVgDnWw == true){EgegVgDnWw = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class RYAROZBOGT
{ 
  void hslIezweGK()
  { 
      bool DWomTAHpOu = false;
      bool quzImxggHB = false;
      bool HPbesJgpxE = false;
      bool LHIDpdiPYw = false;
      bool LVaThMugXL = false;
      bool yYsupmtJtK = false;
      bool SRrKjjluSJ = false;
      bool OQHKpkoIwg = false;
      bool NzRkFmNMNC = false;
      bool iYVOdscPjy = false;
      bool ZzOOxhQhFE = false;
      bool ylNNwSzGEw = false;
      bool VYhQaousgw = false;
      bool IYYyGNkDnX = false;
      bool VfHJDwLHRK = false;
      bool tWKmcARymI = false;
      bool mXBJwYMPGi = false;
      bool hwSgZoRYMd = false;
      bool cmbVCkNkVG = false;
      bool wlQfjyeyMd = false;
      string DYdRFSQODM;
      string jDyewnjrjC;
      string JhmWxGAGHy;
      string QLJGQposzq;
      string wTowjITiKC;
      string eWkeoVlGTy;
      string RKHFuYsqNG;
      string yqsrGprpmo;
      string mQuETtZeRt;
      string EhYAZlMiAL;
      string ObUDEncsYy;
      string cuTeLAOClB;
      string yOZTCPRrST;
      string cJobZKwqAe;
      string QgFSRIOsoY;
      string WJxzMACBBn;
      string VkaEUTFqEB;
      string EWCGjRIGBs;
      string AXDswTLpOZ;
      string HupLJfFBxx;
      if(DYdRFSQODM == ObUDEncsYy){DWomTAHpOu = true;}
      else if(ObUDEncsYy == DYdRFSQODM){ZzOOxhQhFE = true;}
      if(jDyewnjrjC == cuTeLAOClB){quzImxggHB = true;}
      else if(cuTeLAOClB == jDyewnjrjC){ylNNwSzGEw = true;}
      if(JhmWxGAGHy == yOZTCPRrST){HPbesJgpxE = true;}
      else if(yOZTCPRrST == JhmWxGAGHy){VYhQaousgw = true;}
      if(QLJGQposzq == cJobZKwqAe){LHIDpdiPYw = true;}
      else if(cJobZKwqAe == QLJGQposzq){IYYyGNkDnX = true;}
      if(wTowjITiKC == QgFSRIOsoY){LVaThMugXL = true;}
      else if(QgFSRIOsoY == wTowjITiKC){VfHJDwLHRK = true;}
      if(eWkeoVlGTy == WJxzMACBBn){yYsupmtJtK = true;}
      else if(WJxzMACBBn == eWkeoVlGTy){tWKmcARymI = true;}
      if(RKHFuYsqNG == VkaEUTFqEB){SRrKjjluSJ = true;}
      else if(VkaEUTFqEB == RKHFuYsqNG){mXBJwYMPGi = true;}
      if(yqsrGprpmo == EWCGjRIGBs){OQHKpkoIwg = true;}
      if(mQuETtZeRt == AXDswTLpOZ){NzRkFmNMNC = true;}
      if(EhYAZlMiAL == HupLJfFBxx){iYVOdscPjy = true;}
      while(EWCGjRIGBs == yqsrGprpmo){hwSgZoRYMd = true;}
      while(AXDswTLpOZ == AXDswTLpOZ){cmbVCkNkVG = true;}
      while(HupLJfFBxx == HupLJfFBxx){wlQfjyeyMd = true;}
      if(DWomTAHpOu == true){DWomTAHpOu = false;}
      if(quzImxggHB == true){quzImxggHB = false;}
      if(HPbesJgpxE == true){HPbesJgpxE = false;}
      if(LHIDpdiPYw == true){LHIDpdiPYw = false;}
      if(LVaThMugXL == true){LVaThMugXL = false;}
      if(yYsupmtJtK == true){yYsupmtJtK = false;}
      if(SRrKjjluSJ == true){SRrKjjluSJ = false;}
      if(OQHKpkoIwg == true){OQHKpkoIwg = false;}
      if(NzRkFmNMNC == true){NzRkFmNMNC = false;}
      if(iYVOdscPjy == true){iYVOdscPjy = false;}
      if(ZzOOxhQhFE == true){ZzOOxhQhFE = false;}
      if(ylNNwSzGEw == true){ylNNwSzGEw = false;}
      if(VYhQaousgw == true){VYhQaousgw = false;}
      if(IYYyGNkDnX == true){IYYyGNkDnX = false;}
      if(VfHJDwLHRK == true){VfHJDwLHRK = false;}
      if(tWKmcARymI == true){tWKmcARymI = false;}
      if(mXBJwYMPGi == true){mXBJwYMPGi = false;}
      if(hwSgZoRYMd == true){hwSgZoRYMd = false;}
      if(cmbVCkNkVG == true){cmbVCkNkVG = false;}
      if(wlQfjyeyMd == true){wlQfjyeyMd = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class FVJRPNLOVD
{ 
  void dBfTGbeqaQ()
  { 
      bool UdOeLFQjbU = false;
      bool nuMSyRKBHw = false;
      bool hEjgzAWNYo = false;
      bool xsNTmhBLDO = false;
      bool mBrdBuhIow = false;
      bool EoweXPtheL = false;
      bool hDKmXtgrfP = false;
      bool PyxsJgMGfD = false;
      bool ROYcjHxiwW = false;
      bool mTfrfipFGG = false;
      bool OpcYfGqDVq = false;
      bool DnBbsTdhCP = false;
      bool xywIbwRFMZ = false;
      bool qGAZoblAwd = false;
      bool QtMETzSEyM = false;
      bool FICpJPsUwj = false;
      bool nkpuzwnblQ = false;
      bool hdkYzCkqnc = false;
      bool cMGzUiEJQY = false;
      bool iRDLoeDQEW = false;
      string VhyWuNceSi;
      string diarfiSguY;
      string igBzbyMqyE;
      string lpTIpEDeil;
      string rxTyohTpHP;
      string XKwiJofztw;
      string AkgOwnPRBb;
      string enyIflNDJt;
      string dWihfbtjzB;
      string XEkmlGPFBB;
      string RCnfkjLmCW;
      string abpzRdCyhU;
      string seRAEZCLWZ;
      string VHCHbbhDxu;
      string PGgbZuNlUH;
      string ERWgIlkmbK;
      string hAQcATZiWp;
      string uyAmEmyoaI;
      string MQpPUEkUzo;
      string qubmNOpEbG;
      if(VhyWuNceSi == RCnfkjLmCW){UdOeLFQjbU = true;}
      else if(RCnfkjLmCW == VhyWuNceSi){OpcYfGqDVq = true;}
      if(diarfiSguY == abpzRdCyhU){nuMSyRKBHw = true;}
      else if(abpzRdCyhU == diarfiSguY){DnBbsTdhCP = true;}
      if(igBzbyMqyE == seRAEZCLWZ){hEjgzAWNYo = true;}
      else if(seRAEZCLWZ == igBzbyMqyE){xywIbwRFMZ = true;}
      if(lpTIpEDeil == VHCHbbhDxu){xsNTmhBLDO = true;}
      else if(VHCHbbhDxu == lpTIpEDeil){qGAZoblAwd = true;}
      if(rxTyohTpHP == PGgbZuNlUH){mBrdBuhIow = true;}
      else if(PGgbZuNlUH == rxTyohTpHP){QtMETzSEyM = true;}
      if(XKwiJofztw == ERWgIlkmbK){EoweXPtheL = true;}
      else if(ERWgIlkmbK == XKwiJofztw){FICpJPsUwj = true;}
      if(AkgOwnPRBb == hAQcATZiWp){hDKmXtgrfP = true;}
      else if(hAQcATZiWp == AkgOwnPRBb){nkpuzwnblQ = true;}
      if(enyIflNDJt == uyAmEmyoaI){PyxsJgMGfD = true;}
      if(dWihfbtjzB == MQpPUEkUzo){ROYcjHxiwW = true;}
      if(XEkmlGPFBB == qubmNOpEbG){mTfrfipFGG = true;}
      while(uyAmEmyoaI == enyIflNDJt){hdkYzCkqnc = true;}
      while(MQpPUEkUzo == MQpPUEkUzo){cMGzUiEJQY = true;}
      while(qubmNOpEbG == qubmNOpEbG){iRDLoeDQEW = true;}
      if(UdOeLFQjbU == true){UdOeLFQjbU = false;}
      if(nuMSyRKBHw == true){nuMSyRKBHw = false;}
      if(hEjgzAWNYo == true){hEjgzAWNYo = false;}
      if(xsNTmhBLDO == true){xsNTmhBLDO = false;}
      if(mBrdBuhIow == true){mBrdBuhIow = false;}
      if(EoweXPtheL == true){EoweXPtheL = false;}
      if(hDKmXtgrfP == true){hDKmXtgrfP = false;}
      if(PyxsJgMGfD == true){PyxsJgMGfD = false;}
      if(ROYcjHxiwW == true){ROYcjHxiwW = false;}
      if(mTfrfipFGG == true){mTfrfipFGG = false;}
      if(OpcYfGqDVq == true){OpcYfGqDVq = false;}
      if(DnBbsTdhCP == true){DnBbsTdhCP = false;}
      if(xywIbwRFMZ == true){xywIbwRFMZ = false;}
      if(qGAZoblAwd == true){qGAZoblAwd = false;}
      if(QtMETzSEyM == true){QtMETzSEyM = false;}
      if(FICpJPsUwj == true){FICpJPsUwj = false;}
      if(nkpuzwnblQ == true){nkpuzwnblQ = false;}
      if(hdkYzCkqnc == true){hdkYzCkqnc = false;}
      if(cMGzUiEJQY == true){cMGzUiEJQY = false;}
      if(iRDLoeDQEW == true){iRDLoeDQEW = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class BFPEBJHOET
{ 
  void QouixUMYDp()
  { 
      bool nYbABqsVVy = false;
      bool fYexDDJkYY = false;
      bool ocDcbAatrw = false;
      bool KGbdmlnAel = false;
      bool XEdsXteGoM = false;
      bool GaSdPKUyYB = false;
      bool QycYnYxAJQ = false;
      bool OIGlBjyKFg = false;
      bool UUFfpinxOb = false;
      bool RpbcVYaEEy = false;
      bool xdwYxxUfce = false;
      bool MJrqfwsxiE = false;
      bool jAlhyYgcQb = false;
      bool JtGHjqXfhr = false;
      bool OITiPHxkxZ = false;
      bool edUzNxrNZY = false;
      bool QrOAVSDkGo = false;
      bool XMPqpbfCSq = false;
      bool bwepxeYGsm = false;
      bool yKGIbWsTMx = false;
      string MYfuGWcBhc;
      string aRGcVasuGy;
      string yQEpXmyfEP;
      string ElZykzSwiS;
      string XXowIQlImD;
      string oUybOwUoXT;
      string XxwSXnqIqW;
      string IxMmZZbHgH;
      string BorBainxin;
      string dcYOtabWXU;
      string YcQQtqHKCo;
      string UMIPShFtqn;
      string ztYDrfYxsz;
      string yFjMiXXaHi;
      string adutTRUIwL;
      string UgeiUeENXO;
      string SKRDpPcugu;
      string KdmIMVyeia;
      string LPBgdRZAqD;
      string TJDrPQLqDE;
      if(MYfuGWcBhc == YcQQtqHKCo){nYbABqsVVy = true;}
      else if(YcQQtqHKCo == MYfuGWcBhc){xdwYxxUfce = true;}
      if(aRGcVasuGy == UMIPShFtqn){fYexDDJkYY = true;}
      else if(UMIPShFtqn == aRGcVasuGy){MJrqfwsxiE = true;}
      if(yQEpXmyfEP == ztYDrfYxsz){ocDcbAatrw = true;}
      else if(ztYDrfYxsz == yQEpXmyfEP){jAlhyYgcQb = true;}
      if(ElZykzSwiS == yFjMiXXaHi){KGbdmlnAel = true;}
      else if(yFjMiXXaHi == ElZykzSwiS){JtGHjqXfhr = true;}
      if(XXowIQlImD == adutTRUIwL){XEdsXteGoM = true;}
      else if(adutTRUIwL == XXowIQlImD){OITiPHxkxZ = true;}
      if(oUybOwUoXT == UgeiUeENXO){GaSdPKUyYB = true;}
      else if(UgeiUeENXO == oUybOwUoXT){edUzNxrNZY = true;}
      if(XxwSXnqIqW == SKRDpPcugu){QycYnYxAJQ = true;}
      else if(SKRDpPcugu == XxwSXnqIqW){QrOAVSDkGo = true;}
      if(IxMmZZbHgH == KdmIMVyeia){OIGlBjyKFg = true;}
      if(BorBainxin == LPBgdRZAqD){UUFfpinxOb = true;}
      if(dcYOtabWXU == TJDrPQLqDE){RpbcVYaEEy = true;}
      while(KdmIMVyeia == IxMmZZbHgH){XMPqpbfCSq = true;}
      while(LPBgdRZAqD == LPBgdRZAqD){bwepxeYGsm = true;}
      while(TJDrPQLqDE == TJDrPQLqDE){yKGIbWsTMx = true;}
      if(nYbABqsVVy == true){nYbABqsVVy = false;}
      if(fYexDDJkYY == true){fYexDDJkYY = false;}
      if(ocDcbAatrw == true){ocDcbAatrw = false;}
      if(KGbdmlnAel == true){KGbdmlnAel = false;}
      if(XEdsXteGoM == true){XEdsXteGoM = false;}
      if(GaSdPKUyYB == true){GaSdPKUyYB = false;}
      if(QycYnYxAJQ == true){QycYnYxAJQ = false;}
      if(OIGlBjyKFg == true){OIGlBjyKFg = false;}
      if(UUFfpinxOb == true){UUFfpinxOb = false;}
      if(RpbcVYaEEy == true){RpbcVYaEEy = false;}
      if(xdwYxxUfce == true){xdwYxxUfce = false;}
      if(MJrqfwsxiE == true){MJrqfwsxiE = false;}
      if(jAlhyYgcQb == true){jAlhyYgcQb = false;}
      if(JtGHjqXfhr == true){JtGHjqXfhr = false;}
      if(OITiPHxkxZ == true){OITiPHxkxZ = false;}
      if(edUzNxrNZY == true){edUzNxrNZY = false;}
      if(QrOAVSDkGo == true){QrOAVSDkGo = false;}
      if(XMPqpbfCSq == true){XMPqpbfCSq = false;}
      if(bwepxeYGsm == true){bwepxeYGsm = false;}
      if(yKGIbWsTMx == true){yKGIbWsTMx = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class CVMEUHAMCZ
{ 
  void oqqMTlkmts()
  { 
      bool BaWoTVlPxc = false;
      bool GbfkiqWidh = false;
      bool OSpiODVHUO = false;
      bool WRRsFDbTQB = false;
      bool BifFPSnNBS = false;
      bool nqHuLiknZQ = false;
      bool zduhFnKmef = false;
      bool PCSbgelkSu = false;
      bool OHGBaeKWhW = false;
      bool SntzBWnxza = false;
      bool IBhUDkYeOf = false;
      bool wzUdCrWsHZ = false;
      bool cnFINbHSaJ = false;
      bool qokrmNYlyo = false;
      bool GfIBZSSPxI = false;
      bool zupYxUuZHb = false;
      bool dGEEoGNcqn = false;
      bool SkuRTxeDht = false;
      bool IqURJuyMtR = false;
      bool RzdVLzaDMS = false;
      string XGtirQpeRx;
      string tQxjiEUWaR;
      string trVjRfrowV;
      string CHcQcgrfmK;
      string CFWhGmxOAE;
      string FXOccekKRL;
      string XAiwtlngGB;
      string LnjQOoVnce;
      string idoqQeszmy;
      string wgNbmBVamT;
      string yQIyrQnyNn;
      string JxglbtLqeP;
      string snsIFdaIdN;
      string SuAIgRUqyA;
      string pukyoyzbzs;
      string peuWaJWArN;
      string ofTAVOwYFK;
      string YUreZyDtTH;
      string eyJkWmzdhW;
      string uUyjKKakcZ;
      if(XGtirQpeRx == yQIyrQnyNn){BaWoTVlPxc = true;}
      else if(yQIyrQnyNn == XGtirQpeRx){IBhUDkYeOf = true;}
      if(tQxjiEUWaR == JxglbtLqeP){GbfkiqWidh = true;}
      else if(JxglbtLqeP == tQxjiEUWaR){wzUdCrWsHZ = true;}
      if(trVjRfrowV == snsIFdaIdN){OSpiODVHUO = true;}
      else if(snsIFdaIdN == trVjRfrowV){cnFINbHSaJ = true;}
      if(CHcQcgrfmK == SuAIgRUqyA){WRRsFDbTQB = true;}
      else if(SuAIgRUqyA == CHcQcgrfmK){qokrmNYlyo = true;}
      if(CFWhGmxOAE == pukyoyzbzs){BifFPSnNBS = true;}
      else if(pukyoyzbzs == CFWhGmxOAE){GfIBZSSPxI = true;}
      if(FXOccekKRL == peuWaJWArN){nqHuLiknZQ = true;}
      else if(peuWaJWArN == FXOccekKRL){zupYxUuZHb = true;}
      if(XAiwtlngGB == ofTAVOwYFK){zduhFnKmef = true;}
      else if(ofTAVOwYFK == XAiwtlngGB){dGEEoGNcqn = true;}
      if(LnjQOoVnce == YUreZyDtTH){PCSbgelkSu = true;}
      if(idoqQeszmy == eyJkWmzdhW){OHGBaeKWhW = true;}
      if(wgNbmBVamT == uUyjKKakcZ){SntzBWnxza = true;}
      while(YUreZyDtTH == LnjQOoVnce){SkuRTxeDht = true;}
      while(eyJkWmzdhW == eyJkWmzdhW){IqURJuyMtR = true;}
      while(uUyjKKakcZ == uUyjKKakcZ){RzdVLzaDMS = true;}
      if(BaWoTVlPxc == true){BaWoTVlPxc = false;}
      if(GbfkiqWidh == true){GbfkiqWidh = false;}
      if(OSpiODVHUO == true){OSpiODVHUO = false;}
      if(WRRsFDbTQB == true){WRRsFDbTQB = false;}
      if(BifFPSnNBS == true){BifFPSnNBS = false;}
      if(nqHuLiknZQ == true){nqHuLiknZQ = false;}
      if(zduhFnKmef == true){zduhFnKmef = false;}
      if(PCSbgelkSu == true){PCSbgelkSu = false;}
      if(OHGBaeKWhW == true){OHGBaeKWhW = false;}
      if(SntzBWnxza == true){SntzBWnxza = false;}
      if(IBhUDkYeOf == true){IBhUDkYeOf = false;}
      if(wzUdCrWsHZ == true){wzUdCrWsHZ = false;}
      if(cnFINbHSaJ == true){cnFINbHSaJ = false;}
      if(qokrmNYlyo == true){qokrmNYlyo = false;}
      if(GfIBZSSPxI == true){GfIBZSSPxI = false;}
      if(zupYxUuZHb == true){zupYxUuZHb = false;}
      if(dGEEoGNcqn == true){dGEEoGNcqn = false;}
      if(SkuRTxeDht == true){SkuRTxeDht = false;}
      if(IqURJuyMtR == true){IqURJuyMtR = false;}
      if(RzdVLzaDMS == true){RzdVLzaDMS = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class EVMSIMKVHF
{ 
  void qtzroWBcgy()
  { 
      bool KOftQuywHZ = false;
      bool riEAIZfEDf = false;
      bool bEdmTHoDLZ = false;
      bool atOjDwokik = false;
      bool OAzqHcDEsX = false;
      bool ItMKgGksZJ = false;
      bool FukgzyTTxM = false;
      bool ktVRRaElep = false;
      bool EjJmRggECw = false;
      bool LuKZeTORrI = false;
      bool JiGglOXtrG = false;
      bool ByNjFVkxPS = false;
      bool RORAAoiumx = false;
      bool MltWgUcbBC = false;
      bool IlMwtMhaUJ = false;
      bool iRCZptQGfw = false;
      bool ecHusPEpCj = false;
      bool rIwMKfCVGn = false;
      bool HHadOujUfm = false;
      bool EWwEXfeQCe = false;
      string lsCsPczkpq;
      string XwlbOeLtZN;
      string OAmrnyhQxK;
      string HFiAtSjNbt;
      string nSoWwZQFwk;
      string gmQeFlGKEQ;
      string uimfjSNkhw;
      string uxSeZuLQwO;
      string hbTLcUoEtH;
      string LYIKzEeIld;
      string LfXzpjTkEK;
      string aoOpiSObCP;
      string dJpZjVnHfV;
      string QCdRCCEUVs;
      string ADzjgWKSbf;
      string oDFWACoxOT;
      string uLEisXLwmg;
      string OtFJOZJFsN;
      string KUfAfMwHRA;
      string MHFCynyPpJ;
      if(lsCsPczkpq == LfXzpjTkEK){KOftQuywHZ = true;}
      else if(LfXzpjTkEK == lsCsPczkpq){JiGglOXtrG = true;}
      if(XwlbOeLtZN == aoOpiSObCP){riEAIZfEDf = true;}
      else if(aoOpiSObCP == XwlbOeLtZN){ByNjFVkxPS = true;}
      if(OAmrnyhQxK == dJpZjVnHfV){bEdmTHoDLZ = true;}
      else if(dJpZjVnHfV == OAmrnyhQxK){RORAAoiumx = true;}
      if(HFiAtSjNbt == QCdRCCEUVs){atOjDwokik = true;}
      else if(QCdRCCEUVs == HFiAtSjNbt){MltWgUcbBC = true;}
      if(nSoWwZQFwk == ADzjgWKSbf){OAzqHcDEsX = true;}
      else if(ADzjgWKSbf == nSoWwZQFwk){IlMwtMhaUJ = true;}
      if(gmQeFlGKEQ == oDFWACoxOT){ItMKgGksZJ = true;}
      else if(oDFWACoxOT == gmQeFlGKEQ){iRCZptQGfw = true;}
      if(uimfjSNkhw == uLEisXLwmg){FukgzyTTxM = true;}
      else if(uLEisXLwmg == uimfjSNkhw){ecHusPEpCj = true;}
      if(uxSeZuLQwO == OtFJOZJFsN){ktVRRaElep = true;}
      if(hbTLcUoEtH == KUfAfMwHRA){EjJmRggECw = true;}
      if(LYIKzEeIld == MHFCynyPpJ){LuKZeTORrI = true;}
      while(OtFJOZJFsN == uxSeZuLQwO){rIwMKfCVGn = true;}
      while(KUfAfMwHRA == KUfAfMwHRA){HHadOujUfm = true;}
      while(MHFCynyPpJ == MHFCynyPpJ){EWwEXfeQCe = true;}
      if(KOftQuywHZ == true){KOftQuywHZ = false;}
      if(riEAIZfEDf == true){riEAIZfEDf = false;}
      if(bEdmTHoDLZ == true){bEdmTHoDLZ = false;}
      if(atOjDwokik == true){atOjDwokik = false;}
      if(OAzqHcDEsX == true){OAzqHcDEsX = false;}
      if(ItMKgGksZJ == true){ItMKgGksZJ = false;}
      if(FukgzyTTxM == true){FukgzyTTxM = false;}
      if(ktVRRaElep == true){ktVRRaElep = false;}
      if(EjJmRggECw == true){EjJmRggECw = false;}
      if(LuKZeTORrI == true){LuKZeTORrI = false;}
      if(JiGglOXtrG == true){JiGglOXtrG = false;}
      if(ByNjFVkxPS == true){ByNjFVkxPS = false;}
      if(RORAAoiumx == true){RORAAoiumx = false;}
      if(MltWgUcbBC == true){MltWgUcbBC = false;}
      if(IlMwtMhaUJ == true){IlMwtMhaUJ = false;}
      if(iRCZptQGfw == true){iRCZptQGfw = false;}
      if(ecHusPEpCj == true){ecHusPEpCj = false;}
      if(rIwMKfCVGn == true){rIwMKfCVGn = false;}
      if(HHadOujUfm == true){HHadOujUfm = false;}
      if(EWwEXfeQCe == true){EWwEXfeQCe = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class OYOUWYDVSB
{ 
  void raamojEEVX()
  { 
      bool hOVGJFZgap = false;
      bool TcllBfLeah = false;
      bool zqiMCnXHNJ = false;
      bool rErQCOSbtP = false;
      bool UBdkMUUThL = false;
      bool mqWpgpfIEV = false;
      bool hRSQyPkUim = false;
      bool NikLMyNxAg = false;
      bool TDZCWAgCiM = false;
      bool hJXYgDiNlx = false;
      bool jzkuxEGKdi = false;
      bool chIWBdrPty = false;
      bool hhlWEEKMeJ = false;
      bool OAKDxUSdER = false;
      bool tVYAiABBWC = false;
      bool KSSnOCMNqr = false;
      bool ssfTTcXEYg = false;
      bool KNLbELJkmE = false;
      bool DIobywgVnu = false;
      bool HEmLYApEfF = false;
      string VBFMcdsxgp;
      string IpfaylyuGB;
      string KorEqcIawa;
      string JnsUxWRhBJ;
      string HYMSwRXXNA;
      string oeoucfIAVz;
      string USBFgUwKcb;
      string TQsxskcYIY;
      string FjNuleyxrR;
      string NRMCnoXGka;
      string VMtkgYkrCq;
      string DjrxtjFFTC;
      string VySLOCDqIE;
      string NVngDsobON;
      string sGuBOdYPHE;
      string iRmiFWtiWd;
      string UtixchuKsB;
      string tcqGIOCQxk;
      string cniDVuhEbf;
      string yGFjryWyXg;
      if(VBFMcdsxgp == VMtkgYkrCq){hOVGJFZgap = true;}
      else if(VMtkgYkrCq == VBFMcdsxgp){jzkuxEGKdi = true;}
      if(IpfaylyuGB == DjrxtjFFTC){TcllBfLeah = true;}
      else if(DjrxtjFFTC == IpfaylyuGB){chIWBdrPty = true;}
      if(KorEqcIawa == VySLOCDqIE){zqiMCnXHNJ = true;}
      else if(VySLOCDqIE == KorEqcIawa){hhlWEEKMeJ = true;}
      if(JnsUxWRhBJ == NVngDsobON){rErQCOSbtP = true;}
      else if(NVngDsobON == JnsUxWRhBJ){OAKDxUSdER = true;}
      if(HYMSwRXXNA == sGuBOdYPHE){UBdkMUUThL = true;}
      else if(sGuBOdYPHE == HYMSwRXXNA){tVYAiABBWC = true;}
      if(oeoucfIAVz == iRmiFWtiWd){mqWpgpfIEV = true;}
      else if(iRmiFWtiWd == oeoucfIAVz){KSSnOCMNqr = true;}
      if(USBFgUwKcb == UtixchuKsB){hRSQyPkUim = true;}
      else if(UtixchuKsB == USBFgUwKcb){ssfTTcXEYg = true;}
      if(TQsxskcYIY == tcqGIOCQxk){NikLMyNxAg = true;}
      if(FjNuleyxrR == cniDVuhEbf){TDZCWAgCiM = true;}
      if(NRMCnoXGka == yGFjryWyXg){hJXYgDiNlx = true;}
      while(tcqGIOCQxk == TQsxskcYIY){KNLbELJkmE = true;}
      while(cniDVuhEbf == cniDVuhEbf){DIobywgVnu = true;}
      while(yGFjryWyXg == yGFjryWyXg){HEmLYApEfF = true;}
      if(hOVGJFZgap == true){hOVGJFZgap = false;}
      if(TcllBfLeah == true){TcllBfLeah = false;}
      if(zqiMCnXHNJ == true){zqiMCnXHNJ = false;}
      if(rErQCOSbtP == true){rErQCOSbtP = false;}
      if(UBdkMUUThL == true){UBdkMUUThL = false;}
      if(mqWpgpfIEV == true){mqWpgpfIEV = false;}
      if(hRSQyPkUim == true){hRSQyPkUim = false;}
      if(NikLMyNxAg == true){NikLMyNxAg = false;}
      if(TDZCWAgCiM == true){TDZCWAgCiM = false;}
      if(hJXYgDiNlx == true){hJXYgDiNlx = false;}
      if(jzkuxEGKdi == true){jzkuxEGKdi = false;}
      if(chIWBdrPty == true){chIWBdrPty = false;}
      if(hhlWEEKMeJ == true){hhlWEEKMeJ = false;}
      if(OAKDxUSdER == true){OAKDxUSdER = false;}
      if(tVYAiABBWC == true){tVYAiABBWC = false;}
      if(KSSnOCMNqr == true){KSSnOCMNqr = false;}
      if(ssfTTcXEYg == true){ssfTTcXEYg = false;}
      if(KNLbELJkmE == true){KNLbELJkmE = false;}
      if(DIobywgVnu == true){DIobywgVnu = false;}
      if(HEmLYApEfF == true){HEmLYApEfF = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class FWPAVSSVJE
{ 
  void BbIQmaaOrg()
  { 
      bool sHfYEDdiqo = false;
      bool QArfPAGejI = false;
      bool jACyggCGDS = false;
      bool yYxheXQLtO = false;
      bool qwZZcAtSMD = false;
      bool PDJMfsEgrX = false;
      bool BXfYqqCKAq = false;
      bool jujVQnZcUf = false;
      bool lisACuPjBl = false;
      bool TiTWMTPBhk = false;
      bool xjSUTUSmwr = false;
      bool SbMLlSdfVw = false;
      bool bSIOXBaNJx = false;
      bool XYtjhBQYgh = false;
      bool bbnJTqVIjt = false;
      bool pjelJeaDwR = false;
      bool sEdzTsgccj = false;
      bool CEznTzdyuf = false;
      bool eScPGmtIZC = false;
      bool ZMbOnWyooZ = false;
      string nWWUatsuRb;
      string SSIHqOKIIo;
      string GlVUTVCuMt;
      string bLecQdfwLN;
      string HDTkVnQHCk;
      string dewHQCBCBF;
      string qxhWAHnepN;
      string iOxtgDRjze;
      string EtraPwOXMO;
      string cctGVJUwkN;
      string AkRoCPhCZM;
      string jQDWAxEHGD;
      string rQSbjFTpXX;
      string iUykdTcDYz;
      string OMxzdLZXFY;
      string EMpgVjSoEw;
      string wqdCdORRrg;
      string TBiGofSSxY;
      string fwjzSVeROt;
      string AmzcDWhtVP;
      if(nWWUatsuRb == AkRoCPhCZM){sHfYEDdiqo = true;}
      else if(AkRoCPhCZM == nWWUatsuRb){xjSUTUSmwr = true;}
      if(SSIHqOKIIo == jQDWAxEHGD){QArfPAGejI = true;}
      else if(jQDWAxEHGD == SSIHqOKIIo){SbMLlSdfVw = true;}
      if(GlVUTVCuMt == rQSbjFTpXX){jACyggCGDS = true;}
      else if(rQSbjFTpXX == GlVUTVCuMt){bSIOXBaNJx = true;}
      if(bLecQdfwLN == iUykdTcDYz){yYxheXQLtO = true;}
      else if(iUykdTcDYz == bLecQdfwLN){XYtjhBQYgh = true;}
      if(HDTkVnQHCk == OMxzdLZXFY){qwZZcAtSMD = true;}
      else if(OMxzdLZXFY == HDTkVnQHCk){bbnJTqVIjt = true;}
      if(dewHQCBCBF == EMpgVjSoEw){PDJMfsEgrX = true;}
      else if(EMpgVjSoEw == dewHQCBCBF){pjelJeaDwR = true;}
      if(qxhWAHnepN == wqdCdORRrg){BXfYqqCKAq = true;}
      else if(wqdCdORRrg == qxhWAHnepN){sEdzTsgccj = true;}
      if(iOxtgDRjze == TBiGofSSxY){jujVQnZcUf = true;}
      if(EtraPwOXMO == fwjzSVeROt){lisACuPjBl = true;}
      if(cctGVJUwkN == AmzcDWhtVP){TiTWMTPBhk = true;}
      while(TBiGofSSxY == iOxtgDRjze){CEznTzdyuf = true;}
      while(fwjzSVeROt == fwjzSVeROt){eScPGmtIZC = true;}
      while(AmzcDWhtVP == AmzcDWhtVP){ZMbOnWyooZ = true;}
      if(sHfYEDdiqo == true){sHfYEDdiqo = false;}
      if(QArfPAGejI == true){QArfPAGejI = false;}
      if(jACyggCGDS == true){jACyggCGDS = false;}
      if(yYxheXQLtO == true){yYxheXQLtO = false;}
      if(qwZZcAtSMD == true){qwZZcAtSMD = false;}
      if(PDJMfsEgrX == true){PDJMfsEgrX = false;}
      if(BXfYqqCKAq == true){BXfYqqCKAq = false;}
      if(jujVQnZcUf == true){jujVQnZcUf = false;}
      if(lisACuPjBl == true){lisACuPjBl = false;}
      if(TiTWMTPBhk == true){TiTWMTPBhk = false;}
      if(xjSUTUSmwr == true){xjSUTUSmwr = false;}
      if(SbMLlSdfVw == true){SbMLlSdfVw = false;}
      if(bSIOXBaNJx == true){bSIOXBaNJx = false;}
      if(XYtjhBQYgh == true){XYtjhBQYgh = false;}
      if(bbnJTqVIjt == true){bbnJTqVIjt = false;}
      if(pjelJeaDwR == true){pjelJeaDwR = false;}
      if(sEdzTsgccj == true){sEdzTsgccj = false;}
      if(CEznTzdyuf == true){CEznTzdyuf = false;}
      if(eScPGmtIZC == true){eScPGmtIZC = false;}
      if(ZMbOnWyooZ == true){ZMbOnWyooZ = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class VTLQIFISWD
{ 
  void HlVZyzsPtV()
  { 
      bool qatCHCWVGR = false;
      bool xrOXosKsQt = false;
      bool bQDxuZrHlX = false;
      bool oiqAEFHduL = false;
      bool dEJiiSnChI = false;
      bool HsymiZWwGg = false;
      bool KOihcNANSj = false;
      bool kgyFPXHUNb = false;
      bool koZdQukEQe = false;
      bool hKWNAOUbGU = false;
      bool SZjyWausWL = false;
      bool RChewUoFQg = false;
      bool cwwnBZJjEB = false;
      bool CfNsJKFaHp = false;
      bool ArgFMfcrRf = false;
      bool ZPKZqWdwww = false;
      bool QLnVIknoUk = false;
      bool ONyZgkOqaV = false;
      bool xRRYbmVnBm = false;
      bool gJeKZoDLwa = false;
      string xhtmMayFud;
      string MxdqzfKuxx;
      string JdjpMkwEDr;
      string tgsDSOlFRU;
      string cdydmsrVWb;
      string ZIMidSyEZa;
      string etBDjfDZXj;
      string tFdcTffFCS;
      string sZgbRlTKZA;
      string QhepoibutG;
      string pRxmhUdjPy;
      string mrBGhFMZkx;
      string MsAXTMZnmj;
      string DkLwcbbtsw;
      string HjtbMXfXHj;
      string VCKwtwQZTV;
      string upwetCgFdF;
      string cSfnpbyYKu;
      string fBfCOAZPBg;
      string KCaXBRmPgK;
      if(xhtmMayFud == pRxmhUdjPy){qatCHCWVGR = true;}
      else if(pRxmhUdjPy == xhtmMayFud){SZjyWausWL = true;}
      if(MxdqzfKuxx == mrBGhFMZkx){xrOXosKsQt = true;}
      else if(mrBGhFMZkx == MxdqzfKuxx){RChewUoFQg = true;}
      if(JdjpMkwEDr == MsAXTMZnmj){bQDxuZrHlX = true;}
      else if(MsAXTMZnmj == JdjpMkwEDr){cwwnBZJjEB = true;}
      if(tgsDSOlFRU == DkLwcbbtsw){oiqAEFHduL = true;}
      else if(DkLwcbbtsw == tgsDSOlFRU){CfNsJKFaHp = true;}
      if(cdydmsrVWb == HjtbMXfXHj){dEJiiSnChI = true;}
      else if(HjtbMXfXHj == cdydmsrVWb){ArgFMfcrRf = true;}
      if(ZIMidSyEZa == VCKwtwQZTV){HsymiZWwGg = true;}
      else if(VCKwtwQZTV == ZIMidSyEZa){ZPKZqWdwww = true;}
      if(etBDjfDZXj == upwetCgFdF){KOihcNANSj = true;}
      else if(upwetCgFdF == etBDjfDZXj){QLnVIknoUk = true;}
      if(tFdcTffFCS == cSfnpbyYKu){kgyFPXHUNb = true;}
      if(sZgbRlTKZA == fBfCOAZPBg){koZdQukEQe = true;}
      if(QhepoibutG == KCaXBRmPgK){hKWNAOUbGU = true;}
      while(cSfnpbyYKu == tFdcTffFCS){ONyZgkOqaV = true;}
      while(fBfCOAZPBg == fBfCOAZPBg){xRRYbmVnBm = true;}
      while(KCaXBRmPgK == KCaXBRmPgK){gJeKZoDLwa = true;}
      if(qatCHCWVGR == true){qatCHCWVGR = false;}
      if(xrOXosKsQt == true){xrOXosKsQt = false;}
      if(bQDxuZrHlX == true){bQDxuZrHlX = false;}
      if(oiqAEFHduL == true){oiqAEFHduL = false;}
      if(dEJiiSnChI == true){dEJiiSnChI = false;}
      if(HsymiZWwGg == true){HsymiZWwGg = false;}
      if(KOihcNANSj == true){KOihcNANSj = false;}
      if(kgyFPXHUNb == true){kgyFPXHUNb = false;}
      if(koZdQukEQe == true){koZdQukEQe = false;}
      if(hKWNAOUbGU == true){hKWNAOUbGU = false;}
      if(SZjyWausWL == true){SZjyWausWL = false;}
      if(RChewUoFQg == true){RChewUoFQg = false;}
      if(cwwnBZJjEB == true){cwwnBZJjEB = false;}
      if(CfNsJKFaHp == true){CfNsJKFaHp = false;}
      if(ArgFMfcrRf == true){ArgFMfcrRf = false;}
      if(ZPKZqWdwww == true){ZPKZqWdwww = false;}
      if(QLnVIknoUk == true){QLnVIknoUk = false;}
      if(ONyZgkOqaV == true){ONyZgkOqaV = false;}
      if(xRRYbmVnBm == true){xRRYbmVnBm = false;}
      if(gJeKZoDLwa == true){gJeKZoDLwa = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class QEPVHCESSG
{ 
  void LtDVpoFdtk()
  { 
      bool tAFVzoWxOf = false;
      bool BFbKujcNil = false;
      bool fLmSyTCxxK = false;
      bool CKcGmJEGqg = false;
      bool fGpVVHwVhR = false;
      bool lsEBIiMlXf = false;
      bool mZzDdpbUXk = false;
      bool eWVBFYURxp = false;
      bool WfOeYIGbxE = false;
      bool xShLtGHlqe = false;
      bool eaywmPWDui = false;
      bool NungIGKUeV = false;
      bool jAXSnMnJGy = false;
      bool RiZSKuhSrI = false;
      bool kCgNqCdBDn = false;
      bool wlHVteDeHZ = false;
      bool bMwwQeUVVM = false;
      bool YrcVjhTJbl = false;
      bool ilGSCfaDXe = false;
      bool rCKSgYFjxM = false;
      string NYaVhnaUJU;
      string WBlZOoFSRb;
      string PgomqiNHVP;
      string pARVrDNncE;
      string BGmNhagZwg;
      string RFAZBfjndy;
      string aTyteViPgK;
      string aQoMaJtaEP;
      string BnKoxjArUL;
      string SZKedgHshL;
      string rRrkFAPnzq;
      string lIiOwmIJwt;
      string VqtVrAGKht;
      string BBrrXjuZiw;
      string UMrdZKpwhq;
      string XywnpAWWsF;
      string tFFEpkPppL;
      string qiazZJyQuh;
      string JKbqVDEECW;
      string NXgcCOHmmo;
      if(NYaVhnaUJU == rRrkFAPnzq){tAFVzoWxOf = true;}
      else if(rRrkFAPnzq == NYaVhnaUJU){eaywmPWDui = true;}
      if(WBlZOoFSRb == lIiOwmIJwt){BFbKujcNil = true;}
      else if(lIiOwmIJwt == WBlZOoFSRb){NungIGKUeV = true;}
      if(PgomqiNHVP == VqtVrAGKht){fLmSyTCxxK = true;}
      else if(VqtVrAGKht == PgomqiNHVP){jAXSnMnJGy = true;}
      if(pARVrDNncE == BBrrXjuZiw){CKcGmJEGqg = true;}
      else if(BBrrXjuZiw == pARVrDNncE){RiZSKuhSrI = true;}
      if(BGmNhagZwg == UMrdZKpwhq){fGpVVHwVhR = true;}
      else if(UMrdZKpwhq == BGmNhagZwg){kCgNqCdBDn = true;}
      if(RFAZBfjndy == XywnpAWWsF){lsEBIiMlXf = true;}
      else if(XywnpAWWsF == RFAZBfjndy){wlHVteDeHZ = true;}
      if(aTyteViPgK == tFFEpkPppL){mZzDdpbUXk = true;}
      else if(tFFEpkPppL == aTyteViPgK){bMwwQeUVVM = true;}
      if(aQoMaJtaEP == qiazZJyQuh){eWVBFYURxp = true;}
      if(BnKoxjArUL == JKbqVDEECW){WfOeYIGbxE = true;}
      if(SZKedgHshL == NXgcCOHmmo){xShLtGHlqe = true;}
      while(qiazZJyQuh == aQoMaJtaEP){YrcVjhTJbl = true;}
      while(JKbqVDEECW == JKbqVDEECW){ilGSCfaDXe = true;}
      while(NXgcCOHmmo == NXgcCOHmmo){rCKSgYFjxM = true;}
      if(tAFVzoWxOf == true){tAFVzoWxOf = false;}
      if(BFbKujcNil == true){BFbKujcNil = false;}
      if(fLmSyTCxxK == true){fLmSyTCxxK = false;}
      if(CKcGmJEGqg == true){CKcGmJEGqg = false;}
      if(fGpVVHwVhR == true){fGpVVHwVhR = false;}
      if(lsEBIiMlXf == true){lsEBIiMlXf = false;}
      if(mZzDdpbUXk == true){mZzDdpbUXk = false;}
      if(eWVBFYURxp == true){eWVBFYURxp = false;}
      if(WfOeYIGbxE == true){WfOeYIGbxE = false;}
      if(xShLtGHlqe == true){xShLtGHlqe = false;}
      if(eaywmPWDui == true){eaywmPWDui = false;}
      if(NungIGKUeV == true){NungIGKUeV = false;}
      if(jAXSnMnJGy == true){jAXSnMnJGy = false;}
      if(RiZSKuhSrI == true){RiZSKuhSrI = false;}
      if(kCgNqCdBDn == true){kCgNqCdBDn = false;}
      if(wlHVteDeHZ == true){wlHVteDeHZ = false;}
      if(bMwwQeUVVM == true){bMwwQeUVVM = false;}
      if(YrcVjhTJbl == true){YrcVjhTJbl = false;}
      if(ilGSCfaDXe == true){ilGSCfaDXe = false;}
      if(rCKSgYFjxM == true){rCKSgYFjxM = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class IKBAMRATCF
{ 
  void sRRiJhUbly()
  { 
      bool VCMGYizNrZ = false;
      bool QcyhxKnWGG = false;
      bool ZijyoOXxkl = false;
      bool SiUuypOaLY = false;
      bool CEPHUYfGdg = false;
      bool uYYfDmSNRK = false;
      bool KBbFGgHDjH = false;
      bool wMKgEVSbcP = false;
      bool hRTEpsJorL = false;
      bool WAJBOAbJAm = false;
      bool QcVVjhOrbg = false;
      bool TpjCbsgXPM = false;
      bool WSKXjuDJSE = false;
      bool sJaoyFuxTH = false;
      bool eRNKrgPGYV = false;
      bool SEtmQyRylo = false;
      bool eEYXmJOtDW = false;
      bool xjDHhFFAfD = false;
      bool fwjxkoOmYA = false;
      bool mxLecZrpWh = false;
      string yCobsVEMCx;
      string cOfxDuVjsp;
      string VrfWUqGVxM;
      string ProAdwZCcc;
      string iemVrORkrZ;
      string aIbZXGVRGC;
      string PhOphjYeSH;
      string USGQGpEJdG;
      string YUcWkHQOcX;
      string ZHwaMBQwnI;
      string omSkEIBLTh;
      string BMmAcuFqFa;
      string TKCuhNWfDE;
      string ZIVVQlBrSc;
      string FEutVMTwxR;
      string wYpNoejWDq;
      string kVIOHrqQip;
      string sMYcUOOHYU;
      string sahkIBRHgk;
      string Bdoaqiwfld;
      if(yCobsVEMCx == omSkEIBLTh){VCMGYizNrZ = true;}
      else if(omSkEIBLTh == yCobsVEMCx){QcVVjhOrbg = true;}
      if(cOfxDuVjsp == BMmAcuFqFa){QcyhxKnWGG = true;}
      else if(BMmAcuFqFa == cOfxDuVjsp){TpjCbsgXPM = true;}
      if(VrfWUqGVxM == TKCuhNWfDE){ZijyoOXxkl = true;}
      else if(TKCuhNWfDE == VrfWUqGVxM){WSKXjuDJSE = true;}
      if(ProAdwZCcc == ZIVVQlBrSc){SiUuypOaLY = true;}
      else if(ZIVVQlBrSc == ProAdwZCcc){sJaoyFuxTH = true;}
      if(iemVrORkrZ == FEutVMTwxR){CEPHUYfGdg = true;}
      else if(FEutVMTwxR == iemVrORkrZ){eRNKrgPGYV = true;}
      if(aIbZXGVRGC == wYpNoejWDq){uYYfDmSNRK = true;}
      else if(wYpNoejWDq == aIbZXGVRGC){SEtmQyRylo = true;}
      if(PhOphjYeSH == kVIOHrqQip){KBbFGgHDjH = true;}
      else if(kVIOHrqQip == PhOphjYeSH){eEYXmJOtDW = true;}
      if(USGQGpEJdG == sMYcUOOHYU){wMKgEVSbcP = true;}
      if(YUcWkHQOcX == sahkIBRHgk){hRTEpsJorL = true;}
      if(ZHwaMBQwnI == Bdoaqiwfld){WAJBOAbJAm = true;}
      while(sMYcUOOHYU == USGQGpEJdG){xjDHhFFAfD = true;}
      while(sahkIBRHgk == sahkIBRHgk){fwjxkoOmYA = true;}
      while(Bdoaqiwfld == Bdoaqiwfld){mxLecZrpWh = true;}
      if(VCMGYizNrZ == true){VCMGYizNrZ = false;}
      if(QcyhxKnWGG == true){QcyhxKnWGG = false;}
      if(ZijyoOXxkl == true){ZijyoOXxkl = false;}
      if(SiUuypOaLY == true){SiUuypOaLY = false;}
      if(CEPHUYfGdg == true){CEPHUYfGdg = false;}
      if(uYYfDmSNRK == true){uYYfDmSNRK = false;}
      if(KBbFGgHDjH == true){KBbFGgHDjH = false;}
      if(wMKgEVSbcP == true){wMKgEVSbcP = false;}
      if(hRTEpsJorL == true){hRTEpsJorL = false;}
      if(WAJBOAbJAm == true){WAJBOAbJAm = false;}
      if(QcVVjhOrbg == true){QcVVjhOrbg = false;}
      if(TpjCbsgXPM == true){TpjCbsgXPM = false;}
      if(WSKXjuDJSE == true){WSKXjuDJSE = false;}
      if(sJaoyFuxTH == true){sJaoyFuxTH = false;}
      if(eRNKrgPGYV == true){eRNKrgPGYV = false;}
      if(SEtmQyRylo == true){SEtmQyRylo = false;}
      if(eEYXmJOtDW == true){eEYXmJOtDW = false;}
      if(xjDHhFFAfD == true){xjDHhFFAfD = false;}
      if(fwjxkoOmYA == true){fwjxkoOmYA = false;}
      if(mxLecZrpWh == true){mxLecZrpWh = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class CAQSHMKPOW
{ 
  void ZIbziSlRQU()
  { 
      bool NyjdGnOooF = false;
      bool ACAYzwUSpD = false;
      bool fiVuNEFuys = false;
      bool ejjTDEiMqR = false;
      bool DfTOSXYjay = false;
      bool WTBMtecnPC = false;
      bool hSpuaQSfVu = false;
      bool NHaYAAOHcp = false;
      bool fUTzVLiWYX = false;
      bool btxoijoXnB = false;
      bool FrOfkPrbMt = false;
      bool PUKZVNzqZO = false;
      bool huHxTSJlpQ = false;
      bool LqTajnGnNG = false;
      bool TGKeIGjWSV = false;
      bool kxyYTKkQMR = false;
      bool FFlwiYBioh = false;
      bool GKcTuajboM = false;
      bool imSTeNruGZ = false;
      bool DobuANUOwi = false;
      string MoJoqnLItt;
      string qeTXGxnLhW;
      string yUTwoGEhiA;
      string iTWVWCiLTR;
      string wKfXOAmSSJ;
      string JLQeLrVNAk;
      string idZtKXHxBE;
      string NcrQZmnugn;
      string TlOYpWDrKe;
      string gVKihRkkMq;
      string rpROugTzEX;
      string DZfLRxOADm;
      string UPmVXrRIhI;
      string CChpwcTAdJ;
      string CDnlaGozRj;
      string CkhYWcDupD;
      string OLQwVArpPn;
      string cOVsjQbAtR;
      string DSqyFRUITT;
      string ZYJauqlqQa;
      if(MoJoqnLItt == rpROugTzEX){NyjdGnOooF = true;}
      else if(rpROugTzEX == MoJoqnLItt){FrOfkPrbMt = true;}
      if(qeTXGxnLhW == DZfLRxOADm){ACAYzwUSpD = true;}
      else if(DZfLRxOADm == qeTXGxnLhW){PUKZVNzqZO = true;}
      if(yUTwoGEhiA == UPmVXrRIhI){fiVuNEFuys = true;}
      else if(UPmVXrRIhI == yUTwoGEhiA){huHxTSJlpQ = true;}
      if(iTWVWCiLTR == CChpwcTAdJ){ejjTDEiMqR = true;}
      else if(CChpwcTAdJ == iTWVWCiLTR){LqTajnGnNG = true;}
      if(wKfXOAmSSJ == CDnlaGozRj){DfTOSXYjay = true;}
      else if(CDnlaGozRj == wKfXOAmSSJ){TGKeIGjWSV = true;}
      if(JLQeLrVNAk == CkhYWcDupD){WTBMtecnPC = true;}
      else if(CkhYWcDupD == JLQeLrVNAk){kxyYTKkQMR = true;}
      if(idZtKXHxBE == OLQwVArpPn){hSpuaQSfVu = true;}
      else if(OLQwVArpPn == idZtKXHxBE){FFlwiYBioh = true;}
      if(NcrQZmnugn == cOVsjQbAtR){NHaYAAOHcp = true;}
      if(TlOYpWDrKe == DSqyFRUITT){fUTzVLiWYX = true;}
      if(gVKihRkkMq == ZYJauqlqQa){btxoijoXnB = true;}
      while(cOVsjQbAtR == NcrQZmnugn){GKcTuajboM = true;}
      while(DSqyFRUITT == DSqyFRUITT){imSTeNruGZ = true;}
      while(ZYJauqlqQa == ZYJauqlqQa){DobuANUOwi = true;}
      if(NyjdGnOooF == true){NyjdGnOooF = false;}
      if(ACAYzwUSpD == true){ACAYzwUSpD = false;}
      if(fiVuNEFuys == true){fiVuNEFuys = false;}
      if(ejjTDEiMqR == true){ejjTDEiMqR = false;}
      if(DfTOSXYjay == true){DfTOSXYjay = false;}
      if(WTBMtecnPC == true){WTBMtecnPC = false;}
      if(hSpuaQSfVu == true){hSpuaQSfVu = false;}
      if(NHaYAAOHcp == true){NHaYAAOHcp = false;}
      if(fUTzVLiWYX == true){fUTzVLiWYX = false;}
      if(btxoijoXnB == true){btxoijoXnB = false;}
      if(FrOfkPrbMt == true){FrOfkPrbMt = false;}
      if(PUKZVNzqZO == true){PUKZVNzqZO = false;}
      if(huHxTSJlpQ == true){huHxTSJlpQ = false;}
      if(LqTajnGnNG == true){LqTajnGnNG = false;}
      if(TGKeIGjWSV == true){TGKeIGjWSV = false;}
      if(kxyYTKkQMR == true){kxyYTKkQMR = false;}
      if(FFlwiYBioh == true){FFlwiYBioh = false;}
      if(GKcTuajboM == true){GKcTuajboM = false;}
      if(imSTeNruGZ == true){imSTeNruGZ = false;}
      if(DobuANUOwi == true){DobuANUOwi = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class OCWRPXSTFE
{ 
  void ulUWiMVaTx()
  { 
      bool CAJHHwHPSY = false;
      bool HSOxXzLImA = false;
      bool mNMwLyeLIm = false;
      bool HSnDXFxKmi = false;
      bool mUyeijhRbj = false;
      bool wpqtynmNwJ = false;
      bool QuHeRneKYR = false;
      bool CBUENSOhNa = false;
      bool PNjXqRasFi = false;
      bool RjNdRqMSNt = false;
      bool FWrJhuUmge = false;
      bool YFzVsDLinz = false;
      bool MkFpzRmqmV = false;
      bool FwUSVrVZpu = false;
      bool wnMZJMkrjN = false;
      bool fdeNgTRBJP = false;
      bool HcAKZcjfzA = false;
      bool hksrDYXffm = false;
      bool guHYpbRHkC = false;
      bool aTQZnSnCAf = false;
      string SKtMUuuAlz;
      string NqxFojuYJF;
      string FQSUfWozby;
      string JDKcdmrMpI;
      string Qhfmxhsght;
      string uCBafCrYgy;
      string GwXmoJfTbC;
      string qihAnXkeXx;
      string dHQhDGCjxa;
      string tSerCUJrym;
      string BYFeCLTAlI;
      string QMBiUyepji;
      string HwWAHXEpyT;
      string NsgjwFCleq;
      string lBxoKhRwXD;
      string oTIPfFBEWe;
      string HdCRtXfQmP;
      string wsLrwGyhpZ;
      string GHStetjREp;
      string DxOAjIyetl;
      if(SKtMUuuAlz == BYFeCLTAlI){CAJHHwHPSY = true;}
      else if(BYFeCLTAlI == SKtMUuuAlz){FWrJhuUmge = true;}
      if(NqxFojuYJF == QMBiUyepji){HSOxXzLImA = true;}
      else if(QMBiUyepji == NqxFojuYJF){YFzVsDLinz = true;}
      if(FQSUfWozby == HwWAHXEpyT){mNMwLyeLIm = true;}
      else if(HwWAHXEpyT == FQSUfWozby){MkFpzRmqmV = true;}
      if(JDKcdmrMpI == NsgjwFCleq){HSnDXFxKmi = true;}
      else if(NsgjwFCleq == JDKcdmrMpI){FwUSVrVZpu = true;}
      if(Qhfmxhsght == lBxoKhRwXD){mUyeijhRbj = true;}
      else if(lBxoKhRwXD == Qhfmxhsght){wnMZJMkrjN = true;}
      if(uCBafCrYgy == oTIPfFBEWe){wpqtynmNwJ = true;}
      else if(oTIPfFBEWe == uCBafCrYgy){fdeNgTRBJP = true;}
      if(GwXmoJfTbC == HdCRtXfQmP){QuHeRneKYR = true;}
      else if(HdCRtXfQmP == GwXmoJfTbC){HcAKZcjfzA = true;}
      if(qihAnXkeXx == wsLrwGyhpZ){CBUENSOhNa = true;}
      if(dHQhDGCjxa == GHStetjREp){PNjXqRasFi = true;}
      if(tSerCUJrym == DxOAjIyetl){RjNdRqMSNt = true;}
      while(wsLrwGyhpZ == qihAnXkeXx){hksrDYXffm = true;}
      while(GHStetjREp == GHStetjREp){guHYpbRHkC = true;}
      while(DxOAjIyetl == DxOAjIyetl){aTQZnSnCAf = true;}
      if(CAJHHwHPSY == true){CAJHHwHPSY = false;}
      if(HSOxXzLImA == true){HSOxXzLImA = false;}
      if(mNMwLyeLIm == true){mNMwLyeLIm = false;}
      if(HSnDXFxKmi == true){HSnDXFxKmi = false;}
      if(mUyeijhRbj == true){mUyeijhRbj = false;}
      if(wpqtynmNwJ == true){wpqtynmNwJ = false;}
      if(QuHeRneKYR == true){QuHeRneKYR = false;}
      if(CBUENSOhNa == true){CBUENSOhNa = false;}
      if(PNjXqRasFi == true){PNjXqRasFi = false;}
      if(RjNdRqMSNt == true){RjNdRqMSNt = false;}
      if(FWrJhuUmge == true){FWrJhuUmge = false;}
      if(YFzVsDLinz == true){YFzVsDLinz = false;}
      if(MkFpzRmqmV == true){MkFpzRmqmV = false;}
      if(FwUSVrVZpu == true){FwUSVrVZpu = false;}
      if(wnMZJMkrjN == true){wnMZJMkrjN = false;}
      if(fdeNgTRBJP == true){fdeNgTRBJP = false;}
      if(HcAKZcjfzA == true){HcAKZcjfzA = false;}
      if(hksrDYXffm == true){hksrDYXffm = false;}
      if(guHYpbRHkC == true){guHYpbRHkC = false;}
      if(aTQZnSnCAf == true){aTQZnSnCAf = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class QHZPCVSZUB
{ 
  void rHQdBaBZYi()
  { 
      bool htERpTVJcP = false;
      bool DppTbWSxlI = false;
      bool LDkPQlPkEE = false;
      bool bDxBtHqJEW = false;
      bool fjMYbYPfpg = false;
      bool qLmGFdInBE = false;
      bool EkFXmzrnZU = false;
      bool eJrPbaqMnq = false;
      bool ViuXNQQqwP = false;
      bool yDHARuenkb = false;
      bool gaGUBgSWde = false;
      bool lwzJhUohKW = false;
      bool iArJWbBrxf = false;
      bool wDaMKucZVg = false;
      bool xsMRdCDySx = false;
      bool FwcNrfhwyZ = false;
      bool eaZyhiUmzm = false;
      bool qPLdZpmaeU = false;
      bool XDZzZzZMTd = false;
      bool MfbuBWSOiu = false;
      string rHWoyTAAQK;
      string ZTBuQlgYkZ;
      string XSscPtutEB;
      string RPhCPOeeBP;
      string CVKCyumeAH;
      string QrqboZOtZE;
      string YGwOrKkzeB;
      string HBWUXBHpdT;
      string GPtwkZXGMo;
      string zkFxqwYuJn;
      string JnzyAOUVEm;
      string RYPFyILzdS;
      string melpCWwZda;
      string bMfoKRPwwV;
      string EBCZWZUzyi;
      string jZRqAeCJud;
      string StrcKFrZuf;
      string rPDHOkbMSb;
      string BwbuqCtone;
      string PGARDJIYOQ;
      if(rHWoyTAAQK == JnzyAOUVEm){htERpTVJcP = true;}
      else if(JnzyAOUVEm == rHWoyTAAQK){gaGUBgSWde = true;}
      if(ZTBuQlgYkZ == RYPFyILzdS){DppTbWSxlI = true;}
      else if(RYPFyILzdS == ZTBuQlgYkZ){lwzJhUohKW = true;}
      if(XSscPtutEB == melpCWwZda){LDkPQlPkEE = true;}
      else if(melpCWwZda == XSscPtutEB){iArJWbBrxf = true;}
      if(RPhCPOeeBP == bMfoKRPwwV){bDxBtHqJEW = true;}
      else if(bMfoKRPwwV == RPhCPOeeBP){wDaMKucZVg = true;}
      if(CVKCyumeAH == EBCZWZUzyi){fjMYbYPfpg = true;}
      else if(EBCZWZUzyi == CVKCyumeAH){xsMRdCDySx = true;}
      if(QrqboZOtZE == jZRqAeCJud){qLmGFdInBE = true;}
      else if(jZRqAeCJud == QrqboZOtZE){FwcNrfhwyZ = true;}
      if(YGwOrKkzeB == StrcKFrZuf){EkFXmzrnZU = true;}
      else if(StrcKFrZuf == YGwOrKkzeB){eaZyhiUmzm = true;}
      if(HBWUXBHpdT == rPDHOkbMSb){eJrPbaqMnq = true;}
      if(GPtwkZXGMo == BwbuqCtone){ViuXNQQqwP = true;}
      if(zkFxqwYuJn == PGARDJIYOQ){yDHARuenkb = true;}
      while(rPDHOkbMSb == HBWUXBHpdT){qPLdZpmaeU = true;}
      while(BwbuqCtone == BwbuqCtone){XDZzZzZMTd = true;}
      while(PGARDJIYOQ == PGARDJIYOQ){MfbuBWSOiu = true;}
      if(htERpTVJcP == true){htERpTVJcP = false;}
      if(DppTbWSxlI == true){DppTbWSxlI = false;}
      if(LDkPQlPkEE == true){LDkPQlPkEE = false;}
      if(bDxBtHqJEW == true){bDxBtHqJEW = false;}
      if(fjMYbYPfpg == true){fjMYbYPfpg = false;}
      if(qLmGFdInBE == true){qLmGFdInBE = false;}
      if(EkFXmzrnZU == true){EkFXmzrnZU = false;}
      if(eJrPbaqMnq == true){eJrPbaqMnq = false;}
      if(ViuXNQQqwP == true){ViuXNQQqwP = false;}
      if(yDHARuenkb == true){yDHARuenkb = false;}
      if(gaGUBgSWde == true){gaGUBgSWde = false;}
      if(lwzJhUohKW == true){lwzJhUohKW = false;}
      if(iArJWbBrxf == true){iArJWbBrxf = false;}
      if(wDaMKucZVg == true){wDaMKucZVg = false;}
      if(xsMRdCDySx == true){xsMRdCDySx = false;}
      if(FwcNrfhwyZ == true){FwcNrfhwyZ = false;}
      if(eaZyhiUmzm == true){eaZyhiUmzm = false;}
      if(qPLdZpmaeU == true){qPLdZpmaeU = false;}
      if(XDZzZzZMTd == true){XDZzZzZMTd = false;}
      if(MfbuBWSOiu == true){MfbuBWSOiu = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class PCYULXILCW
{ 
  void gxYEBFVjtZ()
  { 
      bool hWcgFghrYJ = false;
      bool HOhijuikAI = false;
      bool CNmIDMSbFw = false;
      bool aERMxYKiyy = false;
      bool TneKfowgZc = false;
      bool DqLbWTiTds = false;
      bool NFmciDwVkL = false;
      bool kzlCoNhcbO = false;
      bool PlCcsisopd = false;
      bool opFFkNBCac = false;
      bool rauNrDFJlI = false;
      bool kGqPcbDKjz = false;
      bool JHeHVttfQa = false;
      bool MfBzVopnjo = false;
      bool cjDgriypbI = false;
      bool KqRaSkunqx = false;
      bool JZrKuFErsm = false;
      bool kOZtVZExOm = false;
      bool uDDIQVNZfk = false;
      bool tCwmfDqrll = false;
      string DCjShHaUog;
      string MHIfOTrsQA;
      string rGgcKYKjuz;
      string SibgqBZrYf;
      string WXwqMOpAIz;
      string waaFDxVGHJ;
      string wqYoNdfbnM;
      string szUjcUKpQw;
      string hJbwDrIVdt;
      string fTkPifyHci;
      string iOMuFwFpch;
      string leoKamPckV;
      string UJysfZNFAw;
      string WDMhNTxfpH;
      string lRsuIAdZnw;
      string QUVHNYQSPf;
      string iAofKiSHxG;
      string pimdiDQCkf;
      string umQEfBgETn;
      string DdQKXlbMkY;
      if(DCjShHaUog == iOMuFwFpch){hWcgFghrYJ = true;}
      else if(iOMuFwFpch == DCjShHaUog){rauNrDFJlI = true;}
      if(MHIfOTrsQA == leoKamPckV){HOhijuikAI = true;}
      else if(leoKamPckV == MHIfOTrsQA){kGqPcbDKjz = true;}
      if(rGgcKYKjuz == UJysfZNFAw){CNmIDMSbFw = true;}
      else if(UJysfZNFAw == rGgcKYKjuz){JHeHVttfQa = true;}
      if(SibgqBZrYf == WDMhNTxfpH){aERMxYKiyy = true;}
      else if(WDMhNTxfpH == SibgqBZrYf){MfBzVopnjo = true;}
      if(WXwqMOpAIz == lRsuIAdZnw){TneKfowgZc = true;}
      else if(lRsuIAdZnw == WXwqMOpAIz){cjDgriypbI = true;}
      if(waaFDxVGHJ == QUVHNYQSPf){DqLbWTiTds = true;}
      else if(QUVHNYQSPf == waaFDxVGHJ){KqRaSkunqx = true;}
      if(wqYoNdfbnM == iAofKiSHxG){NFmciDwVkL = true;}
      else if(iAofKiSHxG == wqYoNdfbnM){JZrKuFErsm = true;}
      if(szUjcUKpQw == pimdiDQCkf){kzlCoNhcbO = true;}
      if(hJbwDrIVdt == umQEfBgETn){PlCcsisopd = true;}
      if(fTkPifyHci == DdQKXlbMkY){opFFkNBCac = true;}
      while(pimdiDQCkf == szUjcUKpQw){kOZtVZExOm = true;}
      while(umQEfBgETn == umQEfBgETn){uDDIQVNZfk = true;}
      while(DdQKXlbMkY == DdQKXlbMkY){tCwmfDqrll = true;}
      if(hWcgFghrYJ == true){hWcgFghrYJ = false;}
      if(HOhijuikAI == true){HOhijuikAI = false;}
      if(CNmIDMSbFw == true){CNmIDMSbFw = false;}
      if(aERMxYKiyy == true){aERMxYKiyy = false;}
      if(TneKfowgZc == true){TneKfowgZc = false;}
      if(DqLbWTiTds == true){DqLbWTiTds = false;}
      if(NFmciDwVkL == true){NFmciDwVkL = false;}
      if(kzlCoNhcbO == true){kzlCoNhcbO = false;}
      if(PlCcsisopd == true){PlCcsisopd = false;}
      if(opFFkNBCac == true){opFFkNBCac = false;}
      if(rauNrDFJlI == true){rauNrDFJlI = false;}
      if(kGqPcbDKjz == true){kGqPcbDKjz = false;}
      if(JHeHVttfQa == true){JHeHVttfQa = false;}
      if(MfBzVopnjo == true){MfBzVopnjo = false;}
      if(cjDgriypbI == true){cjDgriypbI = false;}
      if(KqRaSkunqx == true){KqRaSkunqx = false;}
      if(JZrKuFErsm == true){JZrKuFErsm = false;}
      if(kOZtVZExOm == true){kOZtVZExOm = false;}
      if(uDDIQVNZfk == true){uDDIQVNZfk = false;}
      if(tCwmfDqrll == true){tCwmfDqrll = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class UHRFYJAZUR
{ 
  void zyowFPMjCt()
  { 
      bool tzARLmNoUa = false;
      bool DbYuFShEVH = false;
      bool EknHNnJpOE = false;
      bool nOIOrufdPz = false;
      bool NLeGMXdzCD = false;
      bool MOGwiJLsDW = false;
      bool dXaQmoSKCJ = false;
      bool lDoVssGguo = false;
      bool KKnKqYILei = false;
      bool jmarUpkOTW = false;
      bool ETwrQJZjCp = false;
      bool CdyOMTjPYO = false;
      bool fHeTZzcwAD = false;
      bool IrNXkqOwth = false;
      bool yYJofFoLfB = false;
      bool FUoFqxncRQ = false;
      bool gcizgKQZcU = false;
      bool FnUpPHxomU = false;
      bool KQQzxmCHfm = false;
      bool CkedBUpJHV = false;
      string DPAHxOFrUs;
      string jFwfIZcQzp;
      string zRAItVrqOn;
      string sUJmLBASIw;
      string ntLpDPuqJp;
      string OOMnblPrMa;
      string WOdfAOuIUG;
      string YKIDCEFJFe;
      string ZAgXZdIVKY;
      string lIFgYYQfpo;
      string UlWDQEFJlW;
      string fFmhBVhFFW;
      string GZyuTQEbdd;
      string nZTQKmddHV;
      string XyimsgVXeD;
      string qLZThtmaiA;
      string zdeHiFlVXN;
      string qDxjyHpLCm;
      string tgwalbAAhP;
      string zDtHVtTbDm;
      if(DPAHxOFrUs == UlWDQEFJlW){tzARLmNoUa = true;}
      else if(UlWDQEFJlW == DPAHxOFrUs){ETwrQJZjCp = true;}
      if(jFwfIZcQzp == fFmhBVhFFW){DbYuFShEVH = true;}
      else if(fFmhBVhFFW == jFwfIZcQzp){CdyOMTjPYO = true;}
      if(zRAItVrqOn == GZyuTQEbdd){EknHNnJpOE = true;}
      else if(GZyuTQEbdd == zRAItVrqOn){fHeTZzcwAD = true;}
      if(sUJmLBASIw == nZTQKmddHV){nOIOrufdPz = true;}
      else if(nZTQKmddHV == sUJmLBASIw){IrNXkqOwth = true;}
      if(ntLpDPuqJp == XyimsgVXeD){NLeGMXdzCD = true;}
      else if(XyimsgVXeD == ntLpDPuqJp){yYJofFoLfB = true;}
      if(OOMnblPrMa == qLZThtmaiA){MOGwiJLsDW = true;}
      else if(qLZThtmaiA == OOMnblPrMa){FUoFqxncRQ = true;}
      if(WOdfAOuIUG == zdeHiFlVXN){dXaQmoSKCJ = true;}
      else if(zdeHiFlVXN == WOdfAOuIUG){gcizgKQZcU = true;}
      if(YKIDCEFJFe == qDxjyHpLCm){lDoVssGguo = true;}
      if(ZAgXZdIVKY == tgwalbAAhP){KKnKqYILei = true;}
      if(lIFgYYQfpo == zDtHVtTbDm){jmarUpkOTW = true;}
      while(qDxjyHpLCm == YKIDCEFJFe){FnUpPHxomU = true;}
      while(tgwalbAAhP == tgwalbAAhP){KQQzxmCHfm = true;}
      while(zDtHVtTbDm == zDtHVtTbDm){CkedBUpJHV = true;}
      if(tzARLmNoUa == true){tzARLmNoUa = false;}
      if(DbYuFShEVH == true){DbYuFShEVH = false;}
      if(EknHNnJpOE == true){EknHNnJpOE = false;}
      if(nOIOrufdPz == true){nOIOrufdPz = false;}
      if(NLeGMXdzCD == true){NLeGMXdzCD = false;}
      if(MOGwiJLsDW == true){MOGwiJLsDW = false;}
      if(dXaQmoSKCJ == true){dXaQmoSKCJ = false;}
      if(lDoVssGguo == true){lDoVssGguo = false;}
      if(KKnKqYILei == true){KKnKqYILei = false;}
      if(jmarUpkOTW == true){jmarUpkOTW = false;}
      if(ETwrQJZjCp == true){ETwrQJZjCp = false;}
      if(CdyOMTjPYO == true){CdyOMTjPYO = false;}
      if(fHeTZzcwAD == true){fHeTZzcwAD = false;}
      if(IrNXkqOwth == true){IrNXkqOwth = false;}
      if(yYJofFoLfB == true){yYJofFoLfB = false;}
      if(FUoFqxncRQ == true){FUoFqxncRQ = false;}
      if(gcizgKQZcU == true){gcizgKQZcU = false;}
      if(FnUpPHxomU == true){FnUpPHxomU = false;}
      if(KQQzxmCHfm == true){KQQzxmCHfm = false;}
      if(CkedBUpJHV == true){CkedBUpJHV = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class JOKVUWWIKD
{ 
  void LqVYEnikBf()
  { 
      bool lBfgCgDBkh = false;
      bool YRVOyUqHxn = false;
      bool ultnJlNSxm = false;
      bool sIPNwAYids = false;
      bool icBwAGnBwD = false;
      bool CEfjTzGrXQ = false;
      bool SkEyoQBISy = false;
      bool wIdEERkynD = false;
      bool xLVtjobesw = false;
      bool sgKMZyYCGj = false;
      bool EfiyHsZaeC = false;
      bool OIDUTGOJOA = false;
      bool nVPWEPxReG = false;
      bool rhqEyRcXmq = false;
      bool OAAqgjcprS = false;
      bool iOnGuhPLsq = false;
      bool uIwYJfRzVC = false;
      bool dpWXknVXoT = false;
      bool lHYLWctjIQ = false;
      bool BReuuGDbhB = false;
      string VSmaZKjbwF;
      string EMTkONfOXw;
      string trginpejsy;
      string gbLxydUiKl;
      string FLrZWBQDdU;
      string XrGAPdlDmj;
      string fAixXbAVmk;
      string rwEkqizHMl;
      string YaGXaoVLgU;
      string qQuZFFcuBt;
      string AtQrbamUJg;
      string eeqALFsKVi;
      string GnnStbAefk;
      string FDFSldJOwz;
      string CACApLZuOz;
      string LSYSnLGyxA;
      string aHnXbaZYOg;
      string weOWgFlnch;
      string BFPgZmemdZ;
      string XKQuYtLdYP;
      if(VSmaZKjbwF == AtQrbamUJg){lBfgCgDBkh = true;}
      else if(AtQrbamUJg == VSmaZKjbwF){EfiyHsZaeC = true;}
      if(EMTkONfOXw == eeqALFsKVi){YRVOyUqHxn = true;}
      else if(eeqALFsKVi == EMTkONfOXw){OIDUTGOJOA = true;}
      if(trginpejsy == GnnStbAefk){ultnJlNSxm = true;}
      else if(GnnStbAefk == trginpejsy){nVPWEPxReG = true;}
      if(gbLxydUiKl == FDFSldJOwz){sIPNwAYids = true;}
      else if(FDFSldJOwz == gbLxydUiKl){rhqEyRcXmq = true;}
      if(FLrZWBQDdU == CACApLZuOz){icBwAGnBwD = true;}
      else if(CACApLZuOz == FLrZWBQDdU){OAAqgjcprS = true;}
      if(XrGAPdlDmj == LSYSnLGyxA){CEfjTzGrXQ = true;}
      else if(LSYSnLGyxA == XrGAPdlDmj){iOnGuhPLsq = true;}
      if(fAixXbAVmk == aHnXbaZYOg){SkEyoQBISy = true;}
      else if(aHnXbaZYOg == fAixXbAVmk){uIwYJfRzVC = true;}
      if(rwEkqizHMl == weOWgFlnch){wIdEERkynD = true;}
      if(YaGXaoVLgU == BFPgZmemdZ){xLVtjobesw = true;}
      if(qQuZFFcuBt == XKQuYtLdYP){sgKMZyYCGj = true;}
      while(weOWgFlnch == rwEkqizHMl){dpWXknVXoT = true;}
      while(BFPgZmemdZ == BFPgZmemdZ){lHYLWctjIQ = true;}
      while(XKQuYtLdYP == XKQuYtLdYP){BReuuGDbhB = true;}
      if(lBfgCgDBkh == true){lBfgCgDBkh = false;}
      if(YRVOyUqHxn == true){YRVOyUqHxn = false;}
      if(ultnJlNSxm == true){ultnJlNSxm = false;}
      if(sIPNwAYids == true){sIPNwAYids = false;}
      if(icBwAGnBwD == true){icBwAGnBwD = false;}
      if(CEfjTzGrXQ == true){CEfjTzGrXQ = false;}
      if(SkEyoQBISy == true){SkEyoQBISy = false;}
      if(wIdEERkynD == true){wIdEERkynD = false;}
      if(xLVtjobesw == true){xLVtjobesw = false;}
      if(sgKMZyYCGj == true){sgKMZyYCGj = false;}
      if(EfiyHsZaeC == true){EfiyHsZaeC = false;}
      if(OIDUTGOJOA == true){OIDUTGOJOA = false;}
      if(nVPWEPxReG == true){nVPWEPxReG = false;}
      if(rhqEyRcXmq == true){rhqEyRcXmq = false;}
      if(OAAqgjcprS == true){OAAqgjcprS = false;}
      if(iOnGuhPLsq == true){iOnGuhPLsq = false;}
      if(uIwYJfRzVC == true){uIwYJfRzVC = false;}
      if(dpWXknVXoT == true){dpWXknVXoT = false;}
      if(lHYLWctjIQ == true){lHYLWctjIQ = false;}
      if(BReuuGDbhB == true){BReuuGDbhB = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class AMESWSEIQM
{ 
  void ZpiIsFtTMI()
  { 
      bool XELkcThbgB = false;
      bool jfLtyyUxZC = false;
      bool KBzpBqbaJA = false;
      bool QjVuuIxZwT = false;
      bool EzgghhKHEe = false;
      bool eYexeVFVik = false;
      bool rGRfjzKPyp = false;
      bool AuBGxKUSHT = false;
      bool fUVeVrEYPZ = false;
      bool DbqKaxgAwi = false;
      bool XtIOdjXYzU = false;
      bool BlNOFWjmKr = false;
      bool tkzYlYDqeA = false;
      bool cTVYwlLHBk = false;
      bool UeZuYRNbFE = false;
      bool NtpEnltjcE = false;
      bool fftzqhPoSS = false;
      bool KclZXPLEAT = false;
      bool KalalicRjJ = false;
      bool qbdwEnkaEq = false;
      string DKIBpJiIxU;
      string FGTSmYroNi;
      string tCjPbeBKhF;
      string NyieDchssc;
      string LjcWaDBYcE;
      string jnUTAAarYK;
      string HXZrGHWoPJ;
      string pyujWJZMoY;
      string cbgdUZcOeC;
      string CpUiVmJjPS;
      string gMJTNkskwp;
      string aNDAgepwWg;
      string eHKMHAdMOj;
      string AoxVqQSNQj;
      string frRobnlUBp;
      string wNNhnYCwMM;
      string HfVMokQhIQ;
      string McelAmoVkS;
      string NIKYmmaOhR;
      string OVBDcAVFzp;
      if(DKIBpJiIxU == gMJTNkskwp){XELkcThbgB = true;}
      else if(gMJTNkskwp == DKIBpJiIxU){XtIOdjXYzU = true;}
      if(FGTSmYroNi == aNDAgepwWg){jfLtyyUxZC = true;}
      else if(aNDAgepwWg == FGTSmYroNi){BlNOFWjmKr = true;}
      if(tCjPbeBKhF == eHKMHAdMOj){KBzpBqbaJA = true;}
      else if(eHKMHAdMOj == tCjPbeBKhF){tkzYlYDqeA = true;}
      if(NyieDchssc == AoxVqQSNQj){QjVuuIxZwT = true;}
      else if(AoxVqQSNQj == NyieDchssc){cTVYwlLHBk = true;}
      if(LjcWaDBYcE == frRobnlUBp){EzgghhKHEe = true;}
      else if(frRobnlUBp == LjcWaDBYcE){UeZuYRNbFE = true;}
      if(jnUTAAarYK == wNNhnYCwMM){eYexeVFVik = true;}
      else if(wNNhnYCwMM == jnUTAAarYK){NtpEnltjcE = true;}
      if(HXZrGHWoPJ == HfVMokQhIQ){rGRfjzKPyp = true;}
      else if(HfVMokQhIQ == HXZrGHWoPJ){fftzqhPoSS = true;}
      if(pyujWJZMoY == McelAmoVkS){AuBGxKUSHT = true;}
      if(cbgdUZcOeC == NIKYmmaOhR){fUVeVrEYPZ = true;}
      if(CpUiVmJjPS == OVBDcAVFzp){DbqKaxgAwi = true;}
      while(McelAmoVkS == pyujWJZMoY){KclZXPLEAT = true;}
      while(NIKYmmaOhR == NIKYmmaOhR){KalalicRjJ = true;}
      while(OVBDcAVFzp == OVBDcAVFzp){qbdwEnkaEq = true;}
      if(XELkcThbgB == true){XELkcThbgB = false;}
      if(jfLtyyUxZC == true){jfLtyyUxZC = false;}
      if(KBzpBqbaJA == true){KBzpBqbaJA = false;}
      if(QjVuuIxZwT == true){QjVuuIxZwT = false;}
      if(EzgghhKHEe == true){EzgghhKHEe = false;}
      if(eYexeVFVik == true){eYexeVFVik = false;}
      if(rGRfjzKPyp == true){rGRfjzKPyp = false;}
      if(AuBGxKUSHT == true){AuBGxKUSHT = false;}
      if(fUVeVrEYPZ == true){fUVeVrEYPZ = false;}
      if(DbqKaxgAwi == true){DbqKaxgAwi = false;}
      if(XtIOdjXYzU == true){XtIOdjXYzU = false;}
      if(BlNOFWjmKr == true){BlNOFWjmKr = false;}
      if(tkzYlYDqeA == true){tkzYlYDqeA = false;}
      if(cTVYwlLHBk == true){cTVYwlLHBk = false;}
      if(UeZuYRNbFE == true){UeZuYRNbFE = false;}
      if(NtpEnltjcE == true){NtpEnltjcE = false;}
      if(fftzqhPoSS == true){fftzqhPoSS = false;}
      if(KclZXPLEAT == true){KclZXPLEAT = false;}
      if(KalalicRjJ == true){KalalicRjJ = false;}
      if(qbdwEnkaEq == true){qbdwEnkaEq = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class SQMUXIHLNX
{ 
  void gQXpqUYixe()
  { 
      bool dqTlOPGEgh = false;
      bool fPcXQekSXo = false;
      bool pSjuVsHHpg = false;
      bool gYNdoQUumz = false;
      bool qQCdcWRjMk = false;
      bool QGOSDLGXPV = false;
      bool HzNzAHByhz = false;
      bool JofYyYPGSy = false;
      bool bXtFPaJtZc = false;
      bool JweRqrCCcV = false;
      bool VSBNbaapUd = false;
      bool uAFRsjEIjZ = false;
      bool xGYFpNKNgF = false;
      bool WNcwcIWgdo = false;
      bool zTYugIpNYH = false;
      bool msSCXOtwWN = false;
      bool QNIPHhXJnj = false;
      bool NWetadgdXg = false;
      bool WwoYRcuZXN = false;
      bool OZKPXlKJmz = false;
      string coPumpUgGy;
      string UcUIoRPwlm;
      string KyRTHbhQXw;
      string YrgadGiTot;
      string yoMuWayIZC;
      string dFTWAeXwmL;
      string IEIJZbwsdi;
      string iuHqoVkVwg;
      string dZpVSTXJaz;
      string hmgcltfDVt;
      string eEeqThxbhd;
      string sBzGhiOmqF;
      string EmSdAuOdFt;
      string phzCBYtyBj;
      string VwawGfnZuD;
      string erLQprlAqX;
      string TTVmmLCwFI;
      string nPkGiHLWXT;
      string HohCPyViMJ;
      string mtHdQCZmIt;
      if(coPumpUgGy == eEeqThxbhd){dqTlOPGEgh = true;}
      else if(eEeqThxbhd == coPumpUgGy){VSBNbaapUd = true;}
      if(UcUIoRPwlm == sBzGhiOmqF){fPcXQekSXo = true;}
      else if(sBzGhiOmqF == UcUIoRPwlm){uAFRsjEIjZ = true;}
      if(KyRTHbhQXw == EmSdAuOdFt){pSjuVsHHpg = true;}
      else if(EmSdAuOdFt == KyRTHbhQXw){xGYFpNKNgF = true;}
      if(YrgadGiTot == phzCBYtyBj){gYNdoQUumz = true;}
      else if(phzCBYtyBj == YrgadGiTot){WNcwcIWgdo = true;}
      if(yoMuWayIZC == VwawGfnZuD){qQCdcWRjMk = true;}
      else if(VwawGfnZuD == yoMuWayIZC){zTYugIpNYH = true;}
      if(dFTWAeXwmL == erLQprlAqX){QGOSDLGXPV = true;}
      else if(erLQprlAqX == dFTWAeXwmL){msSCXOtwWN = true;}
      if(IEIJZbwsdi == TTVmmLCwFI){HzNzAHByhz = true;}
      else if(TTVmmLCwFI == IEIJZbwsdi){QNIPHhXJnj = true;}
      if(iuHqoVkVwg == nPkGiHLWXT){JofYyYPGSy = true;}
      if(dZpVSTXJaz == HohCPyViMJ){bXtFPaJtZc = true;}
      if(hmgcltfDVt == mtHdQCZmIt){JweRqrCCcV = true;}
      while(nPkGiHLWXT == iuHqoVkVwg){NWetadgdXg = true;}
      while(HohCPyViMJ == HohCPyViMJ){WwoYRcuZXN = true;}
      while(mtHdQCZmIt == mtHdQCZmIt){OZKPXlKJmz = true;}
      if(dqTlOPGEgh == true){dqTlOPGEgh = false;}
      if(fPcXQekSXo == true){fPcXQekSXo = false;}
      if(pSjuVsHHpg == true){pSjuVsHHpg = false;}
      if(gYNdoQUumz == true){gYNdoQUumz = false;}
      if(qQCdcWRjMk == true){qQCdcWRjMk = false;}
      if(QGOSDLGXPV == true){QGOSDLGXPV = false;}
      if(HzNzAHByhz == true){HzNzAHByhz = false;}
      if(JofYyYPGSy == true){JofYyYPGSy = false;}
      if(bXtFPaJtZc == true){bXtFPaJtZc = false;}
      if(JweRqrCCcV == true){JweRqrCCcV = false;}
      if(VSBNbaapUd == true){VSBNbaapUd = false;}
      if(uAFRsjEIjZ == true){uAFRsjEIjZ = false;}
      if(xGYFpNKNgF == true){xGYFpNKNgF = false;}
      if(WNcwcIWgdo == true){WNcwcIWgdo = false;}
      if(zTYugIpNYH == true){zTYugIpNYH = false;}
      if(msSCXOtwWN == true){msSCXOtwWN = false;}
      if(QNIPHhXJnj == true){QNIPHhXJnj = false;}
      if(NWetadgdXg == true){NWetadgdXg = false;}
      if(WwoYRcuZXN == true){WwoYRcuZXN = false;}
      if(OZKPXlKJmz == true){OZKPXlKJmz = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class LYGKZYLBXG
{ 
  void pYslGBOpdP()
  { 
      bool VBNRXJFKWf = false;
      bool WtkUjcQPLx = false;
      bool DYFpFjiOIu = false;
      bool guSHSFRVHS = false;
      bool FKZOMdbkCE = false;
      bool sGZnUxwXLm = false;
      bool apCbzbadCd = false;
      bool LtHsqsypca = false;
      bool IxMECZVdlV = false;
      bool JsJUqPHyPk = false;
      bool DyiXryyfwb = false;
      bool yGtkecdyZY = false;
      bool GxqfURkmBb = false;
      bool kAZrXJNnLD = false;
      bool aogJWDzYpO = false;
      bool kJYqeFGCDZ = false;
      bool NLdUqxfBMU = false;
      bool OolVxQPgIQ = false;
      bool SMwmpabhNR = false;
      bool DKklpPLMSZ = false;
      string YCERFtmiNs;
      string DbVDgsjzFu;
      string EekjFjoYWP;
      string XPfBjHCORD;
      string RydPwGQOQr;
      string xVyrgtRTMU;
      string ENLyUnuTTY;
      string qUgBdFAUnz;
      string TaIeRCQnUp;
      string phBxzDmfuH;
      string KxurAbnxNa;
      string swfNAdFffS;
      string XGychITjBZ;
      string SUZfnWePdp;
      string NSZtxsBnwV;
      string yHAbjEyRJq;
      string IEwnIXWAZd;
      string yoBoEEgEfo;
      string HenfbKUxuj;
      string XNGmgJWllY;
      if(YCERFtmiNs == KxurAbnxNa){VBNRXJFKWf = true;}
      else if(KxurAbnxNa == YCERFtmiNs){DyiXryyfwb = true;}
      if(DbVDgsjzFu == swfNAdFffS){WtkUjcQPLx = true;}
      else if(swfNAdFffS == DbVDgsjzFu){yGtkecdyZY = true;}
      if(EekjFjoYWP == XGychITjBZ){DYFpFjiOIu = true;}
      else if(XGychITjBZ == EekjFjoYWP){GxqfURkmBb = true;}
      if(XPfBjHCORD == SUZfnWePdp){guSHSFRVHS = true;}
      else if(SUZfnWePdp == XPfBjHCORD){kAZrXJNnLD = true;}
      if(RydPwGQOQr == NSZtxsBnwV){FKZOMdbkCE = true;}
      else if(NSZtxsBnwV == RydPwGQOQr){aogJWDzYpO = true;}
      if(xVyrgtRTMU == yHAbjEyRJq){sGZnUxwXLm = true;}
      else if(yHAbjEyRJq == xVyrgtRTMU){kJYqeFGCDZ = true;}
      if(ENLyUnuTTY == IEwnIXWAZd){apCbzbadCd = true;}
      else if(IEwnIXWAZd == ENLyUnuTTY){NLdUqxfBMU = true;}
      if(qUgBdFAUnz == yoBoEEgEfo){LtHsqsypca = true;}
      if(TaIeRCQnUp == HenfbKUxuj){IxMECZVdlV = true;}
      if(phBxzDmfuH == XNGmgJWllY){JsJUqPHyPk = true;}
      while(yoBoEEgEfo == qUgBdFAUnz){OolVxQPgIQ = true;}
      while(HenfbKUxuj == HenfbKUxuj){SMwmpabhNR = true;}
      while(XNGmgJWllY == XNGmgJWllY){DKklpPLMSZ = true;}
      if(VBNRXJFKWf == true){VBNRXJFKWf = false;}
      if(WtkUjcQPLx == true){WtkUjcQPLx = false;}
      if(DYFpFjiOIu == true){DYFpFjiOIu = false;}
      if(guSHSFRVHS == true){guSHSFRVHS = false;}
      if(FKZOMdbkCE == true){FKZOMdbkCE = false;}
      if(sGZnUxwXLm == true){sGZnUxwXLm = false;}
      if(apCbzbadCd == true){apCbzbadCd = false;}
      if(LtHsqsypca == true){LtHsqsypca = false;}
      if(IxMECZVdlV == true){IxMECZVdlV = false;}
      if(JsJUqPHyPk == true){JsJUqPHyPk = false;}
      if(DyiXryyfwb == true){DyiXryyfwb = false;}
      if(yGtkecdyZY == true){yGtkecdyZY = false;}
      if(GxqfURkmBb == true){GxqfURkmBb = false;}
      if(kAZrXJNnLD == true){kAZrXJNnLD = false;}
      if(aogJWDzYpO == true){aogJWDzYpO = false;}
      if(kJYqeFGCDZ == true){kJYqeFGCDZ = false;}
      if(NLdUqxfBMU == true){NLdUqxfBMU = false;}
      if(OolVxQPgIQ == true){OolVxQPgIQ = false;}
      if(SMwmpabhNR == true){SMwmpabhNR = false;}
      if(DKklpPLMSZ == true){DKklpPLMSZ = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class QQSYDHFXIT
{ 
  void LTqaKoOjSO()
  { 
      bool UCaEXIayXd = false;
      bool oNsVQPwdTF = false;
      bool qTAjBRJDHX = false;
      bool GFrsLIVqBZ = false;
      bool ZwmYBGiPCH = false;
      bool rjrWXBBqCG = false;
      bool zXpzWiVzKH = false;
      bool sEcseufbiu = false;
      bool htAAfWMUVJ = false;
      bool HeouaCFnBR = false;
      bool jiEuOmGzrc = false;
      bool VZHGXEWpSz = false;
      bool WBdAANPhSc = false;
      bool orZQKzoFks = false;
      bool PNcsngWhWV = false;
      bool fPUBuiEEtA = false;
      bool WYfOmcAqwY = false;
      bool PQEYjIXkMT = false;
      bool phKwwYWXVa = false;
      bool tkKkVqgNFK = false;
      string ogKVInVRqU;
      string kMUCabFymb;
      string tRkTMlXMIf;
      string imZUhVBgYF;
      string yaCNgbpgnT;
      string jnbTaXwqIW;
      string PIIKlxmAUF;
      string aXZgcSOWlk;
      string uqXowtLFsK;
      string YKYCpoSqbj;
      string npMisMOtpI;
      string IZEWaYkTOq;
      string kgGKfQzWqm;
      string AWuBxEeowj;
      string fQPkBzFBaR;
      string EycjyGjCCb;
      string MqDCHldDZW;
      string tuXeLURVIg;
      string LxuYiBtKCp;
      string UblTWnNMcP;
      if(ogKVInVRqU == npMisMOtpI){UCaEXIayXd = true;}
      else if(npMisMOtpI == ogKVInVRqU){jiEuOmGzrc = true;}
      if(kMUCabFymb == IZEWaYkTOq){oNsVQPwdTF = true;}
      else if(IZEWaYkTOq == kMUCabFymb){VZHGXEWpSz = true;}
      if(tRkTMlXMIf == kgGKfQzWqm){qTAjBRJDHX = true;}
      else if(kgGKfQzWqm == tRkTMlXMIf){WBdAANPhSc = true;}
      if(imZUhVBgYF == AWuBxEeowj){GFrsLIVqBZ = true;}
      else if(AWuBxEeowj == imZUhVBgYF){orZQKzoFks = true;}
      if(yaCNgbpgnT == fQPkBzFBaR){ZwmYBGiPCH = true;}
      else if(fQPkBzFBaR == yaCNgbpgnT){PNcsngWhWV = true;}
      if(jnbTaXwqIW == EycjyGjCCb){rjrWXBBqCG = true;}
      else if(EycjyGjCCb == jnbTaXwqIW){fPUBuiEEtA = true;}
      if(PIIKlxmAUF == MqDCHldDZW){zXpzWiVzKH = true;}
      else if(MqDCHldDZW == PIIKlxmAUF){WYfOmcAqwY = true;}
      if(aXZgcSOWlk == tuXeLURVIg){sEcseufbiu = true;}
      if(uqXowtLFsK == LxuYiBtKCp){htAAfWMUVJ = true;}
      if(YKYCpoSqbj == UblTWnNMcP){HeouaCFnBR = true;}
      while(tuXeLURVIg == aXZgcSOWlk){PQEYjIXkMT = true;}
      while(LxuYiBtKCp == LxuYiBtKCp){phKwwYWXVa = true;}
      while(UblTWnNMcP == UblTWnNMcP){tkKkVqgNFK = true;}
      if(UCaEXIayXd == true){UCaEXIayXd = false;}
      if(oNsVQPwdTF == true){oNsVQPwdTF = false;}
      if(qTAjBRJDHX == true){qTAjBRJDHX = false;}
      if(GFrsLIVqBZ == true){GFrsLIVqBZ = false;}
      if(ZwmYBGiPCH == true){ZwmYBGiPCH = false;}
      if(rjrWXBBqCG == true){rjrWXBBqCG = false;}
      if(zXpzWiVzKH == true){zXpzWiVzKH = false;}
      if(sEcseufbiu == true){sEcseufbiu = false;}
      if(htAAfWMUVJ == true){htAAfWMUVJ = false;}
      if(HeouaCFnBR == true){HeouaCFnBR = false;}
      if(jiEuOmGzrc == true){jiEuOmGzrc = false;}
      if(VZHGXEWpSz == true){VZHGXEWpSz = false;}
      if(WBdAANPhSc == true){WBdAANPhSc = false;}
      if(orZQKzoFks == true){orZQKzoFks = false;}
      if(PNcsngWhWV == true){PNcsngWhWV = false;}
      if(fPUBuiEEtA == true){fPUBuiEEtA = false;}
      if(WYfOmcAqwY == true){WYfOmcAqwY = false;}
      if(PQEYjIXkMT == true){PQEYjIXkMT = false;}
      if(phKwwYWXVa == true){phKwwYWXVa = false;}
      if(tkKkVqgNFK == true){tkKkVqgNFK = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class UKLCMVJCKS
{ 
  void AioULYFrfC()
  { 
      bool gfzgZATurx = false;
      bool iSJcPDAIAS = false;
      bool mqbMImHTym = false;
      bool tqoYdOaeKB = false;
      bool SfxyRXxRWX = false;
      bool CaVawoEmYm = false;
      bool rzxECqdjzB = false;
      bool cUxzzHtctk = false;
      bool ooxZjTVNbn = false;
      bool JmGXIShrwa = false;
      bool sNSUuhcVbo = false;
      bool uarmxDCWUh = false;
      bool UPIKqoNYqf = false;
      bool YBgTqbWbdC = false;
      bool pAllritSaF = false;
      bool QKXNFdFHcG = false;
      bool TEduQttYwU = false;
      bool fZsRrUcVRI = false;
      bool tuylPNdSON = false;
      bool WOyXilVpVy = false;
      string JpgYdOheAY;
      string NCioTzXIEW;
      string qzbdhLtyQy;
      string wZihUeBNpI;
      string auCQWCjtBI;
      string bYuDPJNCpS;
      string TjOBcmSATn;
      string yKRuuuxKHf;
      string bAwIWWdfSL;
      string QzWXopgAnj;
      string iiaMKRGAHT;
      string LDuKqTmFeF;
      string IlhIXzmsGF;
      string OxWWxrYjyF;
      string PdYyzMEMgU;
      string DaUhbwBRnK;
      string dNtCFOfXMz;
      string tDHZpdNiIK;
      string uaMkBmbouA;
      string pGumaCjVsj;
      if(JpgYdOheAY == iiaMKRGAHT){gfzgZATurx = true;}
      else if(iiaMKRGAHT == JpgYdOheAY){sNSUuhcVbo = true;}
      if(NCioTzXIEW == LDuKqTmFeF){iSJcPDAIAS = true;}
      else if(LDuKqTmFeF == NCioTzXIEW){uarmxDCWUh = true;}
      if(qzbdhLtyQy == IlhIXzmsGF){mqbMImHTym = true;}
      else if(IlhIXzmsGF == qzbdhLtyQy){UPIKqoNYqf = true;}
      if(wZihUeBNpI == OxWWxrYjyF){tqoYdOaeKB = true;}
      else if(OxWWxrYjyF == wZihUeBNpI){YBgTqbWbdC = true;}
      if(auCQWCjtBI == PdYyzMEMgU){SfxyRXxRWX = true;}
      else if(PdYyzMEMgU == auCQWCjtBI){pAllritSaF = true;}
      if(bYuDPJNCpS == DaUhbwBRnK){CaVawoEmYm = true;}
      else if(DaUhbwBRnK == bYuDPJNCpS){QKXNFdFHcG = true;}
      if(TjOBcmSATn == dNtCFOfXMz){rzxECqdjzB = true;}
      else if(dNtCFOfXMz == TjOBcmSATn){TEduQttYwU = true;}
      if(yKRuuuxKHf == tDHZpdNiIK){cUxzzHtctk = true;}
      if(bAwIWWdfSL == uaMkBmbouA){ooxZjTVNbn = true;}
      if(QzWXopgAnj == pGumaCjVsj){JmGXIShrwa = true;}
      while(tDHZpdNiIK == yKRuuuxKHf){fZsRrUcVRI = true;}
      while(uaMkBmbouA == uaMkBmbouA){tuylPNdSON = true;}
      while(pGumaCjVsj == pGumaCjVsj){WOyXilVpVy = true;}
      if(gfzgZATurx == true){gfzgZATurx = false;}
      if(iSJcPDAIAS == true){iSJcPDAIAS = false;}
      if(mqbMImHTym == true){mqbMImHTym = false;}
      if(tqoYdOaeKB == true){tqoYdOaeKB = false;}
      if(SfxyRXxRWX == true){SfxyRXxRWX = false;}
      if(CaVawoEmYm == true){CaVawoEmYm = false;}
      if(rzxECqdjzB == true){rzxECqdjzB = false;}
      if(cUxzzHtctk == true){cUxzzHtctk = false;}
      if(ooxZjTVNbn == true){ooxZjTVNbn = false;}
      if(JmGXIShrwa == true){JmGXIShrwa = false;}
      if(sNSUuhcVbo == true){sNSUuhcVbo = false;}
      if(uarmxDCWUh == true){uarmxDCWUh = false;}
      if(UPIKqoNYqf == true){UPIKqoNYqf = false;}
      if(YBgTqbWbdC == true){YBgTqbWbdC = false;}
      if(pAllritSaF == true){pAllritSaF = false;}
      if(QKXNFdFHcG == true){QKXNFdFHcG = false;}
      if(TEduQttYwU == true){TEduQttYwU = false;}
      if(fZsRrUcVRI == true){fZsRrUcVRI = false;}
      if(tuylPNdSON == true){tuylPNdSON = false;}
      if(WOyXilVpVy == true){WOyXilVpVy = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class OYAIHIKALA
{ 
  void gSTkfCjsPF()
  { 
      bool epGzffiCgh = false;
      bool OytRkxMrMB = false;
      bool RiyajlVtAc = false;
      bool xoeaKGjGOB = false;
      bool ENaUZuygul = false;
      bool aQUxauqfPt = false;
      bool KnCEjYTTHe = false;
      bool NGcKwEIcBn = false;
      bool noyNCgUgzP = false;
      bool OEpUqQKWkA = false;
      bool adZQYUmKBW = false;
      bool lOdaGUpoBD = false;
      bool EmUqPJPITf = false;
      bool slrAMJOgnh = false;
      bool sJfccAZOOV = false;
      bool aVUgunJhBP = false;
      bool EdqUczWcNw = false;
      bool GIATJtHqNP = false;
      bool iBtxFXRKFY = false;
      bool zgfYdPSKzd = false;
      string drexkdbDsE;
      string ZsKJUdmSBp;
      string ZoVIxNdZcF;
      string ZkqOCoGMCx;
      string ealxclsOzr;
      string cRwnloVWAW;
      string ACamdoCwGf;
      string WZPDLyCYeK;
      string UOajcHnDbM;
      string TiMfxcAyTn;
      string jxHTUCCsbm;
      string lxrpBlbpKV;
      string AyTtLmNjGh;
      string yEFpZXGGOZ;
      string FuaoaWqWdL;
      string BJnxmlcNHh;
      string oSmsohqBPd;
      string eUakPFWdSo;
      string wqFugnQHDn;
      string tszgjmIgzr;
      if(drexkdbDsE == jxHTUCCsbm){epGzffiCgh = true;}
      else if(jxHTUCCsbm == drexkdbDsE){adZQYUmKBW = true;}
      if(ZsKJUdmSBp == lxrpBlbpKV){OytRkxMrMB = true;}
      else if(lxrpBlbpKV == ZsKJUdmSBp){lOdaGUpoBD = true;}
      if(ZoVIxNdZcF == AyTtLmNjGh){RiyajlVtAc = true;}
      else if(AyTtLmNjGh == ZoVIxNdZcF){EmUqPJPITf = true;}
      if(ZkqOCoGMCx == yEFpZXGGOZ){xoeaKGjGOB = true;}
      else if(yEFpZXGGOZ == ZkqOCoGMCx){slrAMJOgnh = true;}
      if(ealxclsOzr == FuaoaWqWdL){ENaUZuygul = true;}
      else if(FuaoaWqWdL == ealxclsOzr){sJfccAZOOV = true;}
      if(cRwnloVWAW == BJnxmlcNHh){aQUxauqfPt = true;}
      else if(BJnxmlcNHh == cRwnloVWAW){aVUgunJhBP = true;}
      if(ACamdoCwGf == oSmsohqBPd){KnCEjYTTHe = true;}
      else if(oSmsohqBPd == ACamdoCwGf){EdqUczWcNw = true;}
      if(WZPDLyCYeK == eUakPFWdSo){NGcKwEIcBn = true;}
      if(UOajcHnDbM == wqFugnQHDn){noyNCgUgzP = true;}
      if(TiMfxcAyTn == tszgjmIgzr){OEpUqQKWkA = true;}
      while(eUakPFWdSo == WZPDLyCYeK){GIATJtHqNP = true;}
      while(wqFugnQHDn == wqFugnQHDn){iBtxFXRKFY = true;}
      while(tszgjmIgzr == tszgjmIgzr){zgfYdPSKzd = true;}
      if(epGzffiCgh == true){epGzffiCgh = false;}
      if(OytRkxMrMB == true){OytRkxMrMB = false;}
      if(RiyajlVtAc == true){RiyajlVtAc = false;}
      if(xoeaKGjGOB == true){xoeaKGjGOB = false;}
      if(ENaUZuygul == true){ENaUZuygul = false;}
      if(aQUxauqfPt == true){aQUxauqfPt = false;}
      if(KnCEjYTTHe == true){KnCEjYTTHe = false;}
      if(NGcKwEIcBn == true){NGcKwEIcBn = false;}
      if(noyNCgUgzP == true){noyNCgUgzP = false;}
      if(OEpUqQKWkA == true){OEpUqQKWkA = false;}
      if(adZQYUmKBW == true){adZQYUmKBW = false;}
      if(lOdaGUpoBD == true){lOdaGUpoBD = false;}
      if(EmUqPJPITf == true){EmUqPJPITf = false;}
      if(slrAMJOgnh == true){slrAMJOgnh = false;}
      if(sJfccAZOOV == true){sJfccAZOOV = false;}
      if(aVUgunJhBP == true){aVUgunJhBP = false;}
      if(EdqUczWcNw == true){EdqUczWcNw = false;}
      if(GIATJtHqNP == true){GIATJtHqNP = false;}
      if(iBtxFXRKFY == true){iBtxFXRKFY = false;}
      if(zgfYdPSKzd == true){zgfYdPSKzd = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class PUFKKVOVXW
{ 
  void FekLkISmEJ()
  { 
      bool suxPYlRjnl = false;
      bool uwzOUleGWP = false;
      bool jtDZZcSMDR = false;
      bool IiXMzsjPwu = false;
      bool VdmUcHcWtd = false;
      bool ArGYtzqXpu = false;
      bool SFgVdLYmPb = false;
      bool BOKasGHiwR = false;
      bool AuRYRPbzRA = false;
      bool BMZAbQwQpQ = false;
      bool ipGRckhfen = false;
      bool qHbYuXmHDO = false;
      bool jYUPZnoKyb = false;
      bool JpsehKnAwf = false;
      bool hwTdItkAFE = false;
      bool coNbgJUqrn = false;
      bool wWgCdBOwpj = false;
      bool imLWgnEpGf = false;
      bool DnEtyUcRxX = false;
      bool owHHjKOQAG = false;
      string MnhwnDaUQk;
      string OCcALSkOEG;
      string ATWrlWCVqf;
      string WcytlKHiDD;
      string tXslNFwYNP;
      string zwboPrQpKR;
      string BFckNkDiNA;
      string LCLBMcajdg;
      string acHbgaBJdt;
      string tRYkCntIYc;
      string BMKNDxkabl;
      string QfLdqXyADm;
      string itETGtcZyX;
      string hSLAfNSsYj;
      string pahrcNFutd;
      string ptEktHIpHJ;
      string TKbEDyUKyd;
      string FEbTxHMLqr;
      string nhfUgnNaGX;
      string EblPQezcnd;
      if(MnhwnDaUQk == BMKNDxkabl){suxPYlRjnl = true;}
      else if(BMKNDxkabl == MnhwnDaUQk){ipGRckhfen = true;}
      if(OCcALSkOEG == QfLdqXyADm){uwzOUleGWP = true;}
      else if(QfLdqXyADm == OCcALSkOEG){qHbYuXmHDO = true;}
      if(ATWrlWCVqf == itETGtcZyX){jtDZZcSMDR = true;}
      else if(itETGtcZyX == ATWrlWCVqf){jYUPZnoKyb = true;}
      if(WcytlKHiDD == hSLAfNSsYj){IiXMzsjPwu = true;}
      else if(hSLAfNSsYj == WcytlKHiDD){JpsehKnAwf = true;}
      if(tXslNFwYNP == pahrcNFutd){VdmUcHcWtd = true;}
      else if(pahrcNFutd == tXslNFwYNP){hwTdItkAFE = true;}
      if(zwboPrQpKR == ptEktHIpHJ){ArGYtzqXpu = true;}
      else if(ptEktHIpHJ == zwboPrQpKR){coNbgJUqrn = true;}
      if(BFckNkDiNA == TKbEDyUKyd){SFgVdLYmPb = true;}
      else if(TKbEDyUKyd == BFckNkDiNA){wWgCdBOwpj = true;}
      if(LCLBMcajdg == FEbTxHMLqr){BOKasGHiwR = true;}
      if(acHbgaBJdt == nhfUgnNaGX){AuRYRPbzRA = true;}
      if(tRYkCntIYc == EblPQezcnd){BMZAbQwQpQ = true;}
      while(FEbTxHMLqr == LCLBMcajdg){imLWgnEpGf = true;}
      while(nhfUgnNaGX == nhfUgnNaGX){DnEtyUcRxX = true;}
      while(EblPQezcnd == EblPQezcnd){owHHjKOQAG = true;}
      if(suxPYlRjnl == true){suxPYlRjnl = false;}
      if(uwzOUleGWP == true){uwzOUleGWP = false;}
      if(jtDZZcSMDR == true){jtDZZcSMDR = false;}
      if(IiXMzsjPwu == true){IiXMzsjPwu = false;}
      if(VdmUcHcWtd == true){VdmUcHcWtd = false;}
      if(ArGYtzqXpu == true){ArGYtzqXpu = false;}
      if(SFgVdLYmPb == true){SFgVdLYmPb = false;}
      if(BOKasGHiwR == true){BOKasGHiwR = false;}
      if(AuRYRPbzRA == true){AuRYRPbzRA = false;}
      if(BMZAbQwQpQ == true){BMZAbQwQpQ = false;}
      if(ipGRckhfen == true){ipGRckhfen = false;}
      if(qHbYuXmHDO == true){qHbYuXmHDO = false;}
      if(jYUPZnoKyb == true){jYUPZnoKyb = false;}
      if(JpsehKnAwf == true){JpsehKnAwf = false;}
      if(hwTdItkAFE == true){hwTdItkAFE = false;}
      if(coNbgJUqrn == true){coNbgJUqrn = false;}
      if(wWgCdBOwpj == true){wWgCdBOwpj = false;}
      if(imLWgnEpGf == true){imLWgnEpGf = false;}
      if(DnEtyUcRxX == true){DnEtyUcRxX = false;}
      if(owHHjKOQAG == true){owHHjKOQAG = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class MQVLACJWFO
{ 
  void RoWwitqoCn()
  { 
      bool xQzSQuagYK = false;
      bool dwdFoJDmLb = false;
      bool alXmFJqakF = false;
      bool McSVQtnoMw = false;
      bool jJhoIaolmu = false;
      bool qlGrCLrMNG = false;
      bool EAuSxAdHou = false;
      bool UOZOrQEhdd = false;
      bool UEmpOaVaTE = false;
      bool BbaFriOOqI = false;
      bool xgwrZcLqzk = false;
      bool HJhikzMFEW = false;
      bool dDmksrmUWJ = false;
      bool CoqUgnIuPl = false;
      bool OdaixqtrTr = false;
      bool VIKUdssKyh = false;
      bool oqUphRSMBx = false;
      bool pRoSIAbEnB = false;
      bool yuAemteWqm = false;
      bool txwhwWJjBe = false;
      string NPuqSMKzCB;
      string EVpRYSZlxA;
      string QAaACwTepw;
      string WALLqEGBCJ;
      string FSVMczKzsN;
      string jzYSaMntoW;
      string rfIFeDJeZU;
      string MYjmtyeOXC;
      string lUkcMWbsjd;
      string PMLfQYJPhZ;
      string peYYAKPlXb;
      string hZWljXuerH;
      string bQuwEANDVU;
      string oOgyMHuMcC;
      string GoUHwpoYws;
      string ddXZxYjcTA;
      string xLPCmSrYZc;
      string biCpBlumzN;
      string KnHcqKqGAm;
      string XSrbEuYSUc;
      if(NPuqSMKzCB == peYYAKPlXb){xQzSQuagYK = true;}
      else if(peYYAKPlXb == NPuqSMKzCB){xgwrZcLqzk = true;}
      if(EVpRYSZlxA == hZWljXuerH){dwdFoJDmLb = true;}
      else if(hZWljXuerH == EVpRYSZlxA){HJhikzMFEW = true;}
      if(QAaACwTepw == bQuwEANDVU){alXmFJqakF = true;}
      else if(bQuwEANDVU == QAaACwTepw){dDmksrmUWJ = true;}
      if(WALLqEGBCJ == oOgyMHuMcC){McSVQtnoMw = true;}
      else if(oOgyMHuMcC == WALLqEGBCJ){CoqUgnIuPl = true;}
      if(FSVMczKzsN == GoUHwpoYws){jJhoIaolmu = true;}
      else if(GoUHwpoYws == FSVMczKzsN){OdaixqtrTr = true;}
      if(jzYSaMntoW == ddXZxYjcTA){qlGrCLrMNG = true;}
      else if(ddXZxYjcTA == jzYSaMntoW){VIKUdssKyh = true;}
      if(rfIFeDJeZU == xLPCmSrYZc){EAuSxAdHou = true;}
      else if(xLPCmSrYZc == rfIFeDJeZU){oqUphRSMBx = true;}
      if(MYjmtyeOXC == biCpBlumzN){UOZOrQEhdd = true;}
      if(lUkcMWbsjd == KnHcqKqGAm){UEmpOaVaTE = true;}
      if(PMLfQYJPhZ == XSrbEuYSUc){BbaFriOOqI = true;}
      while(biCpBlumzN == MYjmtyeOXC){pRoSIAbEnB = true;}
      while(KnHcqKqGAm == KnHcqKqGAm){yuAemteWqm = true;}
      while(XSrbEuYSUc == XSrbEuYSUc){txwhwWJjBe = true;}
      if(xQzSQuagYK == true){xQzSQuagYK = false;}
      if(dwdFoJDmLb == true){dwdFoJDmLb = false;}
      if(alXmFJqakF == true){alXmFJqakF = false;}
      if(McSVQtnoMw == true){McSVQtnoMw = false;}
      if(jJhoIaolmu == true){jJhoIaolmu = false;}
      if(qlGrCLrMNG == true){qlGrCLrMNG = false;}
      if(EAuSxAdHou == true){EAuSxAdHou = false;}
      if(UOZOrQEhdd == true){UOZOrQEhdd = false;}
      if(UEmpOaVaTE == true){UEmpOaVaTE = false;}
      if(BbaFriOOqI == true){BbaFriOOqI = false;}
      if(xgwrZcLqzk == true){xgwrZcLqzk = false;}
      if(HJhikzMFEW == true){HJhikzMFEW = false;}
      if(dDmksrmUWJ == true){dDmksrmUWJ = false;}
      if(CoqUgnIuPl == true){CoqUgnIuPl = false;}
      if(OdaixqtrTr == true){OdaixqtrTr = false;}
      if(VIKUdssKyh == true){VIKUdssKyh = false;}
      if(oqUphRSMBx == true){oqUphRSMBx = false;}
      if(pRoSIAbEnB == true){pRoSIAbEnB = false;}
      if(yuAemteWqm == true){yuAemteWqm = false;}
      if(txwhwWJjBe == true){txwhwWJjBe = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class GLZWNETERN
{ 
  void wyoWuDVstR()
  { 
      bool DHiZQCGRoY = false;
      bool uXAKPEqaAS = false;
      bool TjHxsCZGqH = false;
      bool hAALkXDZhW = false;
      bool SqwfbulpGN = false;
      bool IqlitSAlgO = false;
      bool czagqtWoYr = false;
      bool AQrczbnbVx = false;
      bool QjAczqORQR = false;
      bool WQrTtTQOoh = false;
      bool YwQNNqyJjS = false;
      bool eYQixsyxgz = false;
      bool fFXHUiYYie = false;
      bool KYmmXTSlPI = false;
      bool sFhxmyAJVB = false;
      bool UThoCTYJsd = false;
      bool SYaEIFkcKc = false;
      bool ZMgYGaWZTV = false;
      bool iPCgKpqxkE = false;
      bool uJsloTdcoh = false;
      string oJNksiBWJn;
      string eRQgrJSsgt;
      string QpgaTXZORx;
      string ZQYcGDywOS;
      string ogIHecJTCG;
      string EHthjybmRU;
      string JlEMONrnao;
      string LVeOFjhZuq;
      string OGMLrRWpsI;
      string aLesJCbwsQ;
      string kUsMtibecz;
      string PCqaGCZsTw;
      string qBuSNzqlFC;
      string HlgeGsNzQJ;
      string oqNsrYUDlG;
      string chbwZiZazu;
      string qpZZqdUMUM;
      string oZbJHAnCZo;
      string emzzZYJkEW;
      string TlAVRzRmBO;
      if(oJNksiBWJn == kUsMtibecz){DHiZQCGRoY = true;}
      else if(kUsMtibecz == oJNksiBWJn){YwQNNqyJjS = true;}
      if(eRQgrJSsgt == PCqaGCZsTw){uXAKPEqaAS = true;}
      else if(PCqaGCZsTw == eRQgrJSsgt){eYQixsyxgz = true;}
      if(QpgaTXZORx == qBuSNzqlFC){TjHxsCZGqH = true;}
      else if(qBuSNzqlFC == QpgaTXZORx){fFXHUiYYie = true;}
      if(ZQYcGDywOS == HlgeGsNzQJ){hAALkXDZhW = true;}
      else if(HlgeGsNzQJ == ZQYcGDywOS){KYmmXTSlPI = true;}
      if(ogIHecJTCG == oqNsrYUDlG){SqwfbulpGN = true;}
      else if(oqNsrYUDlG == ogIHecJTCG){sFhxmyAJVB = true;}
      if(EHthjybmRU == chbwZiZazu){IqlitSAlgO = true;}
      else if(chbwZiZazu == EHthjybmRU){UThoCTYJsd = true;}
      if(JlEMONrnao == qpZZqdUMUM){czagqtWoYr = true;}
      else if(qpZZqdUMUM == JlEMONrnao){SYaEIFkcKc = true;}
      if(LVeOFjhZuq == oZbJHAnCZo){AQrczbnbVx = true;}
      if(OGMLrRWpsI == emzzZYJkEW){QjAczqORQR = true;}
      if(aLesJCbwsQ == TlAVRzRmBO){WQrTtTQOoh = true;}
      while(oZbJHAnCZo == LVeOFjhZuq){ZMgYGaWZTV = true;}
      while(emzzZYJkEW == emzzZYJkEW){iPCgKpqxkE = true;}
      while(TlAVRzRmBO == TlAVRzRmBO){uJsloTdcoh = true;}
      if(DHiZQCGRoY == true){DHiZQCGRoY = false;}
      if(uXAKPEqaAS == true){uXAKPEqaAS = false;}
      if(TjHxsCZGqH == true){TjHxsCZGqH = false;}
      if(hAALkXDZhW == true){hAALkXDZhW = false;}
      if(SqwfbulpGN == true){SqwfbulpGN = false;}
      if(IqlitSAlgO == true){IqlitSAlgO = false;}
      if(czagqtWoYr == true){czagqtWoYr = false;}
      if(AQrczbnbVx == true){AQrczbnbVx = false;}
      if(QjAczqORQR == true){QjAczqORQR = false;}
      if(WQrTtTQOoh == true){WQrTtTQOoh = false;}
      if(YwQNNqyJjS == true){YwQNNqyJjS = false;}
      if(eYQixsyxgz == true){eYQixsyxgz = false;}
      if(fFXHUiYYie == true){fFXHUiYYie = false;}
      if(KYmmXTSlPI == true){KYmmXTSlPI = false;}
      if(sFhxmyAJVB == true){sFhxmyAJVB = false;}
      if(UThoCTYJsd == true){UThoCTYJsd = false;}
      if(SYaEIFkcKc == true){SYaEIFkcKc = false;}
      if(ZMgYGaWZTV == true){ZMgYGaWZTV = false;}
      if(iPCgKpqxkE == true){iPCgKpqxkE = false;}
      if(uJsloTdcoh == true){uJsloTdcoh = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class VXTLKYDFPT
{ 
  void wmhBdBJxcw()
  { 
      bool qkbWYTKsyO = false;
      bool RqswPxslnQ = false;
      bool stFiXpTHGE = false;
      bool OFXeWnDRWL = false;
      bool yuwfyEIfLk = false;
      bool KoEwewerzi = false;
      bool zCltzMTNZb = false;
      bool sbPbRxxZkS = false;
      bool gmwVsYAaAZ = false;
      bool IKRnMwICfk = false;
      bool kuGjqiZbdg = false;
      bool zFHgBLGPAZ = false;
      bool LrNzShJbPV = false;
      bool otszhlgLeJ = false;
      bool zYwSaDDklA = false;
      bool prBFYrgHQI = false;
      bool YyMIrELIyO = false;
      bool etkpamwtYP = false;
      bool eXoOewsnZo = false;
      bool EYuVkAMmZV = false;
      string tHfPxQonAg;
      string hfrjluTWWX;
      string TkJWZaXNSC;
      string hZpyRUwAGA;
      string bSfDPQxVVz;
      string FeSMeIxJpW;
      string raVxzIosRR;
      string ySQVwBEGHI;
      string cCqSxCGdSJ;
      string WmJjHAxhEH;
      string bDEEBlOwQd;
      string DqBgspjCAw;
      string BLZItLIfNw;
      string DWCAgZxmRL;
      string mKMnFflcqR;
      string QthHFQcwKo;
      string cihTZgoAAT;
      string rwjoIqylDN;
      string ZfowfJnttQ;
      string wBcbhEbsNX;
      if(tHfPxQonAg == bDEEBlOwQd){qkbWYTKsyO = true;}
      else if(bDEEBlOwQd == tHfPxQonAg){kuGjqiZbdg = true;}
      if(hfrjluTWWX == DqBgspjCAw){RqswPxslnQ = true;}
      else if(DqBgspjCAw == hfrjluTWWX){zFHgBLGPAZ = true;}
      if(TkJWZaXNSC == BLZItLIfNw){stFiXpTHGE = true;}
      else if(BLZItLIfNw == TkJWZaXNSC){LrNzShJbPV = true;}
      if(hZpyRUwAGA == DWCAgZxmRL){OFXeWnDRWL = true;}
      else if(DWCAgZxmRL == hZpyRUwAGA){otszhlgLeJ = true;}
      if(bSfDPQxVVz == mKMnFflcqR){yuwfyEIfLk = true;}
      else if(mKMnFflcqR == bSfDPQxVVz){zYwSaDDklA = true;}
      if(FeSMeIxJpW == QthHFQcwKo){KoEwewerzi = true;}
      else if(QthHFQcwKo == FeSMeIxJpW){prBFYrgHQI = true;}
      if(raVxzIosRR == cihTZgoAAT){zCltzMTNZb = true;}
      else if(cihTZgoAAT == raVxzIosRR){YyMIrELIyO = true;}
      if(ySQVwBEGHI == rwjoIqylDN){sbPbRxxZkS = true;}
      if(cCqSxCGdSJ == ZfowfJnttQ){gmwVsYAaAZ = true;}
      if(WmJjHAxhEH == wBcbhEbsNX){IKRnMwICfk = true;}
      while(rwjoIqylDN == ySQVwBEGHI){etkpamwtYP = true;}
      while(ZfowfJnttQ == ZfowfJnttQ){eXoOewsnZo = true;}
      while(wBcbhEbsNX == wBcbhEbsNX){EYuVkAMmZV = true;}
      if(qkbWYTKsyO == true){qkbWYTKsyO = false;}
      if(RqswPxslnQ == true){RqswPxslnQ = false;}
      if(stFiXpTHGE == true){stFiXpTHGE = false;}
      if(OFXeWnDRWL == true){OFXeWnDRWL = false;}
      if(yuwfyEIfLk == true){yuwfyEIfLk = false;}
      if(KoEwewerzi == true){KoEwewerzi = false;}
      if(zCltzMTNZb == true){zCltzMTNZb = false;}
      if(sbPbRxxZkS == true){sbPbRxxZkS = false;}
      if(gmwVsYAaAZ == true){gmwVsYAaAZ = false;}
      if(IKRnMwICfk == true){IKRnMwICfk = false;}
      if(kuGjqiZbdg == true){kuGjqiZbdg = false;}
      if(zFHgBLGPAZ == true){zFHgBLGPAZ = false;}
      if(LrNzShJbPV == true){LrNzShJbPV = false;}
      if(otszhlgLeJ == true){otszhlgLeJ = false;}
      if(zYwSaDDklA == true){zYwSaDDklA = false;}
      if(prBFYrgHQI == true){prBFYrgHQI = false;}
      if(YyMIrELIyO == true){YyMIrELIyO = false;}
      if(etkpamwtYP == true){etkpamwtYP = false;}
      if(eXoOewsnZo == true){eXoOewsnZo = false;}
      if(EYuVkAMmZV == true){EYuVkAMmZV = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class WOWVJZZTHQ
{ 
  void sEMxtpWnsK()
  { 
      bool lGUyoLFxGj = false;
      bool qFMLihgOBZ = false;
      bool DoCFpUtZCr = false;
      bool VsEVjVAGqx = false;
      bool lXiIKEYWwG = false;
      bool oxEoWxDPHT = false;
      bool RfuNOyApbN = false;
      bool haXEmfGstl = false;
      bool wWduDYnPym = false;
      bool RkzWeGbUtM = false;
      bool DhuiYOYABq = false;
      bool pKUUXtBAKo = false;
      bool JkrowxaAYg = false;
      bool ElyhiObuWn = false;
      bool znNHwGPdzk = false;
      bool EbJFCRoFma = false;
      bool mXaUmEMmlI = false;
      bool RGcWoVXkro = false;
      bool gxBmbbbrfR = false;
      bool YWIuAaMrUr = false;
      string KUdulsmdNx;
      string wGnhzdJQZB;
      string oqXztppFFe;
      string ZbRjBEofdA;
      string SeHRcufnRb;
      string hbxqfSwdAu;
      string DhXhWUoEgu;
      string ndlZhKiGVz;
      string KCmcxyeZDi;
      string HKeixjGZtI;
      string FaHVnDoXIV;
      string ipIBjBttkY;
      string oPBxmdzDby;
      string DJLMsjtRos;
      string IHQgAQBcyw;
      string oLoVSpZJhK;
      string EluKRYeuIA;
      string GcFqPhyTxW;
      string bVEfIrUosC;
      string JkieoWLFOa;
      if(KUdulsmdNx == FaHVnDoXIV){lGUyoLFxGj = true;}
      else if(FaHVnDoXIV == KUdulsmdNx){DhuiYOYABq = true;}
      if(wGnhzdJQZB == ipIBjBttkY){qFMLihgOBZ = true;}
      else if(ipIBjBttkY == wGnhzdJQZB){pKUUXtBAKo = true;}
      if(oqXztppFFe == oPBxmdzDby){DoCFpUtZCr = true;}
      else if(oPBxmdzDby == oqXztppFFe){JkrowxaAYg = true;}
      if(ZbRjBEofdA == DJLMsjtRos){VsEVjVAGqx = true;}
      else if(DJLMsjtRos == ZbRjBEofdA){ElyhiObuWn = true;}
      if(SeHRcufnRb == IHQgAQBcyw){lXiIKEYWwG = true;}
      else if(IHQgAQBcyw == SeHRcufnRb){znNHwGPdzk = true;}
      if(hbxqfSwdAu == oLoVSpZJhK){oxEoWxDPHT = true;}
      else if(oLoVSpZJhK == hbxqfSwdAu){EbJFCRoFma = true;}
      if(DhXhWUoEgu == EluKRYeuIA){RfuNOyApbN = true;}
      else if(EluKRYeuIA == DhXhWUoEgu){mXaUmEMmlI = true;}
      if(ndlZhKiGVz == GcFqPhyTxW){haXEmfGstl = true;}
      if(KCmcxyeZDi == bVEfIrUosC){wWduDYnPym = true;}
      if(HKeixjGZtI == JkieoWLFOa){RkzWeGbUtM = true;}
      while(GcFqPhyTxW == ndlZhKiGVz){RGcWoVXkro = true;}
      while(bVEfIrUosC == bVEfIrUosC){gxBmbbbrfR = true;}
      while(JkieoWLFOa == JkieoWLFOa){YWIuAaMrUr = true;}
      if(lGUyoLFxGj == true){lGUyoLFxGj = false;}
      if(qFMLihgOBZ == true){qFMLihgOBZ = false;}
      if(DoCFpUtZCr == true){DoCFpUtZCr = false;}
      if(VsEVjVAGqx == true){VsEVjVAGqx = false;}
      if(lXiIKEYWwG == true){lXiIKEYWwG = false;}
      if(oxEoWxDPHT == true){oxEoWxDPHT = false;}
      if(RfuNOyApbN == true){RfuNOyApbN = false;}
      if(haXEmfGstl == true){haXEmfGstl = false;}
      if(wWduDYnPym == true){wWduDYnPym = false;}
      if(RkzWeGbUtM == true){RkzWeGbUtM = false;}
      if(DhuiYOYABq == true){DhuiYOYABq = false;}
      if(pKUUXtBAKo == true){pKUUXtBAKo = false;}
      if(JkrowxaAYg == true){JkrowxaAYg = false;}
      if(ElyhiObuWn == true){ElyhiObuWn = false;}
      if(znNHwGPdzk == true){znNHwGPdzk = false;}
      if(EbJFCRoFma == true){EbJFCRoFma = false;}
      if(mXaUmEMmlI == true){mXaUmEMmlI = false;}
      if(RGcWoVXkro == true){RGcWoVXkro = false;}
      if(gxBmbbbrfR == true){gxBmbbbrfR = false;}
      if(YWIuAaMrUr == true){YWIuAaMrUr = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class NJAXDBHCYK
{ 
  void sROoGHuZHS()
  { 
      bool VwwsfEtJZL = false;
      bool lidSnrNbnu = false;
      bool rELGgRXAuh = false;
      bool WHPGnWayoP = false;
      bool BhfcVsHdiH = false;
      bool QdbuMQkpMN = false;
      bool ftNrodTXeQ = false;
      bool ROlXtJYhjm = false;
      bool KtRmRreTsW = false;
      bool kjlbjHUnnq = false;
      bool ZjyRpBqEBD = false;
      bool rCFYClbaZw = false;
      bool yzdHfgcKnl = false;
      bool ojtsMZuAwP = false;
      bool BaSpeieMYx = false;
      bool esNqrZGqlJ = false;
      bool XgPOOHIMMc = false;
      bool qbdJuWgnbw = false;
      bool CQkpGuWCAl = false;
      bool TENmrUKDaX = false;
      string uVjrxcgbDq;
      string SQSmtsJnjc;
      string PAoHsReqTf;
      string LetjPRCmMN;
      string MdmNIZQMwP;
      string SbYTstfbyf;
      string xpHXemVhWb;
      string qVbVQkMbyT;
      string BRtEMiGaqV;
      string kZogPVVPhV;
      string DhpTYwACDH;
      string gEcddfuDKu;
      string guqAqQgtFt;
      string OxscQTbZeP;
      string iDXjogwKDj;
      string ZSElnIpocI;
      string PFxIrjLANJ;
      string EVXuMcWHLJ;
      string TWqUUwrGnH;
      string clxWAdGPqE;
      if(uVjrxcgbDq == DhpTYwACDH){VwwsfEtJZL = true;}
      else if(DhpTYwACDH == uVjrxcgbDq){ZjyRpBqEBD = true;}
      if(SQSmtsJnjc == gEcddfuDKu){lidSnrNbnu = true;}
      else if(gEcddfuDKu == SQSmtsJnjc){rCFYClbaZw = true;}
      if(PAoHsReqTf == guqAqQgtFt){rELGgRXAuh = true;}
      else if(guqAqQgtFt == PAoHsReqTf){yzdHfgcKnl = true;}
      if(LetjPRCmMN == OxscQTbZeP){WHPGnWayoP = true;}
      else if(OxscQTbZeP == LetjPRCmMN){ojtsMZuAwP = true;}
      if(MdmNIZQMwP == iDXjogwKDj){BhfcVsHdiH = true;}
      else if(iDXjogwKDj == MdmNIZQMwP){BaSpeieMYx = true;}
      if(SbYTstfbyf == ZSElnIpocI){QdbuMQkpMN = true;}
      else if(ZSElnIpocI == SbYTstfbyf){esNqrZGqlJ = true;}
      if(xpHXemVhWb == PFxIrjLANJ){ftNrodTXeQ = true;}
      else if(PFxIrjLANJ == xpHXemVhWb){XgPOOHIMMc = true;}
      if(qVbVQkMbyT == EVXuMcWHLJ){ROlXtJYhjm = true;}
      if(BRtEMiGaqV == TWqUUwrGnH){KtRmRreTsW = true;}
      if(kZogPVVPhV == clxWAdGPqE){kjlbjHUnnq = true;}
      while(EVXuMcWHLJ == qVbVQkMbyT){qbdJuWgnbw = true;}
      while(TWqUUwrGnH == TWqUUwrGnH){CQkpGuWCAl = true;}
      while(clxWAdGPqE == clxWAdGPqE){TENmrUKDaX = true;}
      if(VwwsfEtJZL == true){VwwsfEtJZL = false;}
      if(lidSnrNbnu == true){lidSnrNbnu = false;}
      if(rELGgRXAuh == true){rELGgRXAuh = false;}
      if(WHPGnWayoP == true){WHPGnWayoP = false;}
      if(BhfcVsHdiH == true){BhfcVsHdiH = false;}
      if(QdbuMQkpMN == true){QdbuMQkpMN = false;}
      if(ftNrodTXeQ == true){ftNrodTXeQ = false;}
      if(ROlXtJYhjm == true){ROlXtJYhjm = false;}
      if(KtRmRreTsW == true){KtRmRreTsW = false;}
      if(kjlbjHUnnq == true){kjlbjHUnnq = false;}
      if(ZjyRpBqEBD == true){ZjyRpBqEBD = false;}
      if(rCFYClbaZw == true){rCFYClbaZw = false;}
      if(yzdHfgcKnl == true){yzdHfgcKnl = false;}
      if(ojtsMZuAwP == true){ojtsMZuAwP = false;}
      if(BaSpeieMYx == true){BaSpeieMYx = false;}
      if(esNqrZGqlJ == true){esNqrZGqlJ = false;}
      if(XgPOOHIMMc == true){XgPOOHIMMc = false;}
      if(qbdJuWgnbw == true){qbdJuWgnbw = false;}
      if(CQkpGuWCAl == true){CQkpGuWCAl = false;}
      if(TENmrUKDaX == true){TENmrUKDaX = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class WVBCQYBFEK
{ 
  void NQzzDOGJKL()
  { 
      bool rLnVzYIVtT = false;
      bool hMqCtBhXcW = false;
      bool QNNlKTjrcF = false;
      bool UclQMTkgCS = false;
      bool yAgSanxQOr = false;
      bool sKVUqdyBKe = false;
      bool nQsnzFaaoZ = false;
      bool QBVKXPguKW = false;
      bool VSckMJHQYh = false;
      bool ViVWehHrSV = false;
      bool MWbnaqoLwa = false;
      bool xCqnIUmHbo = false;
      bool yJBGEgeyfp = false;
      bool HoboJzqoJV = false;
      bool UwUxkSrhNJ = false;
      bool tAQdXDUUjs = false;
      bool LqeFTIaBeJ = false;
      bool cyxFUBoDVk = false;
      bool oxjVuHYxRF = false;
      bool eWEQJdQOdc = false;
      string joCfUAhXzI;
      string chrUDtExOo;
      string ygXtnjtejB;
      string eSbcBpesXe;
      string LjgzxMEDHh;
      string wuVSKDQIrk;
      string GCnxcKFPSM;
      string OLYjcOzYxa;
      string fpWCFiwJRy;
      string ZWBmYIwjVl;
      string GnkuSkWlow;
      string DrKQEPfkqt;
      string OwyTmrJkLU;
      string RPCKUqFbjU;
      string MJTUugLjiI;
      string cKrbXKpQHZ;
      string akaUdmoAwM;
      string JEBWgEbcYF;
      string fYCCqHWalJ;
      string BoTJsaizqH;
      if(joCfUAhXzI == GnkuSkWlow){rLnVzYIVtT = true;}
      else if(GnkuSkWlow == joCfUAhXzI){MWbnaqoLwa = true;}
      if(chrUDtExOo == DrKQEPfkqt){hMqCtBhXcW = true;}
      else if(DrKQEPfkqt == chrUDtExOo){xCqnIUmHbo = true;}
      if(ygXtnjtejB == OwyTmrJkLU){QNNlKTjrcF = true;}
      else if(OwyTmrJkLU == ygXtnjtejB){yJBGEgeyfp = true;}
      if(eSbcBpesXe == RPCKUqFbjU){UclQMTkgCS = true;}
      else if(RPCKUqFbjU == eSbcBpesXe){HoboJzqoJV = true;}
      if(LjgzxMEDHh == MJTUugLjiI){yAgSanxQOr = true;}
      else if(MJTUugLjiI == LjgzxMEDHh){UwUxkSrhNJ = true;}
      if(wuVSKDQIrk == cKrbXKpQHZ){sKVUqdyBKe = true;}
      else if(cKrbXKpQHZ == wuVSKDQIrk){tAQdXDUUjs = true;}
      if(GCnxcKFPSM == akaUdmoAwM){nQsnzFaaoZ = true;}
      else if(akaUdmoAwM == GCnxcKFPSM){LqeFTIaBeJ = true;}
      if(OLYjcOzYxa == JEBWgEbcYF){QBVKXPguKW = true;}
      if(fpWCFiwJRy == fYCCqHWalJ){VSckMJHQYh = true;}
      if(ZWBmYIwjVl == BoTJsaizqH){ViVWehHrSV = true;}
      while(JEBWgEbcYF == OLYjcOzYxa){cyxFUBoDVk = true;}
      while(fYCCqHWalJ == fYCCqHWalJ){oxjVuHYxRF = true;}
      while(BoTJsaizqH == BoTJsaizqH){eWEQJdQOdc = true;}
      if(rLnVzYIVtT == true){rLnVzYIVtT = false;}
      if(hMqCtBhXcW == true){hMqCtBhXcW = false;}
      if(QNNlKTjrcF == true){QNNlKTjrcF = false;}
      if(UclQMTkgCS == true){UclQMTkgCS = false;}
      if(yAgSanxQOr == true){yAgSanxQOr = false;}
      if(sKVUqdyBKe == true){sKVUqdyBKe = false;}
      if(nQsnzFaaoZ == true){nQsnzFaaoZ = false;}
      if(QBVKXPguKW == true){QBVKXPguKW = false;}
      if(VSckMJHQYh == true){VSckMJHQYh = false;}
      if(ViVWehHrSV == true){ViVWehHrSV = false;}
      if(MWbnaqoLwa == true){MWbnaqoLwa = false;}
      if(xCqnIUmHbo == true){xCqnIUmHbo = false;}
      if(yJBGEgeyfp == true){yJBGEgeyfp = false;}
      if(HoboJzqoJV == true){HoboJzqoJV = false;}
      if(UwUxkSrhNJ == true){UwUxkSrhNJ = false;}
      if(tAQdXDUUjs == true){tAQdXDUUjs = false;}
      if(LqeFTIaBeJ == true){LqeFTIaBeJ = false;}
      if(cyxFUBoDVk == true){cyxFUBoDVk = false;}
      if(oxjVuHYxRF == true){oxjVuHYxRF = false;}
      if(eWEQJdQOdc == true){eWEQJdQOdc = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class YRTDABTLPC
{ 
  void VOdnDAUKtl()
  { 
      bool rVxrLDPcUt = false;
      bool BulOxnapXV = false;
      bool XingmwTbjM = false;
      bool BbdiRGyVoz = false;
      bool yugFjltAnt = false;
      bool UNCgMJgPFP = false;
      bool imrHrYRCwq = false;
      bool pEAYXcCixA = false;
      bool BTmprnYxVI = false;
      bool YhQYPKCYNK = false;
      bool UqDxDPMdIj = false;
      bool GySENPzBPE = false;
      bool ATgmRHnbJM = false;
      bool ZcVmeKPplb = false;
      bool auokBaPLKA = false;
      bool LBJIJBJPew = false;
      bool bkTuKdcfYD = false;
      bool zJOmcEeulq = false;
      bool rbQIBYTMcd = false;
      bool AzKpAoasZX = false;
      string ptMjerWbmr;
      string YwSzuVKFwd;
      string CcaZdonxZo;
      string sxajGNjcjF;
      string gGdXaefxwz;
      string bnWKWMTlGp;
      string DYBxzaUhsh;
      string kgVpwuzDzy;
      string JpBaMEaPNs;
      string sxWtBIEfXz;
      string JxENNtRfOa;
      string NPmHfNWaku;
      string AEUznmKbon;
      string qSezoLknMR;
      string ltBmfdKONn;
      string lcuczEcFYa;
      string jpqZjuknRU;
      string biNSIFDgTK;
      string cuOBCNXBzk;
      string hfOlhwDaDj;
      if(ptMjerWbmr == JxENNtRfOa){rVxrLDPcUt = true;}
      else if(JxENNtRfOa == ptMjerWbmr){UqDxDPMdIj = true;}
      if(YwSzuVKFwd == NPmHfNWaku){BulOxnapXV = true;}
      else if(NPmHfNWaku == YwSzuVKFwd){GySENPzBPE = true;}
      if(CcaZdonxZo == AEUznmKbon){XingmwTbjM = true;}
      else if(AEUznmKbon == CcaZdonxZo){ATgmRHnbJM = true;}
      if(sxajGNjcjF == qSezoLknMR){BbdiRGyVoz = true;}
      else if(qSezoLknMR == sxajGNjcjF){ZcVmeKPplb = true;}
      if(gGdXaefxwz == ltBmfdKONn){yugFjltAnt = true;}
      else if(ltBmfdKONn == gGdXaefxwz){auokBaPLKA = true;}
      if(bnWKWMTlGp == lcuczEcFYa){UNCgMJgPFP = true;}
      else if(lcuczEcFYa == bnWKWMTlGp){LBJIJBJPew = true;}
      if(DYBxzaUhsh == jpqZjuknRU){imrHrYRCwq = true;}
      else if(jpqZjuknRU == DYBxzaUhsh){bkTuKdcfYD = true;}
      if(kgVpwuzDzy == biNSIFDgTK){pEAYXcCixA = true;}
      if(JpBaMEaPNs == cuOBCNXBzk){BTmprnYxVI = true;}
      if(sxWtBIEfXz == hfOlhwDaDj){YhQYPKCYNK = true;}
      while(biNSIFDgTK == kgVpwuzDzy){zJOmcEeulq = true;}
      while(cuOBCNXBzk == cuOBCNXBzk){rbQIBYTMcd = true;}
      while(hfOlhwDaDj == hfOlhwDaDj){AzKpAoasZX = true;}
      if(rVxrLDPcUt == true){rVxrLDPcUt = false;}
      if(BulOxnapXV == true){BulOxnapXV = false;}
      if(XingmwTbjM == true){XingmwTbjM = false;}
      if(BbdiRGyVoz == true){BbdiRGyVoz = false;}
      if(yugFjltAnt == true){yugFjltAnt = false;}
      if(UNCgMJgPFP == true){UNCgMJgPFP = false;}
      if(imrHrYRCwq == true){imrHrYRCwq = false;}
      if(pEAYXcCixA == true){pEAYXcCixA = false;}
      if(BTmprnYxVI == true){BTmprnYxVI = false;}
      if(YhQYPKCYNK == true){YhQYPKCYNK = false;}
      if(UqDxDPMdIj == true){UqDxDPMdIj = false;}
      if(GySENPzBPE == true){GySENPzBPE = false;}
      if(ATgmRHnbJM == true){ATgmRHnbJM = false;}
      if(ZcVmeKPplb == true){ZcVmeKPplb = false;}
      if(auokBaPLKA == true){auokBaPLKA = false;}
      if(LBJIJBJPew == true){LBJIJBJPew = false;}
      if(bkTuKdcfYD == true){bkTuKdcfYD = false;}
      if(zJOmcEeulq == true){zJOmcEeulq = false;}
      if(rbQIBYTMcd == true){rbQIBYTMcd = false;}
      if(AzKpAoasZX == true){AzKpAoasZX = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class XCWWPZORTL
{ 
  void dRaKpmUfSC()
  { 
      bool UeaFkFHpos = false;
      bool bDhJCxEkyx = false;
      bool ULqiEdeLSF = false;
      bool YMbzVIAAMc = false;
      bool NpyYixrABz = false;
      bool tsfBmJmqBG = false;
      bool ZuWjTPbimt = false;
      bool xDYVidNSAG = false;
      bool leKSKffaLM = false;
      bool VIzGCSSNET = false;
      bool VJMHCqUKRI = false;
      bool wUquUukDYn = false;
      bool iAWaYnERSQ = false;
      bool KzNfjbRDQT = false;
      bool LVICPBQEkH = false;
      bool gPoQjVllhN = false;
      bool mCqBxxGLKr = false;
      bool cgmFcNrUKW = false;
      bool XzgLiuKwuO = false;
      bool pfUCgJdGES = false;
      string LTwiklJAgf;
      string PewagISAIg;
      string ouytExrqZF;
      string eMCXMVQZkG;
      string LKSIRAtUVK;
      string OrZfrPVCdn;
      string tSZbADbXNL;
      string qrOBVecocE;
      string CXUOqmlWew;
      string AOuxMrjpHN;
      string YWGKTVcXKN;
      string mfYZlVyLkN;
      string QErQKcxRnc;
      string tlgOefQJuU;
      string JNMRJToVLp;
      string tYFswTdpAp;
      string YKigSBzKtF;
      string FoQPEDraHp;
      string maGyhVfmSL;
      string BaJEwydeyI;
      if(LTwiklJAgf == YWGKTVcXKN){UeaFkFHpos = true;}
      else if(YWGKTVcXKN == LTwiklJAgf){VJMHCqUKRI = true;}
      if(PewagISAIg == mfYZlVyLkN){bDhJCxEkyx = true;}
      else if(mfYZlVyLkN == PewagISAIg){wUquUukDYn = true;}
      if(ouytExrqZF == QErQKcxRnc){ULqiEdeLSF = true;}
      else if(QErQKcxRnc == ouytExrqZF){iAWaYnERSQ = true;}
      if(eMCXMVQZkG == tlgOefQJuU){YMbzVIAAMc = true;}
      else if(tlgOefQJuU == eMCXMVQZkG){KzNfjbRDQT = true;}
      if(LKSIRAtUVK == JNMRJToVLp){NpyYixrABz = true;}
      else if(JNMRJToVLp == LKSIRAtUVK){LVICPBQEkH = true;}
      if(OrZfrPVCdn == tYFswTdpAp){tsfBmJmqBG = true;}
      else if(tYFswTdpAp == OrZfrPVCdn){gPoQjVllhN = true;}
      if(tSZbADbXNL == YKigSBzKtF){ZuWjTPbimt = true;}
      else if(YKigSBzKtF == tSZbADbXNL){mCqBxxGLKr = true;}
      if(qrOBVecocE == FoQPEDraHp){xDYVidNSAG = true;}
      if(CXUOqmlWew == maGyhVfmSL){leKSKffaLM = true;}
      if(AOuxMrjpHN == BaJEwydeyI){VIzGCSSNET = true;}
      while(FoQPEDraHp == qrOBVecocE){cgmFcNrUKW = true;}
      while(maGyhVfmSL == maGyhVfmSL){XzgLiuKwuO = true;}
      while(BaJEwydeyI == BaJEwydeyI){pfUCgJdGES = true;}
      if(UeaFkFHpos == true){UeaFkFHpos = false;}
      if(bDhJCxEkyx == true){bDhJCxEkyx = false;}
      if(ULqiEdeLSF == true){ULqiEdeLSF = false;}
      if(YMbzVIAAMc == true){YMbzVIAAMc = false;}
      if(NpyYixrABz == true){NpyYixrABz = false;}
      if(tsfBmJmqBG == true){tsfBmJmqBG = false;}
      if(ZuWjTPbimt == true){ZuWjTPbimt = false;}
      if(xDYVidNSAG == true){xDYVidNSAG = false;}
      if(leKSKffaLM == true){leKSKffaLM = false;}
      if(VIzGCSSNET == true){VIzGCSSNET = false;}
      if(VJMHCqUKRI == true){VJMHCqUKRI = false;}
      if(wUquUukDYn == true){wUquUukDYn = false;}
      if(iAWaYnERSQ == true){iAWaYnERSQ = false;}
      if(KzNfjbRDQT == true){KzNfjbRDQT = false;}
      if(LVICPBQEkH == true){LVICPBQEkH = false;}
      if(gPoQjVllhN == true){gPoQjVllhN = false;}
      if(mCqBxxGLKr == true){mCqBxxGLKr = false;}
      if(cgmFcNrUKW == true){cgmFcNrUKW = false;}
      if(XzgLiuKwuO == true){XzgLiuKwuO = false;}
      if(pfUCgJdGES == true){pfUCgJdGES = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class DSSDFPQLIL
{ 
  void HyCCbgQlKA()
  { 
      bool NerwhAJEGU = false;
      bool HYoEAsKXYH = false;
      bool FlpTSnFHWJ = false;
      bool EKujAcJfVC = false;
      bool tFjxByOUBg = false;
      bool UMkNaboYcs = false;
      bool tBgwQwcFEW = false;
      bool jdCVMABrSU = false;
      bool ZkGoorZgIY = false;
      bool njCbHrXngF = false;
      bool UIPdxpJPBZ = false;
      bool ZwFISJurHY = false;
      bool VwwfizbaNT = false;
      bool cNLMzRUbry = false;
      bool hKfiyqetIy = false;
      bool xffIiYLjtx = false;
      bool OiBgxMjsJB = false;
      bool nSzJpLQNgr = false;
      bool UgROWxgDda = false;
      bool FkhuizIykl = false;
      string RUuwJNghVB;
      string CFYPPWaAQc;
      string lJRVMEgtuO;
      string ahyKeHzTuI;
      string pacdgqDEed;
      string ZGOztHCZjE;
      string flmHaUGOkI;
      string WGFHmKfnnV;
      string BcORnTSyQX;
      string EZjpcDnUCL;
      string jnSWGSBGLi;
      string aOkNDCXUTH;
      string BHyMExWOdj;
      string WLlckMJrLV;
      string RMlgwpnVla;
      string fSBuJboGSJ;
      string ulbbLPbIcp;
      string reJxooUQQN;
      string IBbDDEJpSI;
      string WDYBaekJVg;
      if(RUuwJNghVB == jnSWGSBGLi){NerwhAJEGU = true;}
      else if(jnSWGSBGLi == RUuwJNghVB){UIPdxpJPBZ = true;}
      if(CFYPPWaAQc == aOkNDCXUTH){HYoEAsKXYH = true;}
      else if(aOkNDCXUTH == CFYPPWaAQc){ZwFISJurHY = true;}
      if(lJRVMEgtuO == BHyMExWOdj){FlpTSnFHWJ = true;}
      else if(BHyMExWOdj == lJRVMEgtuO){VwwfizbaNT = true;}
      if(ahyKeHzTuI == WLlckMJrLV){EKujAcJfVC = true;}
      else if(WLlckMJrLV == ahyKeHzTuI){cNLMzRUbry = true;}
      if(pacdgqDEed == RMlgwpnVla){tFjxByOUBg = true;}
      else if(RMlgwpnVla == pacdgqDEed){hKfiyqetIy = true;}
      if(ZGOztHCZjE == fSBuJboGSJ){UMkNaboYcs = true;}
      else if(fSBuJboGSJ == ZGOztHCZjE){xffIiYLjtx = true;}
      if(flmHaUGOkI == ulbbLPbIcp){tBgwQwcFEW = true;}
      else if(ulbbLPbIcp == flmHaUGOkI){OiBgxMjsJB = true;}
      if(WGFHmKfnnV == reJxooUQQN){jdCVMABrSU = true;}
      if(BcORnTSyQX == IBbDDEJpSI){ZkGoorZgIY = true;}
      if(EZjpcDnUCL == WDYBaekJVg){njCbHrXngF = true;}
      while(reJxooUQQN == WGFHmKfnnV){nSzJpLQNgr = true;}
      while(IBbDDEJpSI == IBbDDEJpSI){UgROWxgDda = true;}
      while(WDYBaekJVg == WDYBaekJVg){FkhuizIykl = true;}
      if(NerwhAJEGU == true){NerwhAJEGU = false;}
      if(HYoEAsKXYH == true){HYoEAsKXYH = false;}
      if(FlpTSnFHWJ == true){FlpTSnFHWJ = false;}
      if(EKujAcJfVC == true){EKujAcJfVC = false;}
      if(tFjxByOUBg == true){tFjxByOUBg = false;}
      if(UMkNaboYcs == true){UMkNaboYcs = false;}
      if(tBgwQwcFEW == true){tBgwQwcFEW = false;}
      if(jdCVMABrSU == true){jdCVMABrSU = false;}
      if(ZkGoorZgIY == true){ZkGoorZgIY = false;}
      if(njCbHrXngF == true){njCbHrXngF = false;}
      if(UIPdxpJPBZ == true){UIPdxpJPBZ = false;}
      if(ZwFISJurHY == true){ZwFISJurHY = false;}
      if(VwwfizbaNT == true){VwwfizbaNT = false;}
      if(cNLMzRUbry == true){cNLMzRUbry = false;}
      if(hKfiyqetIy == true){hKfiyqetIy = false;}
      if(xffIiYLjtx == true){xffIiYLjtx = false;}
      if(OiBgxMjsJB == true){OiBgxMjsJB = false;}
      if(nSzJpLQNgr == true){nSzJpLQNgr = false;}
      if(UgROWxgDda == true){UgROWxgDda = false;}
      if(FkhuizIykl == true){FkhuizIykl = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class QUHIZJZPYO
{ 
  void ALTotWCcjl()
  { 
      bool blYFuEKJqQ = false;
      bool NLZhRAqcmC = false;
      bool UzqExgFBzC = false;
      bool ofJDntesmp = false;
      bool zASHtMyNVl = false;
      bool fjCwMctTIO = false;
      bool zIJobgBWsX = false;
      bool VxpwCTgjKj = false;
      bool hrfNVFdMpL = false;
      bool zKkXpqqcfM = false;
      bool KbTxPitGts = false;
      bool uKJXgHcuSV = false;
      bool DofhXLMRFL = false;
      bool bDExZFXhxm = false;
      bool KWSwPnAMqi = false;
      bool NwKJIVulYE = false;
      bool VcAhRrGMya = false;
      bool iuxeLfVjRj = false;
      bool KzZWxfstnD = false;
      bool JlIsQhWkeX = false;
      string mRfdQeKjdf;
      string honKKEEyxs;
      string wVCgAXxTrO;
      string NmpkPlKViX;
      string qOoWrdqEYa;
      string chTjDRPyds;
      string hpqPSuzCuX;
      string thPYBgfeoW;
      string fruRkfSFhx;
      string VLropBXZEw;
      string dnIAgtRthV;
      string kkJGNouYdm;
      string bsUxCipaiA;
      string IGassrjtkq;
      string NYWLMkClbA;
      string FywQUjTKyx;
      string EpLhMeJPNV;
      string FBnlYDVIkQ;
      string fDzhtKKJYI;
      string XYummWNozh;
      if(mRfdQeKjdf == dnIAgtRthV){blYFuEKJqQ = true;}
      else if(dnIAgtRthV == mRfdQeKjdf){KbTxPitGts = true;}
      if(honKKEEyxs == kkJGNouYdm){NLZhRAqcmC = true;}
      else if(kkJGNouYdm == honKKEEyxs){uKJXgHcuSV = true;}
      if(wVCgAXxTrO == bsUxCipaiA){UzqExgFBzC = true;}
      else if(bsUxCipaiA == wVCgAXxTrO){DofhXLMRFL = true;}
      if(NmpkPlKViX == IGassrjtkq){ofJDntesmp = true;}
      else if(IGassrjtkq == NmpkPlKViX){bDExZFXhxm = true;}
      if(qOoWrdqEYa == NYWLMkClbA){zASHtMyNVl = true;}
      else if(NYWLMkClbA == qOoWrdqEYa){KWSwPnAMqi = true;}
      if(chTjDRPyds == FywQUjTKyx){fjCwMctTIO = true;}
      else if(FywQUjTKyx == chTjDRPyds){NwKJIVulYE = true;}
      if(hpqPSuzCuX == EpLhMeJPNV){zIJobgBWsX = true;}
      else if(EpLhMeJPNV == hpqPSuzCuX){VcAhRrGMya = true;}
      if(thPYBgfeoW == FBnlYDVIkQ){VxpwCTgjKj = true;}
      if(fruRkfSFhx == fDzhtKKJYI){hrfNVFdMpL = true;}
      if(VLropBXZEw == XYummWNozh){zKkXpqqcfM = true;}
      while(FBnlYDVIkQ == thPYBgfeoW){iuxeLfVjRj = true;}
      while(fDzhtKKJYI == fDzhtKKJYI){KzZWxfstnD = true;}
      while(XYummWNozh == XYummWNozh){JlIsQhWkeX = true;}
      if(blYFuEKJqQ == true){blYFuEKJqQ = false;}
      if(NLZhRAqcmC == true){NLZhRAqcmC = false;}
      if(UzqExgFBzC == true){UzqExgFBzC = false;}
      if(ofJDntesmp == true){ofJDntesmp = false;}
      if(zASHtMyNVl == true){zASHtMyNVl = false;}
      if(fjCwMctTIO == true){fjCwMctTIO = false;}
      if(zIJobgBWsX == true){zIJobgBWsX = false;}
      if(VxpwCTgjKj == true){VxpwCTgjKj = false;}
      if(hrfNVFdMpL == true){hrfNVFdMpL = false;}
      if(zKkXpqqcfM == true){zKkXpqqcfM = false;}
      if(KbTxPitGts == true){KbTxPitGts = false;}
      if(uKJXgHcuSV == true){uKJXgHcuSV = false;}
      if(DofhXLMRFL == true){DofhXLMRFL = false;}
      if(bDExZFXhxm == true){bDExZFXhxm = false;}
      if(KWSwPnAMqi == true){KWSwPnAMqi = false;}
      if(NwKJIVulYE == true){NwKJIVulYE = false;}
      if(VcAhRrGMya == true){VcAhRrGMya = false;}
      if(iuxeLfVjRj == true){iuxeLfVjRj = false;}
      if(KzZWxfstnD == true){KzZWxfstnD = false;}
      if(JlIsQhWkeX == true){JlIsQhWkeX = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class HMOSIJGDGT
{ 
  void tndwSWHWro()
  { 
      bool jZUKfskXdF = false;
      bool cEeCXdAExS = false;
      bool XpMTTOdyer = false;
      bool yuhAPBMfNm = false;
      bool liIKFOmmGY = false;
      bool xcEiZsNBqQ = false;
      bool OlskHgVemV = false;
      bool QTpJgohBNE = false;
      bool aprFtUqyZV = false;
      bool nKoxXzpWDX = false;
      bool rIAjHcltCj = false;
      bool LLmloXtmpl = false;
      bool pWEQhFeslg = false;
      bool zKypLSpIyQ = false;
      bool iwwoKbXDHz = false;
      bool FCfQhVDjCB = false;
      bool ysIUkAMxZW = false;
      bool hloZDsaPFF = false;
      bool hbllbwdhHp = false;
      bool OGGwSonaEJ = false;
      string oOmGUjCRHx;
      string yVMRFemAZL;
      string ylTEmxDiBh;
      string pwrLWsQARY;
      string snZJCeUBar;
      string DRHpnCuhSX;
      string gTQZGCdBuL;
      string NliASKLKCI;
      string bCHIdYnCWT;
      string yigsrYWACz;
      string ATFPdQhHWd;
      string pkfKudLHuh;
      string NadbNeEoIs;
      string mLHCHIwrdN;
      string qgescNCWyN;
      string MOEUlZodCz;
      string LrzcqeccCm;
      string hTdgqfwkyz;
      string bhqtfXGlQh;
      string SSpeCyhBCy;
      if(oOmGUjCRHx == ATFPdQhHWd){jZUKfskXdF = true;}
      else if(ATFPdQhHWd == oOmGUjCRHx){rIAjHcltCj = true;}
      if(yVMRFemAZL == pkfKudLHuh){cEeCXdAExS = true;}
      else if(pkfKudLHuh == yVMRFemAZL){LLmloXtmpl = true;}
      if(ylTEmxDiBh == NadbNeEoIs){XpMTTOdyer = true;}
      else if(NadbNeEoIs == ylTEmxDiBh){pWEQhFeslg = true;}
      if(pwrLWsQARY == mLHCHIwrdN){yuhAPBMfNm = true;}
      else if(mLHCHIwrdN == pwrLWsQARY){zKypLSpIyQ = true;}
      if(snZJCeUBar == qgescNCWyN){liIKFOmmGY = true;}
      else if(qgescNCWyN == snZJCeUBar){iwwoKbXDHz = true;}
      if(DRHpnCuhSX == MOEUlZodCz){xcEiZsNBqQ = true;}
      else if(MOEUlZodCz == DRHpnCuhSX){FCfQhVDjCB = true;}
      if(gTQZGCdBuL == LrzcqeccCm){OlskHgVemV = true;}
      else if(LrzcqeccCm == gTQZGCdBuL){ysIUkAMxZW = true;}
      if(NliASKLKCI == hTdgqfwkyz){QTpJgohBNE = true;}
      if(bCHIdYnCWT == bhqtfXGlQh){aprFtUqyZV = true;}
      if(yigsrYWACz == SSpeCyhBCy){nKoxXzpWDX = true;}
      while(hTdgqfwkyz == NliASKLKCI){hloZDsaPFF = true;}
      while(bhqtfXGlQh == bhqtfXGlQh){hbllbwdhHp = true;}
      while(SSpeCyhBCy == SSpeCyhBCy){OGGwSonaEJ = true;}
      if(jZUKfskXdF == true){jZUKfskXdF = false;}
      if(cEeCXdAExS == true){cEeCXdAExS = false;}
      if(XpMTTOdyer == true){XpMTTOdyer = false;}
      if(yuhAPBMfNm == true){yuhAPBMfNm = false;}
      if(liIKFOmmGY == true){liIKFOmmGY = false;}
      if(xcEiZsNBqQ == true){xcEiZsNBqQ = false;}
      if(OlskHgVemV == true){OlskHgVemV = false;}
      if(QTpJgohBNE == true){QTpJgohBNE = false;}
      if(aprFtUqyZV == true){aprFtUqyZV = false;}
      if(nKoxXzpWDX == true){nKoxXzpWDX = false;}
      if(rIAjHcltCj == true){rIAjHcltCj = false;}
      if(LLmloXtmpl == true){LLmloXtmpl = false;}
      if(pWEQhFeslg == true){pWEQhFeslg = false;}
      if(zKypLSpIyQ == true){zKypLSpIyQ = false;}
      if(iwwoKbXDHz == true){iwwoKbXDHz = false;}
      if(FCfQhVDjCB == true){FCfQhVDjCB = false;}
      if(ysIUkAMxZW == true){ysIUkAMxZW = false;}
      if(hloZDsaPFF == true){hloZDsaPFF = false;}
      if(hbllbwdhHp == true){hbllbwdhHp = false;}
      if(OGGwSonaEJ == true){OGGwSonaEJ = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class PDSDINKRSJ
{ 
  void pyeirkWJDM()
  { 
      bool DLnbTgkWtW = false;
      bool ECFVdfpLNr = false;
      bool VgHkuJwWGl = false;
      bool XHdHXLSpnN = false;
      bool ntxjcSHHAc = false;
      bool MLWlpWECfJ = false;
      bool kOPIyxYyxS = false;
      bool NAXzEbiWIc = false;
      bool CoVdZMjqRB = false;
      bool GPJdcYdnke = false;
      bool tJJhPMnWhO = false;
      bool mgsDHuslil = false;
      bool MggwLxpsWe = false;
      bool xtlchrenNM = false;
      bool XNJCNZWFVg = false;
      bool frFzSNcNVS = false;
      bool VtzCRruPUP = false;
      bool PEXVNzWdil = false;
      bool ZkXpzEolKU = false;
      bool PRSuqdNGkU = false;
      string kCMnGZsMOt;
      string YKcifEfAqs;
      string RxlneFiPxL;
      string KaWqbwoNtr;
      string jjzWFTEBmP;
      string RbQTNmQXIA;
      string qcODjymkHj;
      string PSGyJhyOhK;
      string BgcgshJDdn;
      string eQEsAGUulH;
      string gTsCAzVRKf;
      string oBpxzKzhJB;
      string njHTFyNMyC;
      string MCcadhmZft;
      string MrrxzcaHtp;
      string HmljTwLZxB;
      string lITISlYOTR;
      string WZBPowqJTb;
      string XGSHuZQrHh;
      string VNceIDXjeM;
      if(kCMnGZsMOt == gTsCAzVRKf){DLnbTgkWtW = true;}
      else if(gTsCAzVRKf == kCMnGZsMOt){tJJhPMnWhO = true;}
      if(YKcifEfAqs == oBpxzKzhJB){ECFVdfpLNr = true;}
      else if(oBpxzKzhJB == YKcifEfAqs){mgsDHuslil = true;}
      if(RxlneFiPxL == njHTFyNMyC){VgHkuJwWGl = true;}
      else if(njHTFyNMyC == RxlneFiPxL){MggwLxpsWe = true;}
      if(KaWqbwoNtr == MCcadhmZft){XHdHXLSpnN = true;}
      else if(MCcadhmZft == KaWqbwoNtr){xtlchrenNM = true;}
      if(jjzWFTEBmP == MrrxzcaHtp){ntxjcSHHAc = true;}
      else if(MrrxzcaHtp == jjzWFTEBmP){XNJCNZWFVg = true;}
      if(RbQTNmQXIA == HmljTwLZxB){MLWlpWECfJ = true;}
      else if(HmljTwLZxB == RbQTNmQXIA){frFzSNcNVS = true;}
      if(qcODjymkHj == lITISlYOTR){kOPIyxYyxS = true;}
      else if(lITISlYOTR == qcODjymkHj){VtzCRruPUP = true;}
      if(PSGyJhyOhK == WZBPowqJTb){NAXzEbiWIc = true;}
      if(BgcgshJDdn == XGSHuZQrHh){CoVdZMjqRB = true;}
      if(eQEsAGUulH == VNceIDXjeM){GPJdcYdnke = true;}
      while(WZBPowqJTb == PSGyJhyOhK){PEXVNzWdil = true;}
      while(XGSHuZQrHh == XGSHuZQrHh){ZkXpzEolKU = true;}
      while(VNceIDXjeM == VNceIDXjeM){PRSuqdNGkU = true;}
      if(DLnbTgkWtW == true){DLnbTgkWtW = false;}
      if(ECFVdfpLNr == true){ECFVdfpLNr = false;}
      if(VgHkuJwWGl == true){VgHkuJwWGl = false;}
      if(XHdHXLSpnN == true){XHdHXLSpnN = false;}
      if(ntxjcSHHAc == true){ntxjcSHHAc = false;}
      if(MLWlpWECfJ == true){MLWlpWECfJ = false;}
      if(kOPIyxYyxS == true){kOPIyxYyxS = false;}
      if(NAXzEbiWIc == true){NAXzEbiWIc = false;}
      if(CoVdZMjqRB == true){CoVdZMjqRB = false;}
      if(GPJdcYdnke == true){GPJdcYdnke = false;}
      if(tJJhPMnWhO == true){tJJhPMnWhO = false;}
      if(mgsDHuslil == true){mgsDHuslil = false;}
      if(MggwLxpsWe == true){MggwLxpsWe = false;}
      if(xtlchrenNM == true){xtlchrenNM = false;}
      if(XNJCNZWFVg == true){XNJCNZWFVg = false;}
      if(frFzSNcNVS == true){frFzSNcNVS = false;}
      if(VtzCRruPUP == true){VtzCRruPUP = false;}
      if(PEXVNzWdil == true){PEXVNzWdil = false;}
      if(ZkXpzEolKU == true){ZkXpzEolKU = false;}
      if(PRSuqdNGkU == true){PRSuqdNGkU = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class SZYRACHNAZ
{ 
  void DBGJjCbHer()
  { 
      bool VJrxdPiOma = false;
      bool xDsaQlqJyb = false;
      bool PIwetWBNbB = false;
      bool RmCnAYLEgr = false;
      bool IjImrVlhGp = false;
      bool pJhiqNMNCH = false;
      bool OUllJKBFZr = false;
      bool ZmcGSezJlY = false;
      bool jTHkKHESxm = false;
      bool LyBYdmxWch = false;
      bool TgHOQDgbPL = false;
      bool NDbdWtNBaB = false;
      bool FiHmfalDbe = false;
      bool hbfEEDLsUG = false;
      bool acCkYIWWCi = false;
      bool ZwubbjYUho = false;
      bool RczkdkWXYS = false;
      bool iUfUabgWNX = false;
      bool EOBrFkgEbT = false;
      bool eqKeoxcRHm = false;
      string nrhBicEUrm;
      string khlCHUHkik;
      string tAYgrUmlnr;
      string rHufnPJzpq;
      string JHqaRKRQlO;
      string QGFRSnTBJN;
      string pRgAudlGOr;
      string LHuramIxOg;
      string CVAZblCdMz;
      string uHpbAraqfn;
      string YLCsDILMpf;
      string eVlcKURGXJ;
      string aHtOwDRSqi;
      string LRRaHqSGVS;
      string ZonfTZUNQf;
      string aTSVMRRnxz;
      string prVHTNDKUT;
      string BKkEikTNtW;
      string iEBLIryuOp;
      string ZeIWchTgLG;
      if(nrhBicEUrm == YLCsDILMpf){VJrxdPiOma = true;}
      else if(YLCsDILMpf == nrhBicEUrm){TgHOQDgbPL = true;}
      if(khlCHUHkik == eVlcKURGXJ){xDsaQlqJyb = true;}
      else if(eVlcKURGXJ == khlCHUHkik){NDbdWtNBaB = true;}
      if(tAYgrUmlnr == aHtOwDRSqi){PIwetWBNbB = true;}
      else if(aHtOwDRSqi == tAYgrUmlnr){FiHmfalDbe = true;}
      if(rHufnPJzpq == LRRaHqSGVS){RmCnAYLEgr = true;}
      else if(LRRaHqSGVS == rHufnPJzpq){hbfEEDLsUG = true;}
      if(JHqaRKRQlO == ZonfTZUNQf){IjImrVlhGp = true;}
      else if(ZonfTZUNQf == JHqaRKRQlO){acCkYIWWCi = true;}
      if(QGFRSnTBJN == aTSVMRRnxz){pJhiqNMNCH = true;}
      else if(aTSVMRRnxz == QGFRSnTBJN){ZwubbjYUho = true;}
      if(pRgAudlGOr == prVHTNDKUT){OUllJKBFZr = true;}
      else if(prVHTNDKUT == pRgAudlGOr){RczkdkWXYS = true;}
      if(LHuramIxOg == BKkEikTNtW){ZmcGSezJlY = true;}
      if(CVAZblCdMz == iEBLIryuOp){jTHkKHESxm = true;}
      if(uHpbAraqfn == ZeIWchTgLG){LyBYdmxWch = true;}
      while(BKkEikTNtW == LHuramIxOg){iUfUabgWNX = true;}
      while(iEBLIryuOp == iEBLIryuOp){EOBrFkgEbT = true;}
      while(ZeIWchTgLG == ZeIWchTgLG){eqKeoxcRHm = true;}
      if(VJrxdPiOma == true){VJrxdPiOma = false;}
      if(xDsaQlqJyb == true){xDsaQlqJyb = false;}
      if(PIwetWBNbB == true){PIwetWBNbB = false;}
      if(RmCnAYLEgr == true){RmCnAYLEgr = false;}
      if(IjImrVlhGp == true){IjImrVlhGp = false;}
      if(pJhiqNMNCH == true){pJhiqNMNCH = false;}
      if(OUllJKBFZr == true){OUllJKBFZr = false;}
      if(ZmcGSezJlY == true){ZmcGSezJlY = false;}
      if(jTHkKHESxm == true){jTHkKHESxm = false;}
      if(LyBYdmxWch == true){LyBYdmxWch = false;}
      if(TgHOQDgbPL == true){TgHOQDgbPL = false;}
      if(NDbdWtNBaB == true){NDbdWtNBaB = false;}
      if(FiHmfalDbe == true){FiHmfalDbe = false;}
      if(hbfEEDLsUG == true){hbfEEDLsUG = false;}
      if(acCkYIWWCi == true){acCkYIWWCi = false;}
      if(ZwubbjYUho == true){ZwubbjYUho = false;}
      if(RczkdkWXYS == true){RczkdkWXYS = false;}
      if(iUfUabgWNX == true){iUfUabgWNX = false;}
      if(EOBrFkgEbT == true){EOBrFkgEbT = false;}
      if(eqKeoxcRHm == true){eqKeoxcRHm = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class UBXARZIULU
{ 
  void TMrNigkpac()
  { 
      bool oYgVfLgtUi = false;
      bool CNNDPmYiIT = false;
      bool yNiIrAiToK = false;
      bool CaGcLMenma = false;
      bool bfUUbxIAlg = false;
      bool qoqrybpXde = false;
      bool cNEKfaGkrD = false;
      bool IjwhqRrNgt = false;
      bool qhgHTNiOei = false;
      bool VGKHxNaJoA = false;
      bool pXIhXGsJAf = false;
      bool ibqimtgxqS = false;
      bool rrFIgCZnkd = false;
      bool piXfDSZyiM = false;
      bool TZNzAtOaUC = false;
      bool gdSVHySABV = false;
      bool fEXWoAEKfT = false;
      bool UhNdyRdGHm = false;
      bool mzThwMPBXF = false;
      bool AZxMfOBqJA = false;
      string fBZRfVYjtX;
      string gqxEtGKxVY;
      string tRKsNFsZJT;
      string jeoLlVuRtN;
      string sDHGPDZAUI;
      string VUfMfNqfEZ;
      string bzZamBBlSX;
      string KrDIepKDdJ;
      string esEAxPzceX;
      string eONTlscgSN;
      string BmhwxdRXgp;
      string CmCtuhtZcX;
      string CXHtrweiVk;
      string MdjPHqKHDT;
      string yawoUrLSYD;
      string yDDuKdfmEA;
      string zhBucYCmlD;
      string XmVJZbbSZA;
      string kLJSlJZoEd;
      string LWDCUPYALw;
      if(fBZRfVYjtX == BmhwxdRXgp){oYgVfLgtUi = true;}
      else if(BmhwxdRXgp == fBZRfVYjtX){pXIhXGsJAf = true;}
      if(gqxEtGKxVY == CmCtuhtZcX){CNNDPmYiIT = true;}
      else if(CmCtuhtZcX == gqxEtGKxVY){ibqimtgxqS = true;}
      if(tRKsNFsZJT == CXHtrweiVk){yNiIrAiToK = true;}
      else if(CXHtrweiVk == tRKsNFsZJT){rrFIgCZnkd = true;}
      if(jeoLlVuRtN == MdjPHqKHDT){CaGcLMenma = true;}
      else if(MdjPHqKHDT == jeoLlVuRtN){piXfDSZyiM = true;}
      if(sDHGPDZAUI == yawoUrLSYD){bfUUbxIAlg = true;}
      else if(yawoUrLSYD == sDHGPDZAUI){TZNzAtOaUC = true;}
      if(VUfMfNqfEZ == yDDuKdfmEA){qoqrybpXde = true;}
      else if(yDDuKdfmEA == VUfMfNqfEZ){gdSVHySABV = true;}
      if(bzZamBBlSX == zhBucYCmlD){cNEKfaGkrD = true;}
      else if(zhBucYCmlD == bzZamBBlSX){fEXWoAEKfT = true;}
      if(KrDIepKDdJ == XmVJZbbSZA){IjwhqRrNgt = true;}
      if(esEAxPzceX == kLJSlJZoEd){qhgHTNiOei = true;}
      if(eONTlscgSN == LWDCUPYALw){VGKHxNaJoA = true;}
      while(XmVJZbbSZA == KrDIepKDdJ){UhNdyRdGHm = true;}
      while(kLJSlJZoEd == kLJSlJZoEd){mzThwMPBXF = true;}
      while(LWDCUPYALw == LWDCUPYALw){AZxMfOBqJA = true;}
      if(oYgVfLgtUi == true){oYgVfLgtUi = false;}
      if(CNNDPmYiIT == true){CNNDPmYiIT = false;}
      if(yNiIrAiToK == true){yNiIrAiToK = false;}
      if(CaGcLMenma == true){CaGcLMenma = false;}
      if(bfUUbxIAlg == true){bfUUbxIAlg = false;}
      if(qoqrybpXde == true){qoqrybpXde = false;}
      if(cNEKfaGkrD == true){cNEKfaGkrD = false;}
      if(IjwhqRrNgt == true){IjwhqRrNgt = false;}
      if(qhgHTNiOei == true){qhgHTNiOei = false;}
      if(VGKHxNaJoA == true){VGKHxNaJoA = false;}
      if(pXIhXGsJAf == true){pXIhXGsJAf = false;}
      if(ibqimtgxqS == true){ibqimtgxqS = false;}
      if(rrFIgCZnkd == true){rrFIgCZnkd = false;}
      if(piXfDSZyiM == true){piXfDSZyiM = false;}
      if(TZNzAtOaUC == true){TZNzAtOaUC = false;}
      if(gdSVHySABV == true){gdSVHySABV = false;}
      if(fEXWoAEKfT == true){fEXWoAEKfT = false;}
      if(UhNdyRdGHm == true){UhNdyRdGHm = false;}
      if(mzThwMPBXF == true){mzThwMPBXF = false;}
      if(AZxMfOBqJA == true){AZxMfOBqJA = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class OBHIGALLTV
{ 
  void rhlhjraYtJ()
  { 
      bool nDcDpNHNyl = false;
      bool wzLpoZigyG = false;
      bool wSdabAXUbO = false;
      bool oJoTWkLZKN = false;
      bool WIlrEeQese = false;
      bool DmDDBVYCbp = false;
      bool omlixmJqTD = false;
      bool OIVjinflWw = false;
      bool isbwKBGlSB = false;
      bool MIyUYjVCuR = false;
      bool UYLoQtQSTM = false;
      bool omfeGwKoXw = false;
      bool fXYSpFKBLz = false;
      bool RdpEbJgleP = false;
      bool jmSFLZcSNb = false;
      bool YgeykxAryL = false;
      bool jOHUuLwaDx = false;
      bool OYJILsESGQ = false;
      bool bqniZkzrTe = false;
      bool InmTfUeyKA = false;
      string VQSHAGnfEj;
      string jNqQfRVkYJ;
      string BeqARpGCXa;
      string hXsVmBRhDD;
      string GiWESOQoef;
      string xgVKwpYSoJ;
      string AlHcCLUVdd;
      string AngVCSIlhD;
      string YRWrcABiZw;
      string cyrtCUasCG;
      string suKBfJAAHc;
      string glkljiOPzC;
      string KlwgABumSh;
      string qPjaJdGVLT;
      string ABawPpMGJS;
      string GLsAuHzdAd;
      string OMgZlRCJcG;
      string csDfCIKzRK;
      string nocAbeVjeB;
      string ecUhEmTBJx;
      if(VQSHAGnfEj == suKBfJAAHc){nDcDpNHNyl = true;}
      else if(suKBfJAAHc == VQSHAGnfEj){UYLoQtQSTM = true;}
      if(jNqQfRVkYJ == glkljiOPzC){wzLpoZigyG = true;}
      else if(glkljiOPzC == jNqQfRVkYJ){omfeGwKoXw = true;}
      if(BeqARpGCXa == KlwgABumSh){wSdabAXUbO = true;}
      else if(KlwgABumSh == BeqARpGCXa){fXYSpFKBLz = true;}
      if(hXsVmBRhDD == qPjaJdGVLT){oJoTWkLZKN = true;}
      else if(qPjaJdGVLT == hXsVmBRhDD){RdpEbJgleP = true;}
      if(GiWESOQoef == ABawPpMGJS){WIlrEeQese = true;}
      else if(ABawPpMGJS == GiWESOQoef){jmSFLZcSNb = true;}
      if(xgVKwpYSoJ == GLsAuHzdAd){DmDDBVYCbp = true;}
      else if(GLsAuHzdAd == xgVKwpYSoJ){YgeykxAryL = true;}
      if(AlHcCLUVdd == OMgZlRCJcG){omlixmJqTD = true;}
      else if(OMgZlRCJcG == AlHcCLUVdd){jOHUuLwaDx = true;}
      if(AngVCSIlhD == csDfCIKzRK){OIVjinflWw = true;}
      if(YRWrcABiZw == nocAbeVjeB){isbwKBGlSB = true;}
      if(cyrtCUasCG == ecUhEmTBJx){MIyUYjVCuR = true;}
      while(csDfCIKzRK == AngVCSIlhD){OYJILsESGQ = true;}
      while(nocAbeVjeB == nocAbeVjeB){bqniZkzrTe = true;}
      while(ecUhEmTBJx == ecUhEmTBJx){InmTfUeyKA = true;}
      if(nDcDpNHNyl == true){nDcDpNHNyl = false;}
      if(wzLpoZigyG == true){wzLpoZigyG = false;}
      if(wSdabAXUbO == true){wSdabAXUbO = false;}
      if(oJoTWkLZKN == true){oJoTWkLZKN = false;}
      if(WIlrEeQese == true){WIlrEeQese = false;}
      if(DmDDBVYCbp == true){DmDDBVYCbp = false;}
      if(omlixmJqTD == true){omlixmJqTD = false;}
      if(OIVjinflWw == true){OIVjinflWw = false;}
      if(isbwKBGlSB == true){isbwKBGlSB = false;}
      if(MIyUYjVCuR == true){MIyUYjVCuR = false;}
      if(UYLoQtQSTM == true){UYLoQtQSTM = false;}
      if(omfeGwKoXw == true){omfeGwKoXw = false;}
      if(fXYSpFKBLz == true){fXYSpFKBLz = false;}
      if(RdpEbJgleP == true){RdpEbJgleP = false;}
      if(jmSFLZcSNb == true){jmSFLZcSNb = false;}
      if(YgeykxAryL == true){YgeykxAryL = false;}
      if(jOHUuLwaDx == true){jOHUuLwaDx = false;}
      if(OYJILsESGQ == true){OYJILsESGQ = false;}
      if(bqniZkzrTe == true){bqniZkzrTe = false;}
      if(InmTfUeyKA == true){InmTfUeyKA = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class LWWYJGPKYT
{ 
  void LtJiqsywxO()
  { 
      bool MeEhtXmxqB = false;
      bool cVPDmheLGc = false;
      bool jiQLlMpACL = false;
      bool bTkGfjtSJP = false;
      bool SNxkQUoKMy = false;
      bool umZePdOrwh = false;
      bool hlteYJkJWC = false;
      bool mLCpJWketQ = false;
      bool WenDPosGqC = false;
      bool UBVahfSRLH = false;
      bool jfnKLijiUr = false;
      bool rixeLDypOj = false;
      bool PdRTglpaIc = false;
      bool DSTmgqqcrg = false;
      bool EJkyKlDpPd = false;
      bool hcCarFNTdY = false;
      bool sJaroYPKyT = false;
      bool MUxheFsSJu = false;
      bool hzKduaQrtb = false;
      bool dWzTnuirJk = false;
      string xRmTyiLGml;
      string occLCtxtOw;
      string bsroIHtMBo;
      string xAJahzxzls;
      string ntZHHbBycx;
      string mADTIDZyLp;
      string nyFynnTBcD;
      string wxHVHhSjgg;
      string GwjDBxxoRd;
      string ZynuEpobTS;
      string IzUZAorhMa;
      string koQdjrNCwq;
      string pdjzdyIMQQ;
      string rpQOYGaKCM;
      string FPcpsjhKLM;
      string bmfbbdPVwC;
      string feQuitXCFc;
      string RDzikaBsFs;
      string PyAEnFKnlt;
      string qFNzfZygHz;
      if(xRmTyiLGml == IzUZAorhMa){MeEhtXmxqB = true;}
      else if(IzUZAorhMa == xRmTyiLGml){jfnKLijiUr = true;}
      if(occLCtxtOw == koQdjrNCwq){cVPDmheLGc = true;}
      else if(koQdjrNCwq == occLCtxtOw){rixeLDypOj = true;}
      if(bsroIHtMBo == pdjzdyIMQQ){jiQLlMpACL = true;}
      else if(pdjzdyIMQQ == bsroIHtMBo){PdRTglpaIc = true;}
      if(xAJahzxzls == rpQOYGaKCM){bTkGfjtSJP = true;}
      else if(rpQOYGaKCM == xAJahzxzls){DSTmgqqcrg = true;}
      if(ntZHHbBycx == FPcpsjhKLM){SNxkQUoKMy = true;}
      else if(FPcpsjhKLM == ntZHHbBycx){EJkyKlDpPd = true;}
      if(mADTIDZyLp == bmfbbdPVwC){umZePdOrwh = true;}
      else if(bmfbbdPVwC == mADTIDZyLp){hcCarFNTdY = true;}
      if(nyFynnTBcD == feQuitXCFc){hlteYJkJWC = true;}
      else if(feQuitXCFc == nyFynnTBcD){sJaroYPKyT = true;}
      if(wxHVHhSjgg == RDzikaBsFs){mLCpJWketQ = true;}
      if(GwjDBxxoRd == PyAEnFKnlt){WenDPosGqC = true;}
      if(ZynuEpobTS == qFNzfZygHz){UBVahfSRLH = true;}
      while(RDzikaBsFs == wxHVHhSjgg){MUxheFsSJu = true;}
      while(PyAEnFKnlt == PyAEnFKnlt){hzKduaQrtb = true;}
      while(qFNzfZygHz == qFNzfZygHz){dWzTnuirJk = true;}
      if(MeEhtXmxqB == true){MeEhtXmxqB = false;}
      if(cVPDmheLGc == true){cVPDmheLGc = false;}
      if(jiQLlMpACL == true){jiQLlMpACL = false;}
      if(bTkGfjtSJP == true){bTkGfjtSJP = false;}
      if(SNxkQUoKMy == true){SNxkQUoKMy = false;}
      if(umZePdOrwh == true){umZePdOrwh = false;}
      if(hlteYJkJWC == true){hlteYJkJWC = false;}
      if(mLCpJWketQ == true){mLCpJWketQ = false;}
      if(WenDPosGqC == true){WenDPosGqC = false;}
      if(UBVahfSRLH == true){UBVahfSRLH = false;}
      if(jfnKLijiUr == true){jfnKLijiUr = false;}
      if(rixeLDypOj == true){rixeLDypOj = false;}
      if(PdRTglpaIc == true){PdRTglpaIc = false;}
      if(DSTmgqqcrg == true){DSTmgqqcrg = false;}
      if(EJkyKlDpPd == true){EJkyKlDpPd = false;}
      if(hcCarFNTdY == true){hcCarFNTdY = false;}
      if(sJaroYPKyT == true){sJaroYPKyT = false;}
      if(MUxheFsSJu == true){MUxheFsSJu = false;}
      if(hzKduaQrtb == true){hzKduaQrtb = false;}
      if(dWzTnuirJk == true){dWzTnuirJk = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class FGECYNJXDI
{ 
  void qxDixXtKjx()
  { 
      bool PqiVeOrelA = false;
      bool TuAabGTtJf = false;
      bool AWrSFOYGXQ = false;
      bool chmjauEXft = false;
      bool OkZwixuAtR = false;
      bool CrFcErzQQQ = false;
      bool plGVWlIQzg = false;
      bool BwOOROwuiI = false;
      bool SYLGNkcJeh = false;
      bool wnGOEcdDYx = false;
      bool neANPGdpKo = false;
      bool wDgIyQZAIl = false;
      bool JykRkMpzJo = false;
      bool krVlTmYypH = false;
      bool GlzolrGxQn = false;
      bool CdummpsibD = false;
      bool QdfVEDgtoK = false;
      bool qaJAeWzwes = false;
      bool FriVlGwiyc = false;
      bool spVmqcFcji = false;
      string WgMZJMMrBo;
      string yGEEqesQJj;
      string qkWUSJcTGi;
      string DqBxPfbDBV;
      string BYGjgBppSl;
      string cqsailJqHA;
      string iskSkGFGoL;
      string DoOmhRdlnQ;
      string SmAUFMyZNd;
      string VjwBlImmzZ;
      string wiAHhmbFrR;
      string HWDqgwsQNY;
      string IerLpSsNAY;
      string dpmNUilrlR;
      string krhwVzgFTp;
      string PWZaQQqoRO;
      string tNFSmQioVx;
      string KAdunQxuop;
      string lnsKJHQMxD;
      string rwaWXWmOIF;
      if(WgMZJMMrBo == wiAHhmbFrR){PqiVeOrelA = true;}
      else if(wiAHhmbFrR == WgMZJMMrBo){neANPGdpKo = true;}
      if(yGEEqesQJj == HWDqgwsQNY){TuAabGTtJf = true;}
      else if(HWDqgwsQNY == yGEEqesQJj){wDgIyQZAIl = true;}
      if(qkWUSJcTGi == IerLpSsNAY){AWrSFOYGXQ = true;}
      else if(IerLpSsNAY == qkWUSJcTGi){JykRkMpzJo = true;}
      if(DqBxPfbDBV == dpmNUilrlR){chmjauEXft = true;}
      else if(dpmNUilrlR == DqBxPfbDBV){krVlTmYypH = true;}
      if(BYGjgBppSl == krhwVzgFTp){OkZwixuAtR = true;}
      else if(krhwVzgFTp == BYGjgBppSl){GlzolrGxQn = true;}
      if(cqsailJqHA == PWZaQQqoRO){CrFcErzQQQ = true;}
      else if(PWZaQQqoRO == cqsailJqHA){CdummpsibD = true;}
      if(iskSkGFGoL == tNFSmQioVx){plGVWlIQzg = true;}
      else if(tNFSmQioVx == iskSkGFGoL){QdfVEDgtoK = true;}
      if(DoOmhRdlnQ == KAdunQxuop){BwOOROwuiI = true;}
      if(SmAUFMyZNd == lnsKJHQMxD){SYLGNkcJeh = true;}
      if(VjwBlImmzZ == rwaWXWmOIF){wnGOEcdDYx = true;}
      while(KAdunQxuop == DoOmhRdlnQ){qaJAeWzwes = true;}
      while(lnsKJHQMxD == lnsKJHQMxD){FriVlGwiyc = true;}
      while(rwaWXWmOIF == rwaWXWmOIF){spVmqcFcji = true;}
      if(PqiVeOrelA == true){PqiVeOrelA = false;}
      if(TuAabGTtJf == true){TuAabGTtJf = false;}
      if(AWrSFOYGXQ == true){AWrSFOYGXQ = false;}
      if(chmjauEXft == true){chmjauEXft = false;}
      if(OkZwixuAtR == true){OkZwixuAtR = false;}
      if(CrFcErzQQQ == true){CrFcErzQQQ = false;}
      if(plGVWlIQzg == true){plGVWlIQzg = false;}
      if(BwOOROwuiI == true){BwOOROwuiI = false;}
      if(SYLGNkcJeh == true){SYLGNkcJeh = false;}
      if(wnGOEcdDYx == true){wnGOEcdDYx = false;}
      if(neANPGdpKo == true){neANPGdpKo = false;}
      if(wDgIyQZAIl == true){wDgIyQZAIl = false;}
      if(JykRkMpzJo == true){JykRkMpzJo = false;}
      if(krVlTmYypH == true){krVlTmYypH = false;}
      if(GlzolrGxQn == true){GlzolrGxQn = false;}
      if(CdummpsibD == true){CdummpsibD = false;}
      if(QdfVEDgtoK == true){QdfVEDgtoK = false;}
      if(qaJAeWzwes == true){qaJAeWzwes = false;}
      if(FriVlGwiyc == true){FriVlGwiyc = false;}
      if(spVmqcFcji == true){spVmqcFcji = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class LCNVOMKIHI
{ 
  void hQxjrWJagb()
  { 
      bool WBXUTLlkeA = false;
      bool WRmhSuTDmI = false;
      bool SiTfNnIVgR = false;
      bool InYdumBgKb = false;
      bool sMuqZqBmQd = false;
      bool uqVEZmgqHe = false;
      bool DQENrisJmf = false;
      bool slsLPGnbGW = false;
      bool mUECWQSUDH = false;
      bool FKZeYcHhzp = false;
      bool yqAkkIyKoT = false;
      bool zFkkrhLCpa = false;
      bool QXFeZiMNll = false;
      bool yFcPYuUTRO = false;
      bool SIfjHAYnmp = false;
      bool QFqXYZlUKB = false;
      bool ujXCUtcUMw = false;
      bool NqjaIIrUXZ = false;
      bool JYawUsNEqy = false;
      bool JzJPShjcPN = false;
      string zgaAqDScpK;
      string UgjBXgapwc;
      string tMRlnAiyfC;
      string pzLiDtKGTt;
      string JjfzFVtqcf;
      string OnLWVmPoLq;
      string TUwnUUUByd;
      string WTWBSKgRgR;
      string GrUAnCmnMQ;
      string dUtbZomqek;
      string ArrzJtQKEL;
      string GxHtjbzwAR;
      string ggnhzBZtbc;
      string WomwQNzVqs;
      string kcjBKgMArx;
      string oqqMDTEKAH;
      string UWhanQJLcW;
      string cdEGgDwlWR;
      string nYCenfxarw;
      string JnViYOuIMs;
      if(zgaAqDScpK == ArrzJtQKEL){WBXUTLlkeA = true;}
      else if(ArrzJtQKEL == zgaAqDScpK){yqAkkIyKoT = true;}
      if(UgjBXgapwc == GxHtjbzwAR){WRmhSuTDmI = true;}
      else if(GxHtjbzwAR == UgjBXgapwc){zFkkrhLCpa = true;}
      if(tMRlnAiyfC == ggnhzBZtbc){SiTfNnIVgR = true;}
      else if(ggnhzBZtbc == tMRlnAiyfC){QXFeZiMNll = true;}
      if(pzLiDtKGTt == WomwQNzVqs){InYdumBgKb = true;}
      else if(WomwQNzVqs == pzLiDtKGTt){yFcPYuUTRO = true;}
      if(JjfzFVtqcf == kcjBKgMArx){sMuqZqBmQd = true;}
      else if(kcjBKgMArx == JjfzFVtqcf){SIfjHAYnmp = true;}
      if(OnLWVmPoLq == oqqMDTEKAH){uqVEZmgqHe = true;}
      else if(oqqMDTEKAH == OnLWVmPoLq){QFqXYZlUKB = true;}
      if(TUwnUUUByd == UWhanQJLcW){DQENrisJmf = true;}
      else if(UWhanQJLcW == TUwnUUUByd){ujXCUtcUMw = true;}
      if(WTWBSKgRgR == cdEGgDwlWR){slsLPGnbGW = true;}
      if(GrUAnCmnMQ == nYCenfxarw){mUECWQSUDH = true;}
      if(dUtbZomqek == JnViYOuIMs){FKZeYcHhzp = true;}
      while(cdEGgDwlWR == WTWBSKgRgR){NqjaIIrUXZ = true;}
      while(nYCenfxarw == nYCenfxarw){JYawUsNEqy = true;}
      while(JnViYOuIMs == JnViYOuIMs){JzJPShjcPN = true;}
      if(WBXUTLlkeA == true){WBXUTLlkeA = false;}
      if(WRmhSuTDmI == true){WRmhSuTDmI = false;}
      if(SiTfNnIVgR == true){SiTfNnIVgR = false;}
      if(InYdumBgKb == true){InYdumBgKb = false;}
      if(sMuqZqBmQd == true){sMuqZqBmQd = false;}
      if(uqVEZmgqHe == true){uqVEZmgqHe = false;}
      if(DQENrisJmf == true){DQENrisJmf = false;}
      if(slsLPGnbGW == true){slsLPGnbGW = false;}
      if(mUECWQSUDH == true){mUECWQSUDH = false;}
      if(FKZeYcHhzp == true){FKZeYcHhzp = false;}
      if(yqAkkIyKoT == true){yqAkkIyKoT = false;}
      if(zFkkrhLCpa == true){zFkkrhLCpa = false;}
      if(QXFeZiMNll == true){QXFeZiMNll = false;}
      if(yFcPYuUTRO == true){yFcPYuUTRO = false;}
      if(SIfjHAYnmp == true){SIfjHAYnmp = false;}
      if(QFqXYZlUKB == true){QFqXYZlUKB = false;}
      if(ujXCUtcUMw == true){ujXCUtcUMw = false;}
      if(NqjaIIrUXZ == true){NqjaIIrUXZ = false;}
      if(JYawUsNEqy == true){JYawUsNEqy = false;}
      if(JzJPShjcPN == true){JzJPShjcPN = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class ZIFFWAUJMQ
{ 
  void DfkeUTwrTn()
  { 
      bool FrfTnCuWbT = false;
      bool XLIXYWsmaR = false;
      bool SIEyzQJZXe = false;
      bool EnpODkQIYI = false;
      bool riWmUBJhXr = false;
      bool iyRtFwnhUW = false;
      bool sUzxPjVtTm = false;
      bool FkNSYikQcx = false;
      bool GaBeuFVuIH = false;
      bool xhnBPWjZWk = false;
      bool ePOjlyjzVW = false;
      bool LWEWQRTTBJ = false;
      bool NakMpXxMCC = false;
      bool zLsqRpMRsx = false;
      bool VWZlwadQky = false;
      bool DQXNXEeBtO = false;
      bool AXwSWzcMFZ = false;
      bool ECaEnpByQO = false;
      bool sgaEyimfTM = false;
      bool LLWdwxZGOw = false;
      string uMZFjgNmjR;
      string RcYkqZFyRR;
      string qOxsxkqSfs;
      string iQQeQRMWUK;
      string QwUYneaybw;
      string WHrSEgOgIz;
      string ptGqhBLsTY;
      string MidGBtsYER;
      string JrpjVbYxaj;
      string CfOVUWodpm;
      string SgeDinclRJ;
      string mpcpoxDWUG;
      string cNSiVfUHke;
      string FOiRybNmAh;
      string ylfQwMDXfX;
      string SRJjKFOugC;
      string SVAmEXHLqM;
      string iPWlHpgCmJ;
      string cwbNLmFyHs;
      string NSGxOclsLX;
      if(uMZFjgNmjR == SgeDinclRJ){FrfTnCuWbT = true;}
      else if(SgeDinclRJ == uMZFjgNmjR){ePOjlyjzVW = true;}
      if(RcYkqZFyRR == mpcpoxDWUG){XLIXYWsmaR = true;}
      else if(mpcpoxDWUG == RcYkqZFyRR){LWEWQRTTBJ = true;}
      if(qOxsxkqSfs == cNSiVfUHke){SIEyzQJZXe = true;}
      else if(cNSiVfUHke == qOxsxkqSfs){NakMpXxMCC = true;}
      if(iQQeQRMWUK == FOiRybNmAh){EnpODkQIYI = true;}
      else if(FOiRybNmAh == iQQeQRMWUK){zLsqRpMRsx = true;}
      if(QwUYneaybw == ylfQwMDXfX){riWmUBJhXr = true;}
      else if(ylfQwMDXfX == QwUYneaybw){VWZlwadQky = true;}
      if(WHrSEgOgIz == SRJjKFOugC){iyRtFwnhUW = true;}
      else if(SRJjKFOugC == WHrSEgOgIz){DQXNXEeBtO = true;}
      if(ptGqhBLsTY == SVAmEXHLqM){sUzxPjVtTm = true;}
      else if(SVAmEXHLqM == ptGqhBLsTY){AXwSWzcMFZ = true;}
      if(MidGBtsYER == iPWlHpgCmJ){FkNSYikQcx = true;}
      if(JrpjVbYxaj == cwbNLmFyHs){GaBeuFVuIH = true;}
      if(CfOVUWodpm == NSGxOclsLX){xhnBPWjZWk = true;}
      while(iPWlHpgCmJ == MidGBtsYER){ECaEnpByQO = true;}
      while(cwbNLmFyHs == cwbNLmFyHs){sgaEyimfTM = true;}
      while(NSGxOclsLX == NSGxOclsLX){LLWdwxZGOw = true;}
      if(FrfTnCuWbT == true){FrfTnCuWbT = false;}
      if(XLIXYWsmaR == true){XLIXYWsmaR = false;}
      if(SIEyzQJZXe == true){SIEyzQJZXe = false;}
      if(EnpODkQIYI == true){EnpODkQIYI = false;}
      if(riWmUBJhXr == true){riWmUBJhXr = false;}
      if(iyRtFwnhUW == true){iyRtFwnhUW = false;}
      if(sUzxPjVtTm == true){sUzxPjVtTm = false;}
      if(FkNSYikQcx == true){FkNSYikQcx = false;}
      if(GaBeuFVuIH == true){GaBeuFVuIH = false;}
      if(xhnBPWjZWk == true){xhnBPWjZWk = false;}
      if(ePOjlyjzVW == true){ePOjlyjzVW = false;}
      if(LWEWQRTTBJ == true){LWEWQRTTBJ = false;}
      if(NakMpXxMCC == true){NakMpXxMCC = false;}
      if(zLsqRpMRsx == true){zLsqRpMRsx = false;}
      if(VWZlwadQky == true){VWZlwadQky = false;}
      if(DQXNXEeBtO == true){DQXNXEeBtO = false;}
      if(AXwSWzcMFZ == true){AXwSWzcMFZ = false;}
      if(ECaEnpByQO == true){ECaEnpByQO = false;}
      if(sgaEyimfTM == true){sgaEyimfTM = false;}
      if(LLWdwxZGOw == true){LLWdwxZGOw = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class WFLHIRWKDD
{ 
  void oSuOWKMaaW()
  { 
      bool yHjnxLXxbG = false;
      bool lKoFdfqQdd = false;
      bool rneSMeeffe = false;
      bool zgdbrFXZXs = false;
      bool bIOfGkoVid = false;
      bool PzQXMJcQaS = false;
      bool fqQxGFfNMY = false;
      bool IRrjCiYyMb = false;
      bool oIxBPAPFPh = false;
      bool bGyFNjrRZB = false;
      bool EbJJVyHfVc = false;
      bool kdDzcXtOgF = false;
      bool oZxewBSlWR = false;
      bool qHYLWNzmfR = false;
      bool sjjmxxDzco = false;
      bool pcjTLeddNU = false;
      bool eVIDkcFrbO = false;
      bool XGiPMEoKhy = false;
      bool yTIgbOWEzr = false;
      bool jVZLlWbgBT = false;
      string jfxZVVGYSg;
      string WEkqOJRhqf;
      string VWUYjizour;
      string AjMxJcXCeq;
      string MqBwaLroCO;
      string FUQaXNKXpl;
      string WQdaflrmgl;
      string kPDzTdUXxY;
      string qJmgmeTlZw;
      string RzMrUwNaQo;
      string TEHPcpRQHs;
      string rmZQuMdxmA;
      string SFNkUlCLdX;
      string PsHIFlCWDx;
      string NCdfDdYuxI;
      string SQmPVNqWuq;
      string mGlidyfRLI;
      string KGspmPaggp;
      string MHOVFzGqlr;
      string ueaMJHPtCE;
      if(jfxZVVGYSg == TEHPcpRQHs){yHjnxLXxbG = true;}
      else if(TEHPcpRQHs == jfxZVVGYSg){EbJJVyHfVc = true;}
      if(WEkqOJRhqf == rmZQuMdxmA){lKoFdfqQdd = true;}
      else if(rmZQuMdxmA == WEkqOJRhqf){kdDzcXtOgF = true;}
      if(VWUYjizour == SFNkUlCLdX){rneSMeeffe = true;}
      else if(SFNkUlCLdX == VWUYjizour){oZxewBSlWR = true;}
      if(AjMxJcXCeq == PsHIFlCWDx){zgdbrFXZXs = true;}
      else if(PsHIFlCWDx == AjMxJcXCeq){qHYLWNzmfR = true;}
      if(MqBwaLroCO == NCdfDdYuxI){bIOfGkoVid = true;}
      else if(NCdfDdYuxI == MqBwaLroCO){sjjmxxDzco = true;}
      if(FUQaXNKXpl == SQmPVNqWuq){PzQXMJcQaS = true;}
      else if(SQmPVNqWuq == FUQaXNKXpl){pcjTLeddNU = true;}
      if(WQdaflrmgl == mGlidyfRLI){fqQxGFfNMY = true;}
      else if(mGlidyfRLI == WQdaflrmgl){eVIDkcFrbO = true;}
      if(kPDzTdUXxY == KGspmPaggp){IRrjCiYyMb = true;}
      if(qJmgmeTlZw == MHOVFzGqlr){oIxBPAPFPh = true;}
      if(RzMrUwNaQo == ueaMJHPtCE){bGyFNjrRZB = true;}
      while(KGspmPaggp == kPDzTdUXxY){XGiPMEoKhy = true;}
      while(MHOVFzGqlr == MHOVFzGqlr){yTIgbOWEzr = true;}
      while(ueaMJHPtCE == ueaMJHPtCE){jVZLlWbgBT = true;}
      if(yHjnxLXxbG == true){yHjnxLXxbG = false;}
      if(lKoFdfqQdd == true){lKoFdfqQdd = false;}
      if(rneSMeeffe == true){rneSMeeffe = false;}
      if(zgdbrFXZXs == true){zgdbrFXZXs = false;}
      if(bIOfGkoVid == true){bIOfGkoVid = false;}
      if(PzQXMJcQaS == true){PzQXMJcQaS = false;}
      if(fqQxGFfNMY == true){fqQxGFfNMY = false;}
      if(IRrjCiYyMb == true){IRrjCiYyMb = false;}
      if(oIxBPAPFPh == true){oIxBPAPFPh = false;}
      if(bGyFNjrRZB == true){bGyFNjrRZB = false;}
      if(EbJJVyHfVc == true){EbJJVyHfVc = false;}
      if(kdDzcXtOgF == true){kdDzcXtOgF = false;}
      if(oZxewBSlWR == true){oZxewBSlWR = false;}
      if(qHYLWNzmfR == true){qHYLWNzmfR = false;}
      if(sjjmxxDzco == true){sjjmxxDzco = false;}
      if(pcjTLeddNU == true){pcjTLeddNU = false;}
      if(eVIDkcFrbO == true){eVIDkcFrbO = false;}
      if(XGiPMEoKhy == true){XGiPMEoKhy = false;}
      if(yTIgbOWEzr == true){yTIgbOWEzr = false;}
      if(jVZLlWbgBT == true){jVZLlWbgBT = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class TXCNDMXXYA
{ 
  void XsYsOtQIVX()
  { 
      bool OUAEnPmKOE = false;
      bool DgIfRgFidO = false;
      bool PHutGUYFtu = false;
      bool rskFMsldkB = false;
      bool zKkIEYdCqY = false;
      bool zmhhyHYFxT = false;
      bool qhQSLKuDTX = false;
      bool ubxcOEVmph = false;
      bool pVNVuEKCGF = false;
      bool TffQKRtSwt = false;
      bool cahScXpFSt = false;
      bool klPPcUTuXH = false;
      bool zsxODOwfSx = false;
      bool KDpuEPmurX = false;
      bool OFiMThPPno = false;
      bool xztotidTOO = false;
      bool aJlVjgwTKN = false;
      bool gYDArtKjtV = false;
      bool zgrczLIABV = false;
      bool lTfdwFSMcm = false;
      string dGpbgksywn;
      string ntrliFloBd;
      string FxJJTjywmt;
      string NimVzpxctI;
      string TNijReSkyd;
      string PhXugfwgHx;
      string lxLBaEGWmr;
      string HIurKqNYro;
      string QNxJdfKroS;
      string tQUwVWChJM;
      string XwxGVGlfjp;
      string RWnSfYzBWt;
      string sOgUypnyWn;
      string nfPfQUQqmX;
      string seIzAWcCQx;
      string WBKPSJOcHe;
      string SnIuBlHIBL;
      string IHNzBOFhTb;
      string NlhZQmVzMH;
      string FmiIFFWMxO;
      if(dGpbgksywn == XwxGVGlfjp){OUAEnPmKOE = true;}
      else if(XwxGVGlfjp == dGpbgksywn){cahScXpFSt = true;}
      if(ntrliFloBd == RWnSfYzBWt){DgIfRgFidO = true;}
      else if(RWnSfYzBWt == ntrliFloBd){klPPcUTuXH = true;}
      if(FxJJTjywmt == sOgUypnyWn){PHutGUYFtu = true;}
      else if(sOgUypnyWn == FxJJTjywmt){zsxODOwfSx = true;}
      if(NimVzpxctI == nfPfQUQqmX){rskFMsldkB = true;}
      else if(nfPfQUQqmX == NimVzpxctI){KDpuEPmurX = true;}
      if(TNijReSkyd == seIzAWcCQx){zKkIEYdCqY = true;}
      else if(seIzAWcCQx == TNijReSkyd){OFiMThPPno = true;}
      if(PhXugfwgHx == WBKPSJOcHe){zmhhyHYFxT = true;}
      else if(WBKPSJOcHe == PhXugfwgHx){xztotidTOO = true;}
      if(lxLBaEGWmr == SnIuBlHIBL){qhQSLKuDTX = true;}
      else if(SnIuBlHIBL == lxLBaEGWmr){aJlVjgwTKN = true;}
      if(HIurKqNYro == IHNzBOFhTb){ubxcOEVmph = true;}
      if(QNxJdfKroS == NlhZQmVzMH){pVNVuEKCGF = true;}
      if(tQUwVWChJM == FmiIFFWMxO){TffQKRtSwt = true;}
      while(IHNzBOFhTb == HIurKqNYro){gYDArtKjtV = true;}
      while(NlhZQmVzMH == NlhZQmVzMH){zgrczLIABV = true;}
      while(FmiIFFWMxO == FmiIFFWMxO){lTfdwFSMcm = true;}
      if(OUAEnPmKOE == true){OUAEnPmKOE = false;}
      if(DgIfRgFidO == true){DgIfRgFidO = false;}
      if(PHutGUYFtu == true){PHutGUYFtu = false;}
      if(rskFMsldkB == true){rskFMsldkB = false;}
      if(zKkIEYdCqY == true){zKkIEYdCqY = false;}
      if(zmhhyHYFxT == true){zmhhyHYFxT = false;}
      if(qhQSLKuDTX == true){qhQSLKuDTX = false;}
      if(ubxcOEVmph == true){ubxcOEVmph = false;}
      if(pVNVuEKCGF == true){pVNVuEKCGF = false;}
      if(TffQKRtSwt == true){TffQKRtSwt = false;}
      if(cahScXpFSt == true){cahScXpFSt = false;}
      if(klPPcUTuXH == true){klPPcUTuXH = false;}
      if(zsxODOwfSx == true){zsxODOwfSx = false;}
      if(KDpuEPmurX == true){KDpuEPmurX = false;}
      if(OFiMThPPno == true){OFiMThPPno = false;}
      if(xztotidTOO == true){xztotidTOO = false;}
      if(aJlVjgwTKN == true){aJlVjgwTKN = false;}
      if(gYDArtKjtV == true){gYDArtKjtV = false;}
      if(zgrczLIABV == true){zgrczLIABV = false;}
      if(lTfdwFSMcm == true){lTfdwFSMcm = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class JEWMIGAUHN
{ 
  void TmFVHRsGcd()
  { 
      bool gLHLIAoCfw = false;
      bool aETADCEStI = false;
      bool ayFYJuaCFy = false;
      bool ZitCxsnLWA = false;
      bool FTDyykdJln = false;
      bool BxXGOhGhCM = false;
      bool ZlwgVrJQDJ = false;
      bool NrutDHtHZX = false;
      bool RQPQwbLmnO = false;
      bool mFIJZSWVbG = false;
      bool bMGcaICdCH = false;
      bool nzIeuJWfjs = false;
      bool fVcnWIjlTk = false;
      bool jXeSuEJmpn = false;
      bool ZgjgamxcOQ = false;
      bool wqkhZFjSFS = false;
      bool YPJRWPToip = false;
      bool ziowSykwMi = false;
      bool KGWDoslxsp = false;
      bool UqhXOJWSJL = false;
      string griCOukdYh;
      string UwHKVQRKFD;
      string oMxYDPkuMz;
      string BRheYLEHMQ;
      string CoIEwHTfhm;
      string KIVjfUuKyy;
      string JoQZgCNbkJ;
      string MKxnAADrbw;
      string uFNZnswxyE;
      string QtINGNXiXt;
      string sqtXazKgie;
      string QChCCEaqkm;
      string GPcgrRCihm;
      string bTUhDDKpyn;
      string hPOTmOMGKC;
      string lgykmcNNeI;
      string xbywDxhAzz;
      string skrwEqBJsd;
      string FuXfBtVitZ;
      string oxKoqGQSPp;
      if(griCOukdYh == sqtXazKgie){gLHLIAoCfw = true;}
      else if(sqtXazKgie == griCOukdYh){bMGcaICdCH = true;}
      if(UwHKVQRKFD == QChCCEaqkm){aETADCEStI = true;}
      else if(QChCCEaqkm == UwHKVQRKFD){nzIeuJWfjs = true;}
      if(oMxYDPkuMz == GPcgrRCihm){ayFYJuaCFy = true;}
      else if(GPcgrRCihm == oMxYDPkuMz){fVcnWIjlTk = true;}
      if(BRheYLEHMQ == bTUhDDKpyn){ZitCxsnLWA = true;}
      else if(bTUhDDKpyn == BRheYLEHMQ){jXeSuEJmpn = true;}
      if(CoIEwHTfhm == hPOTmOMGKC){FTDyykdJln = true;}
      else if(hPOTmOMGKC == CoIEwHTfhm){ZgjgamxcOQ = true;}
      if(KIVjfUuKyy == lgykmcNNeI){BxXGOhGhCM = true;}
      else if(lgykmcNNeI == KIVjfUuKyy){wqkhZFjSFS = true;}
      if(JoQZgCNbkJ == xbywDxhAzz){ZlwgVrJQDJ = true;}
      else if(xbywDxhAzz == JoQZgCNbkJ){YPJRWPToip = true;}
      if(MKxnAADrbw == skrwEqBJsd){NrutDHtHZX = true;}
      if(uFNZnswxyE == FuXfBtVitZ){RQPQwbLmnO = true;}
      if(QtINGNXiXt == oxKoqGQSPp){mFIJZSWVbG = true;}
      while(skrwEqBJsd == MKxnAADrbw){ziowSykwMi = true;}
      while(FuXfBtVitZ == FuXfBtVitZ){KGWDoslxsp = true;}
      while(oxKoqGQSPp == oxKoqGQSPp){UqhXOJWSJL = true;}
      if(gLHLIAoCfw == true){gLHLIAoCfw = false;}
      if(aETADCEStI == true){aETADCEStI = false;}
      if(ayFYJuaCFy == true){ayFYJuaCFy = false;}
      if(ZitCxsnLWA == true){ZitCxsnLWA = false;}
      if(FTDyykdJln == true){FTDyykdJln = false;}
      if(BxXGOhGhCM == true){BxXGOhGhCM = false;}
      if(ZlwgVrJQDJ == true){ZlwgVrJQDJ = false;}
      if(NrutDHtHZX == true){NrutDHtHZX = false;}
      if(RQPQwbLmnO == true){RQPQwbLmnO = false;}
      if(mFIJZSWVbG == true){mFIJZSWVbG = false;}
      if(bMGcaICdCH == true){bMGcaICdCH = false;}
      if(nzIeuJWfjs == true){nzIeuJWfjs = false;}
      if(fVcnWIjlTk == true){fVcnWIjlTk = false;}
      if(jXeSuEJmpn == true){jXeSuEJmpn = false;}
      if(ZgjgamxcOQ == true){ZgjgamxcOQ = false;}
      if(wqkhZFjSFS == true){wqkhZFjSFS = false;}
      if(YPJRWPToip == true){YPJRWPToip = false;}
      if(ziowSykwMi == true){ziowSykwMi = false;}
      if(KGWDoslxsp == true){KGWDoslxsp = false;}
      if(UqhXOJWSJL == true){UqhXOJWSJL = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class DQOLDKZINV
{ 
  void HsKPhfzzKN()
  { 
      bool NYAZuToMWB = false;
      bool PRasmrdgHq = false;
      bool eIRmayHrXf = false;
      bool GFFoOVIXly = false;
      bool xiTLcJaoTF = false;
      bool HpISkFGMyx = false;
      bool MxnpuJMkeQ = false;
      bool jFuIsuoGKQ = false;
      bool WSXSYPxlEI = false;
      bool PuYolztcPS = false;
      bool xpJCUBuzYo = false;
      bool PAChZsZVRe = false;
      bool MafVBofFWt = false;
      bool AMqqTgIVxW = false;
      bool UxMPsOrqPr = false;
      bool ZYKkGVKnBe = false;
      bool UoceoDILNs = false;
      bool kDYtJONQcl = false;
      bool xopdTbBFjx = false;
      bool WUTRCfTgZp = false;
      string xfzQfXZtTV;
      string irujzUCJgH;
      string nDGkfZeLiH;
      string dkkzqRqZuX;
      string VlRJuEfUtL;
      string SPDpGsZOjG;
      string rNKLryGusg;
      string ccOJlClwpa;
      string sJRXoNgtrx;
      string qcooeHaFRx;
      string xjbMhoBtEE;
      string GdXJMiwmWd;
      string QLCupAnZdd;
      string afdsdJhFoz;
      string MmpnpNEfbw;
      string LninfkgfVh;
      string BaPZdazeeC;
      string AqyWQdVOFc;
      string uIxhSmwpMr;
      string bCiGykXPJP;
      if(xfzQfXZtTV == xjbMhoBtEE){NYAZuToMWB = true;}
      else if(xjbMhoBtEE == xfzQfXZtTV){xpJCUBuzYo = true;}
      if(irujzUCJgH == GdXJMiwmWd){PRasmrdgHq = true;}
      else if(GdXJMiwmWd == irujzUCJgH){PAChZsZVRe = true;}
      if(nDGkfZeLiH == QLCupAnZdd){eIRmayHrXf = true;}
      else if(QLCupAnZdd == nDGkfZeLiH){MafVBofFWt = true;}
      if(dkkzqRqZuX == afdsdJhFoz){GFFoOVIXly = true;}
      else if(afdsdJhFoz == dkkzqRqZuX){AMqqTgIVxW = true;}
      if(VlRJuEfUtL == MmpnpNEfbw){xiTLcJaoTF = true;}
      else if(MmpnpNEfbw == VlRJuEfUtL){UxMPsOrqPr = true;}
      if(SPDpGsZOjG == LninfkgfVh){HpISkFGMyx = true;}
      else if(LninfkgfVh == SPDpGsZOjG){ZYKkGVKnBe = true;}
      if(rNKLryGusg == BaPZdazeeC){MxnpuJMkeQ = true;}
      else if(BaPZdazeeC == rNKLryGusg){UoceoDILNs = true;}
      if(ccOJlClwpa == AqyWQdVOFc){jFuIsuoGKQ = true;}
      if(sJRXoNgtrx == uIxhSmwpMr){WSXSYPxlEI = true;}
      if(qcooeHaFRx == bCiGykXPJP){PuYolztcPS = true;}
      while(AqyWQdVOFc == ccOJlClwpa){kDYtJONQcl = true;}
      while(uIxhSmwpMr == uIxhSmwpMr){xopdTbBFjx = true;}
      while(bCiGykXPJP == bCiGykXPJP){WUTRCfTgZp = true;}
      if(NYAZuToMWB == true){NYAZuToMWB = false;}
      if(PRasmrdgHq == true){PRasmrdgHq = false;}
      if(eIRmayHrXf == true){eIRmayHrXf = false;}
      if(GFFoOVIXly == true){GFFoOVIXly = false;}
      if(xiTLcJaoTF == true){xiTLcJaoTF = false;}
      if(HpISkFGMyx == true){HpISkFGMyx = false;}
      if(MxnpuJMkeQ == true){MxnpuJMkeQ = false;}
      if(jFuIsuoGKQ == true){jFuIsuoGKQ = false;}
      if(WSXSYPxlEI == true){WSXSYPxlEI = false;}
      if(PuYolztcPS == true){PuYolztcPS = false;}
      if(xpJCUBuzYo == true){xpJCUBuzYo = false;}
      if(PAChZsZVRe == true){PAChZsZVRe = false;}
      if(MafVBofFWt == true){MafVBofFWt = false;}
      if(AMqqTgIVxW == true){AMqqTgIVxW = false;}
      if(UxMPsOrqPr == true){UxMPsOrqPr = false;}
      if(ZYKkGVKnBe == true){ZYKkGVKnBe = false;}
      if(UoceoDILNs == true){UoceoDILNs = false;}
      if(kDYtJONQcl == true){kDYtJONQcl = false;}
      if(xopdTbBFjx == true){xopdTbBFjx = false;}
      if(WUTRCfTgZp == true){WUTRCfTgZp = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class HVNUHBBJDS
{ 
  void OuSTFiWUun()
  { 
      bool iaREWqKVxE = false;
      bool dlmPKBrjtS = false;
      bool LMCwjFcyjM = false;
      bool AVhszJQsup = false;
      bool bkwJodQhwp = false;
      bool cgYkKVXVUR = false;
      bool OLljEIEtPB = false;
      bool jzoEqZQrGG = false;
      bool ntCtjSwxhd = false;
      bool kuXdaPyLEf = false;
      bool ZWRtFcrTsj = false;
      bool EePOcTJrAl = false;
      bool MHMlQobLcb = false;
      bool bEmZfRcHnG = false;
      bool ZbDxYGeJAG = false;
      bool FGLSTSKfdP = false;
      bool BgqRIAqohL = false;
      bool qCDsMjDOMJ = false;
      bool JRKVVUrUFN = false;
      bool HxcXFrklnX = false;
      string cFSsnQUyTC;
      string mqPKrTgtcP;
      string fwaSzolfSi;
      string AakCszwetd;
      string cEmbVJfXOt;
      string EtCOkgeAsy;
      string enfjBLGMQr;
      string XCzzmbIzwp;
      string INRXeGYVRM;
      string UwkuynYDZK;
      string DTGVWCtDaI;
      string XeDDpQWHEt;
      string mjuEXbQDAz;
      string DFYlmoGwBc;
      string MUuJoorhFg;
      string RQyeWSXCyt;
      string kpDbFSGRPA;
      string JZFbhRnlPh;
      string jixSglGsOT;
      string QExHrVRSDV;
      if(cFSsnQUyTC == DTGVWCtDaI){iaREWqKVxE = true;}
      else if(DTGVWCtDaI == cFSsnQUyTC){ZWRtFcrTsj = true;}
      if(mqPKrTgtcP == XeDDpQWHEt){dlmPKBrjtS = true;}
      else if(XeDDpQWHEt == mqPKrTgtcP){EePOcTJrAl = true;}
      if(fwaSzolfSi == mjuEXbQDAz){LMCwjFcyjM = true;}
      else if(mjuEXbQDAz == fwaSzolfSi){MHMlQobLcb = true;}
      if(AakCszwetd == DFYlmoGwBc){AVhszJQsup = true;}
      else if(DFYlmoGwBc == AakCszwetd){bEmZfRcHnG = true;}
      if(cEmbVJfXOt == MUuJoorhFg){bkwJodQhwp = true;}
      else if(MUuJoorhFg == cEmbVJfXOt){ZbDxYGeJAG = true;}
      if(EtCOkgeAsy == RQyeWSXCyt){cgYkKVXVUR = true;}
      else if(RQyeWSXCyt == EtCOkgeAsy){FGLSTSKfdP = true;}
      if(enfjBLGMQr == kpDbFSGRPA){OLljEIEtPB = true;}
      else if(kpDbFSGRPA == enfjBLGMQr){BgqRIAqohL = true;}
      if(XCzzmbIzwp == JZFbhRnlPh){jzoEqZQrGG = true;}
      if(INRXeGYVRM == jixSglGsOT){ntCtjSwxhd = true;}
      if(UwkuynYDZK == QExHrVRSDV){kuXdaPyLEf = true;}
      while(JZFbhRnlPh == XCzzmbIzwp){qCDsMjDOMJ = true;}
      while(jixSglGsOT == jixSglGsOT){JRKVVUrUFN = true;}
      while(QExHrVRSDV == QExHrVRSDV){HxcXFrklnX = true;}
      if(iaREWqKVxE == true){iaREWqKVxE = false;}
      if(dlmPKBrjtS == true){dlmPKBrjtS = false;}
      if(LMCwjFcyjM == true){LMCwjFcyjM = false;}
      if(AVhszJQsup == true){AVhszJQsup = false;}
      if(bkwJodQhwp == true){bkwJodQhwp = false;}
      if(cgYkKVXVUR == true){cgYkKVXVUR = false;}
      if(OLljEIEtPB == true){OLljEIEtPB = false;}
      if(jzoEqZQrGG == true){jzoEqZQrGG = false;}
      if(ntCtjSwxhd == true){ntCtjSwxhd = false;}
      if(kuXdaPyLEf == true){kuXdaPyLEf = false;}
      if(ZWRtFcrTsj == true){ZWRtFcrTsj = false;}
      if(EePOcTJrAl == true){EePOcTJrAl = false;}
      if(MHMlQobLcb == true){MHMlQobLcb = false;}
      if(bEmZfRcHnG == true){bEmZfRcHnG = false;}
      if(ZbDxYGeJAG == true){ZbDxYGeJAG = false;}
      if(FGLSTSKfdP == true){FGLSTSKfdP = false;}
      if(BgqRIAqohL == true){BgqRIAqohL = false;}
      if(qCDsMjDOMJ == true){qCDsMjDOMJ = false;}
      if(JRKVVUrUFN == true){JRKVVUrUFN = false;}
      if(HxcXFrklnX == true){HxcXFrklnX = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class FZITICUSCV
{ 
  void BilfgfLdxQ()
  { 
      bool WkQnLpkoxH = false;
      bool IfAUMgYPSf = false;
      bool KVpCOQdcHl = false;
      bool lFmQAnYhfW = false;
      bool IeGxzHkfWf = false;
      bool xSCQTAtNYt = false;
      bool MIgLVDsjTY = false;
      bool HqiuXfPsDG = false;
      bool exGaoSDWxz = false;
      bool sLIlJAxuau = false;
      bool OALxYGjGsn = false;
      bool kAJROPBFWC = false;
      bool AVmTewhxkW = false;
      bool hURIrekICi = false;
      bool iwdIOrBpWt = false;
      bool yrYYtsNqSb = false;
      bool XlUVGQhBZj = false;
      bool dsCnSEqdFl = false;
      bool uqZqXowsNz = false;
      bool RtoaKxbICy = false;
      string nEfOramPrA;
      string mAZrLekFXo;
      string rlacIDHOVN;
      string zWGbUKNlpS;
      string PWsiFFXXLJ;
      string nXSolBcCGo;
      string TYsdBPsxWA;
      string RyOEZUrrXD;
      string eiCMZaERoS;
      string gLfByqdOgo;
      string LZAKroINPR;
      string IkdDJkVgEa;
      string LbIETGSNFi;
      string qdKhqFhrUj;
      string RpBXJwgbqN;
      string UxJGciQwql;
      string WuHgaeZuLD;
      string CdLUIUZjuW;
      string YpVqNtTEFI;
      string nlAiMWiUxd;
      if(nEfOramPrA == LZAKroINPR){WkQnLpkoxH = true;}
      else if(LZAKroINPR == nEfOramPrA){OALxYGjGsn = true;}
      if(mAZrLekFXo == IkdDJkVgEa){IfAUMgYPSf = true;}
      else if(IkdDJkVgEa == mAZrLekFXo){kAJROPBFWC = true;}
      if(rlacIDHOVN == LbIETGSNFi){KVpCOQdcHl = true;}
      else if(LbIETGSNFi == rlacIDHOVN){AVmTewhxkW = true;}
      if(zWGbUKNlpS == qdKhqFhrUj){lFmQAnYhfW = true;}
      else if(qdKhqFhrUj == zWGbUKNlpS){hURIrekICi = true;}
      if(PWsiFFXXLJ == RpBXJwgbqN){IeGxzHkfWf = true;}
      else if(RpBXJwgbqN == PWsiFFXXLJ){iwdIOrBpWt = true;}
      if(nXSolBcCGo == UxJGciQwql){xSCQTAtNYt = true;}
      else if(UxJGciQwql == nXSolBcCGo){yrYYtsNqSb = true;}
      if(TYsdBPsxWA == WuHgaeZuLD){MIgLVDsjTY = true;}
      else if(WuHgaeZuLD == TYsdBPsxWA){XlUVGQhBZj = true;}
      if(RyOEZUrrXD == CdLUIUZjuW){HqiuXfPsDG = true;}
      if(eiCMZaERoS == YpVqNtTEFI){exGaoSDWxz = true;}
      if(gLfByqdOgo == nlAiMWiUxd){sLIlJAxuau = true;}
      while(CdLUIUZjuW == RyOEZUrrXD){dsCnSEqdFl = true;}
      while(YpVqNtTEFI == YpVqNtTEFI){uqZqXowsNz = true;}
      while(nlAiMWiUxd == nlAiMWiUxd){RtoaKxbICy = true;}
      if(WkQnLpkoxH == true){WkQnLpkoxH = false;}
      if(IfAUMgYPSf == true){IfAUMgYPSf = false;}
      if(KVpCOQdcHl == true){KVpCOQdcHl = false;}
      if(lFmQAnYhfW == true){lFmQAnYhfW = false;}
      if(IeGxzHkfWf == true){IeGxzHkfWf = false;}
      if(xSCQTAtNYt == true){xSCQTAtNYt = false;}
      if(MIgLVDsjTY == true){MIgLVDsjTY = false;}
      if(HqiuXfPsDG == true){HqiuXfPsDG = false;}
      if(exGaoSDWxz == true){exGaoSDWxz = false;}
      if(sLIlJAxuau == true){sLIlJAxuau = false;}
      if(OALxYGjGsn == true){OALxYGjGsn = false;}
      if(kAJROPBFWC == true){kAJROPBFWC = false;}
      if(AVmTewhxkW == true){AVmTewhxkW = false;}
      if(hURIrekICi == true){hURIrekICi = false;}
      if(iwdIOrBpWt == true){iwdIOrBpWt = false;}
      if(yrYYtsNqSb == true){yrYYtsNqSb = false;}
      if(XlUVGQhBZj == true){XlUVGQhBZj = false;}
      if(dsCnSEqdFl == true){dsCnSEqdFl = false;}
      if(uqZqXowsNz == true){uqZqXowsNz = false;}
      if(RtoaKxbICy == true){RtoaKxbICy = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class HBQNTLWAXH
{ 
  void bchpAKTggR()
  { 
      bool WYJPydbEEs = false;
      bool tJMGafkZLu = false;
      bool soaLfoKsRd = false;
      bool mUBzkKGZKs = false;
      bool knXwqXJzQc = false;
      bool ypVIZhxyjJ = false;
      bool ThlaGYIMUP = false;
      bool ZLPSKFQeUI = false;
      bool eKcofxzrZD = false;
      bool NIpBYDBxpS = false;
      bool OxdBDmZDyU = false;
      bool QSdbdIExuI = false;
      bool YQmRCQUOsH = false;
      bool DTnBshgbls = false;
      bool WutFmteOWP = false;
      bool yECgsyJMyl = false;
      bool RLKpQwebhw = false;
      bool bbLBldVgdH = false;
      bool lGrcIzRHHt = false;
      bool XUczbLkDnp = false;
      string xJZjOUIZOo;
      string nCLBzIfocu;
      string ACJjDYBpyH;
      string JmQzLBkTfo;
      string xaSVyDsuJJ;
      string gEnyFtApfp;
      string TRbGeAlLpy;
      string WLJnxYjmkA;
      string eGgnaFzRsQ;
      string BumoVfzLqy;
      string RhELlUuABg;
      string KMEfLMkmfY;
      string BTRYwaXTRR;
      string YXumixBUCF;
      string KyQMGnqHdJ;
      string tMeSwxPeOK;
      string wahiHlRRxN;
      string KPkaNCDFSI;
      string jQpIXMscpk;
      string hVFqIjPhET;
      if(xJZjOUIZOo == RhELlUuABg){WYJPydbEEs = true;}
      else if(RhELlUuABg == xJZjOUIZOo){OxdBDmZDyU = true;}
      if(nCLBzIfocu == KMEfLMkmfY){tJMGafkZLu = true;}
      else if(KMEfLMkmfY == nCLBzIfocu){QSdbdIExuI = true;}
      if(ACJjDYBpyH == BTRYwaXTRR){soaLfoKsRd = true;}
      else if(BTRYwaXTRR == ACJjDYBpyH){YQmRCQUOsH = true;}
      if(JmQzLBkTfo == YXumixBUCF){mUBzkKGZKs = true;}
      else if(YXumixBUCF == JmQzLBkTfo){DTnBshgbls = true;}
      if(xaSVyDsuJJ == KyQMGnqHdJ){knXwqXJzQc = true;}
      else if(KyQMGnqHdJ == xaSVyDsuJJ){WutFmteOWP = true;}
      if(gEnyFtApfp == tMeSwxPeOK){ypVIZhxyjJ = true;}
      else if(tMeSwxPeOK == gEnyFtApfp){yECgsyJMyl = true;}
      if(TRbGeAlLpy == wahiHlRRxN){ThlaGYIMUP = true;}
      else if(wahiHlRRxN == TRbGeAlLpy){RLKpQwebhw = true;}
      if(WLJnxYjmkA == KPkaNCDFSI){ZLPSKFQeUI = true;}
      if(eGgnaFzRsQ == jQpIXMscpk){eKcofxzrZD = true;}
      if(BumoVfzLqy == hVFqIjPhET){NIpBYDBxpS = true;}
      while(KPkaNCDFSI == WLJnxYjmkA){bbLBldVgdH = true;}
      while(jQpIXMscpk == jQpIXMscpk){lGrcIzRHHt = true;}
      while(hVFqIjPhET == hVFqIjPhET){XUczbLkDnp = true;}
      if(WYJPydbEEs == true){WYJPydbEEs = false;}
      if(tJMGafkZLu == true){tJMGafkZLu = false;}
      if(soaLfoKsRd == true){soaLfoKsRd = false;}
      if(mUBzkKGZKs == true){mUBzkKGZKs = false;}
      if(knXwqXJzQc == true){knXwqXJzQc = false;}
      if(ypVIZhxyjJ == true){ypVIZhxyjJ = false;}
      if(ThlaGYIMUP == true){ThlaGYIMUP = false;}
      if(ZLPSKFQeUI == true){ZLPSKFQeUI = false;}
      if(eKcofxzrZD == true){eKcofxzrZD = false;}
      if(NIpBYDBxpS == true){NIpBYDBxpS = false;}
      if(OxdBDmZDyU == true){OxdBDmZDyU = false;}
      if(QSdbdIExuI == true){QSdbdIExuI = false;}
      if(YQmRCQUOsH == true){YQmRCQUOsH = false;}
      if(DTnBshgbls == true){DTnBshgbls = false;}
      if(WutFmteOWP == true){WutFmteOWP = false;}
      if(yECgsyJMyl == true){yECgsyJMyl = false;}
      if(RLKpQwebhw == true){RLKpQwebhw = false;}
      if(bbLBldVgdH == true){bbLBldVgdH = false;}
      if(lGrcIzRHHt == true){lGrcIzRHHt = false;}
      if(XUczbLkDnp == true){XUczbLkDnp = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class LZQWEVHEFD
{ 
  void amhhkEFyxH()
  { 
      bool jHqNbuJWpG = false;
      bool UBjAEOadJQ = false;
      bool zJMcJqNsDo = false;
      bool CdBMuIrzpi = false;
      bool GLWxtIkfLr = false;
      bool CeTmBauNEj = false;
      bool hPSAEqzWFu = false;
      bool VbnZKmlOiB = false;
      bool GhgKmWKOLT = false;
      bool NduGBprWsD = false;
      bool INZPWZqscN = false;
      bool nfeCczhIMg = false;
      bool gjLkhrghXT = false;
      bool uPUfrsHRnM = false;
      bool fQlxegyrcB = false;
      bool IjJMVXBnhe = false;
      bool sJVISXKzKi = false;
      bool rQTABPxOFA = false;
      bool soEWLKGIJT = false;
      bool qSiJSVudeH = false;
      string BFNLsbVJHm;
      string HpANsRddow;
      string IsxPkuhjPW;
      string AjtMmHMrPN;
      string gJggHuiUER;
      string BycWNIIxZx;
      string sltjmXumal;
      string FkNaOyLPHp;
      string MNeyUCGXye;
      string zOSSUuPwtj;
      string zutSLQjBHO;
      string wroikfGwPk;
      string QXnwlpSuGT;
      string iPVXqQSMlE;
      string REQihGZihn;
      string oTgISbGyfV;
      string xnunfgWRrT;
      string MsJKSLGFNf;
      string QiNRdPhMEO;
      string JUfQGcJcDA;
      if(BFNLsbVJHm == zutSLQjBHO){jHqNbuJWpG = true;}
      else if(zutSLQjBHO == BFNLsbVJHm){INZPWZqscN = true;}
      if(HpANsRddow == wroikfGwPk){UBjAEOadJQ = true;}
      else if(wroikfGwPk == HpANsRddow){nfeCczhIMg = true;}
      if(IsxPkuhjPW == QXnwlpSuGT){zJMcJqNsDo = true;}
      else if(QXnwlpSuGT == IsxPkuhjPW){gjLkhrghXT = true;}
      if(AjtMmHMrPN == iPVXqQSMlE){CdBMuIrzpi = true;}
      else if(iPVXqQSMlE == AjtMmHMrPN){uPUfrsHRnM = true;}
      if(gJggHuiUER == REQihGZihn){GLWxtIkfLr = true;}
      else if(REQihGZihn == gJggHuiUER){fQlxegyrcB = true;}
      if(BycWNIIxZx == oTgISbGyfV){CeTmBauNEj = true;}
      else if(oTgISbGyfV == BycWNIIxZx){IjJMVXBnhe = true;}
      if(sltjmXumal == xnunfgWRrT){hPSAEqzWFu = true;}
      else if(xnunfgWRrT == sltjmXumal){sJVISXKzKi = true;}
      if(FkNaOyLPHp == MsJKSLGFNf){VbnZKmlOiB = true;}
      if(MNeyUCGXye == QiNRdPhMEO){GhgKmWKOLT = true;}
      if(zOSSUuPwtj == JUfQGcJcDA){NduGBprWsD = true;}
      while(MsJKSLGFNf == FkNaOyLPHp){rQTABPxOFA = true;}
      while(QiNRdPhMEO == QiNRdPhMEO){soEWLKGIJT = true;}
      while(JUfQGcJcDA == JUfQGcJcDA){qSiJSVudeH = true;}
      if(jHqNbuJWpG == true){jHqNbuJWpG = false;}
      if(UBjAEOadJQ == true){UBjAEOadJQ = false;}
      if(zJMcJqNsDo == true){zJMcJqNsDo = false;}
      if(CdBMuIrzpi == true){CdBMuIrzpi = false;}
      if(GLWxtIkfLr == true){GLWxtIkfLr = false;}
      if(CeTmBauNEj == true){CeTmBauNEj = false;}
      if(hPSAEqzWFu == true){hPSAEqzWFu = false;}
      if(VbnZKmlOiB == true){VbnZKmlOiB = false;}
      if(GhgKmWKOLT == true){GhgKmWKOLT = false;}
      if(NduGBprWsD == true){NduGBprWsD = false;}
      if(INZPWZqscN == true){INZPWZqscN = false;}
      if(nfeCczhIMg == true){nfeCczhIMg = false;}
      if(gjLkhrghXT == true){gjLkhrghXT = false;}
      if(uPUfrsHRnM == true){uPUfrsHRnM = false;}
      if(fQlxegyrcB == true){fQlxegyrcB = false;}
      if(IjJMVXBnhe == true){IjJMVXBnhe = false;}
      if(sJVISXKzKi == true){sJVISXKzKi = false;}
      if(rQTABPxOFA == true){rQTABPxOFA = false;}
      if(soEWLKGIJT == true){soEWLKGIJT = false;}
      if(qSiJSVudeH == true){qSiJSVudeH = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class TOYQHTRTDZ
{ 
  void AWSnxQTsmA()
  { 
      bool BjxGjbIexa = false;
      bool hWlAaYmJtL = false;
      bool KKshuTzyfF = false;
      bool PwWMrMmBRL = false;
      bool QVDXZBFSor = false;
      bool YrjCJpqOLP = false;
      bool bKyqLkAYHO = false;
      bool klqhtnHVHs = false;
      bool OgIngWLTDB = false;
      bool UXoBjGXLLo = false;
      bool BfKaGlACIU = false;
      bool hVHRBuBKJn = false;
      bool ZfVFsMwpym = false;
      bool QuJSrhVhgt = false;
      bool WJLhTzQWzn = false;
      bool FMCXPVJEgt = false;
      bool pKDUElLnZS = false;
      bool YScORPUmls = false;
      bool wYpKhDskDV = false;
      bool XRAmEMFpdg = false;
      string mplFROzxto;
      string wRCcSonOpU;
      string bQIogoDIML;
      string btzisWHTDb;
      string OIjCZQNOwd;
      string CoXVBWhxXb;
      string KqjhMCSTiu;
      string hTKOFTfFOP;
      string aoMiJmWdhW;
      string oJubQXXBoX;
      string yteAuheJPg;
      string pbhHAVdBYZ;
      string eolMGXYixh;
      string wdPqRgJLma;
      string HNNAfMamau;
      string sVcPrJISsX;
      string JuLhkLLqpT;
      string LRNxRRbkfs;
      string wkIBnZBAyI;
      string YqSPQLBeOT;
      if(mplFROzxto == yteAuheJPg){BjxGjbIexa = true;}
      else if(yteAuheJPg == mplFROzxto){BfKaGlACIU = true;}
      if(wRCcSonOpU == pbhHAVdBYZ){hWlAaYmJtL = true;}
      else if(pbhHAVdBYZ == wRCcSonOpU){hVHRBuBKJn = true;}
      if(bQIogoDIML == eolMGXYixh){KKshuTzyfF = true;}
      else if(eolMGXYixh == bQIogoDIML){ZfVFsMwpym = true;}
      if(btzisWHTDb == wdPqRgJLma){PwWMrMmBRL = true;}
      else if(wdPqRgJLma == btzisWHTDb){QuJSrhVhgt = true;}
      if(OIjCZQNOwd == HNNAfMamau){QVDXZBFSor = true;}
      else if(HNNAfMamau == OIjCZQNOwd){WJLhTzQWzn = true;}
      if(CoXVBWhxXb == sVcPrJISsX){YrjCJpqOLP = true;}
      else if(sVcPrJISsX == CoXVBWhxXb){FMCXPVJEgt = true;}
      if(KqjhMCSTiu == JuLhkLLqpT){bKyqLkAYHO = true;}
      else if(JuLhkLLqpT == KqjhMCSTiu){pKDUElLnZS = true;}
      if(hTKOFTfFOP == LRNxRRbkfs){klqhtnHVHs = true;}
      if(aoMiJmWdhW == wkIBnZBAyI){OgIngWLTDB = true;}
      if(oJubQXXBoX == YqSPQLBeOT){UXoBjGXLLo = true;}
      while(LRNxRRbkfs == hTKOFTfFOP){YScORPUmls = true;}
      while(wkIBnZBAyI == wkIBnZBAyI){wYpKhDskDV = true;}
      while(YqSPQLBeOT == YqSPQLBeOT){XRAmEMFpdg = true;}
      if(BjxGjbIexa == true){BjxGjbIexa = false;}
      if(hWlAaYmJtL == true){hWlAaYmJtL = false;}
      if(KKshuTzyfF == true){KKshuTzyfF = false;}
      if(PwWMrMmBRL == true){PwWMrMmBRL = false;}
      if(QVDXZBFSor == true){QVDXZBFSor = false;}
      if(YrjCJpqOLP == true){YrjCJpqOLP = false;}
      if(bKyqLkAYHO == true){bKyqLkAYHO = false;}
      if(klqhtnHVHs == true){klqhtnHVHs = false;}
      if(OgIngWLTDB == true){OgIngWLTDB = false;}
      if(UXoBjGXLLo == true){UXoBjGXLLo = false;}
      if(BfKaGlACIU == true){BfKaGlACIU = false;}
      if(hVHRBuBKJn == true){hVHRBuBKJn = false;}
      if(ZfVFsMwpym == true){ZfVFsMwpym = false;}
      if(QuJSrhVhgt == true){QuJSrhVhgt = false;}
      if(WJLhTzQWzn == true){WJLhTzQWzn = false;}
      if(FMCXPVJEgt == true){FMCXPVJEgt = false;}
      if(pKDUElLnZS == true){pKDUElLnZS = false;}
      if(YScORPUmls == true){YScORPUmls = false;}
      if(wYpKhDskDV == true){wYpKhDskDV = false;}
      if(XRAmEMFpdg == true){XRAmEMFpdg = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class KNMPNYIQGI
{ 
  void IxfDrRCdNV()
  { 
      bool sBQJKAVGZg = false;
      bool TirEqsxZBs = false;
      bool OeZQzuqsUS = false;
      bool kacQfUhiVk = false;
      bool ZnyxlJQhmu = false;
      bool DbuuDNbAJO = false;
      bool JblGwrGaYV = false;
      bool KOEPTagbdo = false;
      bool eIGYOIegMR = false;
      bool shZHbyBqBs = false;
      bool CoIQkoXfbc = false;
      bool fzVTiAUMqm = false;
      bool NZNGccownV = false;
      bool YpakmoApnZ = false;
      bool kzFjksMFXa = false;
      bool cozNfcbBmI = false;
      bool AaqGEpYkgs = false;
      bool AeXRBNUdVi = false;
      bool QiYMriqMEJ = false;
      bool NyDfYJHyeu = false;
      string gezejYXSEu;
      string JnFyMOfKIc;
      string QoehHCPKPu;
      string CGluoUbhXL;
      string mOSBSFItre;
      string fXxuirARXh;
      string JNCIrDBJIq;
      string mylxpCVcOC;
      string tURkPeIqMx;
      string UJJpCZLJJP;
      string DylArglAFg;
      string VXDVnnuRrN;
      string uKxKWcnutQ;
      string pMTzyuiQsh;
      string rHlebxGnCO;
      string dtRuUrBadO;
      string spFnpJDEWs;
      string EdXKUmYRiY;
      string WzsflwuXeG;
      string sImdoBBxoR;
      if(gezejYXSEu == DylArglAFg){sBQJKAVGZg = true;}
      else if(DylArglAFg == gezejYXSEu){CoIQkoXfbc = true;}
      if(JnFyMOfKIc == VXDVnnuRrN){TirEqsxZBs = true;}
      else if(VXDVnnuRrN == JnFyMOfKIc){fzVTiAUMqm = true;}
      if(QoehHCPKPu == uKxKWcnutQ){OeZQzuqsUS = true;}
      else if(uKxKWcnutQ == QoehHCPKPu){NZNGccownV = true;}
      if(CGluoUbhXL == pMTzyuiQsh){kacQfUhiVk = true;}
      else if(pMTzyuiQsh == CGluoUbhXL){YpakmoApnZ = true;}
      if(mOSBSFItre == rHlebxGnCO){ZnyxlJQhmu = true;}
      else if(rHlebxGnCO == mOSBSFItre){kzFjksMFXa = true;}
      if(fXxuirARXh == dtRuUrBadO){DbuuDNbAJO = true;}
      else if(dtRuUrBadO == fXxuirARXh){cozNfcbBmI = true;}
      if(JNCIrDBJIq == spFnpJDEWs){JblGwrGaYV = true;}
      else if(spFnpJDEWs == JNCIrDBJIq){AaqGEpYkgs = true;}
      if(mylxpCVcOC == EdXKUmYRiY){KOEPTagbdo = true;}
      if(tURkPeIqMx == WzsflwuXeG){eIGYOIegMR = true;}
      if(UJJpCZLJJP == sImdoBBxoR){shZHbyBqBs = true;}
      while(EdXKUmYRiY == mylxpCVcOC){AeXRBNUdVi = true;}
      while(WzsflwuXeG == WzsflwuXeG){QiYMriqMEJ = true;}
      while(sImdoBBxoR == sImdoBBxoR){NyDfYJHyeu = true;}
      if(sBQJKAVGZg == true){sBQJKAVGZg = false;}
      if(TirEqsxZBs == true){TirEqsxZBs = false;}
      if(OeZQzuqsUS == true){OeZQzuqsUS = false;}
      if(kacQfUhiVk == true){kacQfUhiVk = false;}
      if(ZnyxlJQhmu == true){ZnyxlJQhmu = false;}
      if(DbuuDNbAJO == true){DbuuDNbAJO = false;}
      if(JblGwrGaYV == true){JblGwrGaYV = false;}
      if(KOEPTagbdo == true){KOEPTagbdo = false;}
      if(eIGYOIegMR == true){eIGYOIegMR = false;}
      if(shZHbyBqBs == true){shZHbyBqBs = false;}
      if(CoIQkoXfbc == true){CoIQkoXfbc = false;}
      if(fzVTiAUMqm == true){fzVTiAUMqm = false;}
      if(NZNGccownV == true){NZNGccownV = false;}
      if(YpakmoApnZ == true){YpakmoApnZ = false;}
      if(kzFjksMFXa == true){kzFjksMFXa = false;}
      if(cozNfcbBmI == true){cozNfcbBmI = false;}
      if(AaqGEpYkgs == true){AaqGEpYkgs = false;}
      if(AeXRBNUdVi == true){AeXRBNUdVi = false;}
      if(QiYMriqMEJ == true){QiYMriqMEJ = false;}
      if(NyDfYJHyeu == true){NyDfYJHyeu = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class TKALIQCQHZ
{ 
  void QhOOgJJuxa()
  { 
      bool aMTZjSyCgF = false;
      bool lchNsQnzwG = false;
      bool PMaFFGIzDr = false;
      bool mipCbcxKjI = false;
      bool dGgtNOtRpI = false;
      bool xAlhiOkOTc = false;
      bool KzznSCmflQ = false;
      bool ScOmbIfgqq = false;
      bool MpIutlxHSN = false;
      bool qiqGxdHsaK = false;
      bool aOfZoTkyFZ = false;
      bool hEWcQUpEsg = false;
      bool FfMXYjlIpy = false;
      bool BlFgPyJiFa = false;
      bool AzBremLNoc = false;
      bool mDztFuBHAF = false;
      bool hcIHYwzpMS = false;
      bool KHySfFeTsl = false;
      bool XXSMKylKaU = false;
      bool wBhArXqsTi = false;
      string GlnqIBPMyj;
      string aubMtKuOmg;
      string HnIaBwkGfe;
      string DqEFDhWWig;
      string COihhTiQjA;
      string xLOmmScMpM;
      string PIfSgipWIL;
      string nXeFdsFarg;
      string NTWehqcQSk;
      string EJgWQthQAz;
      string dMHYMZgIJt;
      string NBUIzwlAko;
      string GZDXGdpIoj;
      string KnZsDAMxRI;
      string KTHYWDnYXU;
      string HgeLrEIiRi;
      string iYTYiYbbEy;
      string jnhcemReBD;
      string oRjUbcJOAz;
      string rcfiYlzhoy;
      if(GlnqIBPMyj == dMHYMZgIJt){aMTZjSyCgF = true;}
      else if(dMHYMZgIJt == GlnqIBPMyj){aOfZoTkyFZ = true;}
      if(aubMtKuOmg == NBUIzwlAko){lchNsQnzwG = true;}
      else if(NBUIzwlAko == aubMtKuOmg){hEWcQUpEsg = true;}
      if(HnIaBwkGfe == GZDXGdpIoj){PMaFFGIzDr = true;}
      else if(GZDXGdpIoj == HnIaBwkGfe){FfMXYjlIpy = true;}
      if(DqEFDhWWig == KnZsDAMxRI){mipCbcxKjI = true;}
      else if(KnZsDAMxRI == DqEFDhWWig){BlFgPyJiFa = true;}
      if(COihhTiQjA == KTHYWDnYXU){dGgtNOtRpI = true;}
      else if(KTHYWDnYXU == COihhTiQjA){AzBremLNoc = true;}
      if(xLOmmScMpM == HgeLrEIiRi){xAlhiOkOTc = true;}
      else if(HgeLrEIiRi == xLOmmScMpM){mDztFuBHAF = true;}
      if(PIfSgipWIL == iYTYiYbbEy){KzznSCmflQ = true;}
      else if(iYTYiYbbEy == PIfSgipWIL){hcIHYwzpMS = true;}
      if(nXeFdsFarg == jnhcemReBD){ScOmbIfgqq = true;}
      if(NTWehqcQSk == oRjUbcJOAz){MpIutlxHSN = true;}
      if(EJgWQthQAz == rcfiYlzhoy){qiqGxdHsaK = true;}
      while(jnhcemReBD == nXeFdsFarg){KHySfFeTsl = true;}
      while(oRjUbcJOAz == oRjUbcJOAz){XXSMKylKaU = true;}
      while(rcfiYlzhoy == rcfiYlzhoy){wBhArXqsTi = true;}
      if(aMTZjSyCgF == true){aMTZjSyCgF = false;}
      if(lchNsQnzwG == true){lchNsQnzwG = false;}
      if(PMaFFGIzDr == true){PMaFFGIzDr = false;}
      if(mipCbcxKjI == true){mipCbcxKjI = false;}
      if(dGgtNOtRpI == true){dGgtNOtRpI = false;}
      if(xAlhiOkOTc == true){xAlhiOkOTc = false;}
      if(KzznSCmflQ == true){KzznSCmflQ = false;}
      if(ScOmbIfgqq == true){ScOmbIfgqq = false;}
      if(MpIutlxHSN == true){MpIutlxHSN = false;}
      if(qiqGxdHsaK == true){qiqGxdHsaK = false;}
      if(aOfZoTkyFZ == true){aOfZoTkyFZ = false;}
      if(hEWcQUpEsg == true){hEWcQUpEsg = false;}
      if(FfMXYjlIpy == true){FfMXYjlIpy = false;}
      if(BlFgPyJiFa == true){BlFgPyJiFa = false;}
      if(AzBremLNoc == true){AzBremLNoc = false;}
      if(mDztFuBHAF == true){mDztFuBHAF = false;}
      if(hcIHYwzpMS == true){hcIHYwzpMS = false;}
      if(KHySfFeTsl == true){KHySfFeTsl = false;}
      if(XXSMKylKaU == true){XXSMKylKaU = false;}
      if(wBhArXqsTi == true){wBhArXqsTi = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class WPDTUOTNGL
{ 
  void xQhleTLugd()
  { 
      bool wSTiPlKEaF = false;
      bool fWDHWBIoIO = false;
      bool yNMYDlprCk = false;
      bool agxLRAJkBR = false;
      bool fAeBdFiANO = false;
      bool DdLbsiGufc = false;
      bool uRBpdzZqoW = false;
      bool qXnqhyhKux = false;
      bool DpemhwUUSi = false;
      bool tOFYVNyoWe = false;
      bool fqLpXfpTtt = false;
      bool AuAhYFlNHh = false;
      bool dEYGbcROUT = false;
      bool AsnPQMdnPB = false;
      bool FBaXizOXzQ = false;
      bool ajgoAaRFOt = false;
      bool NazZtGGjQM = false;
      bool ayyGbcdBWb = false;
      bool OtPDrPMyPp = false;
      bool tYZVndBAcb = false;
      string LjMazQfWBb;
      string YNLssnbFCg;
      string zTuHqwpWrf;
      string jQtsRBTOll;
      string ZZGDdjNjqR;
      string YgcJLqoFiD;
      string aJeVqITRaq;
      string UMSQGZMqdH;
      string iFeZHDmkhZ;
      string MNeiKQtkMV;
      string PuJAxLNMDk;
      string exabTVeFNn;
      string UijAdGgjGp;
      string fadHrmuebu;
      string pZgwuPlDPo;
      string lnWYAgKIVq;
      string edGMFDSTif;
      string ZzdSxuBnEO;
      string TcUQEqEFGK;
      string cmIkQMTUpr;
      if(LjMazQfWBb == PuJAxLNMDk){wSTiPlKEaF = true;}
      else if(PuJAxLNMDk == LjMazQfWBb){fqLpXfpTtt = true;}
      if(YNLssnbFCg == exabTVeFNn){fWDHWBIoIO = true;}
      else if(exabTVeFNn == YNLssnbFCg){AuAhYFlNHh = true;}
      if(zTuHqwpWrf == UijAdGgjGp){yNMYDlprCk = true;}
      else if(UijAdGgjGp == zTuHqwpWrf){dEYGbcROUT = true;}
      if(jQtsRBTOll == fadHrmuebu){agxLRAJkBR = true;}
      else if(fadHrmuebu == jQtsRBTOll){AsnPQMdnPB = true;}
      if(ZZGDdjNjqR == pZgwuPlDPo){fAeBdFiANO = true;}
      else if(pZgwuPlDPo == ZZGDdjNjqR){FBaXizOXzQ = true;}
      if(YgcJLqoFiD == lnWYAgKIVq){DdLbsiGufc = true;}
      else if(lnWYAgKIVq == YgcJLqoFiD){ajgoAaRFOt = true;}
      if(aJeVqITRaq == edGMFDSTif){uRBpdzZqoW = true;}
      else if(edGMFDSTif == aJeVqITRaq){NazZtGGjQM = true;}
      if(UMSQGZMqdH == ZzdSxuBnEO){qXnqhyhKux = true;}
      if(iFeZHDmkhZ == TcUQEqEFGK){DpemhwUUSi = true;}
      if(MNeiKQtkMV == cmIkQMTUpr){tOFYVNyoWe = true;}
      while(ZzdSxuBnEO == UMSQGZMqdH){ayyGbcdBWb = true;}
      while(TcUQEqEFGK == TcUQEqEFGK){OtPDrPMyPp = true;}
      while(cmIkQMTUpr == cmIkQMTUpr){tYZVndBAcb = true;}
      if(wSTiPlKEaF == true){wSTiPlKEaF = false;}
      if(fWDHWBIoIO == true){fWDHWBIoIO = false;}
      if(yNMYDlprCk == true){yNMYDlprCk = false;}
      if(agxLRAJkBR == true){agxLRAJkBR = false;}
      if(fAeBdFiANO == true){fAeBdFiANO = false;}
      if(DdLbsiGufc == true){DdLbsiGufc = false;}
      if(uRBpdzZqoW == true){uRBpdzZqoW = false;}
      if(qXnqhyhKux == true){qXnqhyhKux = false;}
      if(DpemhwUUSi == true){DpemhwUUSi = false;}
      if(tOFYVNyoWe == true){tOFYVNyoWe = false;}
      if(fqLpXfpTtt == true){fqLpXfpTtt = false;}
      if(AuAhYFlNHh == true){AuAhYFlNHh = false;}
      if(dEYGbcROUT == true){dEYGbcROUT = false;}
      if(AsnPQMdnPB == true){AsnPQMdnPB = false;}
      if(FBaXizOXzQ == true){FBaXizOXzQ = false;}
      if(ajgoAaRFOt == true){ajgoAaRFOt = false;}
      if(NazZtGGjQM == true){NazZtGGjQM = false;}
      if(ayyGbcdBWb == true){ayyGbcdBWb = false;}
      if(OtPDrPMyPp == true){OtPDrPMyPp = false;}
      if(tYZVndBAcb == true){tYZVndBAcb = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class WGCJLODCGC
{ 
  void LqYPLMyWiE()
  { 
      bool lqqxwzQBuc = false;
      bool PfrIkqRnqV = false;
      bool EUdyReRwWg = false;
      bool qTZHagXanq = false;
      bool qPwGTjYoMo = false;
      bool wotoKRMrfQ = false;
      bool gTdOlwGjhE = false;
      bool TpzzenXXeh = false;
      bool FcihjCYjxI = false;
      bool TfuXJXkhUX = false;
      bool cnGIVGouKV = false;
      bool soMxKEkudj = false;
      bool XVlYknuboG = false;
      bool DpDHERVaMd = false;
      bool McZbPdSxMF = false;
      bool moEkAHBhWg = false;
      bool KNGDRDlFss = false;
      bool iJizWtuKIG = false;
      bool VyPjTNlRHx = false;
      bool PnEeSyWWJM = false;
      string opqMRgnRDt;
      string jkfJicChCs;
      string ziRuZcBAQe;
      string tIDTeWxziB;
      string mQSptbEzwT;
      string xtDugFXwln;
      string emBXzagMeL;
      string fCzAGiPaAy;
      string YBDwhzEIlY;
      string yBNtWzPtqT;
      string tqUjnuuDox;
      string pxumOcjEpz;
      string VYZFNdoEdG;
      string TUjgEggTIm;
      string EBToiAFZfs;
      string PLEqxUQOVJ;
      string GpYhdUNOih;
      string wPuDuTFkWN;
      string XOYkqHQrjj;
      string PRxyfNckLO;
      if(opqMRgnRDt == tqUjnuuDox){lqqxwzQBuc = true;}
      else if(tqUjnuuDox == opqMRgnRDt){cnGIVGouKV = true;}
      if(jkfJicChCs == pxumOcjEpz){PfrIkqRnqV = true;}
      else if(pxumOcjEpz == jkfJicChCs){soMxKEkudj = true;}
      if(ziRuZcBAQe == VYZFNdoEdG){EUdyReRwWg = true;}
      else if(VYZFNdoEdG == ziRuZcBAQe){XVlYknuboG = true;}
      if(tIDTeWxziB == TUjgEggTIm){qTZHagXanq = true;}
      else if(TUjgEggTIm == tIDTeWxziB){DpDHERVaMd = true;}
      if(mQSptbEzwT == EBToiAFZfs){qPwGTjYoMo = true;}
      else if(EBToiAFZfs == mQSptbEzwT){McZbPdSxMF = true;}
      if(xtDugFXwln == PLEqxUQOVJ){wotoKRMrfQ = true;}
      else if(PLEqxUQOVJ == xtDugFXwln){moEkAHBhWg = true;}
      if(emBXzagMeL == GpYhdUNOih){gTdOlwGjhE = true;}
      else if(GpYhdUNOih == emBXzagMeL){KNGDRDlFss = true;}
      if(fCzAGiPaAy == wPuDuTFkWN){TpzzenXXeh = true;}
      if(YBDwhzEIlY == XOYkqHQrjj){FcihjCYjxI = true;}
      if(yBNtWzPtqT == PRxyfNckLO){TfuXJXkhUX = true;}
      while(wPuDuTFkWN == fCzAGiPaAy){iJizWtuKIG = true;}
      while(XOYkqHQrjj == XOYkqHQrjj){VyPjTNlRHx = true;}
      while(PRxyfNckLO == PRxyfNckLO){PnEeSyWWJM = true;}
      if(lqqxwzQBuc == true){lqqxwzQBuc = false;}
      if(PfrIkqRnqV == true){PfrIkqRnqV = false;}
      if(EUdyReRwWg == true){EUdyReRwWg = false;}
      if(qTZHagXanq == true){qTZHagXanq = false;}
      if(qPwGTjYoMo == true){qPwGTjYoMo = false;}
      if(wotoKRMrfQ == true){wotoKRMrfQ = false;}
      if(gTdOlwGjhE == true){gTdOlwGjhE = false;}
      if(TpzzenXXeh == true){TpzzenXXeh = false;}
      if(FcihjCYjxI == true){FcihjCYjxI = false;}
      if(TfuXJXkhUX == true){TfuXJXkhUX = false;}
      if(cnGIVGouKV == true){cnGIVGouKV = false;}
      if(soMxKEkudj == true){soMxKEkudj = false;}
      if(XVlYknuboG == true){XVlYknuboG = false;}
      if(DpDHERVaMd == true){DpDHERVaMd = false;}
      if(McZbPdSxMF == true){McZbPdSxMF = false;}
      if(moEkAHBhWg == true){moEkAHBhWg = false;}
      if(KNGDRDlFss == true){KNGDRDlFss = false;}
      if(iJizWtuKIG == true){iJizWtuKIG = false;}
      if(VyPjTNlRHx == true){VyPjTNlRHx = false;}
      if(PnEeSyWWJM == true){PnEeSyWWJM = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class ODDEJENHQJ
{ 
  void WwgMwiMEZQ()
  { 
      bool HFaIePWoww = false;
      bool MUJecDNQJH = false;
      bool qPKsgQyGYi = false;
      bool ctwgqcYFle = false;
      bool JiCDrJCYGp = false;
      bool bhwBUquhbN = false;
      bool RPPNSRXbnA = false;
      bool eIeexINHBW = false;
      bool NZzhGuytMA = false;
      bool gqdXNtSojZ = false;
      bool lakFLTDRDM = false;
      bool cnfEAqPgGX = false;
      bool TcPmSmeGQD = false;
      bool pXWbklntWm = false;
      bool qfpAWsLYWV = false;
      bool dkiMFJLxlX = false;
      bool owAAVFQDSN = false;
      bool DVKTfmlPQZ = false;
      bool bFiuZEoKVb = false;
      bool aqHyxtfpdR = false;
      string mmSLusZISb;
      string NFlbGgJFIk;
      string lgRgFuKJOW;
      string HSOEfcjtki;
      string TsXhbPLVcH;
      string sdfjZGUlFz;
      string hQswUuphwd;
      string wOTYRrJiEp;
      string iogGccmddZ;
      string IxokADzbNg;
      string YdZzKdKGSg;
      string xkhPQrjlSq;
      string ILDVVyZhYN;
      string sgVXREPgwy;
      string RfLxbWPZUH;
      string SMIVXMaDdL;
      string EbgEnPPJyL;
      string cCpTZbAGty;
      string iANQufXzzE;
      string dMDjtpyGJM;
      if(mmSLusZISb == YdZzKdKGSg){HFaIePWoww = true;}
      else if(YdZzKdKGSg == mmSLusZISb){lakFLTDRDM = true;}
      if(NFlbGgJFIk == xkhPQrjlSq){MUJecDNQJH = true;}
      else if(xkhPQrjlSq == NFlbGgJFIk){cnfEAqPgGX = true;}
      if(lgRgFuKJOW == ILDVVyZhYN){qPKsgQyGYi = true;}
      else if(ILDVVyZhYN == lgRgFuKJOW){TcPmSmeGQD = true;}
      if(HSOEfcjtki == sgVXREPgwy){ctwgqcYFle = true;}
      else if(sgVXREPgwy == HSOEfcjtki){pXWbklntWm = true;}
      if(TsXhbPLVcH == RfLxbWPZUH){JiCDrJCYGp = true;}
      else if(RfLxbWPZUH == TsXhbPLVcH){qfpAWsLYWV = true;}
      if(sdfjZGUlFz == SMIVXMaDdL){bhwBUquhbN = true;}
      else if(SMIVXMaDdL == sdfjZGUlFz){dkiMFJLxlX = true;}
      if(hQswUuphwd == EbgEnPPJyL){RPPNSRXbnA = true;}
      else if(EbgEnPPJyL == hQswUuphwd){owAAVFQDSN = true;}
      if(wOTYRrJiEp == cCpTZbAGty){eIeexINHBW = true;}
      if(iogGccmddZ == iANQufXzzE){NZzhGuytMA = true;}
      if(IxokADzbNg == dMDjtpyGJM){gqdXNtSojZ = true;}
      while(cCpTZbAGty == wOTYRrJiEp){DVKTfmlPQZ = true;}
      while(iANQufXzzE == iANQufXzzE){bFiuZEoKVb = true;}
      while(dMDjtpyGJM == dMDjtpyGJM){aqHyxtfpdR = true;}
      if(HFaIePWoww == true){HFaIePWoww = false;}
      if(MUJecDNQJH == true){MUJecDNQJH = false;}
      if(qPKsgQyGYi == true){qPKsgQyGYi = false;}
      if(ctwgqcYFle == true){ctwgqcYFle = false;}
      if(JiCDrJCYGp == true){JiCDrJCYGp = false;}
      if(bhwBUquhbN == true){bhwBUquhbN = false;}
      if(RPPNSRXbnA == true){RPPNSRXbnA = false;}
      if(eIeexINHBW == true){eIeexINHBW = false;}
      if(NZzhGuytMA == true){NZzhGuytMA = false;}
      if(gqdXNtSojZ == true){gqdXNtSojZ = false;}
      if(lakFLTDRDM == true){lakFLTDRDM = false;}
      if(cnfEAqPgGX == true){cnfEAqPgGX = false;}
      if(TcPmSmeGQD == true){TcPmSmeGQD = false;}
      if(pXWbklntWm == true){pXWbklntWm = false;}
      if(qfpAWsLYWV == true){qfpAWsLYWV = false;}
      if(dkiMFJLxlX == true){dkiMFJLxlX = false;}
      if(owAAVFQDSN == true){owAAVFQDSN = false;}
      if(DVKTfmlPQZ == true){DVKTfmlPQZ = false;}
      if(bFiuZEoKVb == true){bFiuZEoKVb = false;}
      if(aqHyxtfpdR == true){aqHyxtfpdR = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class XOMFXWKJIN
{ 
  void zEkPDRjcbq()
  { 
      bool PSlRjKHqiJ = false;
      bool fHNsXhYLNu = false;
      bool XtSZoAqAKb = false;
      bool UHkDCEltrH = false;
      bool zahZetKROi = false;
      bool mFbJIUAMci = false;
      bool TGgHnYVKpS = false;
      bool ueSGwxMrtt = false;
      bool oYlanOebth = false;
      bool EYRJmrsZlF = false;
      bool YAbunImVML = false;
      bool HHRhstUFTY = false;
      bool ssPHOVNJSD = false;
      bool DlGoVoxpmf = false;
      bool bJOiZwGjPs = false;
      bool WmGMLejTgR = false;
      bool ucDIHUBcLE = false;
      bool xeSmwjefhR = false;
      bool OcsZgQftdq = false;
      bool EdIUkyGFbE = false;
      string hEaDmaPGCS;
      string SQorGxGEaM;
      string eABaoAxKKZ;
      string cwOfhgBLki;
      string rMuBJBERfl;
      string yYRfVhCzNl;
      string cEubpWCIJY;
      string wtTqTSEARn;
      string wfdYbDehKA;
      string dCxzGnQSKm;
      string ywHGpDFZLD;
      string cCgZpxZWzl;
      string qTyItswTkf;
      string BlpeozXXiX;
      string yFWHXbVXII;
      string NtSXudyzLw;
      string GknfCqMCkp;
      string YCmbnlxpkS;
      string XYLbSGSRiL;
      string BYLmQMQpFg;
      if(hEaDmaPGCS == ywHGpDFZLD){PSlRjKHqiJ = true;}
      else if(ywHGpDFZLD == hEaDmaPGCS){YAbunImVML = true;}
      if(SQorGxGEaM == cCgZpxZWzl){fHNsXhYLNu = true;}
      else if(cCgZpxZWzl == SQorGxGEaM){HHRhstUFTY = true;}
      if(eABaoAxKKZ == qTyItswTkf){XtSZoAqAKb = true;}
      else if(qTyItswTkf == eABaoAxKKZ){ssPHOVNJSD = true;}
      if(cwOfhgBLki == BlpeozXXiX){UHkDCEltrH = true;}
      else if(BlpeozXXiX == cwOfhgBLki){DlGoVoxpmf = true;}
      if(rMuBJBERfl == yFWHXbVXII){zahZetKROi = true;}
      else if(yFWHXbVXII == rMuBJBERfl){bJOiZwGjPs = true;}
      if(yYRfVhCzNl == NtSXudyzLw){mFbJIUAMci = true;}
      else if(NtSXudyzLw == yYRfVhCzNl){WmGMLejTgR = true;}
      if(cEubpWCIJY == GknfCqMCkp){TGgHnYVKpS = true;}
      else if(GknfCqMCkp == cEubpWCIJY){ucDIHUBcLE = true;}
      if(wtTqTSEARn == YCmbnlxpkS){ueSGwxMrtt = true;}
      if(wfdYbDehKA == XYLbSGSRiL){oYlanOebth = true;}
      if(dCxzGnQSKm == BYLmQMQpFg){EYRJmrsZlF = true;}
      while(YCmbnlxpkS == wtTqTSEARn){xeSmwjefhR = true;}
      while(XYLbSGSRiL == XYLbSGSRiL){OcsZgQftdq = true;}
      while(BYLmQMQpFg == BYLmQMQpFg){EdIUkyGFbE = true;}
      if(PSlRjKHqiJ == true){PSlRjKHqiJ = false;}
      if(fHNsXhYLNu == true){fHNsXhYLNu = false;}
      if(XtSZoAqAKb == true){XtSZoAqAKb = false;}
      if(UHkDCEltrH == true){UHkDCEltrH = false;}
      if(zahZetKROi == true){zahZetKROi = false;}
      if(mFbJIUAMci == true){mFbJIUAMci = false;}
      if(TGgHnYVKpS == true){TGgHnYVKpS = false;}
      if(ueSGwxMrtt == true){ueSGwxMrtt = false;}
      if(oYlanOebth == true){oYlanOebth = false;}
      if(EYRJmrsZlF == true){EYRJmrsZlF = false;}
      if(YAbunImVML == true){YAbunImVML = false;}
      if(HHRhstUFTY == true){HHRhstUFTY = false;}
      if(ssPHOVNJSD == true){ssPHOVNJSD = false;}
      if(DlGoVoxpmf == true){DlGoVoxpmf = false;}
      if(bJOiZwGjPs == true){bJOiZwGjPs = false;}
      if(WmGMLejTgR == true){WmGMLejTgR = false;}
      if(ucDIHUBcLE == true){ucDIHUBcLE = false;}
      if(xeSmwjefhR == true){xeSmwjefhR = false;}
      if(OcsZgQftdq == true){OcsZgQftdq = false;}
      if(EdIUkyGFbE == true){EdIUkyGFbE = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class KLFJWFQVZQ
{ 
  void OszgsfPnms()
  { 
      bool gXxOgwyNmd = false;
      bool SliSPQfXUJ = false;
      bool JLJdZLSlfN = false;
      bool DuBzorcomE = false;
      bool goqUPFsbrj = false;
      bool bWrdQUOToU = false;
      bool dLgZaWkjdW = false;
      bool mqkPcTUnOU = false;
      bool RptulfDWhT = false;
      bool cJzRaUHQts = false;
      bool TJyUwjlcAw = false;
      bool AaEUDmRlnt = false;
      bool TNBJtdqSnI = false;
      bool MDtVAHrZyB = false;
      bool tZWlTBEeOn = false;
      bool DVczYFIoZS = false;
      bool sTnrjwghUu = false;
      bool uqmlAsqPor = false;
      bool YMDAEqZtwt = false;
      bool zCzfIZkdBW = false;
      string CzzQDICIIL;
      string xhBaePBJJq;
      string RcLTNJdnKO;
      string inVwUmziJY;
      string WVMAZhyZXt;
      string tURCHZnfCt;
      string dNxscIMFFq;
      string QRzjUuQKsf;
      string KEQQUNVSnu;
      string zSgPuIYTXQ;
      string VrTgcbUhhL;
      string IclWiZxgYO;
      string msRKrxkjoL;
      string WxmcJSkjmr;
      string snjclWgKfU;
      string KqtIcbaInf;
      string qkrVoLpIMQ;
      string nNsgVzJnYV;
      string QaETBeCdzh;
      string qcuHAIuNmZ;
      if(CzzQDICIIL == VrTgcbUhhL){gXxOgwyNmd = true;}
      else if(VrTgcbUhhL == CzzQDICIIL){TJyUwjlcAw = true;}
      if(xhBaePBJJq == IclWiZxgYO){SliSPQfXUJ = true;}
      else if(IclWiZxgYO == xhBaePBJJq){AaEUDmRlnt = true;}
      if(RcLTNJdnKO == msRKrxkjoL){JLJdZLSlfN = true;}
      else if(msRKrxkjoL == RcLTNJdnKO){TNBJtdqSnI = true;}
      if(inVwUmziJY == WxmcJSkjmr){DuBzorcomE = true;}
      else if(WxmcJSkjmr == inVwUmziJY){MDtVAHrZyB = true;}
      if(WVMAZhyZXt == snjclWgKfU){goqUPFsbrj = true;}
      else if(snjclWgKfU == WVMAZhyZXt){tZWlTBEeOn = true;}
      if(tURCHZnfCt == KqtIcbaInf){bWrdQUOToU = true;}
      else if(KqtIcbaInf == tURCHZnfCt){DVczYFIoZS = true;}
      if(dNxscIMFFq == qkrVoLpIMQ){dLgZaWkjdW = true;}
      else if(qkrVoLpIMQ == dNxscIMFFq){sTnrjwghUu = true;}
      if(QRzjUuQKsf == nNsgVzJnYV){mqkPcTUnOU = true;}
      if(KEQQUNVSnu == QaETBeCdzh){RptulfDWhT = true;}
      if(zSgPuIYTXQ == qcuHAIuNmZ){cJzRaUHQts = true;}
      while(nNsgVzJnYV == QRzjUuQKsf){uqmlAsqPor = true;}
      while(QaETBeCdzh == QaETBeCdzh){YMDAEqZtwt = true;}
      while(qcuHAIuNmZ == qcuHAIuNmZ){zCzfIZkdBW = true;}
      if(gXxOgwyNmd == true){gXxOgwyNmd = false;}
      if(SliSPQfXUJ == true){SliSPQfXUJ = false;}
      if(JLJdZLSlfN == true){JLJdZLSlfN = false;}
      if(DuBzorcomE == true){DuBzorcomE = false;}
      if(goqUPFsbrj == true){goqUPFsbrj = false;}
      if(bWrdQUOToU == true){bWrdQUOToU = false;}
      if(dLgZaWkjdW == true){dLgZaWkjdW = false;}
      if(mqkPcTUnOU == true){mqkPcTUnOU = false;}
      if(RptulfDWhT == true){RptulfDWhT = false;}
      if(cJzRaUHQts == true){cJzRaUHQts = false;}
      if(TJyUwjlcAw == true){TJyUwjlcAw = false;}
      if(AaEUDmRlnt == true){AaEUDmRlnt = false;}
      if(TNBJtdqSnI == true){TNBJtdqSnI = false;}
      if(MDtVAHrZyB == true){MDtVAHrZyB = false;}
      if(tZWlTBEeOn == true){tZWlTBEeOn = false;}
      if(DVczYFIoZS == true){DVczYFIoZS = false;}
      if(sTnrjwghUu == true){sTnrjwghUu = false;}
      if(uqmlAsqPor == true){uqmlAsqPor = false;}
      if(YMDAEqZtwt == true){YMDAEqZtwt = false;}
      if(zCzfIZkdBW == true){zCzfIZkdBW = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class FCRSCTALFD
{ 
  void HEstZyirxq()
  { 
      bool NdJQcbemKm = false;
      bool AZcxZeZoOQ = false;
      bool HwQzsNMELF = false;
      bool qCeCwitSMY = false;
      bool sRzgNkMchB = false;
      bool tiPNHRNKXO = false;
      bool OaaFuxtaBp = false;
      bool kGboWpxikI = false;
      bool AiVKKHmQud = false;
      bool VjuyJSpskQ = false;
      bool plbrQnGZqQ = false;
      bool TdZONfEQum = false;
      bool KdfWUAKdfD = false;
      bool zDyTSOGdsV = false;
      bool BMZdKqKfjd = false;
      bool NYxyFLGFWP = false;
      bool cctmRPfFwz = false;
      bool YaXZlyEBLc = false;
      bool pesBpaGAOG = false;
      bool HBGcrXRlMt = false;
      string dHqkWowDcd;
      string XMsTMbGuYY;
      string lDVoUScIgs;
      string gzIrBJZyWg;
      string XVakuNMFoT;
      string SmsgUalCQD;
      string LnVjxYDASC;
      string CIYrAPbjsG;
      string FWTNasFaXZ;
      string XXgSVjApnW;
      string KLmlRJOBgE;
      string yCIKynUIJD;
      string TbcredaFWQ;
      string PluWwtjgwQ;
      string dDtSaUPWUg;
      string PqgkChitGn;
      string iJePoMGkND;
      string EmMsZPgJQJ;
      string NDjoBXFKTO;
      string KpZIgUYedO;
      if(dHqkWowDcd == KLmlRJOBgE){NdJQcbemKm = true;}
      else if(KLmlRJOBgE == dHqkWowDcd){plbrQnGZqQ = true;}
      if(XMsTMbGuYY == yCIKynUIJD){AZcxZeZoOQ = true;}
      else if(yCIKynUIJD == XMsTMbGuYY){TdZONfEQum = true;}
      if(lDVoUScIgs == TbcredaFWQ){HwQzsNMELF = true;}
      else if(TbcredaFWQ == lDVoUScIgs){KdfWUAKdfD = true;}
      if(gzIrBJZyWg == PluWwtjgwQ){qCeCwitSMY = true;}
      else if(PluWwtjgwQ == gzIrBJZyWg){zDyTSOGdsV = true;}
      if(XVakuNMFoT == dDtSaUPWUg){sRzgNkMchB = true;}
      else if(dDtSaUPWUg == XVakuNMFoT){BMZdKqKfjd = true;}
      if(SmsgUalCQD == PqgkChitGn){tiPNHRNKXO = true;}
      else if(PqgkChitGn == SmsgUalCQD){NYxyFLGFWP = true;}
      if(LnVjxYDASC == iJePoMGkND){OaaFuxtaBp = true;}
      else if(iJePoMGkND == LnVjxYDASC){cctmRPfFwz = true;}
      if(CIYrAPbjsG == EmMsZPgJQJ){kGboWpxikI = true;}
      if(FWTNasFaXZ == NDjoBXFKTO){AiVKKHmQud = true;}
      if(XXgSVjApnW == KpZIgUYedO){VjuyJSpskQ = true;}
      while(EmMsZPgJQJ == CIYrAPbjsG){YaXZlyEBLc = true;}
      while(NDjoBXFKTO == NDjoBXFKTO){pesBpaGAOG = true;}
      while(KpZIgUYedO == KpZIgUYedO){HBGcrXRlMt = true;}
      if(NdJQcbemKm == true){NdJQcbemKm = false;}
      if(AZcxZeZoOQ == true){AZcxZeZoOQ = false;}
      if(HwQzsNMELF == true){HwQzsNMELF = false;}
      if(qCeCwitSMY == true){qCeCwitSMY = false;}
      if(sRzgNkMchB == true){sRzgNkMchB = false;}
      if(tiPNHRNKXO == true){tiPNHRNKXO = false;}
      if(OaaFuxtaBp == true){OaaFuxtaBp = false;}
      if(kGboWpxikI == true){kGboWpxikI = false;}
      if(AiVKKHmQud == true){AiVKKHmQud = false;}
      if(VjuyJSpskQ == true){VjuyJSpskQ = false;}
      if(plbrQnGZqQ == true){plbrQnGZqQ = false;}
      if(TdZONfEQum == true){TdZONfEQum = false;}
      if(KdfWUAKdfD == true){KdfWUAKdfD = false;}
      if(zDyTSOGdsV == true){zDyTSOGdsV = false;}
      if(BMZdKqKfjd == true){BMZdKqKfjd = false;}
      if(NYxyFLGFWP == true){NYxyFLGFWP = false;}
      if(cctmRPfFwz == true){cctmRPfFwz = false;}
      if(YaXZlyEBLc == true){YaXZlyEBLc = false;}
      if(pesBpaGAOG == true){pesBpaGAOG = false;}
      if(HBGcrXRlMt == true){HBGcrXRlMt = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class UZKVQXHVCL
{ 
  void WkUDunpTxL()
  { 
      bool iNJJgDYaYi = false;
      bool wqILTInZeK = false;
      bool AsfaGJMabP = false;
      bool HVfjqckgZg = false;
      bool zlXCJirusT = false;
      bool BkStbphiDW = false;
      bool qyyIaZLXUp = false;
      bool WGzyLNVcQX = false;
      bool RQgHNWCkIB = false;
      bool uCdDoAnOai = false;
      bool WTaDxukUiO = false;
      bool UEReEZRquD = false;
      bool WaOSuTcwIK = false;
      bool ZGCgAxpdJS = false;
      bool lhCtfpkyyP = false;
      bool iwSWMwFHHd = false;
      bool RnLYnNCkeG = false;
      bool imgcRoYTlE = false;
      bool idyracneUE = false;
      bool riVfAyVcFS = false;
      string lkxEdhrJoI;
      string FNYEVtrXPP;
      string DYprhoKCrk;
      string BXwpHhnOPt;
      string YqRLsOjSXl;
      string RTBMgMtEVo;
      string WpRDHgRhwm;
      string FcHVpLGezT;
      string EqdFTgWjJu;
      string njraWiZOEL;
      string xBVkgnLeWU;
      string FPECjeLMjZ;
      string JgYBzVkgyG;
      string lrZmVDUsXf;
      string UqNnoYeppq;
      string WNedBPbUlK;
      string DegPiNoQfg;
      string KSnEFSTkMZ;
      string qupGjYNwkF;
      string aAGNbpKyEb;
      if(lkxEdhrJoI == xBVkgnLeWU){iNJJgDYaYi = true;}
      else if(xBVkgnLeWU == lkxEdhrJoI){WTaDxukUiO = true;}
      if(FNYEVtrXPP == FPECjeLMjZ){wqILTInZeK = true;}
      else if(FPECjeLMjZ == FNYEVtrXPP){UEReEZRquD = true;}
      if(DYprhoKCrk == JgYBzVkgyG){AsfaGJMabP = true;}
      else if(JgYBzVkgyG == DYprhoKCrk){WaOSuTcwIK = true;}
      if(BXwpHhnOPt == lrZmVDUsXf){HVfjqckgZg = true;}
      else if(lrZmVDUsXf == BXwpHhnOPt){ZGCgAxpdJS = true;}
      if(YqRLsOjSXl == UqNnoYeppq){zlXCJirusT = true;}
      else if(UqNnoYeppq == YqRLsOjSXl){lhCtfpkyyP = true;}
      if(RTBMgMtEVo == WNedBPbUlK){BkStbphiDW = true;}
      else if(WNedBPbUlK == RTBMgMtEVo){iwSWMwFHHd = true;}
      if(WpRDHgRhwm == DegPiNoQfg){qyyIaZLXUp = true;}
      else if(DegPiNoQfg == WpRDHgRhwm){RnLYnNCkeG = true;}
      if(FcHVpLGezT == KSnEFSTkMZ){WGzyLNVcQX = true;}
      if(EqdFTgWjJu == qupGjYNwkF){RQgHNWCkIB = true;}
      if(njraWiZOEL == aAGNbpKyEb){uCdDoAnOai = true;}
      while(KSnEFSTkMZ == FcHVpLGezT){imgcRoYTlE = true;}
      while(qupGjYNwkF == qupGjYNwkF){idyracneUE = true;}
      while(aAGNbpKyEb == aAGNbpKyEb){riVfAyVcFS = true;}
      if(iNJJgDYaYi == true){iNJJgDYaYi = false;}
      if(wqILTInZeK == true){wqILTInZeK = false;}
      if(AsfaGJMabP == true){AsfaGJMabP = false;}
      if(HVfjqckgZg == true){HVfjqckgZg = false;}
      if(zlXCJirusT == true){zlXCJirusT = false;}
      if(BkStbphiDW == true){BkStbphiDW = false;}
      if(qyyIaZLXUp == true){qyyIaZLXUp = false;}
      if(WGzyLNVcQX == true){WGzyLNVcQX = false;}
      if(RQgHNWCkIB == true){RQgHNWCkIB = false;}
      if(uCdDoAnOai == true){uCdDoAnOai = false;}
      if(WTaDxukUiO == true){WTaDxukUiO = false;}
      if(UEReEZRquD == true){UEReEZRquD = false;}
      if(WaOSuTcwIK == true){WaOSuTcwIK = false;}
      if(ZGCgAxpdJS == true){ZGCgAxpdJS = false;}
      if(lhCtfpkyyP == true){lhCtfpkyyP = false;}
      if(iwSWMwFHHd == true){iwSWMwFHHd = false;}
      if(RnLYnNCkeG == true){RnLYnNCkeG = false;}
      if(imgcRoYTlE == true){imgcRoYTlE = false;}
      if(idyracneUE == true){idyracneUE = false;}
      if(riVfAyVcFS == true){riVfAyVcFS = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class FKBVTKUNKA
{ 
  void rRPcBhcruG()
  { 
      bool ZkKeRdHFje = false;
      bool KwIOVDwZWK = false;
      bool JXJFqUgrLY = false;
      bool WpmryEsolS = false;
      bool XOZZMnUZnV = false;
      bool lWgqhBaEmx = false;
      bool wPsKHUJPPR = false;
      bool JHnEltyisC = false;
      bool AGEolAJuKw = false;
      bool coBoVIVOSr = false;
      bool eEKVMeicFm = false;
      bool CqLjwpLEXH = false;
      bool LNEToTGyhc = false;
      bool YjQBXuwhcH = false;
      bool RfoXskdQrf = false;
      bool xRpKfQzpgr = false;
      bool XjtbNSaJMB = false;
      bool scaPpeXgZD = false;
      bool poGCfHsFUG = false;
      bool wGBjigkNJa = false;
      string gnalGObZOM;
      string sFkeBrnbVi;
      string AZBKeQdkeQ;
      string OZzdQdjBuS;
      string nbGzMdaLpI;
      string kXAKEHlQHo;
      string kqtyyTGHNX;
      string IlgCtXSCxA;
      string pRtVfpYnYJ;
      string qStFhxhIAs;
      string XTxSAyqyQg;
      string niSGzSxXRI;
      string tRhEfoqaTw;
      string pKBDcWUaVg;
      string zaXrUHAnGP;
      string zJpryFkrlL;
      string HPdTpdhOcb;
      string xVCkITtojX;
      string oDTEwfTJFX;
      string kcoJZiwDCq;
      if(gnalGObZOM == XTxSAyqyQg){ZkKeRdHFje = true;}
      else if(XTxSAyqyQg == gnalGObZOM){eEKVMeicFm = true;}
      if(sFkeBrnbVi == niSGzSxXRI){KwIOVDwZWK = true;}
      else if(niSGzSxXRI == sFkeBrnbVi){CqLjwpLEXH = true;}
      if(AZBKeQdkeQ == tRhEfoqaTw){JXJFqUgrLY = true;}
      else if(tRhEfoqaTw == AZBKeQdkeQ){LNEToTGyhc = true;}
      if(OZzdQdjBuS == pKBDcWUaVg){WpmryEsolS = true;}
      else if(pKBDcWUaVg == OZzdQdjBuS){YjQBXuwhcH = true;}
      if(nbGzMdaLpI == zaXrUHAnGP){XOZZMnUZnV = true;}
      else if(zaXrUHAnGP == nbGzMdaLpI){RfoXskdQrf = true;}
      if(kXAKEHlQHo == zJpryFkrlL){lWgqhBaEmx = true;}
      else if(zJpryFkrlL == kXAKEHlQHo){xRpKfQzpgr = true;}
      if(kqtyyTGHNX == HPdTpdhOcb){wPsKHUJPPR = true;}
      else if(HPdTpdhOcb == kqtyyTGHNX){XjtbNSaJMB = true;}
      if(IlgCtXSCxA == xVCkITtojX){JHnEltyisC = true;}
      if(pRtVfpYnYJ == oDTEwfTJFX){AGEolAJuKw = true;}
      if(qStFhxhIAs == kcoJZiwDCq){coBoVIVOSr = true;}
      while(xVCkITtojX == IlgCtXSCxA){scaPpeXgZD = true;}
      while(oDTEwfTJFX == oDTEwfTJFX){poGCfHsFUG = true;}
      while(kcoJZiwDCq == kcoJZiwDCq){wGBjigkNJa = true;}
      if(ZkKeRdHFje == true){ZkKeRdHFje = false;}
      if(KwIOVDwZWK == true){KwIOVDwZWK = false;}
      if(JXJFqUgrLY == true){JXJFqUgrLY = false;}
      if(WpmryEsolS == true){WpmryEsolS = false;}
      if(XOZZMnUZnV == true){XOZZMnUZnV = false;}
      if(lWgqhBaEmx == true){lWgqhBaEmx = false;}
      if(wPsKHUJPPR == true){wPsKHUJPPR = false;}
      if(JHnEltyisC == true){JHnEltyisC = false;}
      if(AGEolAJuKw == true){AGEolAJuKw = false;}
      if(coBoVIVOSr == true){coBoVIVOSr = false;}
      if(eEKVMeicFm == true){eEKVMeicFm = false;}
      if(CqLjwpLEXH == true){CqLjwpLEXH = false;}
      if(LNEToTGyhc == true){LNEToTGyhc = false;}
      if(YjQBXuwhcH == true){YjQBXuwhcH = false;}
      if(RfoXskdQrf == true){RfoXskdQrf = false;}
      if(xRpKfQzpgr == true){xRpKfQzpgr = false;}
      if(XjtbNSaJMB == true){XjtbNSaJMB = false;}
      if(scaPpeXgZD == true){scaPpeXgZD = false;}
      if(poGCfHsFUG == true){poGCfHsFUG = false;}
      if(wGBjigkNJa == true){wGBjigkNJa = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class WRKHLWXOIF
{ 
  void RgrPirzrrU()
  { 
      bool jKkshMIXGa = false;
      bool akRHcUiVkL = false;
      bool AFIlOXwgSU = false;
      bool GOBCnhnTJO = false;
      bool DoehHKMaed = false;
      bool qjGNOeBydJ = false;
      bool QbFlTMiOSt = false;
      bool gOMVILaadE = false;
      bool LUCocVImnJ = false;
      bool goozyajsNu = false;
      bool ayHkxbXjFD = false;
      bool DZUYyuZQIx = false;
      bool DuaJNqZMXg = false;
      bool ahNhdMNQqA = false;
      bool yXhjFGUPBD = false;
      bool BTkPqeXxWF = false;
      bool CKMXbVMlul = false;
      bool gIYHzfNpEH = false;
      bool WJLTeHxxpy = false;
      bool oQtlymLKHi = false;
      string uVxsChWPnm;
      string PHxEGeJZuT;
      string hcfUxoTjaM;
      string kbNqNxSmkQ;
      string UGaWFnsXpE;
      string uBTdKSobuN;
      string NloaCmtGqI;
      string MWnezbCJOJ;
      string uutVRjHigt;
      string HpqWChRzUS;
      string smggrYModh;
      string QfNkSRqSJS;
      string eLZwAVeQbR;
      string KCnwQIONdr;
      string WSEydbcFEk;
      string pyoCmhMjfV;
      string twMMXNqRUK;
      string CdoRuMGbSY;
      string sYMqaLNlIi;
      string uehHyaFrZP;
      if(uVxsChWPnm == smggrYModh){jKkshMIXGa = true;}
      else if(smggrYModh == uVxsChWPnm){ayHkxbXjFD = true;}
      if(PHxEGeJZuT == QfNkSRqSJS){akRHcUiVkL = true;}
      else if(QfNkSRqSJS == PHxEGeJZuT){DZUYyuZQIx = true;}
      if(hcfUxoTjaM == eLZwAVeQbR){AFIlOXwgSU = true;}
      else if(eLZwAVeQbR == hcfUxoTjaM){DuaJNqZMXg = true;}
      if(kbNqNxSmkQ == KCnwQIONdr){GOBCnhnTJO = true;}
      else if(KCnwQIONdr == kbNqNxSmkQ){ahNhdMNQqA = true;}
      if(UGaWFnsXpE == WSEydbcFEk){DoehHKMaed = true;}
      else if(WSEydbcFEk == UGaWFnsXpE){yXhjFGUPBD = true;}
      if(uBTdKSobuN == pyoCmhMjfV){qjGNOeBydJ = true;}
      else if(pyoCmhMjfV == uBTdKSobuN){BTkPqeXxWF = true;}
      if(NloaCmtGqI == twMMXNqRUK){QbFlTMiOSt = true;}
      else if(twMMXNqRUK == NloaCmtGqI){CKMXbVMlul = true;}
      if(MWnezbCJOJ == CdoRuMGbSY){gOMVILaadE = true;}
      if(uutVRjHigt == sYMqaLNlIi){LUCocVImnJ = true;}
      if(HpqWChRzUS == uehHyaFrZP){goozyajsNu = true;}
      while(CdoRuMGbSY == MWnezbCJOJ){gIYHzfNpEH = true;}
      while(sYMqaLNlIi == sYMqaLNlIi){WJLTeHxxpy = true;}
      while(uehHyaFrZP == uehHyaFrZP){oQtlymLKHi = true;}
      if(jKkshMIXGa == true){jKkshMIXGa = false;}
      if(akRHcUiVkL == true){akRHcUiVkL = false;}
      if(AFIlOXwgSU == true){AFIlOXwgSU = false;}
      if(GOBCnhnTJO == true){GOBCnhnTJO = false;}
      if(DoehHKMaed == true){DoehHKMaed = false;}
      if(qjGNOeBydJ == true){qjGNOeBydJ = false;}
      if(QbFlTMiOSt == true){QbFlTMiOSt = false;}
      if(gOMVILaadE == true){gOMVILaadE = false;}
      if(LUCocVImnJ == true){LUCocVImnJ = false;}
      if(goozyajsNu == true){goozyajsNu = false;}
      if(ayHkxbXjFD == true){ayHkxbXjFD = false;}
      if(DZUYyuZQIx == true){DZUYyuZQIx = false;}
      if(DuaJNqZMXg == true){DuaJNqZMXg = false;}
      if(ahNhdMNQqA == true){ahNhdMNQqA = false;}
      if(yXhjFGUPBD == true){yXhjFGUPBD = false;}
      if(BTkPqeXxWF == true){BTkPqeXxWF = false;}
      if(CKMXbVMlul == true){CKMXbVMlul = false;}
      if(gIYHzfNpEH == true){gIYHzfNpEH = false;}
      if(WJLTeHxxpy == true){WJLTeHxxpy = false;}
      if(oQtlymLKHi == true){oQtlymLKHi = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class SYKXXUHJGL
{ 
  void RyPhPdhpSs()
  { 
      bool cCcTIfYOyC = false;
      bool LTWFBWuCfP = false;
      bool cupdYnOhwX = false;
      bool HwDQUNjwFg = false;
      bool hjVoYUsQCL = false;
      bool LpLAFhMytT = false;
      bool RpRZtPPFjm = false;
      bool mzwyhsYAFE = false;
      bool uyfjMRjDLm = false;
      bool BlBkPrRuuJ = false;
      bool EmfOXMsMRM = false;
      bool ILrpYTJgNc = false;
      bool eMtxkAxLip = false;
      bool bcFwzHRQMz = false;
      bool XXkzdpsLMw = false;
      bool hjhRdrsicW = false;
      bool PgcbkfFwpQ = false;
      bool BsUOEHauSu = false;
      bool HkzmIqumRH = false;
      bool NimoiptJNy = false;
      string jhBaGHiODn;
      string fVgVzAyAAG;
      string AhnWRwsHRw;
      string JXmzfBoBfT;
      string BPyJSIbXpc;
      string meXcYCteJJ;
      string NawHeHihoy;
      string KxTgFjidEJ;
      string UVRnJdzJad;
      string HKrVFZSqeK;
      string YthrSpKqXn;
      string SPaznrJIyA;
      string IYGKpAFyae;
      string RqzsjamYVS;
      string TIkmKrirgN;
      string QKseCzmWCR;
      string jMPsWbPgPN;
      string EjlefAnTAx;
      string QMQNNGyUqk;
      string nPVDiHrqPi;
      if(jhBaGHiODn == YthrSpKqXn){cCcTIfYOyC = true;}
      else if(YthrSpKqXn == jhBaGHiODn){EmfOXMsMRM = true;}
      if(fVgVzAyAAG == SPaznrJIyA){LTWFBWuCfP = true;}
      else if(SPaznrJIyA == fVgVzAyAAG){ILrpYTJgNc = true;}
      if(AhnWRwsHRw == IYGKpAFyae){cupdYnOhwX = true;}
      else if(IYGKpAFyae == AhnWRwsHRw){eMtxkAxLip = true;}
      if(JXmzfBoBfT == RqzsjamYVS){HwDQUNjwFg = true;}
      else if(RqzsjamYVS == JXmzfBoBfT){bcFwzHRQMz = true;}
      if(BPyJSIbXpc == TIkmKrirgN){hjVoYUsQCL = true;}
      else if(TIkmKrirgN == BPyJSIbXpc){XXkzdpsLMw = true;}
      if(meXcYCteJJ == QKseCzmWCR){LpLAFhMytT = true;}
      else if(QKseCzmWCR == meXcYCteJJ){hjhRdrsicW = true;}
      if(NawHeHihoy == jMPsWbPgPN){RpRZtPPFjm = true;}
      else if(jMPsWbPgPN == NawHeHihoy){PgcbkfFwpQ = true;}
      if(KxTgFjidEJ == EjlefAnTAx){mzwyhsYAFE = true;}
      if(UVRnJdzJad == QMQNNGyUqk){uyfjMRjDLm = true;}
      if(HKrVFZSqeK == nPVDiHrqPi){BlBkPrRuuJ = true;}
      while(EjlefAnTAx == KxTgFjidEJ){BsUOEHauSu = true;}
      while(QMQNNGyUqk == QMQNNGyUqk){HkzmIqumRH = true;}
      while(nPVDiHrqPi == nPVDiHrqPi){NimoiptJNy = true;}
      if(cCcTIfYOyC == true){cCcTIfYOyC = false;}
      if(LTWFBWuCfP == true){LTWFBWuCfP = false;}
      if(cupdYnOhwX == true){cupdYnOhwX = false;}
      if(HwDQUNjwFg == true){HwDQUNjwFg = false;}
      if(hjVoYUsQCL == true){hjVoYUsQCL = false;}
      if(LpLAFhMytT == true){LpLAFhMytT = false;}
      if(RpRZtPPFjm == true){RpRZtPPFjm = false;}
      if(mzwyhsYAFE == true){mzwyhsYAFE = false;}
      if(uyfjMRjDLm == true){uyfjMRjDLm = false;}
      if(BlBkPrRuuJ == true){BlBkPrRuuJ = false;}
      if(EmfOXMsMRM == true){EmfOXMsMRM = false;}
      if(ILrpYTJgNc == true){ILrpYTJgNc = false;}
      if(eMtxkAxLip == true){eMtxkAxLip = false;}
      if(bcFwzHRQMz == true){bcFwzHRQMz = false;}
      if(XXkzdpsLMw == true){XXkzdpsLMw = false;}
      if(hjhRdrsicW == true){hjhRdrsicW = false;}
      if(PgcbkfFwpQ == true){PgcbkfFwpQ = false;}
      if(BsUOEHauSu == true){BsUOEHauSu = false;}
      if(HkzmIqumRH == true){HkzmIqumRH = false;}
      if(NimoiptJNy == true){NimoiptJNy = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class LFGRWSVZYI
{ 
  void dyBxUjwktD()
  { 
      bool qYdTjGiHWS = false;
      bool boZuVhEwzH = false;
      bool JKfuXanDxi = false;
      bool dXiVHjFdYq = false;
      bool YpnDVZyAyx = false;
      bool NARoegsiwJ = false;
      bool RfKmnEGDnk = false;
      bool bZWIiTVbYx = false;
      bool bnFAVdFspa = false;
      bool qVgPYseAPR = false;
      bool StLMUncIGL = false;
      bool KQJzgdaJRJ = false;
      bool yNNNtGrHio = false;
      bool nUMHdhbreh = false;
      bool AwlePZMhht = false;
      bool SViFSFgyRO = false;
      bool uVZQWoDBUz = false;
      bool ChejIBahxU = false;
      bool sKZoWSlHnY = false;
      bool BcaQldWVIa = false;
      string fKnmVBLhdY;
      string OnoQlSFsjx;
      string uyYlyxqlAh;
      string ZjnGUFrSGA;
      string rHFtBRxonn;
      string LwipQhkBnY;
      string JZguzeziug;
      string ZlmjFnrekg;
      string zCyMVcBxpm;
      string TpegpRZJtW;
      string SOsHNYIzjc;
      string pGQHYHaUZV;
      string cBrIMiHGsn;
      string NhjOOkIqyw;
      string UCNMxNZXHi;
      string pFjYsQVkte;
      string RCFwPHVBsm;
      string yjWcBanfLy;
      string IjyJxHxLVx;
      string PXwTeRwQxo;
      if(fKnmVBLhdY == SOsHNYIzjc){qYdTjGiHWS = true;}
      else if(SOsHNYIzjc == fKnmVBLhdY){StLMUncIGL = true;}
      if(OnoQlSFsjx == pGQHYHaUZV){boZuVhEwzH = true;}
      else if(pGQHYHaUZV == OnoQlSFsjx){KQJzgdaJRJ = true;}
      if(uyYlyxqlAh == cBrIMiHGsn){JKfuXanDxi = true;}
      else if(cBrIMiHGsn == uyYlyxqlAh){yNNNtGrHio = true;}
      if(ZjnGUFrSGA == NhjOOkIqyw){dXiVHjFdYq = true;}
      else if(NhjOOkIqyw == ZjnGUFrSGA){nUMHdhbreh = true;}
      if(rHFtBRxonn == UCNMxNZXHi){YpnDVZyAyx = true;}
      else if(UCNMxNZXHi == rHFtBRxonn){AwlePZMhht = true;}
      if(LwipQhkBnY == pFjYsQVkte){NARoegsiwJ = true;}
      else if(pFjYsQVkte == LwipQhkBnY){SViFSFgyRO = true;}
      if(JZguzeziug == RCFwPHVBsm){RfKmnEGDnk = true;}
      else if(RCFwPHVBsm == JZguzeziug){uVZQWoDBUz = true;}
      if(ZlmjFnrekg == yjWcBanfLy){bZWIiTVbYx = true;}
      if(zCyMVcBxpm == IjyJxHxLVx){bnFAVdFspa = true;}
      if(TpegpRZJtW == PXwTeRwQxo){qVgPYseAPR = true;}
      while(yjWcBanfLy == ZlmjFnrekg){ChejIBahxU = true;}
      while(IjyJxHxLVx == IjyJxHxLVx){sKZoWSlHnY = true;}
      while(PXwTeRwQxo == PXwTeRwQxo){BcaQldWVIa = true;}
      if(qYdTjGiHWS == true){qYdTjGiHWS = false;}
      if(boZuVhEwzH == true){boZuVhEwzH = false;}
      if(JKfuXanDxi == true){JKfuXanDxi = false;}
      if(dXiVHjFdYq == true){dXiVHjFdYq = false;}
      if(YpnDVZyAyx == true){YpnDVZyAyx = false;}
      if(NARoegsiwJ == true){NARoegsiwJ = false;}
      if(RfKmnEGDnk == true){RfKmnEGDnk = false;}
      if(bZWIiTVbYx == true){bZWIiTVbYx = false;}
      if(bnFAVdFspa == true){bnFAVdFspa = false;}
      if(qVgPYseAPR == true){qVgPYseAPR = false;}
      if(StLMUncIGL == true){StLMUncIGL = false;}
      if(KQJzgdaJRJ == true){KQJzgdaJRJ = false;}
      if(yNNNtGrHio == true){yNNNtGrHio = false;}
      if(nUMHdhbreh == true){nUMHdhbreh = false;}
      if(AwlePZMhht == true){AwlePZMhht = false;}
      if(SViFSFgyRO == true){SViFSFgyRO = false;}
      if(uVZQWoDBUz == true){uVZQWoDBUz = false;}
      if(ChejIBahxU == true){ChejIBahxU = false;}
      if(sKZoWSlHnY == true){sKZoWSlHnY = false;}
      if(BcaQldWVIa == true){BcaQldWVIa = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class ZRJCXXVYBG
{ 
  void hSIPdZRGyC()
  { 
      bool GjyVFjhsmc = false;
      bool VfJiqtNqxG = false;
      bool pCfsNIXAcM = false;
      bool xrMFyqbWZP = false;
      bool shlnJWoWOl = false;
      bool XOFuuEEFIx = false;
      bool LgPaecSEkz = false;
      bool RqRhMHPrip = false;
      bool TAlqoilQJs = false;
      bool mWObDLSLIf = false;
      bool DklOTgwXin = false;
      bool oLVRcLuYkw = false;
      bool qCtqMuboeA = false;
      bool oDiDlhOXWI = false;
      bool lNhVEaBxzq = false;
      bool QsZMoBquBX = false;
      bool EHshykcSet = false;
      bool xWCcJcTXll = false;
      bool tepmiwdVNk = false;
      bool qTVyDdUzWT = false;
      string UYqLxDHAxk;
      string wcMoLULHwh;
      string metnfiuLTW;
      string KYUYqAfXUe;
      string iBmEgVkwmR;
      string FbgJlodCfO;
      string HwgaaWHnyK;
      string nnmQzkqpHK;
      string xzXCQhrKlC;
      string WdrFWlTMdK;
      string NxyccQoPKA;
      string xnuURIYeJr;
      string dwBwnKwgsN;
      string ReLxwzAtYA;
      string sbAlEihWnN;
      string NoClfRwBnS;
      string THWxiSbxXR;
      string IdGJyCuPqF;
      string bZsezbbZRe;
      string DzGFflFDCl;
      if(UYqLxDHAxk == NxyccQoPKA){GjyVFjhsmc = true;}
      else if(NxyccQoPKA == UYqLxDHAxk){DklOTgwXin = true;}
      if(wcMoLULHwh == xnuURIYeJr){VfJiqtNqxG = true;}
      else if(xnuURIYeJr == wcMoLULHwh){oLVRcLuYkw = true;}
      if(metnfiuLTW == dwBwnKwgsN){pCfsNIXAcM = true;}
      else if(dwBwnKwgsN == metnfiuLTW){qCtqMuboeA = true;}
      if(KYUYqAfXUe == ReLxwzAtYA){xrMFyqbWZP = true;}
      else if(ReLxwzAtYA == KYUYqAfXUe){oDiDlhOXWI = true;}
      if(iBmEgVkwmR == sbAlEihWnN){shlnJWoWOl = true;}
      else if(sbAlEihWnN == iBmEgVkwmR){lNhVEaBxzq = true;}
      if(FbgJlodCfO == NoClfRwBnS){XOFuuEEFIx = true;}
      else if(NoClfRwBnS == FbgJlodCfO){QsZMoBquBX = true;}
      if(HwgaaWHnyK == THWxiSbxXR){LgPaecSEkz = true;}
      else if(THWxiSbxXR == HwgaaWHnyK){EHshykcSet = true;}
      if(nnmQzkqpHK == IdGJyCuPqF){RqRhMHPrip = true;}
      if(xzXCQhrKlC == bZsezbbZRe){TAlqoilQJs = true;}
      if(WdrFWlTMdK == DzGFflFDCl){mWObDLSLIf = true;}
      while(IdGJyCuPqF == nnmQzkqpHK){xWCcJcTXll = true;}
      while(bZsezbbZRe == bZsezbbZRe){tepmiwdVNk = true;}
      while(DzGFflFDCl == DzGFflFDCl){qTVyDdUzWT = true;}
      if(GjyVFjhsmc == true){GjyVFjhsmc = false;}
      if(VfJiqtNqxG == true){VfJiqtNqxG = false;}
      if(pCfsNIXAcM == true){pCfsNIXAcM = false;}
      if(xrMFyqbWZP == true){xrMFyqbWZP = false;}
      if(shlnJWoWOl == true){shlnJWoWOl = false;}
      if(XOFuuEEFIx == true){XOFuuEEFIx = false;}
      if(LgPaecSEkz == true){LgPaecSEkz = false;}
      if(RqRhMHPrip == true){RqRhMHPrip = false;}
      if(TAlqoilQJs == true){TAlqoilQJs = false;}
      if(mWObDLSLIf == true){mWObDLSLIf = false;}
      if(DklOTgwXin == true){DklOTgwXin = false;}
      if(oLVRcLuYkw == true){oLVRcLuYkw = false;}
      if(qCtqMuboeA == true){qCtqMuboeA = false;}
      if(oDiDlhOXWI == true){oDiDlhOXWI = false;}
      if(lNhVEaBxzq == true){lNhVEaBxzq = false;}
      if(QsZMoBquBX == true){QsZMoBquBX = false;}
      if(EHshykcSet == true){EHshykcSet = false;}
      if(xWCcJcTXll == true){xWCcJcTXll = false;}
      if(tepmiwdVNk == true){tepmiwdVNk = false;}
      if(qTVyDdUzWT == true){qTVyDdUzWT = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class QQWDSMBTRX
{ 
  void nPKpnwajNO()
  { 
      bool dAkaAwJEWX = false;
      bool DlDzhGBsJS = false;
      bool KalIYGNULu = false;
      bool TpxINYcKGI = false;
      bool xdypnsuLGb = false;
      bool PktZNCObBt = false;
      bool hosaDMntkJ = false;
      bool cqmAUgcuUf = false;
      bool LBOifiuWuK = false;
      bool KBIMZIjWla = false;
      bool EAaxyYysFf = false;
      bool ZSHVhgaJuU = false;
      bool QQzZzbhaaM = false;
      bool wFIsaLaQkG = false;
      bool kCROkqtmdr = false;
      bool habRJmAAyV = false;
      bool qWSrjUKNtW = false;
      bool GJXoiOzkoH = false;
      bool htwheVdpjm = false;
      bool KZSPPNjZeP = false;
      string EosFcEDGrp;
      string tdFnfYhKLE;
      string IzgSUSuQXT;
      string RSNXwkMJCD;
      string iIVZdYVbEs;
      string tKXICEIZjJ;
      string ImiXXaQgqt;
      string MYHIUAdGnw;
      string xTLdZGuEVr;
      string blYruuYxBC;
      string InjJgUCOmB;
      string ZBlnMoaFyR;
      string fLLzSZzPNY;
      string agFknIiCwE;
      string EfRTRaAkeG;
      string UTyjWwckqH;
      string VlBNaswAAE;
      string FYJtNzsqgr;
      string YOkHEHhUOq;
      string eyLniReDsY;
      if(EosFcEDGrp == InjJgUCOmB){dAkaAwJEWX = true;}
      else if(InjJgUCOmB == EosFcEDGrp){EAaxyYysFf = true;}
      if(tdFnfYhKLE == ZBlnMoaFyR){DlDzhGBsJS = true;}
      else if(ZBlnMoaFyR == tdFnfYhKLE){ZSHVhgaJuU = true;}
      if(IzgSUSuQXT == fLLzSZzPNY){KalIYGNULu = true;}
      else if(fLLzSZzPNY == IzgSUSuQXT){QQzZzbhaaM = true;}
      if(RSNXwkMJCD == agFknIiCwE){TpxINYcKGI = true;}
      else if(agFknIiCwE == RSNXwkMJCD){wFIsaLaQkG = true;}
      if(iIVZdYVbEs == EfRTRaAkeG){xdypnsuLGb = true;}
      else if(EfRTRaAkeG == iIVZdYVbEs){kCROkqtmdr = true;}
      if(tKXICEIZjJ == UTyjWwckqH){PktZNCObBt = true;}
      else if(UTyjWwckqH == tKXICEIZjJ){habRJmAAyV = true;}
      if(ImiXXaQgqt == VlBNaswAAE){hosaDMntkJ = true;}
      else if(VlBNaswAAE == ImiXXaQgqt){qWSrjUKNtW = true;}
      if(MYHIUAdGnw == FYJtNzsqgr){cqmAUgcuUf = true;}
      if(xTLdZGuEVr == YOkHEHhUOq){LBOifiuWuK = true;}
      if(blYruuYxBC == eyLniReDsY){KBIMZIjWla = true;}
      while(FYJtNzsqgr == MYHIUAdGnw){GJXoiOzkoH = true;}
      while(YOkHEHhUOq == YOkHEHhUOq){htwheVdpjm = true;}
      while(eyLniReDsY == eyLniReDsY){KZSPPNjZeP = true;}
      if(dAkaAwJEWX == true){dAkaAwJEWX = false;}
      if(DlDzhGBsJS == true){DlDzhGBsJS = false;}
      if(KalIYGNULu == true){KalIYGNULu = false;}
      if(TpxINYcKGI == true){TpxINYcKGI = false;}
      if(xdypnsuLGb == true){xdypnsuLGb = false;}
      if(PktZNCObBt == true){PktZNCObBt = false;}
      if(hosaDMntkJ == true){hosaDMntkJ = false;}
      if(cqmAUgcuUf == true){cqmAUgcuUf = false;}
      if(LBOifiuWuK == true){LBOifiuWuK = false;}
      if(KBIMZIjWla == true){KBIMZIjWla = false;}
      if(EAaxyYysFf == true){EAaxyYysFf = false;}
      if(ZSHVhgaJuU == true){ZSHVhgaJuU = false;}
      if(QQzZzbhaaM == true){QQzZzbhaaM = false;}
      if(wFIsaLaQkG == true){wFIsaLaQkG = false;}
      if(kCROkqtmdr == true){kCROkqtmdr = false;}
      if(habRJmAAyV == true){habRJmAAyV = false;}
      if(qWSrjUKNtW == true){qWSrjUKNtW = false;}
      if(GJXoiOzkoH == true){GJXoiOzkoH = false;}
      if(htwheVdpjm == true){htwheVdpjm = false;}
      if(KZSPPNjZeP == true){KZSPPNjZeP = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class WUDVVLOXGO
{ 
  void MBOMYlFBUT()
  { 
      bool oxVuaNUrxP = false;
      bool MWiXrufDRe = false;
      bool iTLDzMKfKW = false;
      bool KslHptMbUG = false;
      bool BaXUZQAdad = false;
      bool TnwwMVlSuO = false;
      bool DnhZFSkahx = false;
      bool iDiKcHupdh = false;
      bool MfFgDVxptU = false;
      bool ItfGDNsyPG = false;
      bool fYwduPFkTE = false;
      bool aunNBXiAVi = false;
      bool UugNonXcHO = false;
      bool OwaWBnjbkn = false;
      bool QMVptMFSFe = false;
      bool erbfkkrinG = false;
      bool qccEpdUQLM = false;
      bool nGPhSIYpTb = false;
      bool hFWbjVTukQ = false;
      bool uBmdwmiRzP = false;
      string RVMiGQkMgE;
      string ABrIkzrLXV;
      string SDKrEqryhL;
      string TqIeKTQmKN;
      string fDncXUojeG;
      string eJdYINLUeO;
      string YleVjIrNxR;
      string iEBJoPPhTi;
      string BHTafKMjVw;
      string HwIuosXSrO;
      string cblNXaIUis;
      string ydBwMQSDoY;
      string uIqAJmuFTw;
      string qwoEGZUGDF;
      string CrBcxdtMhX;
      string aUcTSTklDj;
      string eCAmBCowpm;
      string wMzjWDHNCe;
      string riWwUWTUkl;
      string niCSZzrNau;
      if(RVMiGQkMgE == cblNXaIUis){oxVuaNUrxP = true;}
      else if(cblNXaIUis == RVMiGQkMgE){fYwduPFkTE = true;}
      if(ABrIkzrLXV == ydBwMQSDoY){MWiXrufDRe = true;}
      else if(ydBwMQSDoY == ABrIkzrLXV){aunNBXiAVi = true;}
      if(SDKrEqryhL == uIqAJmuFTw){iTLDzMKfKW = true;}
      else if(uIqAJmuFTw == SDKrEqryhL){UugNonXcHO = true;}
      if(TqIeKTQmKN == qwoEGZUGDF){KslHptMbUG = true;}
      else if(qwoEGZUGDF == TqIeKTQmKN){OwaWBnjbkn = true;}
      if(fDncXUojeG == CrBcxdtMhX){BaXUZQAdad = true;}
      else if(CrBcxdtMhX == fDncXUojeG){QMVptMFSFe = true;}
      if(eJdYINLUeO == aUcTSTklDj){TnwwMVlSuO = true;}
      else if(aUcTSTklDj == eJdYINLUeO){erbfkkrinG = true;}
      if(YleVjIrNxR == eCAmBCowpm){DnhZFSkahx = true;}
      else if(eCAmBCowpm == YleVjIrNxR){qccEpdUQLM = true;}
      if(iEBJoPPhTi == wMzjWDHNCe){iDiKcHupdh = true;}
      if(BHTafKMjVw == riWwUWTUkl){MfFgDVxptU = true;}
      if(HwIuosXSrO == niCSZzrNau){ItfGDNsyPG = true;}
      while(wMzjWDHNCe == iEBJoPPhTi){nGPhSIYpTb = true;}
      while(riWwUWTUkl == riWwUWTUkl){hFWbjVTukQ = true;}
      while(niCSZzrNau == niCSZzrNau){uBmdwmiRzP = true;}
      if(oxVuaNUrxP == true){oxVuaNUrxP = false;}
      if(MWiXrufDRe == true){MWiXrufDRe = false;}
      if(iTLDzMKfKW == true){iTLDzMKfKW = false;}
      if(KslHptMbUG == true){KslHptMbUG = false;}
      if(BaXUZQAdad == true){BaXUZQAdad = false;}
      if(TnwwMVlSuO == true){TnwwMVlSuO = false;}
      if(DnhZFSkahx == true){DnhZFSkahx = false;}
      if(iDiKcHupdh == true){iDiKcHupdh = false;}
      if(MfFgDVxptU == true){MfFgDVxptU = false;}
      if(ItfGDNsyPG == true){ItfGDNsyPG = false;}
      if(fYwduPFkTE == true){fYwduPFkTE = false;}
      if(aunNBXiAVi == true){aunNBXiAVi = false;}
      if(UugNonXcHO == true){UugNonXcHO = false;}
      if(OwaWBnjbkn == true){OwaWBnjbkn = false;}
      if(QMVptMFSFe == true){QMVptMFSFe = false;}
      if(erbfkkrinG == true){erbfkkrinG = false;}
      if(qccEpdUQLM == true){qccEpdUQLM = false;}
      if(nGPhSIYpTb == true){nGPhSIYpTb = false;}
      if(hFWbjVTukQ == true){hFWbjVTukQ = false;}
      if(uBmdwmiRzP == true){uBmdwmiRzP = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class OXMXXGEEPP
{ 
  void rcLJysRqrW()
  { 
      bool iXmLGkuXIu = false;
      bool VKNWFYbpey = false;
      bool ZsTndVEFjk = false;
      bool ImTINpQGnC = false;
      bool UHSYfpaiFL = false;
      bool eCXcgoEyhk = false;
      bool fonXmhpFJP = false;
      bool HVBccRauIn = false;
      bool tUAXFGOqbX = false;
      bool kRXDVeTulx = false;
      bool zVZoDJAuzO = false;
      bool OJptpKoPRf = false;
      bool SzckdpxyGy = false;
      bool yfIKnXuKUw = false;
      bool FTrNIbadNK = false;
      bool pEcFdzrnLN = false;
      bool MCnAQiAeFR = false;
      bool PduUazHPbB = false;
      bool OSkwItCDgn = false;
      bool fGzHjCfqxZ = false;
      string qlywmBjkrs;
      string uVYgSZrwIT;
      string LSRpAEyIQr;
      string tjkHOTcdKz;
      string GbXtqKHYRq;
      string XoGOaYTHui;
      string DaTAzKjQSz;
      string wOkINjuXzp;
      string xYqYUFcWfp;
      string zUhbweHXuf;
      string apGRuIDyAq;
      string cwHFkdjuft;
      string hNjbzafIMh;
      string cXbSOGSYdL;
      string BeVoMDMcpR;
      string uMqByNFdST;
      string btkSOFUope;
      string KKQTrCquPw;
      string NDSumQfaUB;
      string AoGKjHsDaG;
      if(qlywmBjkrs == apGRuIDyAq){iXmLGkuXIu = true;}
      else if(apGRuIDyAq == qlywmBjkrs){zVZoDJAuzO = true;}
      if(uVYgSZrwIT == cwHFkdjuft){VKNWFYbpey = true;}
      else if(cwHFkdjuft == uVYgSZrwIT){OJptpKoPRf = true;}
      if(LSRpAEyIQr == hNjbzafIMh){ZsTndVEFjk = true;}
      else if(hNjbzafIMh == LSRpAEyIQr){SzckdpxyGy = true;}
      if(tjkHOTcdKz == cXbSOGSYdL){ImTINpQGnC = true;}
      else if(cXbSOGSYdL == tjkHOTcdKz){yfIKnXuKUw = true;}
      if(GbXtqKHYRq == BeVoMDMcpR){UHSYfpaiFL = true;}
      else if(BeVoMDMcpR == GbXtqKHYRq){FTrNIbadNK = true;}
      if(XoGOaYTHui == uMqByNFdST){eCXcgoEyhk = true;}
      else if(uMqByNFdST == XoGOaYTHui){pEcFdzrnLN = true;}
      if(DaTAzKjQSz == btkSOFUope){fonXmhpFJP = true;}
      else if(btkSOFUope == DaTAzKjQSz){MCnAQiAeFR = true;}
      if(wOkINjuXzp == KKQTrCquPw){HVBccRauIn = true;}
      if(xYqYUFcWfp == NDSumQfaUB){tUAXFGOqbX = true;}
      if(zUhbweHXuf == AoGKjHsDaG){kRXDVeTulx = true;}
      while(KKQTrCquPw == wOkINjuXzp){PduUazHPbB = true;}
      while(NDSumQfaUB == NDSumQfaUB){OSkwItCDgn = true;}
      while(AoGKjHsDaG == AoGKjHsDaG){fGzHjCfqxZ = true;}
      if(iXmLGkuXIu == true){iXmLGkuXIu = false;}
      if(VKNWFYbpey == true){VKNWFYbpey = false;}
      if(ZsTndVEFjk == true){ZsTndVEFjk = false;}
      if(ImTINpQGnC == true){ImTINpQGnC = false;}
      if(UHSYfpaiFL == true){UHSYfpaiFL = false;}
      if(eCXcgoEyhk == true){eCXcgoEyhk = false;}
      if(fonXmhpFJP == true){fonXmhpFJP = false;}
      if(HVBccRauIn == true){HVBccRauIn = false;}
      if(tUAXFGOqbX == true){tUAXFGOqbX = false;}
      if(kRXDVeTulx == true){kRXDVeTulx = false;}
      if(zVZoDJAuzO == true){zVZoDJAuzO = false;}
      if(OJptpKoPRf == true){OJptpKoPRf = false;}
      if(SzckdpxyGy == true){SzckdpxyGy = false;}
      if(yfIKnXuKUw == true){yfIKnXuKUw = false;}
      if(FTrNIbadNK == true){FTrNIbadNK = false;}
      if(pEcFdzrnLN == true){pEcFdzrnLN = false;}
      if(MCnAQiAeFR == true){MCnAQiAeFR = false;}
      if(PduUazHPbB == true){PduUazHPbB = false;}
      if(OSkwItCDgn == true){OSkwItCDgn = false;}
      if(fGzHjCfqxZ == true){fGzHjCfqxZ = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class GPSQLAKSVC
{ 
  void VqnnxMeIzm()
  { 
      bool aKmDQWbEhG = false;
      bool DEIgbDhSXz = false;
      bool PbrfeQCwKJ = false;
      bool floBxbphAF = false;
      bool JiWpmhfqbr = false;
      bool MuQtozSGYz = false;
      bool UetXaQOGjz = false;
      bool MARSpfFBsx = false;
      bool jLURxjVuMy = false;
      bool JjJAjdozPV = false;
      bool SZGbfLcxEI = false;
      bool sQNaOJKcZp = false;
      bool uTslpcqRhL = false;
      bool qGkWdKEskk = false;
      bool HXpDErVhka = false;
      bool SLYZazgUkD = false;
      bool ULPrRmfpxE = false;
      bool ERqniWcogx = false;
      bool GIfGsehLwd = false;
      bool diHgPuIylR = false;
      string ZfUxdZoqul;
      string SzbkUpzrkx;
      string yaJrqOjTAL;
      string eHSlKEPIaT;
      string VneMCboDDd;
      string MqnBJzWbGP;
      string oUqiGLgoZP;
      string apRRaKuxoP;
      string YfQWznTQcL;
      string hmBLeBwuFq;
      string tzcmCVZWay;
      string DYmqpIDTjS;
      string qQMOgmnGmZ;
      string NzqxUYDdTc;
      string NxodIIAKUV;
      string xcLmAdmOFP;
      string gTiAjDgoWQ;
      string FZAGEsaiGY;
      string mdkQcknExp;
      string lnXDwtNnsE;
      if(ZfUxdZoqul == tzcmCVZWay){aKmDQWbEhG = true;}
      else if(tzcmCVZWay == ZfUxdZoqul){SZGbfLcxEI = true;}
      if(SzbkUpzrkx == DYmqpIDTjS){DEIgbDhSXz = true;}
      else if(DYmqpIDTjS == SzbkUpzrkx){sQNaOJKcZp = true;}
      if(yaJrqOjTAL == qQMOgmnGmZ){PbrfeQCwKJ = true;}
      else if(qQMOgmnGmZ == yaJrqOjTAL){uTslpcqRhL = true;}
      if(eHSlKEPIaT == NzqxUYDdTc){floBxbphAF = true;}
      else if(NzqxUYDdTc == eHSlKEPIaT){qGkWdKEskk = true;}
      if(VneMCboDDd == NxodIIAKUV){JiWpmhfqbr = true;}
      else if(NxodIIAKUV == VneMCboDDd){HXpDErVhka = true;}
      if(MqnBJzWbGP == xcLmAdmOFP){MuQtozSGYz = true;}
      else if(xcLmAdmOFP == MqnBJzWbGP){SLYZazgUkD = true;}
      if(oUqiGLgoZP == gTiAjDgoWQ){UetXaQOGjz = true;}
      else if(gTiAjDgoWQ == oUqiGLgoZP){ULPrRmfpxE = true;}
      if(apRRaKuxoP == FZAGEsaiGY){MARSpfFBsx = true;}
      if(YfQWznTQcL == mdkQcknExp){jLURxjVuMy = true;}
      if(hmBLeBwuFq == lnXDwtNnsE){JjJAjdozPV = true;}
      while(FZAGEsaiGY == apRRaKuxoP){ERqniWcogx = true;}
      while(mdkQcknExp == mdkQcknExp){GIfGsehLwd = true;}
      while(lnXDwtNnsE == lnXDwtNnsE){diHgPuIylR = true;}
      if(aKmDQWbEhG == true){aKmDQWbEhG = false;}
      if(DEIgbDhSXz == true){DEIgbDhSXz = false;}
      if(PbrfeQCwKJ == true){PbrfeQCwKJ = false;}
      if(floBxbphAF == true){floBxbphAF = false;}
      if(JiWpmhfqbr == true){JiWpmhfqbr = false;}
      if(MuQtozSGYz == true){MuQtozSGYz = false;}
      if(UetXaQOGjz == true){UetXaQOGjz = false;}
      if(MARSpfFBsx == true){MARSpfFBsx = false;}
      if(jLURxjVuMy == true){jLURxjVuMy = false;}
      if(JjJAjdozPV == true){JjJAjdozPV = false;}
      if(SZGbfLcxEI == true){SZGbfLcxEI = false;}
      if(sQNaOJKcZp == true){sQNaOJKcZp = false;}
      if(uTslpcqRhL == true){uTslpcqRhL = false;}
      if(qGkWdKEskk == true){qGkWdKEskk = false;}
      if(HXpDErVhka == true){HXpDErVhka = false;}
      if(SLYZazgUkD == true){SLYZazgUkD = false;}
      if(ULPrRmfpxE == true){ULPrRmfpxE = false;}
      if(ERqniWcogx == true){ERqniWcogx = false;}
      if(GIfGsehLwd == true){GIfGsehLwd = false;}
      if(diHgPuIylR == true){diHgPuIylR = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class XKVNJVFQUN
{ 
  void pzIChQQpcT()
  { 
      bool JWEBVcJKGK = false;
      bool lmaqxYaxIB = false;
      bool nbhALGmUgI = false;
      bool KEUkXQtxDf = false;
      bool KhsalJxrxq = false;
      bool RoBEKhnDoO = false;
      bool pocyAhRoTg = false;
      bool edtcpGiHOB = false;
      bool ItWppUDQZp = false;
      bool bpHnoVEuaE = false;
      bool qIYQLnuXNE = false;
      bool zgomGwRlHe = false;
      bool eBPdEoVGmT = false;
      bool BngJKAUFeB = false;
      bool ZeCUpuATgs = false;
      bool DSmuZosuMW = false;
      bool SojsCKAecG = false;
      bool aLGFFzytmJ = false;
      bool nBYtQiAkjU = false;
      bool GYsIijtJSf = false;
      string xBNXkqOten;
      string EPYSaLGKdE;
      string lUhoFoQgyB;
      string TpUcomcxYo;
      string OTYxemNEez;
      string KSjRicTXSu;
      string ahwdUNtwcm;
      string iIknpRujKS;
      string bLByqAFDsM;
      string TEecOfXucQ;
      string rQbrQCguaQ;
      string giNATOfxlU;
      string HqCQSedHYJ;
      string tAHtZKjJgn;
      string SJbbfkpeJA;
      string AZIIIBNLYl;
      string XYWRVfaTZI;
      string eWPyByOakh;
      string nzyYIUrzkY;
      string xYjuQsmJFz;
      if(xBNXkqOten == rQbrQCguaQ){JWEBVcJKGK = true;}
      else if(rQbrQCguaQ == xBNXkqOten){qIYQLnuXNE = true;}
      if(EPYSaLGKdE == giNATOfxlU){lmaqxYaxIB = true;}
      else if(giNATOfxlU == EPYSaLGKdE){zgomGwRlHe = true;}
      if(lUhoFoQgyB == HqCQSedHYJ){nbhALGmUgI = true;}
      else if(HqCQSedHYJ == lUhoFoQgyB){eBPdEoVGmT = true;}
      if(TpUcomcxYo == tAHtZKjJgn){KEUkXQtxDf = true;}
      else if(tAHtZKjJgn == TpUcomcxYo){BngJKAUFeB = true;}
      if(OTYxemNEez == SJbbfkpeJA){KhsalJxrxq = true;}
      else if(SJbbfkpeJA == OTYxemNEez){ZeCUpuATgs = true;}
      if(KSjRicTXSu == AZIIIBNLYl){RoBEKhnDoO = true;}
      else if(AZIIIBNLYl == KSjRicTXSu){DSmuZosuMW = true;}
      if(ahwdUNtwcm == XYWRVfaTZI){pocyAhRoTg = true;}
      else if(XYWRVfaTZI == ahwdUNtwcm){SojsCKAecG = true;}
      if(iIknpRujKS == eWPyByOakh){edtcpGiHOB = true;}
      if(bLByqAFDsM == nzyYIUrzkY){ItWppUDQZp = true;}
      if(TEecOfXucQ == xYjuQsmJFz){bpHnoVEuaE = true;}
      while(eWPyByOakh == iIknpRujKS){aLGFFzytmJ = true;}
      while(nzyYIUrzkY == nzyYIUrzkY){nBYtQiAkjU = true;}
      while(xYjuQsmJFz == xYjuQsmJFz){GYsIijtJSf = true;}
      if(JWEBVcJKGK == true){JWEBVcJKGK = false;}
      if(lmaqxYaxIB == true){lmaqxYaxIB = false;}
      if(nbhALGmUgI == true){nbhALGmUgI = false;}
      if(KEUkXQtxDf == true){KEUkXQtxDf = false;}
      if(KhsalJxrxq == true){KhsalJxrxq = false;}
      if(RoBEKhnDoO == true){RoBEKhnDoO = false;}
      if(pocyAhRoTg == true){pocyAhRoTg = false;}
      if(edtcpGiHOB == true){edtcpGiHOB = false;}
      if(ItWppUDQZp == true){ItWppUDQZp = false;}
      if(bpHnoVEuaE == true){bpHnoVEuaE = false;}
      if(qIYQLnuXNE == true){qIYQLnuXNE = false;}
      if(zgomGwRlHe == true){zgomGwRlHe = false;}
      if(eBPdEoVGmT == true){eBPdEoVGmT = false;}
      if(BngJKAUFeB == true){BngJKAUFeB = false;}
      if(ZeCUpuATgs == true){ZeCUpuATgs = false;}
      if(DSmuZosuMW == true){DSmuZosuMW = false;}
      if(SojsCKAecG == true){SojsCKAecG = false;}
      if(aLGFFzytmJ == true){aLGFFzytmJ = false;}
      if(nBYtQiAkjU == true){nBYtQiAkjU = false;}
      if(GYsIijtJSf == true){GYsIijtJSf = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class FMDMIDZLOX
{ 
  void zbFEnoUWUC()
  { 
      bool qpEsZgaDNn = false;
      bool uihPQkqgRy = false;
      bool ZtlychARlr = false;
      bool ZGxMjAbHfe = false;
      bool tocZrSzNHD = false;
      bool aUhbVxEGPr = false;
      bool gJQVOokVeQ = false;
      bool JjBlEkQLGJ = false;
      bool imKiQEXUqm = false;
      bool uVqmyjXHLC = false;
      bool gdhpsqTuWj = false;
      bool frzGJsyhEJ = false;
      bool RPdrUnsNnT = false;
      bool MJADcFFToZ = false;
      bool kbyGHDVkdE = false;
      bool lpCBkRzpVF = false;
      bool yFHCXWrwdE = false;
      bool ndreXpRXjQ = false;
      bool RIjjhVGySK = false;
      bool FOxibfUuhj = false;
      string HNkiyuLsSN;
      string ZlxBYSQLaQ;
      string shApecWtHj;
      string ThVdcqQXeC;
      string eWwobCtkcp;
      string juIocZNtDV;
      string YRkitrQTYg;
      string CrfYlWkLOb;
      string ikQRzYZgAC;
      string dVTJcMkNti;
      string lZMumqOiCF;
      string oBfblmATiV;
      string SjSVDfYWuY;
      string lWQeoIXVdH;
      string KpdtNbpqWo;
      string MQeYQBGpqG;
      string SqmdTRkAld;
      string PeoaLbGXIb;
      string pgAFMUrqOn;
      string BgdXoSCAau;
      if(HNkiyuLsSN == lZMumqOiCF){qpEsZgaDNn = true;}
      else if(lZMumqOiCF == HNkiyuLsSN){gdhpsqTuWj = true;}
      if(ZlxBYSQLaQ == oBfblmATiV){uihPQkqgRy = true;}
      else if(oBfblmATiV == ZlxBYSQLaQ){frzGJsyhEJ = true;}
      if(shApecWtHj == SjSVDfYWuY){ZtlychARlr = true;}
      else if(SjSVDfYWuY == shApecWtHj){RPdrUnsNnT = true;}
      if(ThVdcqQXeC == lWQeoIXVdH){ZGxMjAbHfe = true;}
      else if(lWQeoIXVdH == ThVdcqQXeC){MJADcFFToZ = true;}
      if(eWwobCtkcp == KpdtNbpqWo){tocZrSzNHD = true;}
      else if(KpdtNbpqWo == eWwobCtkcp){kbyGHDVkdE = true;}
      if(juIocZNtDV == MQeYQBGpqG){aUhbVxEGPr = true;}
      else if(MQeYQBGpqG == juIocZNtDV){lpCBkRzpVF = true;}
      if(YRkitrQTYg == SqmdTRkAld){gJQVOokVeQ = true;}
      else if(SqmdTRkAld == YRkitrQTYg){yFHCXWrwdE = true;}
      if(CrfYlWkLOb == PeoaLbGXIb){JjBlEkQLGJ = true;}
      if(ikQRzYZgAC == pgAFMUrqOn){imKiQEXUqm = true;}
      if(dVTJcMkNti == BgdXoSCAau){uVqmyjXHLC = true;}
      while(PeoaLbGXIb == CrfYlWkLOb){ndreXpRXjQ = true;}
      while(pgAFMUrqOn == pgAFMUrqOn){RIjjhVGySK = true;}
      while(BgdXoSCAau == BgdXoSCAau){FOxibfUuhj = true;}
      if(qpEsZgaDNn == true){qpEsZgaDNn = false;}
      if(uihPQkqgRy == true){uihPQkqgRy = false;}
      if(ZtlychARlr == true){ZtlychARlr = false;}
      if(ZGxMjAbHfe == true){ZGxMjAbHfe = false;}
      if(tocZrSzNHD == true){tocZrSzNHD = false;}
      if(aUhbVxEGPr == true){aUhbVxEGPr = false;}
      if(gJQVOokVeQ == true){gJQVOokVeQ = false;}
      if(JjBlEkQLGJ == true){JjBlEkQLGJ = false;}
      if(imKiQEXUqm == true){imKiQEXUqm = false;}
      if(uVqmyjXHLC == true){uVqmyjXHLC = false;}
      if(gdhpsqTuWj == true){gdhpsqTuWj = false;}
      if(frzGJsyhEJ == true){frzGJsyhEJ = false;}
      if(RPdrUnsNnT == true){RPdrUnsNnT = false;}
      if(MJADcFFToZ == true){MJADcFFToZ = false;}
      if(kbyGHDVkdE == true){kbyGHDVkdE = false;}
      if(lpCBkRzpVF == true){lpCBkRzpVF = false;}
      if(yFHCXWrwdE == true){yFHCXWrwdE = false;}
      if(ndreXpRXjQ == true){ndreXpRXjQ = false;}
      if(RIjjhVGySK == true){RIjjhVGySK = false;}
      if(FOxibfUuhj == true){FOxibfUuhj = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class GBQYWBNMKQ
{ 
  void IdubnVAJJE()
  { 
      bool QSDqkcCZww = false;
      bool pUhfrLtqTF = false;
      bool mGWDxOrmVk = false;
      bool WXtwabmFSB = false;
      bool BknddbWIiV = false;
      bool hHVTSKuztV = false;
      bool kPELYRalFQ = false;
      bool YoXSDBRrZU = false;
      bool riEzDPCZcP = false;
      bool gmKxPlgcFL = false;
      bool AjCRwriCQQ = false;
      bool rDZYdBKEHI = false;
      bool OAIojkdaDQ = false;
      bool UnmNUHflCK = false;
      bool gzJLXcNlSN = false;
      bool bbUwxzaNhL = false;
      bool NIzzwDPLEV = false;
      bool VYBxbOqxRG = false;
      bool WrHoorSpQU = false;
      bool gSDqwXAKPT = false;
      string BZgqtFcdCo;
      string eobcKsiXWb;
      string GKCPRlRzjL;
      string PUJKgRYwZB;
      string hoGQplImPU;
      string HWYgwpXQZI;
      string ndsqZKeQws;
      string UmyVsQDlYe;
      string ceiPErwbOp;
      string sIVQMEuPqf;
      string HqpWATYDme;
      string llqufItdmg;
      string OCCFzLRgIo;
      string VntsXkoMPj;
      string TrniEHQakE;
      string KQcJREnjXn;
      string CqtyJyqyWt;
      string TgOCNVOTBq;
      string upwDdELkaT;
      string xEobgbypYF;
      if(BZgqtFcdCo == HqpWATYDme){QSDqkcCZww = true;}
      else if(HqpWATYDme == BZgqtFcdCo){AjCRwriCQQ = true;}
      if(eobcKsiXWb == llqufItdmg){pUhfrLtqTF = true;}
      else if(llqufItdmg == eobcKsiXWb){rDZYdBKEHI = true;}
      if(GKCPRlRzjL == OCCFzLRgIo){mGWDxOrmVk = true;}
      else if(OCCFzLRgIo == GKCPRlRzjL){OAIojkdaDQ = true;}
      if(PUJKgRYwZB == VntsXkoMPj){WXtwabmFSB = true;}
      else if(VntsXkoMPj == PUJKgRYwZB){UnmNUHflCK = true;}
      if(hoGQplImPU == TrniEHQakE){BknddbWIiV = true;}
      else if(TrniEHQakE == hoGQplImPU){gzJLXcNlSN = true;}
      if(HWYgwpXQZI == KQcJREnjXn){hHVTSKuztV = true;}
      else if(KQcJREnjXn == HWYgwpXQZI){bbUwxzaNhL = true;}
      if(ndsqZKeQws == CqtyJyqyWt){kPELYRalFQ = true;}
      else if(CqtyJyqyWt == ndsqZKeQws){NIzzwDPLEV = true;}
      if(UmyVsQDlYe == TgOCNVOTBq){YoXSDBRrZU = true;}
      if(ceiPErwbOp == upwDdELkaT){riEzDPCZcP = true;}
      if(sIVQMEuPqf == xEobgbypYF){gmKxPlgcFL = true;}
      while(TgOCNVOTBq == UmyVsQDlYe){VYBxbOqxRG = true;}
      while(upwDdELkaT == upwDdELkaT){WrHoorSpQU = true;}
      while(xEobgbypYF == xEobgbypYF){gSDqwXAKPT = true;}
      if(QSDqkcCZww == true){QSDqkcCZww = false;}
      if(pUhfrLtqTF == true){pUhfrLtqTF = false;}
      if(mGWDxOrmVk == true){mGWDxOrmVk = false;}
      if(WXtwabmFSB == true){WXtwabmFSB = false;}
      if(BknddbWIiV == true){BknddbWIiV = false;}
      if(hHVTSKuztV == true){hHVTSKuztV = false;}
      if(kPELYRalFQ == true){kPELYRalFQ = false;}
      if(YoXSDBRrZU == true){YoXSDBRrZU = false;}
      if(riEzDPCZcP == true){riEzDPCZcP = false;}
      if(gmKxPlgcFL == true){gmKxPlgcFL = false;}
      if(AjCRwriCQQ == true){AjCRwriCQQ = false;}
      if(rDZYdBKEHI == true){rDZYdBKEHI = false;}
      if(OAIojkdaDQ == true){OAIojkdaDQ = false;}
      if(UnmNUHflCK == true){UnmNUHflCK = false;}
      if(gzJLXcNlSN == true){gzJLXcNlSN = false;}
      if(bbUwxzaNhL == true){bbUwxzaNhL = false;}
      if(NIzzwDPLEV == true){NIzzwDPLEV = false;}
      if(VYBxbOqxRG == true){VYBxbOqxRG = false;}
      if(WrHoorSpQU == true){WrHoorSpQU = false;}
      if(gSDqwXAKPT == true){gSDqwXAKPT = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class SGJFBTYCFY
{ 
  void uNqbYhcGgx()
  { 
      bool bfoScBxGaO = false;
      bool XtqYBYnsyX = false;
      bool JINtVknxfC = false;
      bool LNmWYFHcXl = false;
      bool rXcCMKPPLC = false;
      bool FWJJMTSuwr = false;
      bool NAZXCJHTAw = false;
      bool RKVLelfLgL = false;
      bool UXldxoEdKF = false;
      bool mLgfYrxEzC = false;
      bool DuPOktBxdZ = false;
      bool mGNkWoNwaN = false;
      bool FdItJFdpmm = false;
      bool naLdHYIWsC = false;
      bool nGzjRfxuIi = false;
      bool dAckxZmUFf = false;
      bool QKKpkMtjcy = false;
      bool gqDXZzdYcc = false;
      bool HhgDInxagh = false;
      bool lmRNlcwJyF = false;
      string UAHUEdYPUp;
      string YFShrXmWqf;
      string mZseQGOESc;
      string MMqrmealoS;
      string qSMYqZGibg;
      string pImshuGbDx;
      string OUxrcMOauN;
      string wBhYoTNUnq;
      string AeckmEYyJr;
      string YzhqDWUTue;
      string KfnNjoaOEN;
      string gknMwiqLFY;
      string mQQDnxSpUR;
      string zsZIfUqOAx;
      string cKtwKmLVtU;
      string eIOVqtOjZm;
      string VjtlOnLefb;
      string qcKHucVUsA;
      string kxwAmpdDQk;
      string FGoNasQHgV;
      if(UAHUEdYPUp == KfnNjoaOEN){bfoScBxGaO = true;}
      else if(KfnNjoaOEN == UAHUEdYPUp){DuPOktBxdZ = true;}
      if(YFShrXmWqf == gknMwiqLFY){XtqYBYnsyX = true;}
      else if(gknMwiqLFY == YFShrXmWqf){mGNkWoNwaN = true;}
      if(mZseQGOESc == mQQDnxSpUR){JINtVknxfC = true;}
      else if(mQQDnxSpUR == mZseQGOESc){FdItJFdpmm = true;}
      if(MMqrmealoS == zsZIfUqOAx){LNmWYFHcXl = true;}
      else if(zsZIfUqOAx == MMqrmealoS){naLdHYIWsC = true;}
      if(qSMYqZGibg == cKtwKmLVtU){rXcCMKPPLC = true;}
      else if(cKtwKmLVtU == qSMYqZGibg){nGzjRfxuIi = true;}
      if(pImshuGbDx == eIOVqtOjZm){FWJJMTSuwr = true;}
      else if(eIOVqtOjZm == pImshuGbDx){dAckxZmUFf = true;}
      if(OUxrcMOauN == VjtlOnLefb){NAZXCJHTAw = true;}
      else if(VjtlOnLefb == OUxrcMOauN){QKKpkMtjcy = true;}
      if(wBhYoTNUnq == qcKHucVUsA){RKVLelfLgL = true;}
      if(AeckmEYyJr == kxwAmpdDQk){UXldxoEdKF = true;}
      if(YzhqDWUTue == FGoNasQHgV){mLgfYrxEzC = true;}
      while(qcKHucVUsA == wBhYoTNUnq){gqDXZzdYcc = true;}
      while(kxwAmpdDQk == kxwAmpdDQk){HhgDInxagh = true;}
      while(FGoNasQHgV == FGoNasQHgV){lmRNlcwJyF = true;}
      if(bfoScBxGaO == true){bfoScBxGaO = false;}
      if(XtqYBYnsyX == true){XtqYBYnsyX = false;}
      if(JINtVknxfC == true){JINtVknxfC = false;}
      if(LNmWYFHcXl == true){LNmWYFHcXl = false;}
      if(rXcCMKPPLC == true){rXcCMKPPLC = false;}
      if(FWJJMTSuwr == true){FWJJMTSuwr = false;}
      if(NAZXCJHTAw == true){NAZXCJHTAw = false;}
      if(RKVLelfLgL == true){RKVLelfLgL = false;}
      if(UXldxoEdKF == true){UXldxoEdKF = false;}
      if(mLgfYrxEzC == true){mLgfYrxEzC = false;}
      if(DuPOktBxdZ == true){DuPOktBxdZ = false;}
      if(mGNkWoNwaN == true){mGNkWoNwaN = false;}
      if(FdItJFdpmm == true){FdItJFdpmm = false;}
      if(naLdHYIWsC == true){naLdHYIWsC = false;}
      if(nGzjRfxuIi == true){nGzjRfxuIi = false;}
      if(dAckxZmUFf == true){dAckxZmUFf = false;}
      if(QKKpkMtjcy == true){QKKpkMtjcy = false;}
      if(gqDXZzdYcc == true){gqDXZzdYcc = false;}
      if(HhgDInxagh == true){HhgDInxagh = false;}
      if(lmRNlcwJyF == true){lmRNlcwJyF = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class FOUREYPAPN
{ 
  void sYKnNdhgtG()
  { 
      bool qRtzSupHGq = false;
      bool MofHnwzDpw = false;
      bool uNuafAmDug = false;
      bool gkqQNugUUX = false;
      bool tEWFaEmYWk = false;
      bool FfljDcVTTR = false;
      bool ImLZKbyOsr = false;
      bool OdiSBqqpAb = false;
      bool NNgKaAzGNj = false;
      bool ZNBCOHsxtz = false;
      bool FXeeWawShL = false;
      bool lfSqEtGByJ = false;
      bool brAIRBcfDt = false;
      bool ysuBVoiBnA = false;
      bool EfYCyttJyU = false;
      bool BqyjWMXVMU = false;
      bool xPPmNrjRUO = false;
      bool LENxFuTyKX = false;
      bool GThisGuLeI = false;
      bool RMoSCnQkoF = false;
      string NseSGtYzBl;
      string ZNuQHnepXm;
      string JpLeyVfVnz;
      string tugaiaIGpg;
      string coWqbIRzeE;
      string iLGBpXgATk;
      string NCKBqefUhg;
      string fXzqJTSUCp;
      string EfqjQioejL;
      string tHlFSaeVzx;
      string bxRyYKLOrW;
      string ELxcggLZjI;
      string pAjWlXksYh;
      string oxUEOGNrLG;
      string WZmNGhKJYk;
      string OEkqHaMuLB;
      string YSpJgHqrOZ;
      string STNdkPNWPE;
      string MbTmTkLcxm;
      string tSfKhEicfy;
      if(NseSGtYzBl == bxRyYKLOrW){qRtzSupHGq = true;}
      else if(bxRyYKLOrW == NseSGtYzBl){FXeeWawShL = true;}
      if(ZNuQHnepXm == ELxcggLZjI){MofHnwzDpw = true;}
      else if(ELxcggLZjI == ZNuQHnepXm){lfSqEtGByJ = true;}
      if(JpLeyVfVnz == pAjWlXksYh){uNuafAmDug = true;}
      else if(pAjWlXksYh == JpLeyVfVnz){brAIRBcfDt = true;}
      if(tugaiaIGpg == oxUEOGNrLG){gkqQNugUUX = true;}
      else if(oxUEOGNrLG == tugaiaIGpg){ysuBVoiBnA = true;}
      if(coWqbIRzeE == WZmNGhKJYk){tEWFaEmYWk = true;}
      else if(WZmNGhKJYk == coWqbIRzeE){EfYCyttJyU = true;}
      if(iLGBpXgATk == OEkqHaMuLB){FfljDcVTTR = true;}
      else if(OEkqHaMuLB == iLGBpXgATk){BqyjWMXVMU = true;}
      if(NCKBqefUhg == YSpJgHqrOZ){ImLZKbyOsr = true;}
      else if(YSpJgHqrOZ == NCKBqefUhg){xPPmNrjRUO = true;}
      if(fXzqJTSUCp == STNdkPNWPE){OdiSBqqpAb = true;}
      if(EfqjQioejL == MbTmTkLcxm){NNgKaAzGNj = true;}
      if(tHlFSaeVzx == tSfKhEicfy){ZNBCOHsxtz = true;}
      while(STNdkPNWPE == fXzqJTSUCp){LENxFuTyKX = true;}
      while(MbTmTkLcxm == MbTmTkLcxm){GThisGuLeI = true;}
      while(tSfKhEicfy == tSfKhEicfy){RMoSCnQkoF = true;}
      if(qRtzSupHGq == true){qRtzSupHGq = false;}
      if(MofHnwzDpw == true){MofHnwzDpw = false;}
      if(uNuafAmDug == true){uNuafAmDug = false;}
      if(gkqQNugUUX == true){gkqQNugUUX = false;}
      if(tEWFaEmYWk == true){tEWFaEmYWk = false;}
      if(FfljDcVTTR == true){FfljDcVTTR = false;}
      if(ImLZKbyOsr == true){ImLZKbyOsr = false;}
      if(OdiSBqqpAb == true){OdiSBqqpAb = false;}
      if(NNgKaAzGNj == true){NNgKaAzGNj = false;}
      if(ZNBCOHsxtz == true){ZNBCOHsxtz = false;}
      if(FXeeWawShL == true){FXeeWawShL = false;}
      if(lfSqEtGByJ == true){lfSqEtGByJ = false;}
      if(brAIRBcfDt == true){brAIRBcfDt = false;}
      if(ysuBVoiBnA == true){ysuBVoiBnA = false;}
      if(EfYCyttJyU == true){EfYCyttJyU = false;}
      if(BqyjWMXVMU == true){BqyjWMXVMU = false;}
      if(xPPmNrjRUO == true){xPPmNrjRUO = false;}
      if(LENxFuTyKX == true){LENxFuTyKX = false;}
      if(GThisGuLeI == true){GThisGuLeI = false;}
      if(RMoSCnQkoF == true){RMoSCnQkoF = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class EBEICODIMU
{ 
  void ymfHimlkcp()
  { 
      bool XbKTVgzeYS = false;
      bool zWwzmsFEKL = false;
      bool MwhWFeWpzl = false;
      bool jcrRbuiUez = false;
      bool srhibqoMZN = false;
      bool ZwEZIbtmNp = false;
      bool KJfliWeeWq = false;
      bool JkZLSUNyuN = false;
      bool oJPlLmYRIz = false;
      bool BwGnniMuAF = false;
      bool MKohDoWrGn = false;
      bool NuqzBBtsaw = false;
      bool xMVXpMdkWi = false;
      bool ISypBeThhW = false;
      bool QfLUkFEHmm = false;
      bool oSUEHzoRqp = false;
      bool KkUWfuxBxV = false;
      bool gLKDeRBBlj = false;
      bool HWyjtoxthC = false;
      bool oCpqMeKnnp = false;
      string EiwpcTCwpA;
      string IsYkQutjiB;
      string sPByGMcUEH;
      string NNuOoKEMmS;
      string sUUUsrdagl;
      string XSLxXnhyiQ;
      string phriluyJuF;
      string pgxQIXtfFO;
      string hCmSiuCxpA;
      string cGdVbKckhx;
      string sTebupVtoA;
      string tBsThntZzq;
      string sATtbjDaox;
      string uJyHUOWLWs;
      string ZHHpGbMJmm;
      string QCkqEsAjzK;
      string mtFrEjDkzT;
      string RiCGRkscnA;
      string WsnBgsXHCb;
      string NlLMGfBPkV;
      if(EiwpcTCwpA == sTebupVtoA){XbKTVgzeYS = true;}
      else if(sTebupVtoA == EiwpcTCwpA){MKohDoWrGn = true;}
      if(IsYkQutjiB == tBsThntZzq){zWwzmsFEKL = true;}
      else if(tBsThntZzq == IsYkQutjiB){NuqzBBtsaw = true;}
      if(sPByGMcUEH == sATtbjDaox){MwhWFeWpzl = true;}
      else if(sATtbjDaox == sPByGMcUEH){xMVXpMdkWi = true;}
      if(NNuOoKEMmS == uJyHUOWLWs){jcrRbuiUez = true;}
      else if(uJyHUOWLWs == NNuOoKEMmS){ISypBeThhW = true;}
      if(sUUUsrdagl == ZHHpGbMJmm){srhibqoMZN = true;}
      else if(ZHHpGbMJmm == sUUUsrdagl){QfLUkFEHmm = true;}
      if(XSLxXnhyiQ == QCkqEsAjzK){ZwEZIbtmNp = true;}
      else if(QCkqEsAjzK == XSLxXnhyiQ){oSUEHzoRqp = true;}
      if(phriluyJuF == mtFrEjDkzT){KJfliWeeWq = true;}
      else if(mtFrEjDkzT == phriluyJuF){KkUWfuxBxV = true;}
      if(pgxQIXtfFO == RiCGRkscnA){JkZLSUNyuN = true;}
      if(hCmSiuCxpA == WsnBgsXHCb){oJPlLmYRIz = true;}
      if(cGdVbKckhx == NlLMGfBPkV){BwGnniMuAF = true;}
      while(RiCGRkscnA == pgxQIXtfFO){gLKDeRBBlj = true;}
      while(WsnBgsXHCb == WsnBgsXHCb){HWyjtoxthC = true;}
      while(NlLMGfBPkV == NlLMGfBPkV){oCpqMeKnnp = true;}
      if(XbKTVgzeYS == true){XbKTVgzeYS = false;}
      if(zWwzmsFEKL == true){zWwzmsFEKL = false;}
      if(MwhWFeWpzl == true){MwhWFeWpzl = false;}
      if(jcrRbuiUez == true){jcrRbuiUez = false;}
      if(srhibqoMZN == true){srhibqoMZN = false;}
      if(ZwEZIbtmNp == true){ZwEZIbtmNp = false;}
      if(KJfliWeeWq == true){KJfliWeeWq = false;}
      if(JkZLSUNyuN == true){JkZLSUNyuN = false;}
      if(oJPlLmYRIz == true){oJPlLmYRIz = false;}
      if(BwGnniMuAF == true){BwGnniMuAF = false;}
      if(MKohDoWrGn == true){MKohDoWrGn = false;}
      if(NuqzBBtsaw == true){NuqzBBtsaw = false;}
      if(xMVXpMdkWi == true){xMVXpMdkWi = false;}
      if(ISypBeThhW == true){ISypBeThhW = false;}
      if(QfLUkFEHmm == true){QfLUkFEHmm = false;}
      if(oSUEHzoRqp == true){oSUEHzoRqp = false;}
      if(KkUWfuxBxV == true){KkUWfuxBxV = false;}
      if(gLKDeRBBlj == true){gLKDeRBBlj = false;}
      if(HWyjtoxthC == true){HWyjtoxthC = false;}
      if(oCpqMeKnnp == true){oCpqMeKnnp = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class BXDXRGTNJF
{ 
  void tGEMYccSYz()
  { 
      bool mKyhArLKbG = false;
      bool GfMZuCZBxT = false;
      bool XyMRWfrVWN = false;
      bool GTVNcGLffV = false;
      bool fDLYCRQdNb = false;
      bool IMPxGnxgLU = false;
      bool zonNzmKywn = false;
      bool qsUanTmmPF = false;
      bool OOItFtDXHn = false;
      bool IdTLWpPyZP = false;
      bool GSgYkOqoJl = false;
      bool AJRGFkfsHF = false;
      bool impIeMZJEx = false;
      bool EoNzywhjJq = false;
      bool CONUnzMNFl = false;
      bool JWpUfTbYsY = false;
      bool nhkMhLwRHJ = false;
      bool CwjPCUYUTf = false;
      bool zLERmhysSe = false;
      bool TIpjCUcBmb = false;
      string bapwADYyBW;
      string jhRbearcqW;
      string HadnhPKNAR;
      string gslhhTELYw;
      string plqdlpQKpB;
      string cIUwNAxCOj;
      string sLxioquisL;
      string VfEtgVjzCq;
      string yAWzoYXoUh;
      string WCwnDdnHnt;
      string thQdewDaPr;
      string PxzWkroytQ;
      string SGOLoTiQqD;
      string gbKHwQirTr;
      string UxZbRYCYCK;
      string npNXbnSFoL;
      string MmiLKmlraU;
      string JwdCwVglsP;
      string QKNgOqOmeI;
      string xcDIehONQe;
      if(bapwADYyBW == thQdewDaPr){mKyhArLKbG = true;}
      else if(thQdewDaPr == bapwADYyBW){GSgYkOqoJl = true;}
      if(jhRbearcqW == PxzWkroytQ){GfMZuCZBxT = true;}
      else if(PxzWkroytQ == jhRbearcqW){AJRGFkfsHF = true;}
      if(HadnhPKNAR == SGOLoTiQqD){XyMRWfrVWN = true;}
      else if(SGOLoTiQqD == HadnhPKNAR){impIeMZJEx = true;}
      if(gslhhTELYw == gbKHwQirTr){GTVNcGLffV = true;}
      else if(gbKHwQirTr == gslhhTELYw){EoNzywhjJq = true;}
      if(plqdlpQKpB == UxZbRYCYCK){fDLYCRQdNb = true;}
      else if(UxZbRYCYCK == plqdlpQKpB){CONUnzMNFl = true;}
      if(cIUwNAxCOj == npNXbnSFoL){IMPxGnxgLU = true;}
      else if(npNXbnSFoL == cIUwNAxCOj){JWpUfTbYsY = true;}
      if(sLxioquisL == MmiLKmlraU){zonNzmKywn = true;}
      else if(MmiLKmlraU == sLxioquisL){nhkMhLwRHJ = true;}
      if(VfEtgVjzCq == JwdCwVglsP){qsUanTmmPF = true;}
      if(yAWzoYXoUh == QKNgOqOmeI){OOItFtDXHn = true;}
      if(WCwnDdnHnt == xcDIehONQe){IdTLWpPyZP = true;}
      while(JwdCwVglsP == VfEtgVjzCq){CwjPCUYUTf = true;}
      while(QKNgOqOmeI == QKNgOqOmeI){zLERmhysSe = true;}
      while(xcDIehONQe == xcDIehONQe){TIpjCUcBmb = true;}
      if(mKyhArLKbG == true){mKyhArLKbG = false;}
      if(GfMZuCZBxT == true){GfMZuCZBxT = false;}
      if(XyMRWfrVWN == true){XyMRWfrVWN = false;}
      if(GTVNcGLffV == true){GTVNcGLffV = false;}
      if(fDLYCRQdNb == true){fDLYCRQdNb = false;}
      if(IMPxGnxgLU == true){IMPxGnxgLU = false;}
      if(zonNzmKywn == true){zonNzmKywn = false;}
      if(qsUanTmmPF == true){qsUanTmmPF = false;}
      if(OOItFtDXHn == true){OOItFtDXHn = false;}
      if(IdTLWpPyZP == true){IdTLWpPyZP = false;}
      if(GSgYkOqoJl == true){GSgYkOqoJl = false;}
      if(AJRGFkfsHF == true){AJRGFkfsHF = false;}
      if(impIeMZJEx == true){impIeMZJEx = false;}
      if(EoNzywhjJq == true){EoNzywhjJq = false;}
      if(CONUnzMNFl == true){CONUnzMNFl = false;}
      if(JWpUfTbYsY == true){JWpUfTbYsY = false;}
      if(nhkMhLwRHJ == true){nhkMhLwRHJ = false;}
      if(CwjPCUYUTf == true){CwjPCUYUTf = false;}
      if(zLERmhysSe == true){zLERmhysSe = false;}
      if(TIpjCUcBmb == true){TIpjCUcBmb = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class YHUNOKRKQB
{ 
  void wuiVCqaPnh()
  { 
      bool dMbSFzXodq = false;
      bool MBhUeHdTTF = false;
      bool twnKmVOrsD = false;
      bool XlmBGVPeMi = false;
      bool gKejNhtPaC = false;
      bool LSHVzgXRei = false;
      bool jfuZSZNfNJ = false;
      bool qyHjYjREwF = false;
      bool bzQqrEeRCZ = false;
      bool xyAdzBOFQm = false;
      bool TOBRLMLXwO = false;
      bool PTVYHjPEhO = false;
      bool uwcnMryckW = false;
      bool ULmIlMyyee = false;
      bool rGUnJcbaVO = false;
      bool lJXCrXkNFS = false;
      bool OilYsDfMmt = false;
      bool lQZCVnbodi = false;
      bool PXHVkLnkQO = false;
      bool bksLPJUutG = false;
      string ZoyIyZfKKk;
      string CZKfMVWtVI;
      string TknhxLydzg;
      string seShRWmMwm;
      string nBkZMaucPG;
      string PMsEGoAPKl;
      string bCLdqWGcNp;
      string iJxiTRAOUW;
      string QVNrQfkOac;
      string VXCKLlpGho;
      string TROYXGOKjn;
      string nlunUGnSNK;
      string lrCjTKGmXg;
      string bsfeCyGoTJ;
      string RZdmojcNoE;
      string yWsWDaPdEN;
      string zbmCLuFPkW;
      string zzyDsLOOuj;
      string hrxSiFAIba;
      string icjGJombbs;
      if(ZoyIyZfKKk == TROYXGOKjn){dMbSFzXodq = true;}
      else if(TROYXGOKjn == ZoyIyZfKKk){TOBRLMLXwO = true;}
      if(CZKfMVWtVI == nlunUGnSNK){MBhUeHdTTF = true;}
      else if(nlunUGnSNK == CZKfMVWtVI){PTVYHjPEhO = true;}
      if(TknhxLydzg == lrCjTKGmXg){twnKmVOrsD = true;}
      else if(lrCjTKGmXg == TknhxLydzg){uwcnMryckW = true;}
      if(seShRWmMwm == bsfeCyGoTJ){XlmBGVPeMi = true;}
      else if(bsfeCyGoTJ == seShRWmMwm){ULmIlMyyee = true;}
      if(nBkZMaucPG == RZdmojcNoE){gKejNhtPaC = true;}
      else if(RZdmojcNoE == nBkZMaucPG){rGUnJcbaVO = true;}
      if(PMsEGoAPKl == yWsWDaPdEN){LSHVzgXRei = true;}
      else if(yWsWDaPdEN == PMsEGoAPKl){lJXCrXkNFS = true;}
      if(bCLdqWGcNp == zbmCLuFPkW){jfuZSZNfNJ = true;}
      else if(zbmCLuFPkW == bCLdqWGcNp){OilYsDfMmt = true;}
      if(iJxiTRAOUW == zzyDsLOOuj){qyHjYjREwF = true;}
      if(QVNrQfkOac == hrxSiFAIba){bzQqrEeRCZ = true;}
      if(VXCKLlpGho == icjGJombbs){xyAdzBOFQm = true;}
      while(zzyDsLOOuj == iJxiTRAOUW){lQZCVnbodi = true;}
      while(hrxSiFAIba == hrxSiFAIba){PXHVkLnkQO = true;}
      while(icjGJombbs == icjGJombbs){bksLPJUutG = true;}
      if(dMbSFzXodq == true){dMbSFzXodq = false;}
      if(MBhUeHdTTF == true){MBhUeHdTTF = false;}
      if(twnKmVOrsD == true){twnKmVOrsD = false;}
      if(XlmBGVPeMi == true){XlmBGVPeMi = false;}
      if(gKejNhtPaC == true){gKejNhtPaC = false;}
      if(LSHVzgXRei == true){LSHVzgXRei = false;}
      if(jfuZSZNfNJ == true){jfuZSZNfNJ = false;}
      if(qyHjYjREwF == true){qyHjYjREwF = false;}
      if(bzQqrEeRCZ == true){bzQqrEeRCZ = false;}
      if(xyAdzBOFQm == true){xyAdzBOFQm = false;}
      if(TOBRLMLXwO == true){TOBRLMLXwO = false;}
      if(PTVYHjPEhO == true){PTVYHjPEhO = false;}
      if(uwcnMryckW == true){uwcnMryckW = false;}
      if(ULmIlMyyee == true){ULmIlMyyee = false;}
      if(rGUnJcbaVO == true){rGUnJcbaVO = false;}
      if(lJXCrXkNFS == true){lJXCrXkNFS = false;}
      if(OilYsDfMmt == true){OilYsDfMmt = false;}
      if(lQZCVnbodi == true){lQZCVnbodi = false;}
      if(PXHVkLnkQO == true){PXHVkLnkQO = false;}
      if(bksLPJUutG == true){bksLPJUutG = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class DARRBUWSMO
{ 
  void SjTrSTJYoj()
  { 
      bool MwqyAIkfgS = false;
      bool FsGWgzDAzD = false;
      bool MpfTlDxHAE = false;
      bool UaONjVhiNo = false;
      bool fkyOmNYUKe = false;
      bool ClCfFVQXMw = false;
      bool LcfcxddslL = false;
      bool QTlJXarQfX = false;
      bool ebxVBiXiHN = false;
      bool FKVQcCFVRI = false;
      bool iehzNhzrIe = false;
      bool dzqnQjfJaN = false;
      bool FulYGGyUfU = false;
      bool UWzXoztxIS = false;
      bool jfaciGSgAs = false;
      bool WutDCmsIsG = false;
      bool jdLmJHzSzQ = false;
      bool ohBIdZUIoA = false;
      bool mQUmyZbwUB = false;
      bool GkEBhFTmSa = false;
      string XOBsUDVXAW;
      string dGUJlBbkzy;
      string cwIqVdWMIR;
      string UJikegqLaQ;
      string FtasCjfrDm;
      string PTwmHbGKXp;
      string fIOiBUXieF;
      string JPJishUOol;
      string xeJVCANudC;
      string Zfnjkwerrg;
      string LxNyczKMtY;
      string GrVlsAzsgA;
      string HcEbecbYyw;
      string DcWHZARKrC;
      string pAAFwhKCqj;
      string xlKqZhslTz;
      string XkOyUdVNLs;
      string inAeJHczew;
      string SYhOyRRehr;
      string GeqrdFlCjR;
      if(XOBsUDVXAW == LxNyczKMtY){MwqyAIkfgS = true;}
      else if(LxNyczKMtY == XOBsUDVXAW){iehzNhzrIe = true;}
      if(dGUJlBbkzy == GrVlsAzsgA){FsGWgzDAzD = true;}
      else if(GrVlsAzsgA == dGUJlBbkzy){dzqnQjfJaN = true;}
      if(cwIqVdWMIR == HcEbecbYyw){MpfTlDxHAE = true;}
      else if(HcEbecbYyw == cwIqVdWMIR){FulYGGyUfU = true;}
      if(UJikegqLaQ == DcWHZARKrC){UaONjVhiNo = true;}
      else if(DcWHZARKrC == UJikegqLaQ){UWzXoztxIS = true;}
      if(FtasCjfrDm == pAAFwhKCqj){fkyOmNYUKe = true;}
      else if(pAAFwhKCqj == FtasCjfrDm){jfaciGSgAs = true;}
      if(PTwmHbGKXp == xlKqZhslTz){ClCfFVQXMw = true;}
      else if(xlKqZhslTz == PTwmHbGKXp){WutDCmsIsG = true;}
      if(fIOiBUXieF == XkOyUdVNLs){LcfcxddslL = true;}
      else if(XkOyUdVNLs == fIOiBUXieF){jdLmJHzSzQ = true;}
      if(JPJishUOol == inAeJHczew){QTlJXarQfX = true;}
      if(xeJVCANudC == SYhOyRRehr){ebxVBiXiHN = true;}
      if(Zfnjkwerrg == GeqrdFlCjR){FKVQcCFVRI = true;}
      while(inAeJHczew == JPJishUOol){ohBIdZUIoA = true;}
      while(SYhOyRRehr == SYhOyRRehr){mQUmyZbwUB = true;}
      while(GeqrdFlCjR == GeqrdFlCjR){GkEBhFTmSa = true;}
      if(MwqyAIkfgS == true){MwqyAIkfgS = false;}
      if(FsGWgzDAzD == true){FsGWgzDAzD = false;}
      if(MpfTlDxHAE == true){MpfTlDxHAE = false;}
      if(UaONjVhiNo == true){UaONjVhiNo = false;}
      if(fkyOmNYUKe == true){fkyOmNYUKe = false;}
      if(ClCfFVQXMw == true){ClCfFVQXMw = false;}
      if(LcfcxddslL == true){LcfcxddslL = false;}
      if(QTlJXarQfX == true){QTlJXarQfX = false;}
      if(ebxVBiXiHN == true){ebxVBiXiHN = false;}
      if(FKVQcCFVRI == true){FKVQcCFVRI = false;}
      if(iehzNhzrIe == true){iehzNhzrIe = false;}
      if(dzqnQjfJaN == true){dzqnQjfJaN = false;}
      if(FulYGGyUfU == true){FulYGGyUfU = false;}
      if(UWzXoztxIS == true){UWzXoztxIS = false;}
      if(jfaciGSgAs == true){jfaciGSgAs = false;}
      if(WutDCmsIsG == true){WutDCmsIsG = false;}
      if(jdLmJHzSzQ == true){jdLmJHzSzQ = false;}
      if(ohBIdZUIoA == true){ohBIdZUIoA = false;}
      if(mQUmyZbwUB == true){mQUmyZbwUB = false;}
      if(GkEBhFTmSa == true){GkEBhFTmSa = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class YOIQVPZQHR
{ 
  void TzVhZCbJhx()
  { 
      bool hUQxWBMmgn = false;
      bool ujPcpCYrUX = false;
      bool quEqialVZD = false;
      bool jBZDTLYkht = false;
      bool iqjhXiNgeP = false;
      bool RfJZKmQZOu = false;
      bool PqMcDsKLJd = false;
      bool cmKanzLVTz = false;
      bool MFpKlDqAsf = false;
      bool uzVldqeGed = false;
      bool YCWAmdVikK = false;
      bool btGPhKBBpz = false;
      bool BJScicRYwx = false;
      bool UEpoZKhpXI = false;
      bool hIOiEAsGDT = false;
      bool pcPecOisQJ = false;
      bool MwlnoWDQoX = false;
      bool bKdhQstjXi = false;
      bool jKUcGrnLML = false;
      bool anYNukWash = false;
      string bnCyJdseIf;
      string QdVMQDpzlP;
      string tCTIqDdpHi;
      string wktrdTkokc;
      string lJIFJobgYR;
      string MFlmFZTtHF;
      string zCXZjeichw;
      string SANIcksOyB;
      string axRoWpzGmE;
      string AqhedikiVd;
      string FyybyLqcKU;
      string fFuGeCkhDs;
      string fcpdwbSies;
      string AKsTubyoqK;
      string yWwRXtubAa;
      string xDebxcIUeV;
      string sHxQUVMaKC;
      string EwprtJgXFB;
      string fpiEuweQWS;
      string TcJURpYexB;
      if(bnCyJdseIf == FyybyLqcKU){hUQxWBMmgn = true;}
      else if(FyybyLqcKU == bnCyJdseIf){YCWAmdVikK = true;}
      if(QdVMQDpzlP == fFuGeCkhDs){ujPcpCYrUX = true;}
      else if(fFuGeCkhDs == QdVMQDpzlP){btGPhKBBpz = true;}
      if(tCTIqDdpHi == fcpdwbSies){quEqialVZD = true;}
      else if(fcpdwbSies == tCTIqDdpHi){BJScicRYwx = true;}
      if(wktrdTkokc == AKsTubyoqK){jBZDTLYkht = true;}
      else if(AKsTubyoqK == wktrdTkokc){UEpoZKhpXI = true;}
      if(lJIFJobgYR == yWwRXtubAa){iqjhXiNgeP = true;}
      else if(yWwRXtubAa == lJIFJobgYR){hIOiEAsGDT = true;}
      if(MFlmFZTtHF == xDebxcIUeV){RfJZKmQZOu = true;}
      else if(xDebxcIUeV == MFlmFZTtHF){pcPecOisQJ = true;}
      if(zCXZjeichw == sHxQUVMaKC){PqMcDsKLJd = true;}
      else if(sHxQUVMaKC == zCXZjeichw){MwlnoWDQoX = true;}
      if(SANIcksOyB == EwprtJgXFB){cmKanzLVTz = true;}
      if(axRoWpzGmE == fpiEuweQWS){MFpKlDqAsf = true;}
      if(AqhedikiVd == TcJURpYexB){uzVldqeGed = true;}
      while(EwprtJgXFB == SANIcksOyB){bKdhQstjXi = true;}
      while(fpiEuweQWS == fpiEuweQWS){jKUcGrnLML = true;}
      while(TcJURpYexB == TcJURpYexB){anYNukWash = true;}
      if(hUQxWBMmgn == true){hUQxWBMmgn = false;}
      if(ujPcpCYrUX == true){ujPcpCYrUX = false;}
      if(quEqialVZD == true){quEqialVZD = false;}
      if(jBZDTLYkht == true){jBZDTLYkht = false;}
      if(iqjhXiNgeP == true){iqjhXiNgeP = false;}
      if(RfJZKmQZOu == true){RfJZKmQZOu = false;}
      if(PqMcDsKLJd == true){PqMcDsKLJd = false;}
      if(cmKanzLVTz == true){cmKanzLVTz = false;}
      if(MFpKlDqAsf == true){MFpKlDqAsf = false;}
      if(uzVldqeGed == true){uzVldqeGed = false;}
      if(YCWAmdVikK == true){YCWAmdVikK = false;}
      if(btGPhKBBpz == true){btGPhKBBpz = false;}
      if(BJScicRYwx == true){BJScicRYwx = false;}
      if(UEpoZKhpXI == true){UEpoZKhpXI = false;}
      if(hIOiEAsGDT == true){hIOiEAsGDT = false;}
      if(pcPecOisQJ == true){pcPecOisQJ = false;}
      if(MwlnoWDQoX == true){MwlnoWDQoX = false;}
      if(bKdhQstjXi == true){bKdhQstjXi = false;}
      if(jKUcGrnLML == true){jKUcGrnLML = false;}
      if(anYNukWash == true){anYNukWash = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class RMBZOAYMKJ
{ 
  void eNRcOXTRdu()
  { 
      bool mcmowItcFQ = false;
      bool ptjNFwKuEF = false;
      bool ufIdsfFqNp = false;
      bool aHgThRsLaF = false;
      bool rJzJbqKEXc = false;
      bool NqHhyGUJuP = false;
      bool CDOPohNPfn = false;
      bool CyUzMkgyBC = false;
      bool VBSkcizzUa = false;
      bool xjQKDotjTs = false;
      bool dtYjZOWIUN = false;
      bool ZVIrtBkdlG = false;
      bool iNtEqShJwX = false;
      bool qxdHYbbhKN = false;
      bool MqdHBaaXQB = false;
      bool EPxNKPAUsH = false;
      bool gMLxVcrBTR = false;
      bool ZCSYsqjlDP = false;
      bool rJstTazPwJ = false;
      bool aGnDgzeglX = false;
      string EdfCPUitGl;
      string JAVOMysZYK;
      string YHappOWfER;
      string WUHqKkpTBm;
      string JFwimDuqCQ;
      string TEzOOxCpLA;
      string yConPosdDa;
      string HYXkATLrCm;
      string SecnyRUsbN;
      string hAIBoGQHSy;
      string KRmbItgONu;
      string lKmYgSZApy;
      string TABpsHQVut;
      string CDYEcBqBfD;
      string jGfgbXMiUW;
      string gPQUdKPxiB;
      string dLTSshkiwe;
      string aXUmONTUNU;
      string ugBXNmmEZS;
      string ltSdYXmMns;
      if(EdfCPUitGl == KRmbItgONu){mcmowItcFQ = true;}
      else if(KRmbItgONu == EdfCPUitGl){dtYjZOWIUN = true;}
      if(JAVOMysZYK == lKmYgSZApy){ptjNFwKuEF = true;}
      else if(lKmYgSZApy == JAVOMysZYK){ZVIrtBkdlG = true;}
      if(YHappOWfER == TABpsHQVut){ufIdsfFqNp = true;}
      else if(TABpsHQVut == YHappOWfER){iNtEqShJwX = true;}
      if(WUHqKkpTBm == CDYEcBqBfD){aHgThRsLaF = true;}
      else if(CDYEcBqBfD == WUHqKkpTBm){qxdHYbbhKN = true;}
      if(JFwimDuqCQ == jGfgbXMiUW){rJzJbqKEXc = true;}
      else if(jGfgbXMiUW == JFwimDuqCQ){MqdHBaaXQB = true;}
      if(TEzOOxCpLA == gPQUdKPxiB){NqHhyGUJuP = true;}
      else if(gPQUdKPxiB == TEzOOxCpLA){EPxNKPAUsH = true;}
      if(yConPosdDa == dLTSshkiwe){CDOPohNPfn = true;}
      else if(dLTSshkiwe == yConPosdDa){gMLxVcrBTR = true;}
      if(HYXkATLrCm == aXUmONTUNU){CyUzMkgyBC = true;}
      if(SecnyRUsbN == ugBXNmmEZS){VBSkcizzUa = true;}
      if(hAIBoGQHSy == ltSdYXmMns){xjQKDotjTs = true;}
      while(aXUmONTUNU == HYXkATLrCm){ZCSYsqjlDP = true;}
      while(ugBXNmmEZS == ugBXNmmEZS){rJstTazPwJ = true;}
      while(ltSdYXmMns == ltSdYXmMns){aGnDgzeglX = true;}
      if(mcmowItcFQ == true){mcmowItcFQ = false;}
      if(ptjNFwKuEF == true){ptjNFwKuEF = false;}
      if(ufIdsfFqNp == true){ufIdsfFqNp = false;}
      if(aHgThRsLaF == true){aHgThRsLaF = false;}
      if(rJzJbqKEXc == true){rJzJbqKEXc = false;}
      if(NqHhyGUJuP == true){NqHhyGUJuP = false;}
      if(CDOPohNPfn == true){CDOPohNPfn = false;}
      if(CyUzMkgyBC == true){CyUzMkgyBC = false;}
      if(VBSkcizzUa == true){VBSkcizzUa = false;}
      if(xjQKDotjTs == true){xjQKDotjTs = false;}
      if(dtYjZOWIUN == true){dtYjZOWIUN = false;}
      if(ZVIrtBkdlG == true){ZVIrtBkdlG = false;}
      if(iNtEqShJwX == true){iNtEqShJwX = false;}
      if(qxdHYbbhKN == true){qxdHYbbhKN = false;}
      if(MqdHBaaXQB == true){MqdHBaaXQB = false;}
      if(EPxNKPAUsH == true){EPxNKPAUsH = false;}
      if(gMLxVcrBTR == true){gMLxVcrBTR = false;}
      if(ZCSYsqjlDP == true){ZCSYsqjlDP = false;}
      if(rJstTazPwJ == true){rJstTazPwJ = false;}
      if(aGnDgzeglX == true){aGnDgzeglX = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class XTJOZJEUYV
{ 
  void EMdqLDHhIu()
  { 
      bool ZiVlDzOsXj = false;
      bool zPVXHCKjjW = false;
      bool bbHHxRQcMt = false;
      bool SSDPMkrEUB = false;
      bool ScHzdGxDyr = false;
      bool SRuhPybOnk = false;
      bool ilgcRfLGLV = false;
      bool KFOhDyTHcq = false;
      bool TNdTaAXVAN = false;
      bool IcQiSfwegx = false;
      bool tqqbhNCNdQ = false;
      bool dTkwRUIMBQ = false;
      bool IpGyMgofOW = false;
      bool CoZfxcWClN = false;
      bool yJqiiorTRy = false;
      bool XicQoDjrOB = false;
      bool YVyHOotFzn = false;
      bool yFanSyyXOX = false;
      bool oUOQySMJps = false;
      bool sdmkobLjUt = false;
      string JHNPkxcrwT;
      string kKjmDKEgCn;
      string VpBKPmxfZa;
      string odwXeUJQRU;
      string VdscnbDeNX;
      string ZMBycTFCzy;
      string zxRVdGNMHi;
      string BmPgSqwYWn;
      string jSRCAbcytL;
      string OGRTUXLXyh;
      string NpWeVmxTfk;
      string WgfKNgeOVC;
      string cPRuTtVwLt;
      string fYanatumgM;
      string eJRJogaGFn;
      string rxCuExXbKa;
      string RBHlFyGqjT;
      string krhIXTyIGm;
      string TOpXBhWejc;
      string VTbFucBeEq;
      if(JHNPkxcrwT == NpWeVmxTfk){ZiVlDzOsXj = true;}
      else if(NpWeVmxTfk == JHNPkxcrwT){tqqbhNCNdQ = true;}
      if(kKjmDKEgCn == WgfKNgeOVC){zPVXHCKjjW = true;}
      else if(WgfKNgeOVC == kKjmDKEgCn){dTkwRUIMBQ = true;}
      if(VpBKPmxfZa == cPRuTtVwLt){bbHHxRQcMt = true;}
      else if(cPRuTtVwLt == VpBKPmxfZa){IpGyMgofOW = true;}
      if(odwXeUJQRU == fYanatumgM){SSDPMkrEUB = true;}
      else if(fYanatumgM == odwXeUJQRU){CoZfxcWClN = true;}
      if(VdscnbDeNX == eJRJogaGFn){ScHzdGxDyr = true;}
      else if(eJRJogaGFn == VdscnbDeNX){yJqiiorTRy = true;}
      if(ZMBycTFCzy == rxCuExXbKa){SRuhPybOnk = true;}
      else if(rxCuExXbKa == ZMBycTFCzy){XicQoDjrOB = true;}
      if(zxRVdGNMHi == RBHlFyGqjT){ilgcRfLGLV = true;}
      else if(RBHlFyGqjT == zxRVdGNMHi){YVyHOotFzn = true;}
      if(BmPgSqwYWn == krhIXTyIGm){KFOhDyTHcq = true;}
      if(jSRCAbcytL == TOpXBhWejc){TNdTaAXVAN = true;}
      if(OGRTUXLXyh == VTbFucBeEq){IcQiSfwegx = true;}
      while(krhIXTyIGm == BmPgSqwYWn){yFanSyyXOX = true;}
      while(TOpXBhWejc == TOpXBhWejc){oUOQySMJps = true;}
      while(VTbFucBeEq == VTbFucBeEq){sdmkobLjUt = true;}
      if(ZiVlDzOsXj == true){ZiVlDzOsXj = false;}
      if(zPVXHCKjjW == true){zPVXHCKjjW = false;}
      if(bbHHxRQcMt == true){bbHHxRQcMt = false;}
      if(SSDPMkrEUB == true){SSDPMkrEUB = false;}
      if(ScHzdGxDyr == true){ScHzdGxDyr = false;}
      if(SRuhPybOnk == true){SRuhPybOnk = false;}
      if(ilgcRfLGLV == true){ilgcRfLGLV = false;}
      if(KFOhDyTHcq == true){KFOhDyTHcq = false;}
      if(TNdTaAXVAN == true){TNdTaAXVAN = false;}
      if(IcQiSfwegx == true){IcQiSfwegx = false;}
      if(tqqbhNCNdQ == true){tqqbhNCNdQ = false;}
      if(dTkwRUIMBQ == true){dTkwRUIMBQ = false;}
      if(IpGyMgofOW == true){IpGyMgofOW = false;}
      if(CoZfxcWClN == true){CoZfxcWClN = false;}
      if(yJqiiorTRy == true){yJqiiorTRy = false;}
      if(XicQoDjrOB == true){XicQoDjrOB = false;}
      if(YVyHOotFzn == true){YVyHOotFzn = false;}
      if(yFanSyyXOX == true){yFanSyyXOX = false;}
      if(oUOQySMJps == true){oUOQySMJps = false;}
      if(sdmkobLjUt == true){sdmkobLjUt = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class UXXJKLKHGB
{ 
  void QuhclSVkaF()
  { 
      bool wryGSYbxco = false;
      bool yDQfGtsGRj = false;
      bool EaVSOzSxBs = false;
      bool ohLJwQWtZw = false;
      bool CHrgnboytg = false;
      bool OEOZmVWfrS = false;
      bool GdwjAQrGjo = false;
      bool WzgVgwhoem = false;
      bool KTDUekSlWZ = false;
      bool tpCGoYLIfX = false;
      bool ihOFJPXsrp = false;
      bool ngBEIlZaEP = false;
      bool xGiJtfwZfI = false;
      bool kYIGDcEyLP = false;
      bool MZsflNoxyD = false;
      bool yjDQZcyFKc = false;
      bool SxNjFOXtBf = false;
      bool hbPoCXMCWg = false;
      bool qzacJAUrgZ = false;
      bool dznhwOMJaX = false;
      string UnMOlbONCq;
      string qPjqqrrQoB;
      string YKLuPTFzXE;
      string rHmBzQHIQW;
      string meofjVyMkw;
      string YuhrLJbQyS;
      string VPpxzjchra;
      string kjAROsVfLs;
      string UrNafwZupo;
      string opJyBXoqfz;
      string sQUKKouPcS;
      string nwEFxcBORC;
      string JgrCkuZBQq;
      string EdzLzDXDQp;
      string BJSXBskEAX;
      string VZYdoMXRYP;
      string PtzlNJwrFt;
      string FxybAAOUBr;
      string JVArUdFVWm;
      string eFeAaHKfJq;
      if(UnMOlbONCq == sQUKKouPcS){wryGSYbxco = true;}
      else if(sQUKKouPcS == UnMOlbONCq){ihOFJPXsrp = true;}
      if(qPjqqrrQoB == nwEFxcBORC){yDQfGtsGRj = true;}
      else if(nwEFxcBORC == qPjqqrrQoB){ngBEIlZaEP = true;}
      if(YKLuPTFzXE == JgrCkuZBQq){EaVSOzSxBs = true;}
      else if(JgrCkuZBQq == YKLuPTFzXE){xGiJtfwZfI = true;}
      if(rHmBzQHIQW == EdzLzDXDQp){ohLJwQWtZw = true;}
      else if(EdzLzDXDQp == rHmBzQHIQW){kYIGDcEyLP = true;}
      if(meofjVyMkw == BJSXBskEAX){CHrgnboytg = true;}
      else if(BJSXBskEAX == meofjVyMkw){MZsflNoxyD = true;}
      if(YuhrLJbQyS == VZYdoMXRYP){OEOZmVWfrS = true;}
      else if(VZYdoMXRYP == YuhrLJbQyS){yjDQZcyFKc = true;}
      if(VPpxzjchra == PtzlNJwrFt){GdwjAQrGjo = true;}
      else if(PtzlNJwrFt == VPpxzjchra){SxNjFOXtBf = true;}
      if(kjAROsVfLs == FxybAAOUBr){WzgVgwhoem = true;}
      if(UrNafwZupo == JVArUdFVWm){KTDUekSlWZ = true;}
      if(opJyBXoqfz == eFeAaHKfJq){tpCGoYLIfX = true;}
      while(FxybAAOUBr == kjAROsVfLs){hbPoCXMCWg = true;}
      while(JVArUdFVWm == JVArUdFVWm){qzacJAUrgZ = true;}
      while(eFeAaHKfJq == eFeAaHKfJq){dznhwOMJaX = true;}
      if(wryGSYbxco == true){wryGSYbxco = false;}
      if(yDQfGtsGRj == true){yDQfGtsGRj = false;}
      if(EaVSOzSxBs == true){EaVSOzSxBs = false;}
      if(ohLJwQWtZw == true){ohLJwQWtZw = false;}
      if(CHrgnboytg == true){CHrgnboytg = false;}
      if(OEOZmVWfrS == true){OEOZmVWfrS = false;}
      if(GdwjAQrGjo == true){GdwjAQrGjo = false;}
      if(WzgVgwhoem == true){WzgVgwhoem = false;}
      if(KTDUekSlWZ == true){KTDUekSlWZ = false;}
      if(tpCGoYLIfX == true){tpCGoYLIfX = false;}
      if(ihOFJPXsrp == true){ihOFJPXsrp = false;}
      if(ngBEIlZaEP == true){ngBEIlZaEP = false;}
      if(xGiJtfwZfI == true){xGiJtfwZfI = false;}
      if(kYIGDcEyLP == true){kYIGDcEyLP = false;}
      if(MZsflNoxyD == true){MZsflNoxyD = false;}
      if(yjDQZcyFKc == true){yjDQZcyFKc = false;}
      if(SxNjFOXtBf == true){SxNjFOXtBf = false;}
      if(hbPoCXMCWg == true){hbPoCXMCWg = false;}
      if(qzacJAUrgZ == true){qzacJAUrgZ = false;}
      if(dznhwOMJaX == true){dznhwOMJaX = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class ROKSKMNPNU
{ 
  void ywRHpWCOna()
  { 
      bool jsirZjsYNN = false;
      bool txXFeXNfBn = false;
      bool JKnqldTOGF = false;
      bool ZDmepKPBAc = false;
      bool fzTquiAuHl = false;
      bool YBrfGZFqGw = false;
      bool QeSHmpKrOT = false;
      bool HMfYIJpxwD = false;
      bool cYHUgXLGYQ = false;
      bool FYuDMBgMDE = false;
      bool XIfmdLVSXw = false;
      bool iItCTqXxaO = false;
      bool dETyOiQbMG = false;
      bool cdsreUrTpU = false;
      bool CshbgxdrjU = false;
      bool diknaTnhYu = false;
      bool utGQTEOCXz = false;
      bool zDHGMkVrQQ = false;
      bool EYqqcssEQL = false;
      bool fKtuYHlQHb = false;
      string GiRIXdnrFk;
      string hhAwmSLSLx;
      string aEVERmWTXq;
      string omppAXTTzg;
      string ZmBoMnFLAZ;
      string bgnCXCNMpj;
      string HUUNuurJuO;
      string yqTdWnDgrc;
      string gKSxPIymSy;
      string KHcOZFSmsR;
      string wuQkajNKej;
      string ygTNDwBXxm;
      string wEqwEqNEDQ;
      string UPnagksgVf;
      string unHizcmPKc;
      string EupFVqEUgi;
      string VIGNOirsgS;
      string CTBQrHxHwa;
      string EytaMZYhEo;
      string fYAlJlhsUQ;
      if(GiRIXdnrFk == wuQkajNKej){jsirZjsYNN = true;}
      else if(wuQkajNKej == GiRIXdnrFk){XIfmdLVSXw = true;}
      if(hhAwmSLSLx == ygTNDwBXxm){txXFeXNfBn = true;}
      else if(ygTNDwBXxm == hhAwmSLSLx){iItCTqXxaO = true;}
      if(aEVERmWTXq == wEqwEqNEDQ){JKnqldTOGF = true;}
      else if(wEqwEqNEDQ == aEVERmWTXq){dETyOiQbMG = true;}
      if(omppAXTTzg == UPnagksgVf){ZDmepKPBAc = true;}
      else if(UPnagksgVf == omppAXTTzg){cdsreUrTpU = true;}
      if(ZmBoMnFLAZ == unHizcmPKc){fzTquiAuHl = true;}
      else if(unHizcmPKc == ZmBoMnFLAZ){CshbgxdrjU = true;}
      if(bgnCXCNMpj == EupFVqEUgi){YBrfGZFqGw = true;}
      else if(EupFVqEUgi == bgnCXCNMpj){diknaTnhYu = true;}
      if(HUUNuurJuO == VIGNOirsgS){QeSHmpKrOT = true;}
      else if(VIGNOirsgS == HUUNuurJuO){utGQTEOCXz = true;}
      if(yqTdWnDgrc == CTBQrHxHwa){HMfYIJpxwD = true;}
      if(gKSxPIymSy == EytaMZYhEo){cYHUgXLGYQ = true;}
      if(KHcOZFSmsR == fYAlJlhsUQ){FYuDMBgMDE = true;}
      while(CTBQrHxHwa == yqTdWnDgrc){zDHGMkVrQQ = true;}
      while(EytaMZYhEo == EytaMZYhEo){EYqqcssEQL = true;}
      while(fYAlJlhsUQ == fYAlJlhsUQ){fKtuYHlQHb = true;}
      if(jsirZjsYNN == true){jsirZjsYNN = false;}
      if(txXFeXNfBn == true){txXFeXNfBn = false;}
      if(JKnqldTOGF == true){JKnqldTOGF = false;}
      if(ZDmepKPBAc == true){ZDmepKPBAc = false;}
      if(fzTquiAuHl == true){fzTquiAuHl = false;}
      if(YBrfGZFqGw == true){YBrfGZFqGw = false;}
      if(QeSHmpKrOT == true){QeSHmpKrOT = false;}
      if(HMfYIJpxwD == true){HMfYIJpxwD = false;}
      if(cYHUgXLGYQ == true){cYHUgXLGYQ = false;}
      if(FYuDMBgMDE == true){FYuDMBgMDE = false;}
      if(XIfmdLVSXw == true){XIfmdLVSXw = false;}
      if(iItCTqXxaO == true){iItCTqXxaO = false;}
      if(dETyOiQbMG == true){dETyOiQbMG = false;}
      if(cdsreUrTpU == true){cdsreUrTpU = false;}
      if(CshbgxdrjU == true){CshbgxdrjU = false;}
      if(diknaTnhYu == true){diknaTnhYu = false;}
      if(utGQTEOCXz == true){utGQTEOCXz = false;}
      if(zDHGMkVrQQ == true){zDHGMkVrQQ = false;}
      if(EYqqcssEQL == true){EYqqcssEQL = false;}
      if(fKtuYHlQHb == true){fKtuYHlQHb = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class HQGZFUHZIY
{ 
  void APgfzEDzmp()
  { 
      bool WYneJKWPrq = false;
      bool jUtQnLBDeL = false;
      bool kTJlxzgFkd = false;
      bool nRzUKTLQSl = false;
      bool LtMWNeoXBA = false;
      bool ZlaRNCPCgK = false;
      bool cRdNCSUYGT = false;
      bool AkkszqHlYR = false;
      bool JJEkEBphGH = false;
      bool EJiIItPyTu = false;
      bool KQRhAnBgRW = false;
      bool uccOBTNsIB = false;
      bool cmRyOpBckF = false;
      bool aIRdHrqVkQ = false;
      bool zIPiLafTGn = false;
      bool gWpSRXySTJ = false;
      bool lYwMulLzHI = false;
      bool cqIqBUWilm = false;
      bool KhVwYERzLi = false;
      bool tXCadaLDnY = false;
      string zfOAzlJWVd;
      string sNSNXLZHch;
      string gYbAkJdlLo;
      string HUQAmZRgMh;
      string NuRyuNPDYR;
      string dPxagZENPo;
      string HWLgWYxSay;
      string truuUlHdFW;
      string taNsKrXoSM;
      string VERXZpjjbV;
      string PxcaWlUBGu;
      string SZHrugJRVd;
      string AHzOcpZXUd;
      string BXCjHxymWY;
      string XWiWtuwZbr;
      string gSNxVIxOyg;
      string LwfbttXXkx;
      string iVuxFdXcTg;
      string sAucwiJEOy;
      string AjooMapGcz;
      if(zfOAzlJWVd == PxcaWlUBGu){WYneJKWPrq = true;}
      else if(PxcaWlUBGu == zfOAzlJWVd){KQRhAnBgRW = true;}
      if(sNSNXLZHch == SZHrugJRVd){jUtQnLBDeL = true;}
      else if(SZHrugJRVd == sNSNXLZHch){uccOBTNsIB = true;}
      if(gYbAkJdlLo == AHzOcpZXUd){kTJlxzgFkd = true;}
      else if(AHzOcpZXUd == gYbAkJdlLo){cmRyOpBckF = true;}
      if(HUQAmZRgMh == BXCjHxymWY){nRzUKTLQSl = true;}
      else if(BXCjHxymWY == HUQAmZRgMh){aIRdHrqVkQ = true;}
      if(NuRyuNPDYR == XWiWtuwZbr){LtMWNeoXBA = true;}
      else if(XWiWtuwZbr == NuRyuNPDYR){zIPiLafTGn = true;}
      if(dPxagZENPo == gSNxVIxOyg){ZlaRNCPCgK = true;}
      else if(gSNxVIxOyg == dPxagZENPo){gWpSRXySTJ = true;}
      if(HWLgWYxSay == LwfbttXXkx){cRdNCSUYGT = true;}
      else if(LwfbttXXkx == HWLgWYxSay){lYwMulLzHI = true;}
      if(truuUlHdFW == iVuxFdXcTg){AkkszqHlYR = true;}
      if(taNsKrXoSM == sAucwiJEOy){JJEkEBphGH = true;}
      if(VERXZpjjbV == AjooMapGcz){EJiIItPyTu = true;}
      while(iVuxFdXcTg == truuUlHdFW){cqIqBUWilm = true;}
      while(sAucwiJEOy == sAucwiJEOy){KhVwYERzLi = true;}
      while(AjooMapGcz == AjooMapGcz){tXCadaLDnY = true;}
      if(WYneJKWPrq == true){WYneJKWPrq = false;}
      if(jUtQnLBDeL == true){jUtQnLBDeL = false;}
      if(kTJlxzgFkd == true){kTJlxzgFkd = false;}
      if(nRzUKTLQSl == true){nRzUKTLQSl = false;}
      if(LtMWNeoXBA == true){LtMWNeoXBA = false;}
      if(ZlaRNCPCgK == true){ZlaRNCPCgK = false;}
      if(cRdNCSUYGT == true){cRdNCSUYGT = false;}
      if(AkkszqHlYR == true){AkkszqHlYR = false;}
      if(JJEkEBphGH == true){JJEkEBphGH = false;}
      if(EJiIItPyTu == true){EJiIItPyTu = false;}
      if(KQRhAnBgRW == true){KQRhAnBgRW = false;}
      if(uccOBTNsIB == true){uccOBTNsIB = false;}
      if(cmRyOpBckF == true){cmRyOpBckF = false;}
      if(aIRdHrqVkQ == true){aIRdHrqVkQ = false;}
      if(zIPiLafTGn == true){zIPiLafTGn = false;}
      if(gWpSRXySTJ == true){gWpSRXySTJ = false;}
      if(lYwMulLzHI == true){lYwMulLzHI = false;}
      if(cqIqBUWilm == true){cqIqBUWilm = false;}
      if(KhVwYERzLi == true){KhVwYERzLi = false;}
      if(tXCadaLDnY == true){tXCadaLDnY = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class QGCZZEAOTQ
{ 
  void pAsJJXYHOg()
  { 
      bool HDCoCEYxtm = false;
      bool EIbhbrfWPd = false;
      bool KHjzAGKZRL = false;
      bool poCjyBKgMk = false;
      bool DQnPZejemO = false;
      bool KemmmzTDnu = false;
      bool szfiwOGriZ = false;
      bool gzKeZtSTYV = false;
      bool WfmCALCOwy = false;
      bool hHrQqEjFTK = false;
      bool YquMgLUHMs = false;
      bool gAdSYNLchk = false;
      bool MrwjrZGtnV = false;
      bool JNzOwfjaVo = false;
      bool ptBCRgcZqc = false;
      bool sHWhygtLUG = false;
      bool EaSqiSAPVs = false;
      bool ckHstRpsSK = false;
      bool xgCKcCqRPP = false;
      bool kYGOjPbJTy = false;
      string qpRdQHcXoJ;
      string SFdLlntEfm;
      string BrxzBZgKMr;
      string XbXMcMeNYk;
      string TKCbEdmwRl;
      string ffRqoyrRbq;
      string ZSKwkqgQiY;
      string IffuTppVuX;
      string ljsZMqKfXe;
      string UMkhKBzGpM;
      string xVNrdAzVXy;
      string IVVEEoYkjs;
      string gAsDEwtyjR;
      string qjfiaQWAwL;
      string rnIYVypgcU;
      string cNVwfwcJng;
      string FBlFHYpmdn;
      string SXoXBrrTgG;
      string FNVOocNiDd;
      string mMMOGpCCRx;
      if(qpRdQHcXoJ == xVNrdAzVXy){HDCoCEYxtm = true;}
      else if(xVNrdAzVXy == qpRdQHcXoJ){YquMgLUHMs = true;}
      if(SFdLlntEfm == IVVEEoYkjs){EIbhbrfWPd = true;}
      else if(IVVEEoYkjs == SFdLlntEfm){gAdSYNLchk = true;}
      if(BrxzBZgKMr == gAsDEwtyjR){KHjzAGKZRL = true;}
      else if(gAsDEwtyjR == BrxzBZgKMr){MrwjrZGtnV = true;}
      if(XbXMcMeNYk == qjfiaQWAwL){poCjyBKgMk = true;}
      else if(qjfiaQWAwL == XbXMcMeNYk){JNzOwfjaVo = true;}
      if(TKCbEdmwRl == rnIYVypgcU){DQnPZejemO = true;}
      else if(rnIYVypgcU == TKCbEdmwRl){ptBCRgcZqc = true;}
      if(ffRqoyrRbq == cNVwfwcJng){KemmmzTDnu = true;}
      else if(cNVwfwcJng == ffRqoyrRbq){sHWhygtLUG = true;}
      if(ZSKwkqgQiY == FBlFHYpmdn){szfiwOGriZ = true;}
      else if(FBlFHYpmdn == ZSKwkqgQiY){EaSqiSAPVs = true;}
      if(IffuTppVuX == SXoXBrrTgG){gzKeZtSTYV = true;}
      if(ljsZMqKfXe == FNVOocNiDd){WfmCALCOwy = true;}
      if(UMkhKBzGpM == mMMOGpCCRx){hHrQqEjFTK = true;}
      while(SXoXBrrTgG == IffuTppVuX){ckHstRpsSK = true;}
      while(FNVOocNiDd == FNVOocNiDd){xgCKcCqRPP = true;}
      while(mMMOGpCCRx == mMMOGpCCRx){kYGOjPbJTy = true;}
      if(HDCoCEYxtm == true){HDCoCEYxtm = false;}
      if(EIbhbrfWPd == true){EIbhbrfWPd = false;}
      if(KHjzAGKZRL == true){KHjzAGKZRL = false;}
      if(poCjyBKgMk == true){poCjyBKgMk = false;}
      if(DQnPZejemO == true){DQnPZejemO = false;}
      if(KemmmzTDnu == true){KemmmzTDnu = false;}
      if(szfiwOGriZ == true){szfiwOGriZ = false;}
      if(gzKeZtSTYV == true){gzKeZtSTYV = false;}
      if(WfmCALCOwy == true){WfmCALCOwy = false;}
      if(hHrQqEjFTK == true){hHrQqEjFTK = false;}
      if(YquMgLUHMs == true){YquMgLUHMs = false;}
      if(gAdSYNLchk == true){gAdSYNLchk = false;}
      if(MrwjrZGtnV == true){MrwjrZGtnV = false;}
      if(JNzOwfjaVo == true){JNzOwfjaVo = false;}
      if(ptBCRgcZqc == true){ptBCRgcZqc = false;}
      if(sHWhygtLUG == true){sHWhygtLUG = false;}
      if(EaSqiSAPVs == true){EaSqiSAPVs = false;}
      if(ckHstRpsSK == true){ckHstRpsSK = false;}
      if(xgCKcCqRPP == true){xgCKcCqRPP = false;}
      if(kYGOjPbJTy == true){kYGOjPbJTy = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class JRKNCXQENO
{ 
  void oGwgGwrkuf()
  { 
      bool zOfqdjxVmK = false;
      bool ExjsNUbnbB = false;
      bool PMxBtEWGFG = false;
      bool eOQBGKmpRA = false;
      bool TXFdPldcFY = false;
      bool OeWtRlQdwZ = false;
      bool MpQgfpgilC = false;
      bool hlWbgqHSlI = false;
      bool asAgrzrVjU = false;
      bool sIsrmdHXyZ = false;
      bool EtpDpbItNZ = false;
      bool eyrnySoiog = false;
      bool xLyRIZrenD = false;
      bool iiULEfDxqP = false;
      bool pxHJouPFsU = false;
      bool nYiRcswYtQ = false;
      bool jdFKpucgjR = false;
      bool PrrZpzDobN = false;
      bool KmkTPKzDiK = false;
      bool jeDafMrxSt = false;
      string yLLQJytyQn;
      string tdJLsAipVA;
      string qBMNcITwyn;
      string ZGTOQplAtc;
      string rBfyAAepOd;
      string tKWiuwzymB;
      string dyAbNmJtuC;
      string OiwrIoUOMc;
      string dchUsPikTT;
      string qmMsytBEjN;
      string pjuLOLNeZF;
      string bklJWBPehy;
      string DXaaLbWDsN;
      string mQdymshVFh;
      string BEKNrFBDVx;
      string dVVkJRJTzm;
      string nKkMRKGmWd;
      string StYzxyNMiF;
      string ZThwjQtsoU;
      string iOWSsqTywg;
      if(yLLQJytyQn == pjuLOLNeZF){zOfqdjxVmK = true;}
      else if(pjuLOLNeZF == yLLQJytyQn){EtpDpbItNZ = true;}
      if(tdJLsAipVA == bklJWBPehy){ExjsNUbnbB = true;}
      else if(bklJWBPehy == tdJLsAipVA){eyrnySoiog = true;}
      if(qBMNcITwyn == DXaaLbWDsN){PMxBtEWGFG = true;}
      else if(DXaaLbWDsN == qBMNcITwyn){xLyRIZrenD = true;}
      if(ZGTOQplAtc == mQdymshVFh){eOQBGKmpRA = true;}
      else if(mQdymshVFh == ZGTOQplAtc){iiULEfDxqP = true;}
      if(rBfyAAepOd == BEKNrFBDVx){TXFdPldcFY = true;}
      else if(BEKNrFBDVx == rBfyAAepOd){pxHJouPFsU = true;}
      if(tKWiuwzymB == dVVkJRJTzm){OeWtRlQdwZ = true;}
      else if(dVVkJRJTzm == tKWiuwzymB){nYiRcswYtQ = true;}
      if(dyAbNmJtuC == nKkMRKGmWd){MpQgfpgilC = true;}
      else if(nKkMRKGmWd == dyAbNmJtuC){jdFKpucgjR = true;}
      if(OiwrIoUOMc == StYzxyNMiF){hlWbgqHSlI = true;}
      if(dchUsPikTT == ZThwjQtsoU){asAgrzrVjU = true;}
      if(qmMsytBEjN == iOWSsqTywg){sIsrmdHXyZ = true;}
      while(StYzxyNMiF == OiwrIoUOMc){PrrZpzDobN = true;}
      while(ZThwjQtsoU == ZThwjQtsoU){KmkTPKzDiK = true;}
      while(iOWSsqTywg == iOWSsqTywg){jeDafMrxSt = true;}
      if(zOfqdjxVmK == true){zOfqdjxVmK = false;}
      if(ExjsNUbnbB == true){ExjsNUbnbB = false;}
      if(PMxBtEWGFG == true){PMxBtEWGFG = false;}
      if(eOQBGKmpRA == true){eOQBGKmpRA = false;}
      if(TXFdPldcFY == true){TXFdPldcFY = false;}
      if(OeWtRlQdwZ == true){OeWtRlQdwZ = false;}
      if(MpQgfpgilC == true){MpQgfpgilC = false;}
      if(hlWbgqHSlI == true){hlWbgqHSlI = false;}
      if(asAgrzrVjU == true){asAgrzrVjU = false;}
      if(sIsrmdHXyZ == true){sIsrmdHXyZ = false;}
      if(EtpDpbItNZ == true){EtpDpbItNZ = false;}
      if(eyrnySoiog == true){eyrnySoiog = false;}
      if(xLyRIZrenD == true){xLyRIZrenD = false;}
      if(iiULEfDxqP == true){iiULEfDxqP = false;}
      if(pxHJouPFsU == true){pxHJouPFsU = false;}
      if(nYiRcswYtQ == true){nYiRcswYtQ = false;}
      if(jdFKpucgjR == true){jdFKpucgjR = false;}
      if(PrrZpzDobN == true){PrrZpzDobN = false;}
      if(KmkTPKzDiK == true){KmkTPKzDiK = false;}
      if(jeDafMrxSt == true){jeDafMrxSt = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class FRQYETSNJC
{ 
  void sTaBZAufAc()
  { 
      bool gVdHyNFYAH = false;
      bool kuiXTadqdg = false;
      bool kIEEIbgTqI = false;
      bool cxyUrtNZPs = false;
      bool DUpHCQMRKT = false;
      bool rCONTXQYzW = false;
      bool fkhqdnxOfZ = false;
      bool NDbjdPSxCq = false;
      bool POJXQZhjBT = false;
      bool cnasMRmycN = false;
      bool TykkGnaeiD = false;
      bool FSWIGQaJaE = false;
      bool FNNMwYciWM = false;
      bool bTUnXQdYRc = false;
      bool zDBxOJRSlu = false;
      bool pdXYIFjYng = false;
      bool KrHWalyikp = false;
      bool mCrxECMQyl = false;
      bool HKwaVywwfR = false;
      bool fFjjRHudVc = false;
      string JaQtzjGHCN;
      string kwjBHNkGyi;
      string FKjJdGcFtN;
      string qWVRTwIttJ;
      string wcxROTkBOs;
      string VjfPeyqGQs;
      string GBMoVNZRgL;
      string FqMnlbNStJ;
      string VapBqHqGmV;
      string FBcACuPIuB;
      string tSUDmeXqcC;
      string kXMHXeKLxO;
      string WTdKFENLlq;
      string MFXsOCGmNL;
      string izdkkgoVcX;
      string jDKfdaoJxi;
      string RMFkpfASrV;
      string YWykeWosZY;
      string PqhOHItqOn;
      string MwpdtWtruF;
      if(JaQtzjGHCN == tSUDmeXqcC){gVdHyNFYAH = true;}
      else if(tSUDmeXqcC == JaQtzjGHCN){TykkGnaeiD = true;}
      if(kwjBHNkGyi == kXMHXeKLxO){kuiXTadqdg = true;}
      else if(kXMHXeKLxO == kwjBHNkGyi){FSWIGQaJaE = true;}
      if(FKjJdGcFtN == WTdKFENLlq){kIEEIbgTqI = true;}
      else if(WTdKFENLlq == FKjJdGcFtN){FNNMwYciWM = true;}
      if(qWVRTwIttJ == MFXsOCGmNL){cxyUrtNZPs = true;}
      else if(MFXsOCGmNL == qWVRTwIttJ){bTUnXQdYRc = true;}
      if(wcxROTkBOs == izdkkgoVcX){DUpHCQMRKT = true;}
      else if(izdkkgoVcX == wcxROTkBOs){zDBxOJRSlu = true;}
      if(VjfPeyqGQs == jDKfdaoJxi){rCONTXQYzW = true;}
      else if(jDKfdaoJxi == VjfPeyqGQs){pdXYIFjYng = true;}
      if(GBMoVNZRgL == RMFkpfASrV){fkhqdnxOfZ = true;}
      else if(RMFkpfASrV == GBMoVNZRgL){KrHWalyikp = true;}
      if(FqMnlbNStJ == YWykeWosZY){NDbjdPSxCq = true;}
      if(VapBqHqGmV == PqhOHItqOn){POJXQZhjBT = true;}
      if(FBcACuPIuB == MwpdtWtruF){cnasMRmycN = true;}
      while(YWykeWosZY == FqMnlbNStJ){mCrxECMQyl = true;}
      while(PqhOHItqOn == PqhOHItqOn){HKwaVywwfR = true;}
      while(MwpdtWtruF == MwpdtWtruF){fFjjRHudVc = true;}
      if(gVdHyNFYAH == true){gVdHyNFYAH = false;}
      if(kuiXTadqdg == true){kuiXTadqdg = false;}
      if(kIEEIbgTqI == true){kIEEIbgTqI = false;}
      if(cxyUrtNZPs == true){cxyUrtNZPs = false;}
      if(DUpHCQMRKT == true){DUpHCQMRKT = false;}
      if(rCONTXQYzW == true){rCONTXQYzW = false;}
      if(fkhqdnxOfZ == true){fkhqdnxOfZ = false;}
      if(NDbjdPSxCq == true){NDbjdPSxCq = false;}
      if(POJXQZhjBT == true){POJXQZhjBT = false;}
      if(cnasMRmycN == true){cnasMRmycN = false;}
      if(TykkGnaeiD == true){TykkGnaeiD = false;}
      if(FSWIGQaJaE == true){FSWIGQaJaE = false;}
      if(FNNMwYciWM == true){FNNMwYciWM = false;}
      if(bTUnXQdYRc == true){bTUnXQdYRc = false;}
      if(zDBxOJRSlu == true){zDBxOJRSlu = false;}
      if(pdXYIFjYng == true){pdXYIFjYng = false;}
      if(KrHWalyikp == true){KrHWalyikp = false;}
      if(mCrxECMQyl == true){mCrxECMQyl = false;}
      if(HKwaVywwfR == true){HKwaVywwfR = false;}
      if(fFjjRHudVc == true){fFjjRHudVc = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class NXUOLFGXDE
{ 
  void BrARYPdNJt()
  { 
      bool grZhAKZojP = false;
      bool qizmZpzqyr = false;
      bool cAcRKsjZEB = false;
      bool hUwpLTdWNF = false;
      bool wbrQhimIeV = false;
      bool uwDNYfPIWH = false;
      bool ZzjhhWmIaG = false;
      bool McdrwAHLib = false;
      bool FauiGkRhRf = false;
      bool DVzGewqJiL = false;
      bool uehXJRSKRX = false;
      bool XDYuBzEBbw = false;
      bool EFptCpcWNA = false;
      bool JycXfarXYn = false;
      bool RHQtHAwEEe = false;
      bool rohlGpnmUS = false;
      bool nwwRNZZBOa = false;
      bool HfcmexnwmC = false;
      bool tYSiHTPqQo = false;
      bool mECGzVKyfh = false;
      string mFVWDNLzpI;
      string qYlgXOcwCS;
      string sUebFGqsjz;
      string thEDfXWMnO;
      string PpUrJSrgir;
      string eanVrSZsRw;
      string VROqOIThBA;
      string qPHnDCAmSm;
      string OKKrUSthKN;
      string xcurrxbccA;
      string zJeiAOTASo;
      string RmaegLHWWw;
      string OkXnCNUPuF;
      string aXJRmEebqF;
      string zsOUuJCQKg;
      string pEGgkNlqfl;
      string sEFNOtcJqc;
      string ffeQwVVCrs;
      string LDENPVRcfZ;
      string RmwELunBGB;
      if(mFVWDNLzpI == zJeiAOTASo){grZhAKZojP = true;}
      else if(zJeiAOTASo == mFVWDNLzpI){uehXJRSKRX = true;}
      if(qYlgXOcwCS == RmaegLHWWw){qizmZpzqyr = true;}
      else if(RmaegLHWWw == qYlgXOcwCS){XDYuBzEBbw = true;}
      if(sUebFGqsjz == OkXnCNUPuF){cAcRKsjZEB = true;}
      else if(OkXnCNUPuF == sUebFGqsjz){EFptCpcWNA = true;}
      if(thEDfXWMnO == aXJRmEebqF){hUwpLTdWNF = true;}
      else if(aXJRmEebqF == thEDfXWMnO){JycXfarXYn = true;}
      if(PpUrJSrgir == zsOUuJCQKg){wbrQhimIeV = true;}
      else if(zsOUuJCQKg == PpUrJSrgir){RHQtHAwEEe = true;}
      if(eanVrSZsRw == pEGgkNlqfl){uwDNYfPIWH = true;}
      else if(pEGgkNlqfl == eanVrSZsRw){rohlGpnmUS = true;}
      if(VROqOIThBA == sEFNOtcJqc){ZzjhhWmIaG = true;}
      else if(sEFNOtcJqc == VROqOIThBA){nwwRNZZBOa = true;}
      if(qPHnDCAmSm == ffeQwVVCrs){McdrwAHLib = true;}
      if(OKKrUSthKN == LDENPVRcfZ){FauiGkRhRf = true;}
      if(xcurrxbccA == RmwELunBGB){DVzGewqJiL = true;}
      while(ffeQwVVCrs == qPHnDCAmSm){HfcmexnwmC = true;}
      while(LDENPVRcfZ == LDENPVRcfZ){tYSiHTPqQo = true;}
      while(RmwELunBGB == RmwELunBGB){mECGzVKyfh = true;}
      if(grZhAKZojP == true){grZhAKZojP = false;}
      if(qizmZpzqyr == true){qizmZpzqyr = false;}
      if(cAcRKsjZEB == true){cAcRKsjZEB = false;}
      if(hUwpLTdWNF == true){hUwpLTdWNF = false;}
      if(wbrQhimIeV == true){wbrQhimIeV = false;}
      if(uwDNYfPIWH == true){uwDNYfPIWH = false;}
      if(ZzjhhWmIaG == true){ZzjhhWmIaG = false;}
      if(McdrwAHLib == true){McdrwAHLib = false;}
      if(FauiGkRhRf == true){FauiGkRhRf = false;}
      if(DVzGewqJiL == true){DVzGewqJiL = false;}
      if(uehXJRSKRX == true){uehXJRSKRX = false;}
      if(XDYuBzEBbw == true){XDYuBzEBbw = false;}
      if(EFptCpcWNA == true){EFptCpcWNA = false;}
      if(JycXfarXYn == true){JycXfarXYn = false;}
      if(RHQtHAwEEe == true){RHQtHAwEEe = false;}
      if(rohlGpnmUS == true){rohlGpnmUS = false;}
      if(nwwRNZZBOa == true){nwwRNZZBOa = false;}
      if(HfcmexnwmC == true){HfcmexnwmC = false;}
      if(tYSiHTPqQo == true){tYSiHTPqQo = false;}
      if(mECGzVKyfh == true){mECGzVKyfh = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class OYPRNJBIYZ
{ 
  void YhklAsCJSh()
  { 
      bool AhyDtmtCGn = false;
      bool tLVSNtBjGW = false;
      bool PancVobiWO = false;
      bool OnFPOgoMKe = false;
      bool XxjcrBWOBs = false;
      bool fsdGiZtVgE = false;
      bool KKfrZGFGEf = false;
      bool EnYazRqLkU = false;
      bool SNhdiVJzgo = false;
      bool mTfFTMRrDk = false;
      bool uQKUnqTCHQ = false;
      bool iikMlxcBID = false;
      bool wGYPskISHl = false;
      bool zyHzYBCMoq = false;
      bool BHrPFEiSTW = false;
      bool jPiznnquaC = false;
      bool iBuUQjakmk = false;
      bool tPMRCoOJJo = false;
      bool CozkCiPILk = false;
      bool JHklIAMWyU = false;
      string bVPLrRXLJg;
      string kAVCDUwpGS;
      string snNbjFTOwY;
      string QkVHgncKNk;
      string fzeRpdGggX;
      string TwtZrnInam;
      string xIPjQAdOUO;
      string qkbVltIulF;
      string ymhXETpwPs;
      string foiZmWjtAo;
      string ArLRfiTXmy;
      string eMBUnKaqfw;
      string JgzbiCBBhO;
      string JOuwFFbQrU;
      string zSIQOSmNkc;
      string wrNDeSsiic;
      string gRoYnPRFPh;
      string hJyKwqXhNP;
      string PmPFRRAqQm;
      string MrhPmhcjcy;
      if(bVPLrRXLJg == ArLRfiTXmy){AhyDtmtCGn = true;}
      else if(ArLRfiTXmy == bVPLrRXLJg){uQKUnqTCHQ = true;}
      if(kAVCDUwpGS == eMBUnKaqfw){tLVSNtBjGW = true;}
      else if(eMBUnKaqfw == kAVCDUwpGS){iikMlxcBID = true;}
      if(snNbjFTOwY == JgzbiCBBhO){PancVobiWO = true;}
      else if(JgzbiCBBhO == snNbjFTOwY){wGYPskISHl = true;}
      if(QkVHgncKNk == JOuwFFbQrU){OnFPOgoMKe = true;}
      else if(JOuwFFbQrU == QkVHgncKNk){zyHzYBCMoq = true;}
      if(fzeRpdGggX == zSIQOSmNkc){XxjcrBWOBs = true;}
      else if(zSIQOSmNkc == fzeRpdGggX){BHrPFEiSTW = true;}
      if(TwtZrnInam == wrNDeSsiic){fsdGiZtVgE = true;}
      else if(wrNDeSsiic == TwtZrnInam){jPiznnquaC = true;}
      if(xIPjQAdOUO == gRoYnPRFPh){KKfrZGFGEf = true;}
      else if(gRoYnPRFPh == xIPjQAdOUO){iBuUQjakmk = true;}
      if(qkbVltIulF == hJyKwqXhNP){EnYazRqLkU = true;}
      if(ymhXETpwPs == PmPFRRAqQm){SNhdiVJzgo = true;}
      if(foiZmWjtAo == MrhPmhcjcy){mTfFTMRrDk = true;}
      while(hJyKwqXhNP == qkbVltIulF){tPMRCoOJJo = true;}
      while(PmPFRRAqQm == PmPFRRAqQm){CozkCiPILk = true;}
      while(MrhPmhcjcy == MrhPmhcjcy){JHklIAMWyU = true;}
      if(AhyDtmtCGn == true){AhyDtmtCGn = false;}
      if(tLVSNtBjGW == true){tLVSNtBjGW = false;}
      if(PancVobiWO == true){PancVobiWO = false;}
      if(OnFPOgoMKe == true){OnFPOgoMKe = false;}
      if(XxjcrBWOBs == true){XxjcrBWOBs = false;}
      if(fsdGiZtVgE == true){fsdGiZtVgE = false;}
      if(KKfrZGFGEf == true){KKfrZGFGEf = false;}
      if(EnYazRqLkU == true){EnYazRqLkU = false;}
      if(SNhdiVJzgo == true){SNhdiVJzgo = false;}
      if(mTfFTMRrDk == true){mTfFTMRrDk = false;}
      if(uQKUnqTCHQ == true){uQKUnqTCHQ = false;}
      if(iikMlxcBID == true){iikMlxcBID = false;}
      if(wGYPskISHl == true){wGYPskISHl = false;}
      if(zyHzYBCMoq == true){zyHzYBCMoq = false;}
      if(BHrPFEiSTW == true){BHrPFEiSTW = false;}
      if(jPiznnquaC == true){jPiznnquaC = false;}
      if(iBuUQjakmk == true){iBuUQjakmk = false;}
      if(tPMRCoOJJo == true){tPMRCoOJJo = false;}
      if(CozkCiPILk == true){CozkCiPILk = false;}
      if(JHklIAMWyU == true){JHklIAMWyU = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class RFUAEOZCFD
{ 
  void GcDtpNQTbo()
  { 
      bool BBhdQtONQA = false;
      bool pQGbZKwdBu = false;
      bool DQIyPRPGAL = false;
      bool JDAGnLijuc = false;
      bool qjodncaPrt = false;
      bool QbZhhkrjOy = false;
      bool eIMFpmQAmN = false;
      bool aMhXDSaeKl = false;
      bool qzOGthcSXD = false;
      bool SzUxyiWjmA = false;
      bool MZcdSEtBdP = false;
      bool JNZbGftGKI = false;
      bool KxcitbqjZU = false;
      bool uqrJYQWjnp = false;
      bool nbnHtFZrqS = false;
      bool nQYdpOxsiq = false;
      bool MJaJTSVPCo = false;
      bool JKRUTiIUoo = false;
      bool BysHgdRNTJ = false;
      bool ScAwddAena = false;
      string DFfSTTlbrT;
      string gZIoDAqTNR;
      string sJCZlbceGP;
      string lGsbBubWdn;
      string ZkjTCijRnM;
      string aBrqCtCFgq;
      string qHVbgZggmH;
      string XUoYrIZiXC;
      string rKpsnjOBYH;
      string rWpmwSPHlb;
      string BDdgnGMSzt;
      string TThdzfQbmw;
      string LfHfOBdBcZ;
      string sSwuAofJEh;
      string XuBdmYnLnQ;
      string BmTpQVuyRm;
      string cKpZBBWmdJ;
      string zHXFYPedrp;
      string NRNMXGyGde;
      string tgqRENFbcl;
      if(DFfSTTlbrT == BDdgnGMSzt){BBhdQtONQA = true;}
      else if(BDdgnGMSzt == DFfSTTlbrT){MZcdSEtBdP = true;}
      if(gZIoDAqTNR == TThdzfQbmw){pQGbZKwdBu = true;}
      else if(TThdzfQbmw == gZIoDAqTNR){JNZbGftGKI = true;}
      if(sJCZlbceGP == LfHfOBdBcZ){DQIyPRPGAL = true;}
      else if(LfHfOBdBcZ == sJCZlbceGP){KxcitbqjZU = true;}
      if(lGsbBubWdn == sSwuAofJEh){JDAGnLijuc = true;}
      else if(sSwuAofJEh == lGsbBubWdn){uqrJYQWjnp = true;}
      if(ZkjTCijRnM == XuBdmYnLnQ){qjodncaPrt = true;}
      else if(XuBdmYnLnQ == ZkjTCijRnM){nbnHtFZrqS = true;}
      if(aBrqCtCFgq == BmTpQVuyRm){QbZhhkrjOy = true;}
      else if(BmTpQVuyRm == aBrqCtCFgq){nQYdpOxsiq = true;}
      if(qHVbgZggmH == cKpZBBWmdJ){eIMFpmQAmN = true;}
      else if(cKpZBBWmdJ == qHVbgZggmH){MJaJTSVPCo = true;}
      if(XUoYrIZiXC == zHXFYPedrp){aMhXDSaeKl = true;}
      if(rKpsnjOBYH == NRNMXGyGde){qzOGthcSXD = true;}
      if(rWpmwSPHlb == tgqRENFbcl){SzUxyiWjmA = true;}
      while(zHXFYPedrp == XUoYrIZiXC){JKRUTiIUoo = true;}
      while(NRNMXGyGde == NRNMXGyGde){BysHgdRNTJ = true;}
      while(tgqRENFbcl == tgqRENFbcl){ScAwddAena = true;}
      if(BBhdQtONQA == true){BBhdQtONQA = false;}
      if(pQGbZKwdBu == true){pQGbZKwdBu = false;}
      if(DQIyPRPGAL == true){DQIyPRPGAL = false;}
      if(JDAGnLijuc == true){JDAGnLijuc = false;}
      if(qjodncaPrt == true){qjodncaPrt = false;}
      if(QbZhhkrjOy == true){QbZhhkrjOy = false;}
      if(eIMFpmQAmN == true){eIMFpmQAmN = false;}
      if(aMhXDSaeKl == true){aMhXDSaeKl = false;}
      if(qzOGthcSXD == true){qzOGthcSXD = false;}
      if(SzUxyiWjmA == true){SzUxyiWjmA = false;}
      if(MZcdSEtBdP == true){MZcdSEtBdP = false;}
      if(JNZbGftGKI == true){JNZbGftGKI = false;}
      if(KxcitbqjZU == true){KxcitbqjZU = false;}
      if(uqrJYQWjnp == true){uqrJYQWjnp = false;}
      if(nbnHtFZrqS == true){nbnHtFZrqS = false;}
      if(nQYdpOxsiq == true){nQYdpOxsiq = false;}
      if(MJaJTSVPCo == true){MJaJTSVPCo = false;}
      if(JKRUTiIUoo == true){JKRUTiIUoo = false;}
      if(BysHgdRNTJ == true){BysHgdRNTJ = false;}
      if(ScAwddAena == true){ScAwddAena = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class KLQDSKBUND
{ 
  void adFVBASbjq()
  { 
      bool pLAItTGMSb = false;
      bool zjXUBwJWIm = false;
      bool FipFPgeONK = false;
      bool qHRzPpcIVh = false;
      bool BwoEhoyGaa = false;
      bool bYlZoHUtsM = false;
      bool nryHkqRXEK = false;
      bool SAAalJtlXa = false;
      bool hYmlhRUrKI = false;
      bool UiPItIxgSp = false;
      bool WaBPIaXLnf = false;
      bool MiWSdPFMYS = false;
      bool VZNwpikrgd = false;
      bool MNSgDHWWdH = false;
      bool sJDdwlMwdd = false;
      bool DkHATxNFZY = false;
      bool ofdKSzQoOW = false;
      bool shhRYMVizD = false;
      bool WnNCZbFSMG = false;
      bool tQwFRNesKx = false;
      string mkUUXgDiYr;
      string jxhSnozpCh;
      string jicTFyYWsE;
      string hiuihDDYAy;
      string SKyhlLDJBZ;
      string QfCCZDHBPY;
      string IfpUKBByjj;
      string lZpDPZjtgs;
      string uOUSmCgsJd;
      string uCJaplUdXk;
      string KFYQmpoymA;
      string TNTVdsLWgI;
      string UIoFojQOMc;
      string FFWwiooEfw;
      string MhFIKhhmxx;
      string axxOPBPTbD;
      string ZalKuOqWmn;
      string DHqjwmCfuG;
      string BdQPBHIHgg;
      string YVbcWkuuNu;
      if(mkUUXgDiYr == KFYQmpoymA){pLAItTGMSb = true;}
      else if(KFYQmpoymA == mkUUXgDiYr){WaBPIaXLnf = true;}
      if(jxhSnozpCh == TNTVdsLWgI){zjXUBwJWIm = true;}
      else if(TNTVdsLWgI == jxhSnozpCh){MiWSdPFMYS = true;}
      if(jicTFyYWsE == UIoFojQOMc){FipFPgeONK = true;}
      else if(UIoFojQOMc == jicTFyYWsE){VZNwpikrgd = true;}
      if(hiuihDDYAy == FFWwiooEfw){qHRzPpcIVh = true;}
      else if(FFWwiooEfw == hiuihDDYAy){MNSgDHWWdH = true;}
      if(SKyhlLDJBZ == MhFIKhhmxx){BwoEhoyGaa = true;}
      else if(MhFIKhhmxx == SKyhlLDJBZ){sJDdwlMwdd = true;}
      if(QfCCZDHBPY == axxOPBPTbD){bYlZoHUtsM = true;}
      else if(axxOPBPTbD == QfCCZDHBPY){DkHATxNFZY = true;}
      if(IfpUKBByjj == ZalKuOqWmn){nryHkqRXEK = true;}
      else if(ZalKuOqWmn == IfpUKBByjj){ofdKSzQoOW = true;}
      if(lZpDPZjtgs == DHqjwmCfuG){SAAalJtlXa = true;}
      if(uOUSmCgsJd == BdQPBHIHgg){hYmlhRUrKI = true;}
      if(uCJaplUdXk == YVbcWkuuNu){UiPItIxgSp = true;}
      while(DHqjwmCfuG == lZpDPZjtgs){shhRYMVizD = true;}
      while(BdQPBHIHgg == BdQPBHIHgg){WnNCZbFSMG = true;}
      while(YVbcWkuuNu == YVbcWkuuNu){tQwFRNesKx = true;}
      if(pLAItTGMSb == true){pLAItTGMSb = false;}
      if(zjXUBwJWIm == true){zjXUBwJWIm = false;}
      if(FipFPgeONK == true){FipFPgeONK = false;}
      if(qHRzPpcIVh == true){qHRzPpcIVh = false;}
      if(BwoEhoyGaa == true){BwoEhoyGaa = false;}
      if(bYlZoHUtsM == true){bYlZoHUtsM = false;}
      if(nryHkqRXEK == true){nryHkqRXEK = false;}
      if(SAAalJtlXa == true){SAAalJtlXa = false;}
      if(hYmlhRUrKI == true){hYmlhRUrKI = false;}
      if(UiPItIxgSp == true){UiPItIxgSp = false;}
      if(WaBPIaXLnf == true){WaBPIaXLnf = false;}
      if(MiWSdPFMYS == true){MiWSdPFMYS = false;}
      if(VZNwpikrgd == true){VZNwpikrgd = false;}
      if(MNSgDHWWdH == true){MNSgDHWWdH = false;}
      if(sJDdwlMwdd == true){sJDdwlMwdd = false;}
      if(DkHATxNFZY == true){DkHATxNFZY = false;}
      if(ofdKSzQoOW == true){ofdKSzQoOW = false;}
      if(shhRYMVizD == true){shhRYMVizD = false;}
      if(WnNCZbFSMG == true){WnNCZbFSMG = false;}
      if(tQwFRNesKx == true){tQwFRNesKx = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class EYYJIMVUYK
{ 
  void PGqPPmPoJi()
  { 
      bool PNCDbUxCJq = false;
      bool ZsVLlxNcJr = false;
      bool GxRJAPKqQL = false;
      bool sBuIBkQHmd = false;
      bool VOCjWaxsOy = false;
      bool OERGqSusCL = false;
      bool KGkyxXxNJB = false;
      bool gFpeWqthlZ = false;
      bool RRcRwojoQi = false;
      bool oWFaTPdElz = false;
      bool cjiMRJOljA = false;
      bool XNHctrcTBI = false;
      bool mIwaMJzOLG = false;
      bool NpumwhiPAm = false;
      bool ayEPKaPcfa = false;
      bool lKDdLTmHAI = false;
      bool JzZdmhRTfM = false;
      bool JNSNgoEfQk = false;
      bool sWikTDmRbb = false;
      bool taOrcbXZcc = false;
      string SsLtblGpZF;
      string BmYBnzXgfD;
      string QseMZpHFdq;
      string HPskzFuhqS;
      string iiXjCKjHCx;
      string jycNDYNzUl;
      string eAMhxlsnCh;
      string DpoMTgVuKP;
      string FACfHJmehZ;
      string qwNFniWolQ;
      string QuETstIPtV;
      string DSnEfdxfan;
      string yNGcqHbjYk;
      string KfJtzJuhmN;
      string AXkLVYIIYK;
      string kpOxRCobcl;
      string RXqJLXItFV;
      string hPsMnacuGR;
      string zTKOzTQLbw;
      string USEBwbgazy;
      if(SsLtblGpZF == QuETstIPtV){PNCDbUxCJq = true;}
      else if(QuETstIPtV == SsLtblGpZF){cjiMRJOljA = true;}
      if(BmYBnzXgfD == DSnEfdxfan){ZsVLlxNcJr = true;}
      else if(DSnEfdxfan == BmYBnzXgfD){XNHctrcTBI = true;}
      if(QseMZpHFdq == yNGcqHbjYk){GxRJAPKqQL = true;}
      else if(yNGcqHbjYk == QseMZpHFdq){mIwaMJzOLG = true;}
      if(HPskzFuhqS == KfJtzJuhmN){sBuIBkQHmd = true;}
      else if(KfJtzJuhmN == HPskzFuhqS){NpumwhiPAm = true;}
      if(iiXjCKjHCx == AXkLVYIIYK){VOCjWaxsOy = true;}
      else if(AXkLVYIIYK == iiXjCKjHCx){ayEPKaPcfa = true;}
      if(jycNDYNzUl == kpOxRCobcl){OERGqSusCL = true;}
      else if(kpOxRCobcl == jycNDYNzUl){lKDdLTmHAI = true;}
      if(eAMhxlsnCh == RXqJLXItFV){KGkyxXxNJB = true;}
      else if(RXqJLXItFV == eAMhxlsnCh){JzZdmhRTfM = true;}
      if(DpoMTgVuKP == hPsMnacuGR){gFpeWqthlZ = true;}
      if(FACfHJmehZ == zTKOzTQLbw){RRcRwojoQi = true;}
      if(qwNFniWolQ == USEBwbgazy){oWFaTPdElz = true;}
      while(hPsMnacuGR == DpoMTgVuKP){JNSNgoEfQk = true;}
      while(zTKOzTQLbw == zTKOzTQLbw){sWikTDmRbb = true;}
      while(USEBwbgazy == USEBwbgazy){taOrcbXZcc = true;}
      if(PNCDbUxCJq == true){PNCDbUxCJq = false;}
      if(ZsVLlxNcJr == true){ZsVLlxNcJr = false;}
      if(GxRJAPKqQL == true){GxRJAPKqQL = false;}
      if(sBuIBkQHmd == true){sBuIBkQHmd = false;}
      if(VOCjWaxsOy == true){VOCjWaxsOy = false;}
      if(OERGqSusCL == true){OERGqSusCL = false;}
      if(KGkyxXxNJB == true){KGkyxXxNJB = false;}
      if(gFpeWqthlZ == true){gFpeWqthlZ = false;}
      if(RRcRwojoQi == true){RRcRwojoQi = false;}
      if(oWFaTPdElz == true){oWFaTPdElz = false;}
      if(cjiMRJOljA == true){cjiMRJOljA = false;}
      if(XNHctrcTBI == true){XNHctrcTBI = false;}
      if(mIwaMJzOLG == true){mIwaMJzOLG = false;}
      if(NpumwhiPAm == true){NpumwhiPAm = false;}
      if(ayEPKaPcfa == true){ayEPKaPcfa = false;}
      if(lKDdLTmHAI == true){lKDdLTmHAI = false;}
      if(JzZdmhRTfM == true){JzZdmhRTfM = false;}
      if(JNSNgoEfQk == true){JNSNgoEfQk = false;}
      if(sWikTDmRbb == true){sWikTDmRbb = false;}
      if(taOrcbXZcc == true){taOrcbXZcc = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class KOZRZMNKVS
{ 
  void FdhrhukWSE()
  { 
      bool SGEuGqqGpC = false;
      bool XKPwdiIypU = false;
      bool eUsAQmFaCg = false;
      bool esIhZHEImC = false;
      bool IwQaYSLIVy = false;
      bool qDejdxMDeS = false;
      bool lQEIXeBhVW = false;
      bool eALnLiESby = false;
      bool bxEDoaNXDb = false;
      bool tAcTQrrHCt = false;
      bool QdlySqrqYu = false;
      bool rtbfqnLASx = false;
      bool QddsceWqXS = false;
      bool qxPghyLFjy = false;
      bool iWyHjzYxbb = false;
      bool fqoFdlzrVn = false;
      bool UASFEudtyr = false;
      bool cFPUNsfVJc = false;
      bool GZOumzIKDu = false;
      bool ySjwciErDn = false;
      string IZDkjwLKIP;
      string LcRxmSEUag;
      string qiYAKcWkOW;
      string CmUNsAPKqr;
      string eimdfQQwPl;
      string ujnhxYADaG;
      string YZwlMXIEEm;
      string DsdhBHwuTs;
      string MaVbbSzlQU;
      string zMjjTFmBRH;
      string ILqbiBGGfo;
      string cFihtyDTKt;
      string YVnjmqJsOu;
      string TtdMjAisrZ;
      string MsGartcBoU;
      string BSqXimXHor;
      string qMqjVhbWxt;
      string OJajgfONqs;
      string NIDstADGcx;
      string caEAhABVFJ;
      if(IZDkjwLKIP == ILqbiBGGfo){SGEuGqqGpC = true;}
      else if(ILqbiBGGfo == IZDkjwLKIP){QdlySqrqYu = true;}
      if(LcRxmSEUag == cFihtyDTKt){XKPwdiIypU = true;}
      else if(cFihtyDTKt == LcRxmSEUag){rtbfqnLASx = true;}
      if(qiYAKcWkOW == YVnjmqJsOu){eUsAQmFaCg = true;}
      else if(YVnjmqJsOu == qiYAKcWkOW){QddsceWqXS = true;}
      if(CmUNsAPKqr == TtdMjAisrZ){esIhZHEImC = true;}
      else if(TtdMjAisrZ == CmUNsAPKqr){qxPghyLFjy = true;}
      if(eimdfQQwPl == MsGartcBoU){IwQaYSLIVy = true;}
      else if(MsGartcBoU == eimdfQQwPl){iWyHjzYxbb = true;}
      if(ujnhxYADaG == BSqXimXHor){qDejdxMDeS = true;}
      else if(BSqXimXHor == ujnhxYADaG){fqoFdlzrVn = true;}
      if(YZwlMXIEEm == qMqjVhbWxt){lQEIXeBhVW = true;}
      else if(qMqjVhbWxt == YZwlMXIEEm){UASFEudtyr = true;}
      if(DsdhBHwuTs == OJajgfONqs){eALnLiESby = true;}
      if(MaVbbSzlQU == NIDstADGcx){bxEDoaNXDb = true;}
      if(zMjjTFmBRH == caEAhABVFJ){tAcTQrrHCt = true;}
      while(OJajgfONqs == DsdhBHwuTs){cFPUNsfVJc = true;}
      while(NIDstADGcx == NIDstADGcx){GZOumzIKDu = true;}
      while(caEAhABVFJ == caEAhABVFJ){ySjwciErDn = true;}
      if(SGEuGqqGpC == true){SGEuGqqGpC = false;}
      if(XKPwdiIypU == true){XKPwdiIypU = false;}
      if(eUsAQmFaCg == true){eUsAQmFaCg = false;}
      if(esIhZHEImC == true){esIhZHEImC = false;}
      if(IwQaYSLIVy == true){IwQaYSLIVy = false;}
      if(qDejdxMDeS == true){qDejdxMDeS = false;}
      if(lQEIXeBhVW == true){lQEIXeBhVW = false;}
      if(eALnLiESby == true){eALnLiESby = false;}
      if(bxEDoaNXDb == true){bxEDoaNXDb = false;}
      if(tAcTQrrHCt == true){tAcTQrrHCt = false;}
      if(QdlySqrqYu == true){QdlySqrqYu = false;}
      if(rtbfqnLASx == true){rtbfqnLASx = false;}
      if(QddsceWqXS == true){QddsceWqXS = false;}
      if(qxPghyLFjy == true){qxPghyLFjy = false;}
      if(iWyHjzYxbb == true){iWyHjzYxbb = false;}
      if(fqoFdlzrVn == true){fqoFdlzrVn = false;}
      if(UASFEudtyr == true){UASFEudtyr = false;}
      if(cFPUNsfVJc == true){cFPUNsfVJc = false;}
      if(GZOumzIKDu == true){GZOumzIKDu = false;}
      if(ySjwciErDn == true){ySjwciErDn = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class JODAFYGVXF
{ 
  void DgHhoMUICj()
  { 
      bool QpgEdZHwAH = false;
      bool EbieaHNMiY = false;
      bool whWOcVDYSC = false;
      bool FHIPNwfTln = false;
      bool ZjexKJyxgq = false;
      bool YwFTEhSRbI = false;
      bool VicyBxSTRe = false;
      bool bsatzMDYET = false;
      bool XFradIBoKe = false;
      bool cNrcRpGguN = false;
      bool pefCPeVLUr = false;
      bool esNHjPqCUs = false;
      bool wdIlBNBxcI = false;
      bool FWdpcrZoKy = false;
      bool loUSAiAksB = false;
      bool zDLCRMWsAC = false;
      bool dYiLlIPWdq = false;
      bool pBqVGGIolS = false;
      bool MQDaJCKaYQ = false;
      bool VfoHUNGIfq = false;
      string PCgHbfOMhk;
      string ZzyOupYGEn;
      string nwshPERsZi;
      string UKOSTWSwSj;
      string tbAUkSKoon;
      string VRwLoSIyqW;
      string OVmzQOkeuX;
      string XcmUsLuYwx;
      string tbDkMCNDcA;
      string OTEuUYoADW;
      string hetRQrdbRc;
      string WjBsclRBlN;
      string AgBtIDXqzU;
      string VtVZPOhkUT;
      string YlkzceRKSi;
      string GnOoVAdAIM;
      string UlcwGbNbdN;
      string EffRoOwBQd;
      string lMYQNhffEO;
      string khcHzlJnsA;
      if(PCgHbfOMhk == hetRQrdbRc){QpgEdZHwAH = true;}
      else if(hetRQrdbRc == PCgHbfOMhk){pefCPeVLUr = true;}
      if(ZzyOupYGEn == WjBsclRBlN){EbieaHNMiY = true;}
      else if(WjBsclRBlN == ZzyOupYGEn){esNHjPqCUs = true;}
      if(nwshPERsZi == AgBtIDXqzU){whWOcVDYSC = true;}
      else if(AgBtIDXqzU == nwshPERsZi){wdIlBNBxcI = true;}
      if(UKOSTWSwSj == VtVZPOhkUT){FHIPNwfTln = true;}
      else if(VtVZPOhkUT == UKOSTWSwSj){FWdpcrZoKy = true;}
      if(tbAUkSKoon == YlkzceRKSi){ZjexKJyxgq = true;}
      else if(YlkzceRKSi == tbAUkSKoon){loUSAiAksB = true;}
      if(VRwLoSIyqW == GnOoVAdAIM){YwFTEhSRbI = true;}
      else if(GnOoVAdAIM == VRwLoSIyqW){zDLCRMWsAC = true;}
      if(OVmzQOkeuX == UlcwGbNbdN){VicyBxSTRe = true;}
      else if(UlcwGbNbdN == OVmzQOkeuX){dYiLlIPWdq = true;}
      if(XcmUsLuYwx == EffRoOwBQd){bsatzMDYET = true;}
      if(tbDkMCNDcA == lMYQNhffEO){XFradIBoKe = true;}
      if(OTEuUYoADW == khcHzlJnsA){cNrcRpGguN = true;}
      while(EffRoOwBQd == XcmUsLuYwx){pBqVGGIolS = true;}
      while(lMYQNhffEO == lMYQNhffEO){MQDaJCKaYQ = true;}
      while(khcHzlJnsA == khcHzlJnsA){VfoHUNGIfq = true;}
      if(QpgEdZHwAH == true){QpgEdZHwAH = false;}
      if(EbieaHNMiY == true){EbieaHNMiY = false;}
      if(whWOcVDYSC == true){whWOcVDYSC = false;}
      if(FHIPNwfTln == true){FHIPNwfTln = false;}
      if(ZjexKJyxgq == true){ZjexKJyxgq = false;}
      if(YwFTEhSRbI == true){YwFTEhSRbI = false;}
      if(VicyBxSTRe == true){VicyBxSTRe = false;}
      if(bsatzMDYET == true){bsatzMDYET = false;}
      if(XFradIBoKe == true){XFradIBoKe = false;}
      if(cNrcRpGguN == true){cNrcRpGguN = false;}
      if(pefCPeVLUr == true){pefCPeVLUr = false;}
      if(esNHjPqCUs == true){esNHjPqCUs = false;}
      if(wdIlBNBxcI == true){wdIlBNBxcI = false;}
      if(FWdpcrZoKy == true){FWdpcrZoKy = false;}
      if(loUSAiAksB == true){loUSAiAksB = false;}
      if(zDLCRMWsAC == true){zDLCRMWsAC = false;}
      if(dYiLlIPWdq == true){dYiLlIPWdq = false;}
      if(pBqVGGIolS == true){pBqVGGIolS = false;}
      if(MQDaJCKaYQ == true){MQDaJCKaYQ = false;}
      if(VfoHUNGIfq == true){VfoHUNGIfq = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class XEETNHGQSD
{ 
  void UQaDZnAuNm()
  { 
      bool TyTYdKyJei = false;
      bool foAQdAmTYK = false;
      bool cbgIqYthSw = false;
      bool NTcrGnAsHc = false;
      bool AMjcLSVLUT = false;
      bool whfoTrQKhF = false;
      bool QPqhVLLHJp = false;
      bool AsMuJQqEwX = false;
      bool DhNyzennYO = false;
      bool WoLCLjUBHz = false;
      bool GNCeTDVjeC = false;
      bool AMOJChCrip = false;
      bool XXitSKhKiZ = false;
      bool upwxQofhdw = false;
      bool JDJVNKaBAd = false;
      bool hbSQbieHLJ = false;
      bool UKAEGKPRrM = false;
      bool CTOlgTONgH = false;
      bool igKFqTXfUh = false;
      bool KXWUbyCEOD = false;
      string HSnUMMYqpf;
      string dRdZILNlVG;
      string ywwBdMQkhN;
      string WgbuZxjHxc;
      string MnCoSkjbnW;
      string OkIbyLWmpA;
      string wnJcIwohAL;
      string aFnrtJsGhs;
      string bnxLzlYzxO;
      string ZxRxgYeZgW;
      string uCbcuIwQhn;
      string RPExYHpycV;
      string XpklkdnqKV;
      string eSZLxYMTPp;
      string oHQIwKrTYZ;
      string hfxKzFRpqQ;
      string UFFMJzpsAz;
      string uWhmfPYboa;
      string lTSknyVOLr;
      string HVbzUjCEzx;
      if(HSnUMMYqpf == uCbcuIwQhn){TyTYdKyJei = true;}
      else if(uCbcuIwQhn == HSnUMMYqpf){GNCeTDVjeC = true;}
      if(dRdZILNlVG == RPExYHpycV){foAQdAmTYK = true;}
      else if(RPExYHpycV == dRdZILNlVG){AMOJChCrip = true;}
      if(ywwBdMQkhN == XpklkdnqKV){cbgIqYthSw = true;}
      else if(XpklkdnqKV == ywwBdMQkhN){XXitSKhKiZ = true;}
      if(WgbuZxjHxc == eSZLxYMTPp){NTcrGnAsHc = true;}
      else if(eSZLxYMTPp == WgbuZxjHxc){upwxQofhdw = true;}
      if(MnCoSkjbnW == oHQIwKrTYZ){AMjcLSVLUT = true;}
      else if(oHQIwKrTYZ == MnCoSkjbnW){JDJVNKaBAd = true;}
      if(OkIbyLWmpA == hfxKzFRpqQ){whfoTrQKhF = true;}
      else if(hfxKzFRpqQ == OkIbyLWmpA){hbSQbieHLJ = true;}
      if(wnJcIwohAL == UFFMJzpsAz){QPqhVLLHJp = true;}
      else if(UFFMJzpsAz == wnJcIwohAL){UKAEGKPRrM = true;}
      if(aFnrtJsGhs == uWhmfPYboa){AsMuJQqEwX = true;}
      if(bnxLzlYzxO == lTSknyVOLr){DhNyzennYO = true;}
      if(ZxRxgYeZgW == HVbzUjCEzx){WoLCLjUBHz = true;}
      while(uWhmfPYboa == aFnrtJsGhs){CTOlgTONgH = true;}
      while(lTSknyVOLr == lTSknyVOLr){igKFqTXfUh = true;}
      while(HVbzUjCEzx == HVbzUjCEzx){KXWUbyCEOD = true;}
      if(TyTYdKyJei == true){TyTYdKyJei = false;}
      if(foAQdAmTYK == true){foAQdAmTYK = false;}
      if(cbgIqYthSw == true){cbgIqYthSw = false;}
      if(NTcrGnAsHc == true){NTcrGnAsHc = false;}
      if(AMjcLSVLUT == true){AMjcLSVLUT = false;}
      if(whfoTrQKhF == true){whfoTrQKhF = false;}
      if(QPqhVLLHJp == true){QPqhVLLHJp = false;}
      if(AsMuJQqEwX == true){AsMuJQqEwX = false;}
      if(DhNyzennYO == true){DhNyzennYO = false;}
      if(WoLCLjUBHz == true){WoLCLjUBHz = false;}
      if(GNCeTDVjeC == true){GNCeTDVjeC = false;}
      if(AMOJChCrip == true){AMOJChCrip = false;}
      if(XXitSKhKiZ == true){XXitSKhKiZ = false;}
      if(upwxQofhdw == true){upwxQofhdw = false;}
      if(JDJVNKaBAd == true){JDJVNKaBAd = false;}
      if(hbSQbieHLJ == true){hbSQbieHLJ = false;}
      if(UKAEGKPRrM == true){UKAEGKPRrM = false;}
      if(CTOlgTONgH == true){CTOlgTONgH = false;}
      if(igKFqTXfUh == true){igKFqTXfUh = false;}
      if(KXWUbyCEOD == true){KXWUbyCEOD = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class CZBCWGQWPZ
{ 
  void BXGcNWmXhe()
  { 
      bool ayygnHBAXT = false;
      bool qpPexiVoLs = false;
      bool ufCzJSuxwG = false;
      bool znCpMIYBYk = false;
      bool njiXuzJCYK = false;
      bool HmuXktuyWU = false;
      bool MDDQUCnZRo = false;
      bool KUQZEKxdEK = false;
      bool IrXkzMsdES = false;
      bool MadDYjfRDs = false;
      bool LjkjAmVUTZ = false;
      bool xQtMLTfRRH = false;
      bool IKUzbjpNBU = false;
      bool efZLyYHmkM = false;
      bool pXKeUugRqF = false;
      bool EOzwjBOkIQ = false;
      bool wITyuQqhNm = false;
      bool LrgFQkzpdf = false;
      bool CYVwPPgdax = false;
      bool KWeTPgELjE = false;
      string XhEBDrQApk;
      string gghrfogHER;
      string cDmaUXFNUh;
      string QAcSoLIcLY;
      string UyqwizsYpl;
      string SPagYTtcge;
      string lDeHTfEODT;
      string fEufwdLqrU;
      string egXhPBZwtU;
      string RewglRSjbC;
      string udUVGOTujt;
      string IDkLAFfwrS;
      string GHTiCBHOse;
      string LbPoZAMBbB;
      string hdLAMOtjgg;
      string lVqIwmKlTE;
      string GEBEifmulz;
      string sdUqjbwTVn;
      string HWhMsojGrl;
      string pZhWtdbHRf;
      if(XhEBDrQApk == udUVGOTujt){ayygnHBAXT = true;}
      else if(udUVGOTujt == XhEBDrQApk){LjkjAmVUTZ = true;}
      if(gghrfogHER == IDkLAFfwrS){qpPexiVoLs = true;}
      else if(IDkLAFfwrS == gghrfogHER){xQtMLTfRRH = true;}
      if(cDmaUXFNUh == GHTiCBHOse){ufCzJSuxwG = true;}
      else if(GHTiCBHOse == cDmaUXFNUh){IKUzbjpNBU = true;}
      if(QAcSoLIcLY == LbPoZAMBbB){znCpMIYBYk = true;}
      else if(LbPoZAMBbB == QAcSoLIcLY){efZLyYHmkM = true;}
      if(UyqwizsYpl == hdLAMOtjgg){njiXuzJCYK = true;}
      else if(hdLAMOtjgg == UyqwizsYpl){pXKeUugRqF = true;}
      if(SPagYTtcge == lVqIwmKlTE){HmuXktuyWU = true;}
      else if(lVqIwmKlTE == SPagYTtcge){EOzwjBOkIQ = true;}
      if(lDeHTfEODT == GEBEifmulz){MDDQUCnZRo = true;}
      else if(GEBEifmulz == lDeHTfEODT){wITyuQqhNm = true;}
      if(fEufwdLqrU == sdUqjbwTVn){KUQZEKxdEK = true;}
      if(egXhPBZwtU == HWhMsojGrl){IrXkzMsdES = true;}
      if(RewglRSjbC == pZhWtdbHRf){MadDYjfRDs = true;}
      while(sdUqjbwTVn == fEufwdLqrU){LrgFQkzpdf = true;}
      while(HWhMsojGrl == HWhMsojGrl){CYVwPPgdax = true;}
      while(pZhWtdbHRf == pZhWtdbHRf){KWeTPgELjE = true;}
      if(ayygnHBAXT == true){ayygnHBAXT = false;}
      if(qpPexiVoLs == true){qpPexiVoLs = false;}
      if(ufCzJSuxwG == true){ufCzJSuxwG = false;}
      if(znCpMIYBYk == true){znCpMIYBYk = false;}
      if(njiXuzJCYK == true){njiXuzJCYK = false;}
      if(HmuXktuyWU == true){HmuXktuyWU = false;}
      if(MDDQUCnZRo == true){MDDQUCnZRo = false;}
      if(KUQZEKxdEK == true){KUQZEKxdEK = false;}
      if(IrXkzMsdES == true){IrXkzMsdES = false;}
      if(MadDYjfRDs == true){MadDYjfRDs = false;}
      if(LjkjAmVUTZ == true){LjkjAmVUTZ = false;}
      if(xQtMLTfRRH == true){xQtMLTfRRH = false;}
      if(IKUzbjpNBU == true){IKUzbjpNBU = false;}
      if(efZLyYHmkM == true){efZLyYHmkM = false;}
      if(pXKeUugRqF == true){pXKeUugRqF = false;}
      if(EOzwjBOkIQ == true){EOzwjBOkIQ = false;}
      if(wITyuQqhNm == true){wITyuQqhNm = false;}
      if(LrgFQkzpdf == true){LrgFQkzpdf = false;}
      if(CYVwPPgdax == true){CYVwPPgdax = false;}
      if(KWeTPgELjE == true){KWeTPgELjE = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class TIEIPRBSXC
{ 
  void hPnDeqHRiQ()
  { 
      bool fWhxVYuVlg = false;
      bool lJIhCzMxLp = false;
      bool IWizGMZHIq = false;
      bool cBWeUFCjoe = false;
      bool QWpceCbXVa = false;
      bool ePNZbJmhpJ = false;
      bool ynMuEklcMw = false;
      bool xbIfYkfGTE = false;
      bool jCkhLMmxDK = false;
      bool SUsefcJtXt = false;
      bool QzKZdCHhAp = false;
      bool cgOlYwCeiq = false;
      bool xoYBdciczu = false;
      bool blhZmjqLDJ = false;
      bool FFwNhkFGGj = false;
      bool ZdKfwaaIuB = false;
      bool TdhEOqynyn = false;
      bool EpbZlrsKTr = false;
      bool WbWPVxaBcM = false;
      bool JiPCpbXqzp = false;
      string TEOQYaCqFM;
      string RqOQSWicOf;
      string MWWVKhocif;
      string PyQxfJlCjL;
      string yQZkDDUIXI;
      string AkpEmwhsFp;
      string lZHZxTaQjI;
      string kgrDgwxkRH;
      string NgEZedILKj;
      string brwtYYIzni;
      string bDXPXTrlWq;
      string ywbxcFUhtS;
      string LOGAfsjydI;
      string mxxhfJIoCK;
      string kVnTkeQzQS;
      string EaFUXNxXie;
      string jtIODAzsRT;
      string xfeihpamPB;
      string cjgKDMrcKR;
      string MjFXaqNYPj;
      if(TEOQYaCqFM == bDXPXTrlWq){fWhxVYuVlg = true;}
      else if(bDXPXTrlWq == TEOQYaCqFM){QzKZdCHhAp = true;}
      if(RqOQSWicOf == ywbxcFUhtS){lJIhCzMxLp = true;}
      else if(ywbxcFUhtS == RqOQSWicOf){cgOlYwCeiq = true;}
      if(MWWVKhocif == LOGAfsjydI){IWizGMZHIq = true;}
      else if(LOGAfsjydI == MWWVKhocif){xoYBdciczu = true;}
      if(PyQxfJlCjL == mxxhfJIoCK){cBWeUFCjoe = true;}
      else if(mxxhfJIoCK == PyQxfJlCjL){blhZmjqLDJ = true;}
      if(yQZkDDUIXI == kVnTkeQzQS){QWpceCbXVa = true;}
      else if(kVnTkeQzQS == yQZkDDUIXI){FFwNhkFGGj = true;}
      if(AkpEmwhsFp == EaFUXNxXie){ePNZbJmhpJ = true;}
      else if(EaFUXNxXie == AkpEmwhsFp){ZdKfwaaIuB = true;}
      if(lZHZxTaQjI == jtIODAzsRT){ynMuEklcMw = true;}
      else if(jtIODAzsRT == lZHZxTaQjI){TdhEOqynyn = true;}
      if(kgrDgwxkRH == xfeihpamPB){xbIfYkfGTE = true;}
      if(NgEZedILKj == cjgKDMrcKR){jCkhLMmxDK = true;}
      if(brwtYYIzni == MjFXaqNYPj){SUsefcJtXt = true;}
      while(xfeihpamPB == kgrDgwxkRH){EpbZlrsKTr = true;}
      while(cjgKDMrcKR == cjgKDMrcKR){WbWPVxaBcM = true;}
      while(MjFXaqNYPj == MjFXaqNYPj){JiPCpbXqzp = true;}
      if(fWhxVYuVlg == true){fWhxVYuVlg = false;}
      if(lJIhCzMxLp == true){lJIhCzMxLp = false;}
      if(IWizGMZHIq == true){IWizGMZHIq = false;}
      if(cBWeUFCjoe == true){cBWeUFCjoe = false;}
      if(QWpceCbXVa == true){QWpceCbXVa = false;}
      if(ePNZbJmhpJ == true){ePNZbJmhpJ = false;}
      if(ynMuEklcMw == true){ynMuEklcMw = false;}
      if(xbIfYkfGTE == true){xbIfYkfGTE = false;}
      if(jCkhLMmxDK == true){jCkhLMmxDK = false;}
      if(SUsefcJtXt == true){SUsefcJtXt = false;}
      if(QzKZdCHhAp == true){QzKZdCHhAp = false;}
      if(cgOlYwCeiq == true){cgOlYwCeiq = false;}
      if(xoYBdciczu == true){xoYBdciczu = false;}
      if(blhZmjqLDJ == true){blhZmjqLDJ = false;}
      if(FFwNhkFGGj == true){FFwNhkFGGj = false;}
      if(ZdKfwaaIuB == true){ZdKfwaaIuB = false;}
      if(TdhEOqynyn == true){TdhEOqynyn = false;}
      if(EpbZlrsKTr == true){EpbZlrsKTr = false;}
      if(WbWPVxaBcM == true){WbWPVxaBcM = false;}
      if(JiPCpbXqzp == true){JiPCpbXqzp = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class QGRLBTLHRX
{ 
  void hAQtwdedih()
  { 
      bool MFnAjWIVMJ = false;
      bool msbuJXUraK = false;
      bool XNsSJYhaPx = false;
      bool idmyWbXqhG = false;
      bool AraDoegcSl = false;
      bool WOSmryMVpL = false;
      bool nhGOaJGdXg = false;
      bool AcKTKemocd = false;
      bool qFHcZUKAGX = false;
      bool PBBWRRlLcf = false;
      bool XDEkksDzbM = false;
      bool LWrLTiacoF = false;
      bool yGXzRzbmCr = false;
      bool saLxGnBVrg = false;
      bool QLXsMrIoCi = false;
      bool qIWXgReETl = false;
      bool QQwjSkKuFf = false;
      bool gEkHnmiemY = false;
      bool pmkSAkDnPn = false;
      bool IxCFPAOnZa = false;
      string OyDbAdFFSR;
      string doQtmMfmmW;
      string ToVIadkOaV;
      string dELEbifRqx;
      string cNMjiIsahT;
      string tjnDuZcuAW;
      string spewnYcLSE;
      string fNupsFbkYR;
      string kJgHbsQIIB;
      string FjRUDliQwJ;
      string egIdmgnxKp;
      string yqWhljJWUt;
      string IUDRywwalG;
      string VKoOlDADTt;
      string FSxSDONjiT;
      string cMwBAKdqeq;
      string jNLDUmBHuh;
      string iGDZopWkOj;
      string hMrScJOnNb;
      string YJXbKrGsxP;
      if(OyDbAdFFSR == egIdmgnxKp){MFnAjWIVMJ = true;}
      else if(egIdmgnxKp == OyDbAdFFSR){XDEkksDzbM = true;}
      if(doQtmMfmmW == yqWhljJWUt){msbuJXUraK = true;}
      else if(yqWhljJWUt == doQtmMfmmW){LWrLTiacoF = true;}
      if(ToVIadkOaV == IUDRywwalG){XNsSJYhaPx = true;}
      else if(IUDRywwalG == ToVIadkOaV){yGXzRzbmCr = true;}
      if(dELEbifRqx == VKoOlDADTt){idmyWbXqhG = true;}
      else if(VKoOlDADTt == dELEbifRqx){saLxGnBVrg = true;}
      if(cNMjiIsahT == FSxSDONjiT){AraDoegcSl = true;}
      else if(FSxSDONjiT == cNMjiIsahT){QLXsMrIoCi = true;}
      if(tjnDuZcuAW == cMwBAKdqeq){WOSmryMVpL = true;}
      else if(cMwBAKdqeq == tjnDuZcuAW){qIWXgReETl = true;}
      if(spewnYcLSE == jNLDUmBHuh){nhGOaJGdXg = true;}
      else if(jNLDUmBHuh == spewnYcLSE){QQwjSkKuFf = true;}
      if(fNupsFbkYR == iGDZopWkOj){AcKTKemocd = true;}
      if(kJgHbsQIIB == hMrScJOnNb){qFHcZUKAGX = true;}
      if(FjRUDliQwJ == YJXbKrGsxP){PBBWRRlLcf = true;}
      while(iGDZopWkOj == fNupsFbkYR){gEkHnmiemY = true;}
      while(hMrScJOnNb == hMrScJOnNb){pmkSAkDnPn = true;}
      while(YJXbKrGsxP == YJXbKrGsxP){IxCFPAOnZa = true;}
      if(MFnAjWIVMJ == true){MFnAjWIVMJ = false;}
      if(msbuJXUraK == true){msbuJXUraK = false;}
      if(XNsSJYhaPx == true){XNsSJYhaPx = false;}
      if(idmyWbXqhG == true){idmyWbXqhG = false;}
      if(AraDoegcSl == true){AraDoegcSl = false;}
      if(WOSmryMVpL == true){WOSmryMVpL = false;}
      if(nhGOaJGdXg == true){nhGOaJGdXg = false;}
      if(AcKTKemocd == true){AcKTKemocd = false;}
      if(qFHcZUKAGX == true){qFHcZUKAGX = false;}
      if(PBBWRRlLcf == true){PBBWRRlLcf = false;}
      if(XDEkksDzbM == true){XDEkksDzbM = false;}
      if(LWrLTiacoF == true){LWrLTiacoF = false;}
      if(yGXzRzbmCr == true){yGXzRzbmCr = false;}
      if(saLxGnBVrg == true){saLxGnBVrg = false;}
      if(QLXsMrIoCi == true){QLXsMrIoCi = false;}
      if(qIWXgReETl == true){qIWXgReETl = false;}
      if(QQwjSkKuFf == true){QQwjSkKuFf = false;}
      if(gEkHnmiemY == true){gEkHnmiemY = false;}
      if(pmkSAkDnPn == true){pmkSAkDnPn = false;}
      if(IxCFPAOnZa == true){IxCFPAOnZa = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class KHCIPMJKQQ
{ 
  void qRSdfRGEAn()
  { 
      bool hYgNluHVWu = false;
      bool gKUIbDCXFE = false;
      bool uqTBWwPlMg = false;
      bool SmyplNQNIj = false;
      bool snIDoDjHgD = false;
      bool ncbibqEepp = false;
      bool fVJobsLeWN = false;
      bool lnPVLHhQMS = false;
      bool MHEIspKPNt = false;
      bool IkXREWdSau = false;
      bool qFkSQzMGXT = false;
      bool JnSWdXRBwk = false;
      bool iwQbEBQxRn = false;
      bool dPoQbGWkrt = false;
      bool cDrtkURAnf = false;
      bool FbWoMunINP = false;
      bool hPoiptyCuW = false;
      bool BfJCIeDWpj = false;
      bool iQIkiBrzDf = false;
      bool SNXbLNOJEq = false;
      string waWQmGAiMY;
      string eSTegSNIcl;
      string WZSaGAIaEV;
      string FXQkFHSKjW;
      string bzIGJrLycp;
      string IeFDhWHwJm;
      string xYepTGBiYZ;
      string zDYFKXRMQO;
      string oKyNNaSMDh;
      string zVAxYCTRmD;
      string pcYDqEFzsJ;
      string FufuxlaQbr;
      string nnepZcDagH;
      string DzYNXLltWI;
      string UTTscEpEzl;
      string bCotPBxhdN;
      string BdSkFFVRXl;
      string AftTXTUlNU;
      string lybtfBJeyV;
      string OEQIHpBhmX;
      if(waWQmGAiMY == pcYDqEFzsJ){hYgNluHVWu = true;}
      else if(pcYDqEFzsJ == waWQmGAiMY){qFkSQzMGXT = true;}
      if(eSTegSNIcl == FufuxlaQbr){gKUIbDCXFE = true;}
      else if(FufuxlaQbr == eSTegSNIcl){JnSWdXRBwk = true;}
      if(WZSaGAIaEV == nnepZcDagH){uqTBWwPlMg = true;}
      else if(nnepZcDagH == WZSaGAIaEV){iwQbEBQxRn = true;}
      if(FXQkFHSKjW == DzYNXLltWI){SmyplNQNIj = true;}
      else if(DzYNXLltWI == FXQkFHSKjW){dPoQbGWkrt = true;}
      if(bzIGJrLycp == UTTscEpEzl){snIDoDjHgD = true;}
      else if(UTTscEpEzl == bzIGJrLycp){cDrtkURAnf = true;}
      if(IeFDhWHwJm == bCotPBxhdN){ncbibqEepp = true;}
      else if(bCotPBxhdN == IeFDhWHwJm){FbWoMunINP = true;}
      if(xYepTGBiYZ == BdSkFFVRXl){fVJobsLeWN = true;}
      else if(BdSkFFVRXl == xYepTGBiYZ){hPoiptyCuW = true;}
      if(zDYFKXRMQO == AftTXTUlNU){lnPVLHhQMS = true;}
      if(oKyNNaSMDh == lybtfBJeyV){MHEIspKPNt = true;}
      if(zVAxYCTRmD == OEQIHpBhmX){IkXREWdSau = true;}
      while(AftTXTUlNU == zDYFKXRMQO){BfJCIeDWpj = true;}
      while(lybtfBJeyV == lybtfBJeyV){iQIkiBrzDf = true;}
      while(OEQIHpBhmX == OEQIHpBhmX){SNXbLNOJEq = true;}
      if(hYgNluHVWu == true){hYgNluHVWu = false;}
      if(gKUIbDCXFE == true){gKUIbDCXFE = false;}
      if(uqTBWwPlMg == true){uqTBWwPlMg = false;}
      if(SmyplNQNIj == true){SmyplNQNIj = false;}
      if(snIDoDjHgD == true){snIDoDjHgD = false;}
      if(ncbibqEepp == true){ncbibqEepp = false;}
      if(fVJobsLeWN == true){fVJobsLeWN = false;}
      if(lnPVLHhQMS == true){lnPVLHhQMS = false;}
      if(MHEIspKPNt == true){MHEIspKPNt = false;}
      if(IkXREWdSau == true){IkXREWdSau = false;}
      if(qFkSQzMGXT == true){qFkSQzMGXT = false;}
      if(JnSWdXRBwk == true){JnSWdXRBwk = false;}
      if(iwQbEBQxRn == true){iwQbEBQxRn = false;}
      if(dPoQbGWkrt == true){dPoQbGWkrt = false;}
      if(cDrtkURAnf == true){cDrtkURAnf = false;}
      if(FbWoMunINP == true){FbWoMunINP = false;}
      if(hPoiptyCuW == true){hPoiptyCuW = false;}
      if(BfJCIeDWpj == true){BfJCIeDWpj = false;}
      if(iQIkiBrzDf == true){iQIkiBrzDf = false;}
      if(SNXbLNOJEq == true){SNXbLNOJEq = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class OXEMDGSAKZ
{ 
  void agBRRlPESo()
  { 
      bool sWofwOsFLW = false;
      bool FjlGYEBERO = false;
      bool fQQmZBXFmA = false;
      bool dISjtsEsFA = false;
      bool XZrJqPnlyL = false;
      bool qLkVccGBFt = false;
      bool qmSKsxRCLf = false;
      bool zHzRqFXGwJ = false;
      bool NkHaIRXwHR = false;
      bool lDmLIjGgQt = false;
      bool ylZSLiMSdW = false;
      bool EAEugFfrCa = false;
      bool YUtsswUmIH = false;
      bool yqpCLaKoOY = false;
      bool FESjNlyreC = false;
      bool DOepUcqgYP = false;
      bool OYKWYMJCjF = false;
      bool uqccVUCJfH = false;
      bool ybIFDiMAhh = false;
      bool idPzJftuLA = false;
      string OfZfMDHnmP;
      string nesXhDpdVB;
      string budrDCXTOn;
      string dSUspqAAdn;
      string WhbDGZHZkc;
      string HFOGLTChbJ;
      string fmYzlVKAhp;
      string DpzhetSZkd;
      string uxikfYDNgV;
      string oRXUHjIcRk;
      string OGquZQFfbQ;
      string BbxyOiEmSM;
      string SxTMAkSeZt;
      string kpIzOnFmLP;
      string TWkPTMUYGY;
      string eUJESRmeto;
      string yZGgeLTxja;
      string cQbDsuLDrn;
      string PsYBOQfDgw;
      string AasWQsQDjI;
      if(OfZfMDHnmP == OGquZQFfbQ){sWofwOsFLW = true;}
      else if(OGquZQFfbQ == OfZfMDHnmP){ylZSLiMSdW = true;}
      if(nesXhDpdVB == BbxyOiEmSM){FjlGYEBERO = true;}
      else if(BbxyOiEmSM == nesXhDpdVB){EAEugFfrCa = true;}
      if(budrDCXTOn == SxTMAkSeZt){fQQmZBXFmA = true;}
      else if(SxTMAkSeZt == budrDCXTOn){YUtsswUmIH = true;}
      if(dSUspqAAdn == kpIzOnFmLP){dISjtsEsFA = true;}
      else if(kpIzOnFmLP == dSUspqAAdn){yqpCLaKoOY = true;}
      if(WhbDGZHZkc == TWkPTMUYGY){XZrJqPnlyL = true;}
      else if(TWkPTMUYGY == WhbDGZHZkc){FESjNlyreC = true;}
      if(HFOGLTChbJ == eUJESRmeto){qLkVccGBFt = true;}
      else if(eUJESRmeto == HFOGLTChbJ){DOepUcqgYP = true;}
      if(fmYzlVKAhp == yZGgeLTxja){qmSKsxRCLf = true;}
      else if(yZGgeLTxja == fmYzlVKAhp){OYKWYMJCjF = true;}
      if(DpzhetSZkd == cQbDsuLDrn){zHzRqFXGwJ = true;}
      if(uxikfYDNgV == PsYBOQfDgw){NkHaIRXwHR = true;}
      if(oRXUHjIcRk == AasWQsQDjI){lDmLIjGgQt = true;}
      while(cQbDsuLDrn == DpzhetSZkd){uqccVUCJfH = true;}
      while(PsYBOQfDgw == PsYBOQfDgw){ybIFDiMAhh = true;}
      while(AasWQsQDjI == AasWQsQDjI){idPzJftuLA = true;}
      if(sWofwOsFLW == true){sWofwOsFLW = false;}
      if(FjlGYEBERO == true){FjlGYEBERO = false;}
      if(fQQmZBXFmA == true){fQQmZBXFmA = false;}
      if(dISjtsEsFA == true){dISjtsEsFA = false;}
      if(XZrJqPnlyL == true){XZrJqPnlyL = false;}
      if(qLkVccGBFt == true){qLkVccGBFt = false;}
      if(qmSKsxRCLf == true){qmSKsxRCLf = false;}
      if(zHzRqFXGwJ == true){zHzRqFXGwJ = false;}
      if(NkHaIRXwHR == true){NkHaIRXwHR = false;}
      if(lDmLIjGgQt == true){lDmLIjGgQt = false;}
      if(ylZSLiMSdW == true){ylZSLiMSdW = false;}
      if(EAEugFfrCa == true){EAEugFfrCa = false;}
      if(YUtsswUmIH == true){YUtsswUmIH = false;}
      if(yqpCLaKoOY == true){yqpCLaKoOY = false;}
      if(FESjNlyreC == true){FESjNlyreC = false;}
      if(DOepUcqgYP == true){DOepUcqgYP = false;}
      if(OYKWYMJCjF == true){OYKWYMJCjF = false;}
      if(uqccVUCJfH == true){uqccVUCJfH = false;}
      if(ybIFDiMAhh == true){ybIFDiMAhh = false;}
      if(idPzJftuLA == true){idPzJftuLA = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class YIKSDSJLJW
{ 
  void HrGYQNeUNe()
  { 
      bool ZIapWsPXol = false;
      bool LRTxxhLUSp = false;
      bool PJfdyyanGk = false;
      bool FGIZsgWgAC = false;
      bool iIAtNJVtAF = false;
      bool nExBtQbxrY = false;
      bool RaREfEJsEQ = false;
      bool KeTQHHJlPn = false;
      bool cgnBxBIGfc = false;
      bool EZobjHpwNI = false;
      bool AboitIjgtl = false;
      bool GpgDwjmPGe = false;
      bool wCNbMkprfz = false;
      bool QNXGnBrEHn = false;
      bool QbMsVOrkfA = false;
      bool TaohMxNMWJ = false;
      bool SrAtVsRaPt = false;
      bool riIROUpUGx = false;
      bool rEMffpXptp = false;
      bool mehyVXaRWc = false;
      string WHcxrqFYnW;
      string hdiTAjQHic;
      string FwgKolYLSA;
      string wtWibQwynJ;
      string geSUBtwlsk;
      string ZpBSOZaSHG;
      string SsFmZnHAri;
      string nRTZuZdLJu;
      string olShaFrDUB;
      string pdpgqmZeuM;
      string mwtJxHVaWn;
      string uPJLRfaXMU;
      string wDepsJbmiI;
      string AzPwIrrIkS;
      string iRffGZUdPK;
      string MBSaQiQDQm;
      string firOnwzMDY;
      string mSltkeXzjS;
      string oxWXwygofZ;
      string aoqymzYQqJ;
      if(WHcxrqFYnW == mwtJxHVaWn){ZIapWsPXol = true;}
      else if(mwtJxHVaWn == WHcxrqFYnW){AboitIjgtl = true;}
      if(hdiTAjQHic == uPJLRfaXMU){LRTxxhLUSp = true;}
      else if(uPJLRfaXMU == hdiTAjQHic){GpgDwjmPGe = true;}
      if(FwgKolYLSA == wDepsJbmiI){PJfdyyanGk = true;}
      else if(wDepsJbmiI == FwgKolYLSA){wCNbMkprfz = true;}
      if(wtWibQwynJ == AzPwIrrIkS){FGIZsgWgAC = true;}
      else if(AzPwIrrIkS == wtWibQwynJ){QNXGnBrEHn = true;}
      if(geSUBtwlsk == iRffGZUdPK){iIAtNJVtAF = true;}
      else if(iRffGZUdPK == geSUBtwlsk){QbMsVOrkfA = true;}
      if(ZpBSOZaSHG == MBSaQiQDQm){nExBtQbxrY = true;}
      else if(MBSaQiQDQm == ZpBSOZaSHG){TaohMxNMWJ = true;}
      if(SsFmZnHAri == firOnwzMDY){RaREfEJsEQ = true;}
      else if(firOnwzMDY == SsFmZnHAri){SrAtVsRaPt = true;}
      if(nRTZuZdLJu == mSltkeXzjS){KeTQHHJlPn = true;}
      if(olShaFrDUB == oxWXwygofZ){cgnBxBIGfc = true;}
      if(pdpgqmZeuM == aoqymzYQqJ){EZobjHpwNI = true;}
      while(mSltkeXzjS == nRTZuZdLJu){riIROUpUGx = true;}
      while(oxWXwygofZ == oxWXwygofZ){rEMffpXptp = true;}
      while(aoqymzYQqJ == aoqymzYQqJ){mehyVXaRWc = true;}
      if(ZIapWsPXol == true){ZIapWsPXol = false;}
      if(LRTxxhLUSp == true){LRTxxhLUSp = false;}
      if(PJfdyyanGk == true){PJfdyyanGk = false;}
      if(FGIZsgWgAC == true){FGIZsgWgAC = false;}
      if(iIAtNJVtAF == true){iIAtNJVtAF = false;}
      if(nExBtQbxrY == true){nExBtQbxrY = false;}
      if(RaREfEJsEQ == true){RaREfEJsEQ = false;}
      if(KeTQHHJlPn == true){KeTQHHJlPn = false;}
      if(cgnBxBIGfc == true){cgnBxBIGfc = false;}
      if(EZobjHpwNI == true){EZobjHpwNI = false;}
      if(AboitIjgtl == true){AboitIjgtl = false;}
      if(GpgDwjmPGe == true){GpgDwjmPGe = false;}
      if(wCNbMkprfz == true){wCNbMkprfz = false;}
      if(QNXGnBrEHn == true){QNXGnBrEHn = false;}
      if(QbMsVOrkfA == true){QbMsVOrkfA = false;}
      if(TaohMxNMWJ == true){TaohMxNMWJ = false;}
      if(SrAtVsRaPt == true){SrAtVsRaPt = false;}
      if(riIROUpUGx == true){riIROUpUGx = false;}
      if(rEMffpXptp == true){rEMffpXptp = false;}
      if(mehyVXaRWc == true){mehyVXaRWc = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class KAABWOVLKR
{ 
  void fSohpdtcgH()
  { 
      bool GzwyqZFHcb = false;
      bool cwaEcHEEEE = false;
      bool rbBkkRpLbU = false;
      bool rfggTdnpks = false;
      bool eotZbsbaMO = false;
      bool GzByGeyLMY = false;
      bool jtfHjwOskz = false;
      bool SOTKZCgaIr = false;
      bool pOyNOreiao = false;
      bool eccLJjJmpe = false;
      bool ehpNurfpXD = false;
      bool xWCUhUwRsq = false;
      bool ReSwTokHBo = false;
      bool stkcMIYkRW = false;
      bool MnKWqHaIco = false;
      bool nqtyNzOttF = false;
      bool GXoiKDlZHZ = false;
      bool uKAVddTwEL = false;
      bool ObdLBCzlPM = false;
      bool seqMPnybLm = false;
      string uhmdHsLLJJ;
      string tmtzOJdjte;
      string ZgYaRgXFhQ;
      string IHCwwuuIxN;
      string jfLwsQEhfA;
      string kuBiZOIMLZ;
      string VGdrAmkxDT;
      string OUlftsVcgA;
      string coYgeNFTWg;
      string lhxXrdCSwG;
      string fGdMlQIUof;
      string rfeKxfhwMl;
      string gQaVgfXOnP;
      string qCgaUVKLuO;
      string FkeqoGDlZL;
      string wGFJYOfIfF;
      string ssgYnozDpb;
      string UVAygwljga;
      string cknbTjxWCF;
      string pCfoVLDGCz;
      if(uhmdHsLLJJ == fGdMlQIUof){GzwyqZFHcb = true;}
      else if(fGdMlQIUof == uhmdHsLLJJ){ehpNurfpXD = true;}
      if(tmtzOJdjte == rfeKxfhwMl){cwaEcHEEEE = true;}
      else if(rfeKxfhwMl == tmtzOJdjte){xWCUhUwRsq = true;}
      if(ZgYaRgXFhQ == gQaVgfXOnP){rbBkkRpLbU = true;}
      else if(gQaVgfXOnP == ZgYaRgXFhQ){ReSwTokHBo = true;}
      if(IHCwwuuIxN == qCgaUVKLuO){rfggTdnpks = true;}
      else if(qCgaUVKLuO == IHCwwuuIxN){stkcMIYkRW = true;}
      if(jfLwsQEhfA == FkeqoGDlZL){eotZbsbaMO = true;}
      else if(FkeqoGDlZL == jfLwsQEhfA){MnKWqHaIco = true;}
      if(kuBiZOIMLZ == wGFJYOfIfF){GzByGeyLMY = true;}
      else if(wGFJYOfIfF == kuBiZOIMLZ){nqtyNzOttF = true;}
      if(VGdrAmkxDT == ssgYnozDpb){jtfHjwOskz = true;}
      else if(ssgYnozDpb == VGdrAmkxDT){GXoiKDlZHZ = true;}
      if(OUlftsVcgA == UVAygwljga){SOTKZCgaIr = true;}
      if(coYgeNFTWg == cknbTjxWCF){pOyNOreiao = true;}
      if(lhxXrdCSwG == pCfoVLDGCz){eccLJjJmpe = true;}
      while(UVAygwljga == OUlftsVcgA){uKAVddTwEL = true;}
      while(cknbTjxWCF == cknbTjxWCF){ObdLBCzlPM = true;}
      while(pCfoVLDGCz == pCfoVLDGCz){seqMPnybLm = true;}
      if(GzwyqZFHcb == true){GzwyqZFHcb = false;}
      if(cwaEcHEEEE == true){cwaEcHEEEE = false;}
      if(rbBkkRpLbU == true){rbBkkRpLbU = false;}
      if(rfggTdnpks == true){rfggTdnpks = false;}
      if(eotZbsbaMO == true){eotZbsbaMO = false;}
      if(GzByGeyLMY == true){GzByGeyLMY = false;}
      if(jtfHjwOskz == true){jtfHjwOskz = false;}
      if(SOTKZCgaIr == true){SOTKZCgaIr = false;}
      if(pOyNOreiao == true){pOyNOreiao = false;}
      if(eccLJjJmpe == true){eccLJjJmpe = false;}
      if(ehpNurfpXD == true){ehpNurfpXD = false;}
      if(xWCUhUwRsq == true){xWCUhUwRsq = false;}
      if(ReSwTokHBo == true){ReSwTokHBo = false;}
      if(stkcMIYkRW == true){stkcMIYkRW = false;}
      if(MnKWqHaIco == true){MnKWqHaIco = false;}
      if(nqtyNzOttF == true){nqtyNzOttF = false;}
      if(GXoiKDlZHZ == true){GXoiKDlZHZ = false;}
      if(uKAVddTwEL == true){uKAVddTwEL = false;}
      if(ObdLBCzlPM == true){ObdLBCzlPM = false;}
      if(seqMPnybLm == true){seqMPnybLm = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class SPWHSQMISX
{ 
  void uUggzznxdV()
  { 
      bool NHAyIxsZgB = false;
      bool VCPQELmPAF = false;
      bool DAQBwoNbcF = false;
      bool xKUgxoYawm = false;
      bool ZyripZhnja = false;
      bool rZoTcMpzBS = false;
      bool iQxbDLgiTO = false;
      bool mMTNfFIhLW = false;
      bool HYrBMXVBDj = false;
      bool zZYcDIBPed = false;
      bool rzUUnfFamX = false;
      bool EIneLKYuPf = false;
      bool oeeiPNmqKW = false;
      bool DsCgdIDWNg = false;
      bool SuNffpktRr = false;
      bool jGAyoMTkFa = false;
      bool rOPQTLFGAC = false;
      bool GChhNtRyDY = false;
      bool bsZSlxrErQ = false;
      bool nSQlnDfxMU = false;
      string DSdxKttyQH;
      string CAiJOTqCVr;
      string HQNlSxAkua;
      string dUNplKbpjG;
      string aQVZWkhXdy;
      string ablCqlFqeN;
      string sJCodhlrWD;
      string qASORpumPh;
      string OcHxABhLzA;
      string FkLVMROfuo;
      string yoAZHaJWkA;
      string qRbxyPBFoc;
      string zarWyFnwBA;
      string bOraiYbhoY;
      string rLZyImIOXx;
      string QIpSoWxdbB;
      string lMUkYbZBNY;
      string nSPQknAtNK;
      string xZYEjSYZkM;
      string byFnmfpoYg;
      if(DSdxKttyQH == yoAZHaJWkA){NHAyIxsZgB = true;}
      else if(yoAZHaJWkA == DSdxKttyQH){rzUUnfFamX = true;}
      if(CAiJOTqCVr == qRbxyPBFoc){VCPQELmPAF = true;}
      else if(qRbxyPBFoc == CAiJOTqCVr){EIneLKYuPf = true;}
      if(HQNlSxAkua == zarWyFnwBA){DAQBwoNbcF = true;}
      else if(zarWyFnwBA == HQNlSxAkua){oeeiPNmqKW = true;}
      if(dUNplKbpjG == bOraiYbhoY){xKUgxoYawm = true;}
      else if(bOraiYbhoY == dUNplKbpjG){DsCgdIDWNg = true;}
      if(aQVZWkhXdy == rLZyImIOXx){ZyripZhnja = true;}
      else if(rLZyImIOXx == aQVZWkhXdy){SuNffpktRr = true;}
      if(ablCqlFqeN == QIpSoWxdbB){rZoTcMpzBS = true;}
      else if(QIpSoWxdbB == ablCqlFqeN){jGAyoMTkFa = true;}
      if(sJCodhlrWD == lMUkYbZBNY){iQxbDLgiTO = true;}
      else if(lMUkYbZBNY == sJCodhlrWD){rOPQTLFGAC = true;}
      if(qASORpumPh == nSPQknAtNK){mMTNfFIhLW = true;}
      if(OcHxABhLzA == xZYEjSYZkM){HYrBMXVBDj = true;}
      if(FkLVMROfuo == byFnmfpoYg){zZYcDIBPed = true;}
      while(nSPQknAtNK == qASORpumPh){GChhNtRyDY = true;}
      while(xZYEjSYZkM == xZYEjSYZkM){bsZSlxrErQ = true;}
      while(byFnmfpoYg == byFnmfpoYg){nSQlnDfxMU = true;}
      if(NHAyIxsZgB == true){NHAyIxsZgB = false;}
      if(VCPQELmPAF == true){VCPQELmPAF = false;}
      if(DAQBwoNbcF == true){DAQBwoNbcF = false;}
      if(xKUgxoYawm == true){xKUgxoYawm = false;}
      if(ZyripZhnja == true){ZyripZhnja = false;}
      if(rZoTcMpzBS == true){rZoTcMpzBS = false;}
      if(iQxbDLgiTO == true){iQxbDLgiTO = false;}
      if(mMTNfFIhLW == true){mMTNfFIhLW = false;}
      if(HYrBMXVBDj == true){HYrBMXVBDj = false;}
      if(zZYcDIBPed == true){zZYcDIBPed = false;}
      if(rzUUnfFamX == true){rzUUnfFamX = false;}
      if(EIneLKYuPf == true){EIneLKYuPf = false;}
      if(oeeiPNmqKW == true){oeeiPNmqKW = false;}
      if(DsCgdIDWNg == true){DsCgdIDWNg = false;}
      if(SuNffpktRr == true){SuNffpktRr = false;}
      if(jGAyoMTkFa == true){jGAyoMTkFa = false;}
      if(rOPQTLFGAC == true){rOPQTLFGAC = false;}
      if(GChhNtRyDY == true){GChhNtRyDY = false;}
      if(bsZSlxrErQ == true){bsZSlxrErQ = false;}
      if(nSQlnDfxMU == true){nSQlnDfxMU = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class UAFCWFWEXA
{ 
  void AteFWoXsmD()
  { 
      bool SUutKlBgGX = false;
      bool zyQQopFQtl = false;
      bool UiRrBhgnGs = false;
      bool ysVFBkIJGo = false;
      bool DDOphZtkru = false;
      bool yHNimjCCsb = false;
      bool ENaNYFcKOD = false;
      bool guKFhRUaJa = false;
      bool nwuKuqflRR = false;
      bool hFPdjobAQb = false;
      bool wiWoNCwHAV = false;
      bool PbsRnIRPRh = false;
      bool ZprxUbegUr = false;
      bool oTJheEYGxs = false;
      bool tXlwCGMyob = false;
      bool XMhiCFpYTl = false;
      bool WPmIguRKmj = false;
      bool iLSYmBEwtO = false;
      bool OgqsUckaeY = false;
      bool NAlKVekdPG = false;
      string qVatcnZMuO;
      string BjbIIWJiQa;
      string sVFyVhLkjZ;
      string JNItAQVDCM;
      string ixQSNGaPUE;
      string ZOFLOVPbXt;
      string cncVEmahIr;
      string BFfDrwFlkO;
      string GwQezuIwee;
      string AsfHjtTuNZ;
      string frHcCThBTS;
      string QcqJngXxWJ;
      string ddCcqHZXTx;
      string bJYKiOnnbe;
      string MGcLOWBVTC;
      string WWYDuBpdku;
      string tJhVqGEgaZ;
      string rjUqwXBqNU;
      string GEEQaFkUOh;
      string XKCgkDYHUI;
      if(qVatcnZMuO == frHcCThBTS){SUutKlBgGX = true;}
      else if(frHcCThBTS == qVatcnZMuO){wiWoNCwHAV = true;}
      if(BjbIIWJiQa == QcqJngXxWJ){zyQQopFQtl = true;}
      else if(QcqJngXxWJ == BjbIIWJiQa){PbsRnIRPRh = true;}
      if(sVFyVhLkjZ == ddCcqHZXTx){UiRrBhgnGs = true;}
      else if(ddCcqHZXTx == sVFyVhLkjZ){ZprxUbegUr = true;}
      if(JNItAQVDCM == bJYKiOnnbe){ysVFBkIJGo = true;}
      else if(bJYKiOnnbe == JNItAQVDCM){oTJheEYGxs = true;}
      if(ixQSNGaPUE == MGcLOWBVTC){DDOphZtkru = true;}
      else if(MGcLOWBVTC == ixQSNGaPUE){tXlwCGMyob = true;}
      if(ZOFLOVPbXt == WWYDuBpdku){yHNimjCCsb = true;}
      else if(WWYDuBpdku == ZOFLOVPbXt){XMhiCFpYTl = true;}
      if(cncVEmahIr == tJhVqGEgaZ){ENaNYFcKOD = true;}
      else if(tJhVqGEgaZ == cncVEmahIr){WPmIguRKmj = true;}
      if(BFfDrwFlkO == rjUqwXBqNU){guKFhRUaJa = true;}
      if(GwQezuIwee == GEEQaFkUOh){nwuKuqflRR = true;}
      if(AsfHjtTuNZ == XKCgkDYHUI){hFPdjobAQb = true;}
      while(rjUqwXBqNU == BFfDrwFlkO){iLSYmBEwtO = true;}
      while(GEEQaFkUOh == GEEQaFkUOh){OgqsUckaeY = true;}
      while(XKCgkDYHUI == XKCgkDYHUI){NAlKVekdPG = true;}
      if(SUutKlBgGX == true){SUutKlBgGX = false;}
      if(zyQQopFQtl == true){zyQQopFQtl = false;}
      if(UiRrBhgnGs == true){UiRrBhgnGs = false;}
      if(ysVFBkIJGo == true){ysVFBkIJGo = false;}
      if(DDOphZtkru == true){DDOphZtkru = false;}
      if(yHNimjCCsb == true){yHNimjCCsb = false;}
      if(ENaNYFcKOD == true){ENaNYFcKOD = false;}
      if(guKFhRUaJa == true){guKFhRUaJa = false;}
      if(nwuKuqflRR == true){nwuKuqflRR = false;}
      if(hFPdjobAQb == true){hFPdjobAQb = false;}
      if(wiWoNCwHAV == true){wiWoNCwHAV = false;}
      if(PbsRnIRPRh == true){PbsRnIRPRh = false;}
      if(ZprxUbegUr == true){ZprxUbegUr = false;}
      if(oTJheEYGxs == true){oTJheEYGxs = false;}
      if(tXlwCGMyob == true){tXlwCGMyob = false;}
      if(XMhiCFpYTl == true){XMhiCFpYTl = false;}
      if(WPmIguRKmj == true){WPmIguRKmj = false;}
      if(iLSYmBEwtO == true){iLSYmBEwtO = false;}
      if(OgqsUckaeY == true){OgqsUckaeY = false;}
      if(NAlKVekdPG == true){NAlKVekdPG = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class HMBNYGYUQG
{ 
  void KMikAuWlJr()
  { 
      bool cUOecqjilB = false;
      bool REDpXTTcGD = false;
      bool lwScxzCVTB = false;
      bool qQBjVayOVx = false;
      bool PujeNPTpRw = false;
      bool NMOiMfCkgc = false;
      bool nOOjKADSTw = false;
      bool VEHJnpLmPg = false;
      bool eMDXndCRXp = false;
      bool YMgrIAfAUM = false;
      bool LBVVZIFFtV = false;
      bool UOUAxaKquf = false;
      bool yludWIXOAm = false;
      bool JLSCUdqhye = false;
      bool YxWBVKrguh = false;
      bool poEnOZGqyQ = false;
      bool kpEHMIwReS = false;
      bool jcrQGAOsIM = false;
      bool QpTSxTHdnu = false;
      bool XzigshrPoM = false;
      string MgUWslBxZN;
      string gNMaKtHVpk;
      string qwcLhaJpge;
      string fuhuwJsFyJ;
      string pfujRooOjl;
      string RdFFHQDJnS;
      string bKPthlfRdA;
      string BBWftKAsts;
      string ltFuMCobmf;
      string FjRegfPBBe;
      string IWkjkQGYKx;
      string PKOtggEUgf;
      string wDdytQjryO;
      string tzrPkOJVJw;
      string wQQpPuUXyA;
      string auTVhEsloT;
      string fNauCQSzJS;
      string WiLjjfmniz;
      string wMtynzeVgf;
      string UXfoPhoVmy;
      if(MgUWslBxZN == IWkjkQGYKx){cUOecqjilB = true;}
      else if(IWkjkQGYKx == MgUWslBxZN){LBVVZIFFtV = true;}
      if(gNMaKtHVpk == PKOtggEUgf){REDpXTTcGD = true;}
      else if(PKOtggEUgf == gNMaKtHVpk){UOUAxaKquf = true;}
      if(qwcLhaJpge == wDdytQjryO){lwScxzCVTB = true;}
      else if(wDdytQjryO == qwcLhaJpge){yludWIXOAm = true;}
      if(fuhuwJsFyJ == tzrPkOJVJw){qQBjVayOVx = true;}
      else if(tzrPkOJVJw == fuhuwJsFyJ){JLSCUdqhye = true;}
      if(pfujRooOjl == wQQpPuUXyA){PujeNPTpRw = true;}
      else if(wQQpPuUXyA == pfujRooOjl){YxWBVKrguh = true;}
      if(RdFFHQDJnS == auTVhEsloT){NMOiMfCkgc = true;}
      else if(auTVhEsloT == RdFFHQDJnS){poEnOZGqyQ = true;}
      if(bKPthlfRdA == fNauCQSzJS){nOOjKADSTw = true;}
      else if(fNauCQSzJS == bKPthlfRdA){kpEHMIwReS = true;}
      if(BBWftKAsts == WiLjjfmniz){VEHJnpLmPg = true;}
      if(ltFuMCobmf == wMtynzeVgf){eMDXndCRXp = true;}
      if(FjRegfPBBe == UXfoPhoVmy){YMgrIAfAUM = true;}
      while(WiLjjfmniz == BBWftKAsts){jcrQGAOsIM = true;}
      while(wMtynzeVgf == wMtynzeVgf){QpTSxTHdnu = true;}
      while(UXfoPhoVmy == UXfoPhoVmy){XzigshrPoM = true;}
      if(cUOecqjilB == true){cUOecqjilB = false;}
      if(REDpXTTcGD == true){REDpXTTcGD = false;}
      if(lwScxzCVTB == true){lwScxzCVTB = false;}
      if(qQBjVayOVx == true){qQBjVayOVx = false;}
      if(PujeNPTpRw == true){PujeNPTpRw = false;}
      if(NMOiMfCkgc == true){NMOiMfCkgc = false;}
      if(nOOjKADSTw == true){nOOjKADSTw = false;}
      if(VEHJnpLmPg == true){VEHJnpLmPg = false;}
      if(eMDXndCRXp == true){eMDXndCRXp = false;}
      if(YMgrIAfAUM == true){YMgrIAfAUM = false;}
      if(LBVVZIFFtV == true){LBVVZIFFtV = false;}
      if(UOUAxaKquf == true){UOUAxaKquf = false;}
      if(yludWIXOAm == true){yludWIXOAm = false;}
      if(JLSCUdqhye == true){JLSCUdqhye = false;}
      if(YxWBVKrguh == true){YxWBVKrguh = false;}
      if(poEnOZGqyQ == true){poEnOZGqyQ = false;}
      if(kpEHMIwReS == true){kpEHMIwReS = false;}
      if(jcrQGAOsIM == true){jcrQGAOsIM = false;}
      if(QpTSxTHdnu == true){QpTSxTHdnu = false;}
      if(XzigshrPoM == true){XzigshrPoM = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class KFWSPULAQN
{ 
  void QSSuNBdJgD()
  { 
      bool kZsoesdryp = false;
      bool LjaxbZdRSz = false;
      bool xNlYpXhYEk = false;
      bool ripOLRuDNG = false;
      bool eKbwSTWtoq = false;
      bool rafpZWnUzG = false;
      bool LFmMxctLlK = false;
      bool eZELUmkoFV = false;
      bool AmjNsRDAno = false;
      bool dZEGuYWPyp = false;
      bool ZLIdMSWTUm = false;
      bool kzPcFXUZTf = false;
      bool ZtWwgEVxQu = false;
      bool PVpPwoeFBZ = false;
      bool tieBDdKaBW = false;
      bool DwuSPfnLxH = false;
      bool xZCYWPJAgP = false;
      bool sPYslpOVsC = false;
      bool suusrTaXzQ = false;
      bool ASHscUfFdn = false;
      string hyMHERyUkT;
      string hALeTpcJdy;
      string zkpqOYAirx;
      string YmuxiDJReA;
      string wYECKyJSfs;
      string NegoMwIUse;
      string QPbmutFOuQ;
      string gLddBagmfQ;
      string PhCzjtGFjl;
      string tnYAjgxQGQ;
      string rtWPMCADnl;
      string PUobPhMbDA;
      string nzdJVrldsU;
      string dPgPXULllg;
      string sCRyWYzxjB;
      string TUNFbsQNtU;
      string PWJSIznYDt;
      string WZpVHkgflw;
      string rosrAICame;
      string EyrQRVryoX;
      if(hyMHERyUkT == rtWPMCADnl){kZsoesdryp = true;}
      else if(rtWPMCADnl == hyMHERyUkT){ZLIdMSWTUm = true;}
      if(hALeTpcJdy == PUobPhMbDA){LjaxbZdRSz = true;}
      else if(PUobPhMbDA == hALeTpcJdy){kzPcFXUZTf = true;}
      if(zkpqOYAirx == nzdJVrldsU){xNlYpXhYEk = true;}
      else if(nzdJVrldsU == zkpqOYAirx){ZtWwgEVxQu = true;}
      if(YmuxiDJReA == dPgPXULllg){ripOLRuDNG = true;}
      else if(dPgPXULllg == YmuxiDJReA){PVpPwoeFBZ = true;}
      if(wYECKyJSfs == sCRyWYzxjB){eKbwSTWtoq = true;}
      else if(sCRyWYzxjB == wYECKyJSfs){tieBDdKaBW = true;}
      if(NegoMwIUse == TUNFbsQNtU){rafpZWnUzG = true;}
      else if(TUNFbsQNtU == NegoMwIUse){DwuSPfnLxH = true;}
      if(QPbmutFOuQ == PWJSIznYDt){LFmMxctLlK = true;}
      else if(PWJSIznYDt == QPbmutFOuQ){xZCYWPJAgP = true;}
      if(gLddBagmfQ == WZpVHkgflw){eZELUmkoFV = true;}
      if(PhCzjtGFjl == rosrAICame){AmjNsRDAno = true;}
      if(tnYAjgxQGQ == EyrQRVryoX){dZEGuYWPyp = true;}
      while(WZpVHkgflw == gLddBagmfQ){sPYslpOVsC = true;}
      while(rosrAICame == rosrAICame){suusrTaXzQ = true;}
      while(EyrQRVryoX == EyrQRVryoX){ASHscUfFdn = true;}
      if(kZsoesdryp == true){kZsoesdryp = false;}
      if(LjaxbZdRSz == true){LjaxbZdRSz = false;}
      if(xNlYpXhYEk == true){xNlYpXhYEk = false;}
      if(ripOLRuDNG == true){ripOLRuDNG = false;}
      if(eKbwSTWtoq == true){eKbwSTWtoq = false;}
      if(rafpZWnUzG == true){rafpZWnUzG = false;}
      if(LFmMxctLlK == true){LFmMxctLlK = false;}
      if(eZELUmkoFV == true){eZELUmkoFV = false;}
      if(AmjNsRDAno == true){AmjNsRDAno = false;}
      if(dZEGuYWPyp == true){dZEGuYWPyp = false;}
      if(ZLIdMSWTUm == true){ZLIdMSWTUm = false;}
      if(kzPcFXUZTf == true){kzPcFXUZTf = false;}
      if(ZtWwgEVxQu == true){ZtWwgEVxQu = false;}
      if(PVpPwoeFBZ == true){PVpPwoeFBZ = false;}
      if(tieBDdKaBW == true){tieBDdKaBW = false;}
      if(DwuSPfnLxH == true){DwuSPfnLxH = false;}
      if(xZCYWPJAgP == true){xZCYWPJAgP = false;}
      if(sPYslpOVsC == true){sPYslpOVsC = false;}
      if(suusrTaXzQ == true){suusrTaXzQ = false;}
      if(ASHscUfFdn == true){ASHscUfFdn = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class JGUFEQFLQS
{ 
  void Cczhbchzar()
  { 
      bool VHhzasLNXh = false;
      bool aQeeFzAENC = false;
      bool MnEVVqALAA = false;
      bool BwylrrmSUT = false;
      bool PecnHSFEtk = false;
      bool faEYjhDMdj = false;
      bool sANWfdRslM = false;
      bool MgitlgKPNC = false;
      bool kuROUaqZBJ = false;
      bool naokZPRFIc = false;
      bool BMRgYyrKmC = false;
      bool WnyazxiyCF = false;
      bool mrqbYlrxTW = false;
      bool OFGjBXdjpV = false;
      bool iglymzbNkb = false;
      bool fTCDpIUoHl = false;
      bool GtqQmRgNYa = false;
      bool TyHfVFFroY = false;
      bool JdLqpuCDts = false;
      bool CncDPnpUKU = false;
      string TdMsPxDWDJ;
      string BcKJUFocYc;
      string fqtjqjbuOf;
      string oHIwaoYRRx;
      string xuLEVSlgyU;
      string zAbxNbjbBf;
      string UIIWTsTOie;
      string fWKbekfoOX;
      string yuwsgofLhy;
      string FwPlbolnjb;
      string zWxSnbpARc;
      string wtNcgYLPpe;
      string MIfjZiHXzp;
      string yqFlYaxcEF;
      string yfsFBKilFC;
      string cWyEPpqNsF;
      string USAadFoaEF;
      string aiKkggOZhO;
      string AUSwNbrAWi;
      string jjizkfeSaw;
      if(TdMsPxDWDJ == zWxSnbpARc){VHhzasLNXh = true;}
      else if(zWxSnbpARc == TdMsPxDWDJ){BMRgYyrKmC = true;}
      if(BcKJUFocYc == wtNcgYLPpe){aQeeFzAENC = true;}
      else if(wtNcgYLPpe == BcKJUFocYc){WnyazxiyCF = true;}
      if(fqtjqjbuOf == MIfjZiHXzp){MnEVVqALAA = true;}
      else if(MIfjZiHXzp == fqtjqjbuOf){mrqbYlrxTW = true;}
      if(oHIwaoYRRx == yqFlYaxcEF){BwylrrmSUT = true;}
      else if(yqFlYaxcEF == oHIwaoYRRx){OFGjBXdjpV = true;}
      if(xuLEVSlgyU == yfsFBKilFC){PecnHSFEtk = true;}
      else if(yfsFBKilFC == xuLEVSlgyU){iglymzbNkb = true;}
      if(zAbxNbjbBf == cWyEPpqNsF){faEYjhDMdj = true;}
      else if(cWyEPpqNsF == zAbxNbjbBf){fTCDpIUoHl = true;}
      if(UIIWTsTOie == USAadFoaEF){sANWfdRslM = true;}
      else if(USAadFoaEF == UIIWTsTOie){GtqQmRgNYa = true;}
      if(fWKbekfoOX == aiKkggOZhO){MgitlgKPNC = true;}
      if(yuwsgofLhy == AUSwNbrAWi){kuROUaqZBJ = true;}
      if(FwPlbolnjb == jjizkfeSaw){naokZPRFIc = true;}
      while(aiKkggOZhO == fWKbekfoOX){TyHfVFFroY = true;}
      while(AUSwNbrAWi == AUSwNbrAWi){JdLqpuCDts = true;}
      while(jjizkfeSaw == jjizkfeSaw){CncDPnpUKU = true;}
      if(VHhzasLNXh == true){VHhzasLNXh = false;}
      if(aQeeFzAENC == true){aQeeFzAENC = false;}
      if(MnEVVqALAA == true){MnEVVqALAA = false;}
      if(BwylrrmSUT == true){BwylrrmSUT = false;}
      if(PecnHSFEtk == true){PecnHSFEtk = false;}
      if(faEYjhDMdj == true){faEYjhDMdj = false;}
      if(sANWfdRslM == true){sANWfdRslM = false;}
      if(MgitlgKPNC == true){MgitlgKPNC = false;}
      if(kuROUaqZBJ == true){kuROUaqZBJ = false;}
      if(naokZPRFIc == true){naokZPRFIc = false;}
      if(BMRgYyrKmC == true){BMRgYyrKmC = false;}
      if(WnyazxiyCF == true){WnyazxiyCF = false;}
      if(mrqbYlrxTW == true){mrqbYlrxTW = false;}
      if(OFGjBXdjpV == true){OFGjBXdjpV = false;}
      if(iglymzbNkb == true){iglymzbNkb = false;}
      if(fTCDpIUoHl == true){fTCDpIUoHl = false;}
      if(GtqQmRgNYa == true){GtqQmRgNYa = false;}
      if(TyHfVFFroY == true){TyHfVFFroY = false;}
      if(JdLqpuCDts == true){JdLqpuCDts = false;}
      if(CncDPnpUKU == true){CncDPnpUKU = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class BUJYDXTAHO
{ 
  void fnDyNYIYIA()
  { 
      bool ePXJqHbRTB = false;
      bool ITBXTuqDGF = false;
      bool UupxuybTpw = false;
      bool kKCdxYMqoL = false;
      bool xRohiIhSHN = false;
      bool QjjLqiZaOr = false;
      bool eHbWQxQWZu = false;
      bool hzNtIDFHNl = false;
      bool PJLbfAaqlN = false;
      bool ylcwfooSRk = false;
      bool rKrMfQWoDm = false;
      bool cSMbbUwzpQ = false;
      bool WZkMxuWQNS = false;
      bool NmoctFRzwO = false;
      bool cknzjfZAUL = false;
      bool robBORZfOj = false;
      bool tFajYpcjhW = false;
      bool DxDbmllkbQ = false;
      bool VVwCaYLnOb = false;
      bool eljLUXJDZt = false;
      string bQlVYoGUMj;
      string LapIxyZeMV;
      string JSUTCQEuPD;
      string DybAeQsWcV;
      string tIOJkZucrr;
      string hcitbJwSSI;
      string kLEJfMzodf;
      string ECCqbAEKhc;
      string UaCXUaPhXV;
      string UaDTjiEEcX;
      string aFzLmeaqRb;
      string EkjpmKIgnF;
      string xQRHLdyhGs;
      string wzgKBPapko;
      string AXPwRipNgZ;
      string ZXQXaJnqAI;
      string grjYeEEZoW;
      string iSuyEYBUpb;
      string nkBgSYiIjq;
      string bjpbIHnpRM;
      if(bQlVYoGUMj == aFzLmeaqRb){ePXJqHbRTB = true;}
      else if(aFzLmeaqRb == bQlVYoGUMj){rKrMfQWoDm = true;}
      if(LapIxyZeMV == EkjpmKIgnF){ITBXTuqDGF = true;}
      else if(EkjpmKIgnF == LapIxyZeMV){cSMbbUwzpQ = true;}
      if(JSUTCQEuPD == xQRHLdyhGs){UupxuybTpw = true;}
      else if(xQRHLdyhGs == JSUTCQEuPD){WZkMxuWQNS = true;}
      if(DybAeQsWcV == wzgKBPapko){kKCdxYMqoL = true;}
      else if(wzgKBPapko == DybAeQsWcV){NmoctFRzwO = true;}
      if(tIOJkZucrr == AXPwRipNgZ){xRohiIhSHN = true;}
      else if(AXPwRipNgZ == tIOJkZucrr){cknzjfZAUL = true;}
      if(hcitbJwSSI == ZXQXaJnqAI){QjjLqiZaOr = true;}
      else if(ZXQXaJnqAI == hcitbJwSSI){robBORZfOj = true;}
      if(kLEJfMzodf == grjYeEEZoW){eHbWQxQWZu = true;}
      else if(grjYeEEZoW == kLEJfMzodf){tFajYpcjhW = true;}
      if(ECCqbAEKhc == iSuyEYBUpb){hzNtIDFHNl = true;}
      if(UaCXUaPhXV == nkBgSYiIjq){PJLbfAaqlN = true;}
      if(UaDTjiEEcX == bjpbIHnpRM){ylcwfooSRk = true;}
      while(iSuyEYBUpb == ECCqbAEKhc){DxDbmllkbQ = true;}
      while(nkBgSYiIjq == nkBgSYiIjq){VVwCaYLnOb = true;}
      while(bjpbIHnpRM == bjpbIHnpRM){eljLUXJDZt = true;}
      if(ePXJqHbRTB == true){ePXJqHbRTB = false;}
      if(ITBXTuqDGF == true){ITBXTuqDGF = false;}
      if(UupxuybTpw == true){UupxuybTpw = false;}
      if(kKCdxYMqoL == true){kKCdxYMqoL = false;}
      if(xRohiIhSHN == true){xRohiIhSHN = false;}
      if(QjjLqiZaOr == true){QjjLqiZaOr = false;}
      if(eHbWQxQWZu == true){eHbWQxQWZu = false;}
      if(hzNtIDFHNl == true){hzNtIDFHNl = false;}
      if(PJLbfAaqlN == true){PJLbfAaqlN = false;}
      if(ylcwfooSRk == true){ylcwfooSRk = false;}
      if(rKrMfQWoDm == true){rKrMfQWoDm = false;}
      if(cSMbbUwzpQ == true){cSMbbUwzpQ = false;}
      if(WZkMxuWQNS == true){WZkMxuWQNS = false;}
      if(NmoctFRzwO == true){NmoctFRzwO = false;}
      if(cknzjfZAUL == true){cknzjfZAUL = false;}
      if(robBORZfOj == true){robBORZfOj = false;}
      if(tFajYpcjhW == true){tFajYpcjhW = false;}
      if(DxDbmllkbQ == true){DxDbmllkbQ = false;}
      if(VVwCaYLnOb == true){VVwCaYLnOb = false;}
      if(eljLUXJDZt == true){eljLUXJDZt = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class ZLPNXKHXUX
{ 
  void peAtJMdyVz()
  { 
      bool iBpaCoOiYg = false;
      bool BscscBgBUT = false;
      bool OOqUEuxBia = false;
      bool oCsmSDbltY = false;
      bool xxGKNafrRb = false;
      bool xffJDTKUWG = false;
      bool rMAyqzAoaZ = false;
      bool ZuHwVRIfHc = false;
      bool OEjGdJVijy = false;
      bool sGOmfjxISN = false;
      bool aqQrCCXjml = false;
      bool KdNsqmcsTh = false;
      bool cQFbfSfUPl = false;
      bool UANsCXmrEb = false;
      bool llwxmOrVus = false;
      bool GDnkkKloLj = false;
      bool WDUBQKPUqT = false;
      bool zkoruqTHnQ = false;
      bool ZJYVeRMcHq = false;
      bool kyfUEiRugc = false;
      string MGbMKGaPNV;
      string XpazWFTYHp;
      string hHisuUKAjs;
      string MozgqGywAA;
      string OUZQpioMqf;
      string jgIuSFXiQo;
      string uZfTIiqtHP;
      string GXYHaNgSDM;
      string exJEJffEOl;
      string iPeKEonFHG;
      string ruFbZMHBUF;
      string XFeEJxQbJc;
      string CmeVfprNDl;
      string YbKwUjrgdx;
      string XeiJOdjZAG;
      string XMueEEPiui;
      string TsyhfutijZ;
      string EixMFWDVGC;
      string FRMwNMffrP;
      string UJluddgAcS;
      if(MGbMKGaPNV == ruFbZMHBUF){iBpaCoOiYg = true;}
      else if(ruFbZMHBUF == MGbMKGaPNV){aqQrCCXjml = true;}
      if(XpazWFTYHp == XFeEJxQbJc){BscscBgBUT = true;}
      else if(XFeEJxQbJc == XpazWFTYHp){KdNsqmcsTh = true;}
      if(hHisuUKAjs == CmeVfprNDl){OOqUEuxBia = true;}
      else if(CmeVfprNDl == hHisuUKAjs){cQFbfSfUPl = true;}
      if(MozgqGywAA == YbKwUjrgdx){oCsmSDbltY = true;}
      else if(YbKwUjrgdx == MozgqGywAA){UANsCXmrEb = true;}
      if(OUZQpioMqf == XeiJOdjZAG){xxGKNafrRb = true;}
      else if(XeiJOdjZAG == OUZQpioMqf){llwxmOrVus = true;}
      if(jgIuSFXiQo == XMueEEPiui){xffJDTKUWG = true;}
      else if(XMueEEPiui == jgIuSFXiQo){GDnkkKloLj = true;}
      if(uZfTIiqtHP == TsyhfutijZ){rMAyqzAoaZ = true;}
      else if(TsyhfutijZ == uZfTIiqtHP){WDUBQKPUqT = true;}
      if(GXYHaNgSDM == EixMFWDVGC){ZuHwVRIfHc = true;}
      if(exJEJffEOl == FRMwNMffrP){OEjGdJVijy = true;}
      if(iPeKEonFHG == UJluddgAcS){sGOmfjxISN = true;}
      while(EixMFWDVGC == GXYHaNgSDM){zkoruqTHnQ = true;}
      while(FRMwNMffrP == FRMwNMffrP){ZJYVeRMcHq = true;}
      while(UJluddgAcS == UJluddgAcS){kyfUEiRugc = true;}
      if(iBpaCoOiYg == true){iBpaCoOiYg = false;}
      if(BscscBgBUT == true){BscscBgBUT = false;}
      if(OOqUEuxBia == true){OOqUEuxBia = false;}
      if(oCsmSDbltY == true){oCsmSDbltY = false;}
      if(xxGKNafrRb == true){xxGKNafrRb = false;}
      if(xffJDTKUWG == true){xffJDTKUWG = false;}
      if(rMAyqzAoaZ == true){rMAyqzAoaZ = false;}
      if(ZuHwVRIfHc == true){ZuHwVRIfHc = false;}
      if(OEjGdJVijy == true){OEjGdJVijy = false;}
      if(sGOmfjxISN == true){sGOmfjxISN = false;}
      if(aqQrCCXjml == true){aqQrCCXjml = false;}
      if(KdNsqmcsTh == true){KdNsqmcsTh = false;}
      if(cQFbfSfUPl == true){cQFbfSfUPl = false;}
      if(UANsCXmrEb == true){UANsCXmrEb = false;}
      if(llwxmOrVus == true){llwxmOrVus = false;}
      if(GDnkkKloLj == true){GDnkkKloLj = false;}
      if(WDUBQKPUqT == true){WDUBQKPUqT = false;}
      if(zkoruqTHnQ == true){zkoruqTHnQ = false;}
      if(ZJYVeRMcHq == true){ZJYVeRMcHq = false;}
      if(kyfUEiRugc == true){kyfUEiRugc = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class FSZKHYVJJA
{ 
  void rmxFBHWQiE()
  { 
      bool rqnCySNkiF = false;
      bool zNpwpOHfoz = false;
      bool cEJmPVcJZV = false;
      bool oobTNlcKpG = false;
      bool wfmGqgfxee = false;
      bool jmcqwngAmb = false;
      bool oEKNPKkViE = false;
      bool kwoiDwRDwh = false;
      bool pfetkCLkXZ = false;
      bool FcXNQrVZpg = false;
      bool uKNasnxtmA = false;
      bool WcDFlJZPbN = false;
      bool yAxJyIYaRL = false;
      bool aqMPleREAx = false;
      bool ERxWCbYSbG = false;
      bool SFxbhuMDbk = false;
      bool OVbbZeQnSH = false;
      bool qVOeJgCZGW = false;
      bool jGzLsVtjgq = false;
      bool RObPihpVxX = false;
      string gCIukunfJb;
      string rKbPznhAKe;
      string AxKcfQusKc;
      string mINsTInGWp;
      string EicOspksTJ;
      string obUDdjrfOT;
      string AtVfnixiwp;
      string zadUZQTujo;
      string eCZAmLmJOi;
      string QIrCoKNxaJ;
      string sCwcKOxAdN;
      string PwwZnyTUrc;
      string umUMZpibfP;
      string DVUZwcFxpY;
      string NmfBSTMRNq;
      string psEyNFhiCT;
      string eVUNJtbVdK;
      string rWeTOIGTsF;
      string cQNnYKRWLp;
      string uVtVsrSRqY;
      if(gCIukunfJb == sCwcKOxAdN){rqnCySNkiF = true;}
      else if(sCwcKOxAdN == gCIukunfJb){uKNasnxtmA = true;}
      if(rKbPznhAKe == PwwZnyTUrc){zNpwpOHfoz = true;}
      else if(PwwZnyTUrc == rKbPznhAKe){WcDFlJZPbN = true;}
      if(AxKcfQusKc == umUMZpibfP){cEJmPVcJZV = true;}
      else if(umUMZpibfP == AxKcfQusKc){yAxJyIYaRL = true;}
      if(mINsTInGWp == DVUZwcFxpY){oobTNlcKpG = true;}
      else if(DVUZwcFxpY == mINsTInGWp){aqMPleREAx = true;}
      if(EicOspksTJ == NmfBSTMRNq){wfmGqgfxee = true;}
      else if(NmfBSTMRNq == EicOspksTJ){ERxWCbYSbG = true;}
      if(obUDdjrfOT == psEyNFhiCT){jmcqwngAmb = true;}
      else if(psEyNFhiCT == obUDdjrfOT){SFxbhuMDbk = true;}
      if(AtVfnixiwp == eVUNJtbVdK){oEKNPKkViE = true;}
      else if(eVUNJtbVdK == AtVfnixiwp){OVbbZeQnSH = true;}
      if(zadUZQTujo == rWeTOIGTsF){kwoiDwRDwh = true;}
      if(eCZAmLmJOi == cQNnYKRWLp){pfetkCLkXZ = true;}
      if(QIrCoKNxaJ == uVtVsrSRqY){FcXNQrVZpg = true;}
      while(rWeTOIGTsF == zadUZQTujo){qVOeJgCZGW = true;}
      while(cQNnYKRWLp == cQNnYKRWLp){jGzLsVtjgq = true;}
      while(uVtVsrSRqY == uVtVsrSRqY){RObPihpVxX = true;}
      if(rqnCySNkiF == true){rqnCySNkiF = false;}
      if(zNpwpOHfoz == true){zNpwpOHfoz = false;}
      if(cEJmPVcJZV == true){cEJmPVcJZV = false;}
      if(oobTNlcKpG == true){oobTNlcKpG = false;}
      if(wfmGqgfxee == true){wfmGqgfxee = false;}
      if(jmcqwngAmb == true){jmcqwngAmb = false;}
      if(oEKNPKkViE == true){oEKNPKkViE = false;}
      if(kwoiDwRDwh == true){kwoiDwRDwh = false;}
      if(pfetkCLkXZ == true){pfetkCLkXZ = false;}
      if(FcXNQrVZpg == true){FcXNQrVZpg = false;}
      if(uKNasnxtmA == true){uKNasnxtmA = false;}
      if(WcDFlJZPbN == true){WcDFlJZPbN = false;}
      if(yAxJyIYaRL == true){yAxJyIYaRL = false;}
      if(aqMPleREAx == true){aqMPleREAx = false;}
      if(ERxWCbYSbG == true){ERxWCbYSbG = false;}
      if(SFxbhuMDbk == true){SFxbhuMDbk = false;}
      if(OVbbZeQnSH == true){OVbbZeQnSH = false;}
      if(qVOeJgCZGW == true){qVOeJgCZGW = false;}
      if(jGzLsVtjgq == true){jGzLsVtjgq = false;}
      if(RObPihpVxX == true){RObPihpVxX = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class ADMOAMQNOS
{ 
  void CJSloHNQmY()
  { 
      bool AmNHzyYCYd = false;
      bool kpdYNpujXj = false;
      bool RAtsenmdVL = false;
      bool cknThTxFfL = false;
      bool QdmrCxlgjO = false;
      bool mYJfXArUcL = false;
      bool LtgMBzCKpt = false;
      bool roDMTnMBpg = false;
      bool CFtGYDaHuh = false;
      bool accUzVxaqD = false;
      bool uappWxUxMj = false;
      bool mqeuJGAZny = false;
      bool XtOITPLiMx = false;
      bool qlKmlaODja = false;
      bool hduLtiyhKs = false;
      bool VWmreBMhWG = false;
      bool kljOrBgrIh = false;
      bool qxpMPtyCOj = false;
      bool RdXSbTzRHk = false;
      bool OggcousfTr = false;
      string sBCxGZzjld;
      string OPXQlywVKd;
      string bTVgtbYYss;
      string BajQVkeWGN;
      string amBiQQzhFx;
      string gMzlGYeVCd;
      string AaqsbmfGtB;
      string SZPxCnRmQc;
      string bqSwMoayJw;
      string FITbMAwIGc;
      string ksmEdGwBiR;
      string HrEYBIItfm;
      string MgxywKFmjB;
      string qIfnriEORF;
      string rZOqnMDtZE;
      string rBcTQDunHT;
      string AJQgayMQgS;
      string EscZulSFJi;
      string GKNfJpfMWn;
      string mPGyEiJgQp;
      if(sBCxGZzjld == ksmEdGwBiR){AmNHzyYCYd = true;}
      else if(ksmEdGwBiR == sBCxGZzjld){uappWxUxMj = true;}
      if(OPXQlywVKd == HrEYBIItfm){kpdYNpujXj = true;}
      else if(HrEYBIItfm == OPXQlywVKd){mqeuJGAZny = true;}
      if(bTVgtbYYss == MgxywKFmjB){RAtsenmdVL = true;}
      else if(MgxywKFmjB == bTVgtbYYss){XtOITPLiMx = true;}
      if(BajQVkeWGN == qIfnriEORF){cknThTxFfL = true;}
      else if(qIfnriEORF == BajQVkeWGN){qlKmlaODja = true;}
      if(amBiQQzhFx == rZOqnMDtZE){QdmrCxlgjO = true;}
      else if(rZOqnMDtZE == amBiQQzhFx){hduLtiyhKs = true;}
      if(gMzlGYeVCd == rBcTQDunHT){mYJfXArUcL = true;}
      else if(rBcTQDunHT == gMzlGYeVCd){VWmreBMhWG = true;}
      if(AaqsbmfGtB == AJQgayMQgS){LtgMBzCKpt = true;}
      else if(AJQgayMQgS == AaqsbmfGtB){kljOrBgrIh = true;}
      if(SZPxCnRmQc == EscZulSFJi){roDMTnMBpg = true;}
      if(bqSwMoayJw == GKNfJpfMWn){CFtGYDaHuh = true;}
      if(FITbMAwIGc == mPGyEiJgQp){accUzVxaqD = true;}
      while(EscZulSFJi == SZPxCnRmQc){qxpMPtyCOj = true;}
      while(GKNfJpfMWn == GKNfJpfMWn){RdXSbTzRHk = true;}
      while(mPGyEiJgQp == mPGyEiJgQp){OggcousfTr = true;}
      if(AmNHzyYCYd == true){AmNHzyYCYd = false;}
      if(kpdYNpujXj == true){kpdYNpujXj = false;}
      if(RAtsenmdVL == true){RAtsenmdVL = false;}
      if(cknThTxFfL == true){cknThTxFfL = false;}
      if(QdmrCxlgjO == true){QdmrCxlgjO = false;}
      if(mYJfXArUcL == true){mYJfXArUcL = false;}
      if(LtgMBzCKpt == true){LtgMBzCKpt = false;}
      if(roDMTnMBpg == true){roDMTnMBpg = false;}
      if(CFtGYDaHuh == true){CFtGYDaHuh = false;}
      if(accUzVxaqD == true){accUzVxaqD = false;}
      if(uappWxUxMj == true){uappWxUxMj = false;}
      if(mqeuJGAZny == true){mqeuJGAZny = false;}
      if(XtOITPLiMx == true){XtOITPLiMx = false;}
      if(qlKmlaODja == true){qlKmlaODja = false;}
      if(hduLtiyhKs == true){hduLtiyhKs = false;}
      if(VWmreBMhWG == true){VWmreBMhWG = false;}
      if(kljOrBgrIh == true){kljOrBgrIh = false;}
      if(qxpMPtyCOj == true){qxpMPtyCOj = false;}
      if(RdXSbTzRHk == true){RdXSbTzRHk = false;}
      if(OggcousfTr == true){OggcousfTr = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class LJNOCQQAEZ
{ 
  void tgoWBwyKwS()
  { 
      bool HnQDAWhYTo = false;
      bool nXareunUqK = false;
      bool SIzrXYrFme = false;
      bool NjwxPdYJjR = false;
      bool eOEQqxHTIo = false;
      bool CnbLjznXea = false;
      bool ebknbDacbA = false;
      bool WejYfEDhBa = false;
      bool RXxxcZHkNQ = false;
      bool pAdImCcQom = false;
      bool VdrHRWDDef = false;
      bool uFWEJHemKB = false;
      bool wpPLKWAblc = false;
      bool amsNFmfofG = false;
      bool WEFgUjcZzf = false;
      bool WoFmqeOfxu = false;
      bool VbQCEIMJyW = false;
      bool apHEeqjhqa = false;
      bool sZcGFlhGWZ = false;
      bool XzqkjumDcM = false;
      string yEyfKFSNfq;
      string WVrUrmGgDU;
      string jkqJRprekF;
      string YaTWLxHwVl;
      string ukOXsyZuYo;
      string XUOVNMNoNU;
      string NmbZSwCVJu;
      string eKKQYzWTPT;
      string PwGwhDLxIy;
      string iShBYIInFx;
      string wDlcJMKxxO;
      string otYtEQgfrO;
      string kEMKMMcJrQ;
      string piNSWLJclU;
      string rNAtJntmwH;
      string acupMrqbQx;
      string jBFgXGfFWs;
      string HEtWWWDSAX;
      string SoMjoNmXGe;
      string UhMnjqITVD;
      if(yEyfKFSNfq == wDlcJMKxxO){HnQDAWhYTo = true;}
      else if(wDlcJMKxxO == yEyfKFSNfq){VdrHRWDDef = true;}
      if(WVrUrmGgDU == otYtEQgfrO){nXareunUqK = true;}
      else if(otYtEQgfrO == WVrUrmGgDU){uFWEJHemKB = true;}
      if(jkqJRprekF == kEMKMMcJrQ){SIzrXYrFme = true;}
      else if(kEMKMMcJrQ == jkqJRprekF){wpPLKWAblc = true;}
      if(YaTWLxHwVl == piNSWLJclU){NjwxPdYJjR = true;}
      else if(piNSWLJclU == YaTWLxHwVl){amsNFmfofG = true;}
      if(ukOXsyZuYo == rNAtJntmwH){eOEQqxHTIo = true;}
      else if(rNAtJntmwH == ukOXsyZuYo){WEFgUjcZzf = true;}
      if(XUOVNMNoNU == acupMrqbQx){CnbLjznXea = true;}
      else if(acupMrqbQx == XUOVNMNoNU){WoFmqeOfxu = true;}
      if(NmbZSwCVJu == jBFgXGfFWs){ebknbDacbA = true;}
      else if(jBFgXGfFWs == NmbZSwCVJu){VbQCEIMJyW = true;}
      if(eKKQYzWTPT == HEtWWWDSAX){WejYfEDhBa = true;}
      if(PwGwhDLxIy == SoMjoNmXGe){RXxxcZHkNQ = true;}
      if(iShBYIInFx == UhMnjqITVD){pAdImCcQom = true;}
      while(HEtWWWDSAX == eKKQYzWTPT){apHEeqjhqa = true;}
      while(SoMjoNmXGe == SoMjoNmXGe){sZcGFlhGWZ = true;}
      while(UhMnjqITVD == UhMnjqITVD){XzqkjumDcM = true;}
      if(HnQDAWhYTo == true){HnQDAWhYTo = false;}
      if(nXareunUqK == true){nXareunUqK = false;}
      if(SIzrXYrFme == true){SIzrXYrFme = false;}
      if(NjwxPdYJjR == true){NjwxPdYJjR = false;}
      if(eOEQqxHTIo == true){eOEQqxHTIo = false;}
      if(CnbLjznXea == true){CnbLjznXea = false;}
      if(ebknbDacbA == true){ebknbDacbA = false;}
      if(WejYfEDhBa == true){WejYfEDhBa = false;}
      if(RXxxcZHkNQ == true){RXxxcZHkNQ = false;}
      if(pAdImCcQom == true){pAdImCcQom = false;}
      if(VdrHRWDDef == true){VdrHRWDDef = false;}
      if(uFWEJHemKB == true){uFWEJHemKB = false;}
      if(wpPLKWAblc == true){wpPLKWAblc = false;}
      if(amsNFmfofG == true){amsNFmfofG = false;}
      if(WEFgUjcZzf == true){WEFgUjcZzf = false;}
      if(WoFmqeOfxu == true){WoFmqeOfxu = false;}
      if(VbQCEIMJyW == true){VbQCEIMJyW = false;}
      if(apHEeqjhqa == true){apHEeqjhqa = false;}
      if(sZcGFlhGWZ == true){sZcGFlhGWZ = false;}
      if(XzqkjumDcM == true){XzqkjumDcM = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class URFHKBIQDY
{ 
  void JgFpxmZruq()
  { 
      bool abQNtmIOIj = false;
      bool CatnInNZgt = false;
      bool AdbOTrBMqX = false;
      bool StGAMUFMFk = false;
      bool GhBUQMbIjo = false;
      bool VJgAhwzCsC = false;
      bool lwWjQHUtbm = false;
      bool hBTwnRcHxH = false;
      bool QrbCBJNGSP = false;
      bool VDTDyKKRDI = false;
      bool rggwHUojMP = false;
      bool TrEkltTUhH = false;
      bool tOaLRdhQyd = false;
      bool HKEoPiKftg = false;
      bool TdtDudyhRE = false;
      bool ppiuNdFUec = false;
      bool mYliHImPVD = false;
      bool inZBnQTXPn = false;
      bool ezzsmQbJal = false;
      bool cpAQstqLum = false;
      string AFKBByqUKf;
      string NlZcCgUKBD;
      string exPuWdxQGf;
      string mHWcJUuoSW;
      string ihXpEDeIMw;
      string LcOkkCoOeX;
      string BaOdrFOxTh;
      string lfreTxZZpS;
      string ynDJUKslrG;
      string efKuVITsyz;
      string nhoeKfkiQm;
      string cPXLYMWEJg;
      string McFMCFVwIK;
      string dfaqdQyYyn;
      string YJUEdPIyVI;
      string lOjQmLccbF;
      string KnZGJwnggI;
      string NyFUICIBhm;
      string wWaAYOwKES;
      string nVxscjiOth;
      if(AFKBByqUKf == nhoeKfkiQm){abQNtmIOIj = true;}
      else if(nhoeKfkiQm == AFKBByqUKf){rggwHUojMP = true;}
      if(NlZcCgUKBD == cPXLYMWEJg){CatnInNZgt = true;}
      else if(cPXLYMWEJg == NlZcCgUKBD){TrEkltTUhH = true;}
      if(exPuWdxQGf == McFMCFVwIK){AdbOTrBMqX = true;}
      else if(McFMCFVwIK == exPuWdxQGf){tOaLRdhQyd = true;}
      if(mHWcJUuoSW == dfaqdQyYyn){StGAMUFMFk = true;}
      else if(dfaqdQyYyn == mHWcJUuoSW){HKEoPiKftg = true;}
      if(ihXpEDeIMw == YJUEdPIyVI){GhBUQMbIjo = true;}
      else if(YJUEdPIyVI == ihXpEDeIMw){TdtDudyhRE = true;}
      if(LcOkkCoOeX == lOjQmLccbF){VJgAhwzCsC = true;}
      else if(lOjQmLccbF == LcOkkCoOeX){ppiuNdFUec = true;}
      if(BaOdrFOxTh == KnZGJwnggI){lwWjQHUtbm = true;}
      else if(KnZGJwnggI == BaOdrFOxTh){mYliHImPVD = true;}
      if(lfreTxZZpS == NyFUICIBhm){hBTwnRcHxH = true;}
      if(ynDJUKslrG == wWaAYOwKES){QrbCBJNGSP = true;}
      if(efKuVITsyz == nVxscjiOth){VDTDyKKRDI = true;}
      while(NyFUICIBhm == lfreTxZZpS){inZBnQTXPn = true;}
      while(wWaAYOwKES == wWaAYOwKES){ezzsmQbJal = true;}
      while(nVxscjiOth == nVxscjiOth){cpAQstqLum = true;}
      if(abQNtmIOIj == true){abQNtmIOIj = false;}
      if(CatnInNZgt == true){CatnInNZgt = false;}
      if(AdbOTrBMqX == true){AdbOTrBMqX = false;}
      if(StGAMUFMFk == true){StGAMUFMFk = false;}
      if(GhBUQMbIjo == true){GhBUQMbIjo = false;}
      if(VJgAhwzCsC == true){VJgAhwzCsC = false;}
      if(lwWjQHUtbm == true){lwWjQHUtbm = false;}
      if(hBTwnRcHxH == true){hBTwnRcHxH = false;}
      if(QrbCBJNGSP == true){QrbCBJNGSP = false;}
      if(VDTDyKKRDI == true){VDTDyKKRDI = false;}
      if(rggwHUojMP == true){rggwHUojMP = false;}
      if(TrEkltTUhH == true){TrEkltTUhH = false;}
      if(tOaLRdhQyd == true){tOaLRdhQyd = false;}
      if(HKEoPiKftg == true){HKEoPiKftg = false;}
      if(TdtDudyhRE == true){TdtDudyhRE = false;}
      if(ppiuNdFUec == true){ppiuNdFUec = false;}
      if(mYliHImPVD == true){mYliHImPVD = false;}
      if(inZBnQTXPn == true){inZBnQTXPn = false;}
      if(ezzsmQbJal == true){ezzsmQbJal = false;}
      if(cpAQstqLum == true){cpAQstqLum = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class DPHVSJJBYS
{ 
  void UXLrMMbyZR()
  { 
      bool BSjfrJohpC = false;
      bool wRbQnBWJMP = false;
      bool fMCrOxFYrd = false;
      bool NudfPxzTqy = false;
      bool eKBJeVaRsZ = false;
      bool nOYctoQqQt = false;
      bool DQpLnAmuBp = false;
      bool BDROkVLrMr = false;
      bool VmeSpzWBka = false;
      bool gHCwtNToVe = false;
      bool ieQCXjwJqY = false;
      bool dXeYYPkXVn = false;
      bool dlKaJtAVUW = false;
      bool BVWhJqWbtF = false;
      bool DNJMxIcdXd = false;
      bool bwSgBxUosd = false;
      bool jZoUWHBxOg = false;
      bool sJdPjQbxdA = false;
      bool RWyptFCpgM = false;
      bool VgiPVdXnpo = false;
      string alcHTaTfrs;
      string KrPAozrxQy;
      string nbkWKbEmsb;
      string jVVnUiDaDE;
      string leyLfnOXNA;
      string qxhmKyAFwq;
      string VgmQJoVbeG;
      string uRsLMJdYqW;
      string NgYrklmhcV;
      string hxdLiFrhCp;
      string RlsHEYEWaB;
      string UbOZdoHufW;
      string CnyIXyngcG;
      string QuWAFamRnL;
      string hQGbBGhEhs;
      string ywCencmjiF;
      string kWsUjZEOTC;
      string BoHTolgVHR;
      string QiziHUsqMb;
      string mDihaKXlra;
      if(alcHTaTfrs == RlsHEYEWaB){BSjfrJohpC = true;}
      else if(RlsHEYEWaB == alcHTaTfrs){ieQCXjwJqY = true;}
      if(KrPAozrxQy == UbOZdoHufW){wRbQnBWJMP = true;}
      else if(UbOZdoHufW == KrPAozrxQy){dXeYYPkXVn = true;}
      if(nbkWKbEmsb == CnyIXyngcG){fMCrOxFYrd = true;}
      else if(CnyIXyngcG == nbkWKbEmsb){dlKaJtAVUW = true;}
      if(jVVnUiDaDE == QuWAFamRnL){NudfPxzTqy = true;}
      else if(QuWAFamRnL == jVVnUiDaDE){BVWhJqWbtF = true;}
      if(leyLfnOXNA == hQGbBGhEhs){eKBJeVaRsZ = true;}
      else if(hQGbBGhEhs == leyLfnOXNA){DNJMxIcdXd = true;}
      if(qxhmKyAFwq == ywCencmjiF){nOYctoQqQt = true;}
      else if(ywCencmjiF == qxhmKyAFwq){bwSgBxUosd = true;}
      if(VgmQJoVbeG == kWsUjZEOTC){DQpLnAmuBp = true;}
      else if(kWsUjZEOTC == VgmQJoVbeG){jZoUWHBxOg = true;}
      if(uRsLMJdYqW == BoHTolgVHR){BDROkVLrMr = true;}
      if(NgYrklmhcV == QiziHUsqMb){VmeSpzWBka = true;}
      if(hxdLiFrhCp == mDihaKXlra){gHCwtNToVe = true;}
      while(BoHTolgVHR == uRsLMJdYqW){sJdPjQbxdA = true;}
      while(QiziHUsqMb == QiziHUsqMb){RWyptFCpgM = true;}
      while(mDihaKXlra == mDihaKXlra){VgiPVdXnpo = true;}
      if(BSjfrJohpC == true){BSjfrJohpC = false;}
      if(wRbQnBWJMP == true){wRbQnBWJMP = false;}
      if(fMCrOxFYrd == true){fMCrOxFYrd = false;}
      if(NudfPxzTqy == true){NudfPxzTqy = false;}
      if(eKBJeVaRsZ == true){eKBJeVaRsZ = false;}
      if(nOYctoQqQt == true){nOYctoQqQt = false;}
      if(DQpLnAmuBp == true){DQpLnAmuBp = false;}
      if(BDROkVLrMr == true){BDROkVLrMr = false;}
      if(VmeSpzWBka == true){VmeSpzWBka = false;}
      if(gHCwtNToVe == true){gHCwtNToVe = false;}
      if(ieQCXjwJqY == true){ieQCXjwJqY = false;}
      if(dXeYYPkXVn == true){dXeYYPkXVn = false;}
      if(dlKaJtAVUW == true){dlKaJtAVUW = false;}
      if(BVWhJqWbtF == true){BVWhJqWbtF = false;}
      if(DNJMxIcdXd == true){DNJMxIcdXd = false;}
      if(bwSgBxUosd == true){bwSgBxUosd = false;}
      if(jZoUWHBxOg == true){jZoUWHBxOg = false;}
      if(sJdPjQbxdA == true){sJdPjQbxdA = false;}
      if(RWyptFCpgM == true){RWyptFCpgM = false;}
      if(VgiPVdXnpo == true){VgiPVdXnpo = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class TUDKTDDABM
{ 
  void IBFOrjZBoV()
  { 
      bool LRSEjnijcO = false;
      bool IsdSIIeNXE = false;
      bool qkxYmmROMy = false;
      bool QxrXjCQARi = false;
      bool mEWYtBGqfP = false;
      bool BSfWLaUsRw = false;
      bool WTXexKAGiG = false;
      bool qdwoRlOYek = false;
      bool faixxyRVMJ = false;
      bool hXiUMSgqai = false;
      bool AAIZXWWqEY = false;
      bool MuOfPwkZhz = false;
      bool sesZXTtacy = false;
      bool EWxujfRJZZ = false;
      bool aaRmwlICFP = false;
      bool hGJbpVHhBD = false;
      bool buNFToyTwj = false;
      bool daAHXRNFcl = false;
      bool LrVMQyNVEN = false;
      bool XjIVyeMLTH = false;
      string VActVcPFRd;
      string sRtldrSmaM;
      string FwyhckHdWa;
      string qcdlAsiCPs;
      string EoNnYBrBtI;
      string mzGrAZCtRk;
      string VkiplQnIkk;
      string JPWhHPhJJa;
      string sGiOnrVkla;
      string pnkeXSGXBI;
      string NjPJyWbYkj;
      string qskprPCTCt;
      string uCVKtVerJn;
      string JKHANJpZQQ;
      string PwACixCumI;
      string QmUHNKNFPb;
      string rjPwagkjbh;
      string YbDkdyCTaw;
      string TjFBXVoAmD;
      string ukKnXfgEaC;
      if(VActVcPFRd == NjPJyWbYkj){LRSEjnijcO = true;}
      else if(NjPJyWbYkj == VActVcPFRd){AAIZXWWqEY = true;}
      if(sRtldrSmaM == qskprPCTCt){IsdSIIeNXE = true;}
      else if(qskprPCTCt == sRtldrSmaM){MuOfPwkZhz = true;}
      if(FwyhckHdWa == uCVKtVerJn){qkxYmmROMy = true;}
      else if(uCVKtVerJn == FwyhckHdWa){sesZXTtacy = true;}
      if(qcdlAsiCPs == JKHANJpZQQ){QxrXjCQARi = true;}
      else if(JKHANJpZQQ == qcdlAsiCPs){EWxujfRJZZ = true;}
      if(EoNnYBrBtI == PwACixCumI){mEWYtBGqfP = true;}
      else if(PwACixCumI == EoNnYBrBtI){aaRmwlICFP = true;}
      if(mzGrAZCtRk == QmUHNKNFPb){BSfWLaUsRw = true;}
      else if(QmUHNKNFPb == mzGrAZCtRk){hGJbpVHhBD = true;}
      if(VkiplQnIkk == rjPwagkjbh){WTXexKAGiG = true;}
      else if(rjPwagkjbh == VkiplQnIkk){buNFToyTwj = true;}
      if(JPWhHPhJJa == YbDkdyCTaw){qdwoRlOYek = true;}
      if(sGiOnrVkla == TjFBXVoAmD){faixxyRVMJ = true;}
      if(pnkeXSGXBI == ukKnXfgEaC){hXiUMSgqai = true;}
      while(YbDkdyCTaw == JPWhHPhJJa){daAHXRNFcl = true;}
      while(TjFBXVoAmD == TjFBXVoAmD){LrVMQyNVEN = true;}
      while(ukKnXfgEaC == ukKnXfgEaC){XjIVyeMLTH = true;}
      if(LRSEjnijcO == true){LRSEjnijcO = false;}
      if(IsdSIIeNXE == true){IsdSIIeNXE = false;}
      if(qkxYmmROMy == true){qkxYmmROMy = false;}
      if(QxrXjCQARi == true){QxrXjCQARi = false;}
      if(mEWYtBGqfP == true){mEWYtBGqfP = false;}
      if(BSfWLaUsRw == true){BSfWLaUsRw = false;}
      if(WTXexKAGiG == true){WTXexKAGiG = false;}
      if(qdwoRlOYek == true){qdwoRlOYek = false;}
      if(faixxyRVMJ == true){faixxyRVMJ = false;}
      if(hXiUMSgqai == true){hXiUMSgqai = false;}
      if(AAIZXWWqEY == true){AAIZXWWqEY = false;}
      if(MuOfPwkZhz == true){MuOfPwkZhz = false;}
      if(sesZXTtacy == true){sesZXTtacy = false;}
      if(EWxujfRJZZ == true){EWxujfRJZZ = false;}
      if(aaRmwlICFP == true){aaRmwlICFP = false;}
      if(hGJbpVHhBD == true){hGJbpVHhBD = false;}
      if(buNFToyTwj == true){buNFToyTwj = false;}
      if(daAHXRNFcl == true){daAHXRNFcl = false;}
      if(LrVMQyNVEN == true){LrVMQyNVEN = false;}
      if(XjIVyeMLTH == true){XjIVyeMLTH = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class LSKHMRBJIH
{ 
  void OmlFVMDQis()
  { 
      bool uJZZEkxzQs = false;
      bool VhjObUnaKi = false;
      bool EdTcKpXQqW = false;
      bool zQTyoRFAkU = false;
      bool wBVgDHJzFR = false;
      bool frCZDQoxPN = false;
      bool NgHttFNkYJ = false;
      bool OmpomDIlYC = false;
      bool fXKZpGNtuX = false;
      bool bHkWHOsblx = false;
      bool tYawCrBNmA = false;
      bool ICYMgoWhDn = false;
      bool rTpBhHCTgX = false;
      bool JgAaIHxNXy = false;
      bool FAHtOYiYoR = false;
      bool rLXyFaiYNt = false;
      bool phfOqbCxDZ = false;
      bool rIJFhrMumI = false;
      bool XcdPfxIBVg = false;
      bool YYAcIWTrDm = false;
      string pcpXCKcZcc;
      string DAKgguTnbc;
      string AfnDRXlWWP;
      string ATTpKMaIHj;
      string cgGLzmukOD;
      string TymulKomFd;
      string XGCMcjfUWT;
      string TLfqATYcDe;
      string bAHTuBfYEA;
      string XnCcMVdthP;
      string GaOtiIRwtR;
      string kLiaCWyiQa;
      string DHPWwfICed;
      string oetnYBlMkm;
      string jjdlOMEbao;
      string XucHMzLryC;
      string APQQcGQuBA;
      string klydqScdHj;
      string afaoGsBmaY;
      string ptOhlTTMJI;
      if(pcpXCKcZcc == GaOtiIRwtR){uJZZEkxzQs = true;}
      else if(GaOtiIRwtR == pcpXCKcZcc){tYawCrBNmA = true;}
      if(DAKgguTnbc == kLiaCWyiQa){VhjObUnaKi = true;}
      else if(kLiaCWyiQa == DAKgguTnbc){ICYMgoWhDn = true;}
      if(AfnDRXlWWP == DHPWwfICed){EdTcKpXQqW = true;}
      else if(DHPWwfICed == AfnDRXlWWP){rTpBhHCTgX = true;}
      if(ATTpKMaIHj == oetnYBlMkm){zQTyoRFAkU = true;}
      else if(oetnYBlMkm == ATTpKMaIHj){JgAaIHxNXy = true;}
      if(cgGLzmukOD == jjdlOMEbao){wBVgDHJzFR = true;}
      else if(jjdlOMEbao == cgGLzmukOD){FAHtOYiYoR = true;}
      if(TymulKomFd == XucHMzLryC){frCZDQoxPN = true;}
      else if(XucHMzLryC == TymulKomFd){rLXyFaiYNt = true;}
      if(XGCMcjfUWT == APQQcGQuBA){NgHttFNkYJ = true;}
      else if(APQQcGQuBA == XGCMcjfUWT){phfOqbCxDZ = true;}
      if(TLfqATYcDe == klydqScdHj){OmpomDIlYC = true;}
      if(bAHTuBfYEA == afaoGsBmaY){fXKZpGNtuX = true;}
      if(XnCcMVdthP == ptOhlTTMJI){bHkWHOsblx = true;}
      while(klydqScdHj == TLfqATYcDe){rIJFhrMumI = true;}
      while(afaoGsBmaY == afaoGsBmaY){XcdPfxIBVg = true;}
      while(ptOhlTTMJI == ptOhlTTMJI){YYAcIWTrDm = true;}
      if(uJZZEkxzQs == true){uJZZEkxzQs = false;}
      if(VhjObUnaKi == true){VhjObUnaKi = false;}
      if(EdTcKpXQqW == true){EdTcKpXQqW = false;}
      if(zQTyoRFAkU == true){zQTyoRFAkU = false;}
      if(wBVgDHJzFR == true){wBVgDHJzFR = false;}
      if(frCZDQoxPN == true){frCZDQoxPN = false;}
      if(NgHttFNkYJ == true){NgHttFNkYJ = false;}
      if(OmpomDIlYC == true){OmpomDIlYC = false;}
      if(fXKZpGNtuX == true){fXKZpGNtuX = false;}
      if(bHkWHOsblx == true){bHkWHOsblx = false;}
      if(tYawCrBNmA == true){tYawCrBNmA = false;}
      if(ICYMgoWhDn == true){ICYMgoWhDn = false;}
      if(rTpBhHCTgX == true){rTpBhHCTgX = false;}
      if(JgAaIHxNXy == true){JgAaIHxNXy = false;}
      if(FAHtOYiYoR == true){FAHtOYiYoR = false;}
      if(rLXyFaiYNt == true){rLXyFaiYNt = false;}
      if(phfOqbCxDZ == true){phfOqbCxDZ = false;}
      if(rIJFhrMumI == true){rIJFhrMumI = false;}
      if(XcdPfxIBVg == true){XcdPfxIBVg = false;}
      if(YYAcIWTrDm == true){YYAcIWTrDm = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class ROHSMNXHIJ
{ 
  void oVLwjBcWeG()
  { 
      bool IBTzdrumNR = false;
      bool ILefcuozpc = false;
      bool EqdGMOshWg = false;
      bool rVnZepaYRa = false;
      bool SPzzrCIwxC = false;
      bool NejRVQXMlP = false;
      bool zMPfYlXFBl = false;
      bool UPhOJnrdOK = false;
      bool FwjTTMkVDN = false;
      bool SNlBbGzSZF = false;
      bool eDuKhxxVIg = false;
      bool XsxbJCcuMM = false;
      bool BBBmTGcflD = false;
      bool oYDJfCAYlV = false;
      bool OPNWoYPKrZ = false;
      bool dDGNEcBIqa = false;
      bool URiErzonuH = false;
      bool BDJpxknext = false;
      bool pSnLZkSpFD = false;
      bool BrhKBxfIdp = false;
      string tAMsQknYfT;
      string CyHZXaFWwd;
      string GBeVnIdHIW;
      string sHmmrwmtPM;
      string NbZXfwjusz;
      string WRIJpsVpFH;
      string GfPIauKTga;
      string mLGjQeaHpq;
      string YhOJAaydxz;
      string axoIFgLQxk;
      string lQNSLLLYsK;
      string ROANhXRGIz;
      string wgVhzpVydi;
      string SKKFFIUuxn;
      string PZjmhMxbZh;
      string OEHxnEtfSV;
      string pMuJqHEuHZ;
      string DVJUjWwiAm;
      string rtXuTOCMQA;
      string NncayCeZua;
      if(tAMsQknYfT == lQNSLLLYsK){IBTzdrumNR = true;}
      else if(lQNSLLLYsK == tAMsQknYfT){eDuKhxxVIg = true;}
      if(CyHZXaFWwd == ROANhXRGIz){ILefcuozpc = true;}
      else if(ROANhXRGIz == CyHZXaFWwd){XsxbJCcuMM = true;}
      if(GBeVnIdHIW == wgVhzpVydi){EqdGMOshWg = true;}
      else if(wgVhzpVydi == GBeVnIdHIW){BBBmTGcflD = true;}
      if(sHmmrwmtPM == SKKFFIUuxn){rVnZepaYRa = true;}
      else if(SKKFFIUuxn == sHmmrwmtPM){oYDJfCAYlV = true;}
      if(NbZXfwjusz == PZjmhMxbZh){SPzzrCIwxC = true;}
      else if(PZjmhMxbZh == NbZXfwjusz){OPNWoYPKrZ = true;}
      if(WRIJpsVpFH == OEHxnEtfSV){NejRVQXMlP = true;}
      else if(OEHxnEtfSV == WRIJpsVpFH){dDGNEcBIqa = true;}
      if(GfPIauKTga == pMuJqHEuHZ){zMPfYlXFBl = true;}
      else if(pMuJqHEuHZ == GfPIauKTga){URiErzonuH = true;}
      if(mLGjQeaHpq == DVJUjWwiAm){UPhOJnrdOK = true;}
      if(YhOJAaydxz == rtXuTOCMQA){FwjTTMkVDN = true;}
      if(axoIFgLQxk == NncayCeZua){SNlBbGzSZF = true;}
      while(DVJUjWwiAm == mLGjQeaHpq){BDJpxknext = true;}
      while(rtXuTOCMQA == rtXuTOCMQA){pSnLZkSpFD = true;}
      while(NncayCeZua == NncayCeZua){BrhKBxfIdp = true;}
      if(IBTzdrumNR == true){IBTzdrumNR = false;}
      if(ILefcuozpc == true){ILefcuozpc = false;}
      if(EqdGMOshWg == true){EqdGMOshWg = false;}
      if(rVnZepaYRa == true){rVnZepaYRa = false;}
      if(SPzzrCIwxC == true){SPzzrCIwxC = false;}
      if(NejRVQXMlP == true){NejRVQXMlP = false;}
      if(zMPfYlXFBl == true){zMPfYlXFBl = false;}
      if(UPhOJnrdOK == true){UPhOJnrdOK = false;}
      if(FwjTTMkVDN == true){FwjTTMkVDN = false;}
      if(SNlBbGzSZF == true){SNlBbGzSZF = false;}
      if(eDuKhxxVIg == true){eDuKhxxVIg = false;}
      if(XsxbJCcuMM == true){XsxbJCcuMM = false;}
      if(BBBmTGcflD == true){BBBmTGcflD = false;}
      if(oYDJfCAYlV == true){oYDJfCAYlV = false;}
      if(OPNWoYPKrZ == true){OPNWoYPKrZ = false;}
      if(dDGNEcBIqa == true){dDGNEcBIqa = false;}
      if(URiErzonuH == true){URiErzonuH = false;}
      if(BDJpxknext == true){BDJpxknext = false;}
      if(pSnLZkSpFD == true){pSnLZkSpFD = false;}
      if(BrhKBxfIdp == true){BrhKBxfIdp = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class XOPYSPIYUW
{ 
  void zzhQONbnOH()
  { 
      bool DVsAAYPNxw = false;
      bool kDMMuBqSLg = false;
      bool bsORorGJDk = false;
      bool kXqDaBCltR = false;
      bool uHyJpobJRe = false;
      bool IerPHJHaKI = false;
      bool RGKLKNMJls = false;
      bool yEXskTtEbA = false;
      bool PxqXcFeauQ = false;
      bool tbalzoxmzc = false;
      bool bSWXfDHyen = false;
      bool OCzKrUOlhE = false;
      bool hlNUzWcltu = false;
      bool VHFyXwZSrZ = false;
      bool yfuHBqcQse = false;
      bool aLEttpFCYJ = false;
      bool ZUDiRHwAlw = false;
      bool tutIFCpGTI = false;
      bool tMrPUKCLDh = false;
      bool pXthzdbMot = false;
      string AKsVHmxPLs;
      string SPNKtVkyYz;
      string lHPcHiCcCp;
      string BXhFqILiap;
      string MBenTacoAp;
      string hXXgasuPOY;
      string jTNUrthITk;
      string JCXhlkcaJg;
      string FMcLIdAAey;
      string NwTBFsmJwY;
      string sUVOfeAouo;
      string QTFgSXqBMO;
      string tgcUXNhVbs;
      string xSdkmjpNec;
      string cKFogspmih;
      string ClxheLqAqS;
      string wdMBrxpUsh;
      string gcVikiannd;
      string XumtpLVwFb;
      string soVMfzxDxj;
      if(AKsVHmxPLs == sUVOfeAouo){DVsAAYPNxw = true;}
      else if(sUVOfeAouo == AKsVHmxPLs){bSWXfDHyen = true;}
      if(SPNKtVkyYz == QTFgSXqBMO){kDMMuBqSLg = true;}
      else if(QTFgSXqBMO == SPNKtVkyYz){OCzKrUOlhE = true;}
      if(lHPcHiCcCp == tgcUXNhVbs){bsORorGJDk = true;}
      else if(tgcUXNhVbs == lHPcHiCcCp){hlNUzWcltu = true;}
      if(BXhFqILiap == xSdkmjpNec){kXqDaBCltR = true;}
      else if(xSdkmjpNec == BXhFqILiap){VHFyXwZSrZ = true;}
      if(MBenTacoAp == cKFogspmih){uHyJpobJRe = true;}
      else if(cKFogspmih == MBenTacoAp){yfuHBqcQse = true;}
      if(hXXgasuPOY == ClxheLqAqS){IerPHJHaKI = true;}
      else if(ClxheLqAqS == hXXgasuPOY){aLEttpFCYJ = true;}
      if(jTNUrthITk == wdMBrxpUsh){RGKLKNMJls = true;}
      else if(wdMBrxpUsh == jTNUrthITk){ZUDiRHwAlw = true;}
      if(JCXhlkcaJg == gcVikiannd){yEXskTtEbA = true;}
      if(FMcLIdAAey == XumtpLVwFb){PxqXcFeauQ = true;}
      if(NwTBFsmJwY == soVMfzxDxj){tbalzoxmzc = true;}
      while(gcVikiannd == JCXhlkcaJg){tutIFCpGTI = true;}
      while(XumtpLVwFb == XumtpLVwFb){tMrPUKCLDh = true;}
      while(soVMfzxDxj == soVMfzxDxj){pXthzdbMot = true;}
      if(DVsAAYPNxw == true){DVsAAYPNxw = false;}
      if(kDMMuBqSLg == true){kDMMuBqSLg = false;}
      if(bsORorGJDk == true){bsORorGJDk = false;}
      if(kXqDaBCltR == true){kXqDaBCltR = false;}
      if(uHyJpobJRe == true){uHyJpobJRe = false;}
      if(IerPHJHaKI == true){IerPHJHaKI = false;}
      if(RGKLKNMJls == true){RGKLKNMJls = false;}
      if(yEXskTtEbA == true){yEXskTtEbA = false;}
      if(PxqXcFeauQ == true){PxqXcFeauQ = false;}
      if(tbalzoxmzc == true){tbalzoxmzc = false;}
      if(bSWXfDHyen == true){bSWXfDHyen = false;}
      if(OCzKrUOlhE == true){OCzKrUOlhE = false;}
      if(hlNUzWcltu == true){hlNUzWcltu = false;}
      if(VHFyXwZSrZ == true){VHFyXwZSrZ = false;}
      if(yfuHBqcQse == true){yfuHBqcQse = false;}
      if(aLEttpFCYJ == true){aLEttpFCYJ = false;}
      if(ZUDiRHwAlw == true){ZUDiRHwAlw = false;}
      if(tutIFCpGTI == true){tutIFCpGTI = false;}
      if(tMrPUKCLDh == true){tMrPUKCLDh = false;}
      if(pXthzdbMot == true){pXthzdbMot = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class ACDIEKERUG
{ 
  void YCNlabLIBa()
  { 
      bool mILYxLaXOw = false;
      bool SttGjalQkQ = false;
      bool ZDlOKTuktR = false;
      bool OsccwMcDKc = false;
      bool FNwKMmufYY = false;
      bool BrqOWiVwOd = false;
      bool PpdxhYRRJW = false;
      bool yiGHKMHbCW = false;
      bool XPMUQVCNFM = false;
      bool qfofNPizcm = false;
      bool VdVBaSkiDJ = false;
      bool bttqFzcJgL = false;
      bool WDLwfRsZtt = false;
      bool dIzOAttLtx = false;
      bool kSJukwkxaN = false;
      bool mYSQQSRYVI = false;
      bool YKoIfTufqK = false;
      bool FRPiaDsPLj = false;
      bool gwzfHEohyh = false;
      bool bUplYadBPR = false;
      string xPcWaViPhg;
      string csclqqaiGI;
      string LxIFcaiTPx;
      string LBJNaFuNtP;
      string UdOyCwDROY;
      string WzexhzGXtz;
      string mPzkUbjPLl;
      string uMoqngiKCf;
      string WRFqZMVLea;
      string zXStcEddca;
      string MmFccJJmJB;
      string QwVNbUKIKI;
      string GXkjlXttOi;
      string DEgbTjLcNQ;
      string ChCcJCCFRH;
      string tVSUUnBUpF;
      string POYZyMPstr;
      string JhttFXVHai;
      string VncHoglLHe;
      string hplIAmJbex;
      if(xPcWaViPhg == MmFccJJmJB){mILYxLaXOw = true;}
      else if(MmFccJJmJB == xPcWaViPhg){VdVBaSkiDJ = true;}
      if(csclqqaiGI == QwVNbUKIKI){SttGjalQkQ = true;}
      else if(QwVNbUKIKI == csclqqaiGI){bttqFzcJgL = true;}
      if(LxIFcaiTPx == GXkjlXttOi){ZDlOKTuktR = true;}
      else if(GXkjlXttOi == LxIFcaiTPx){WDLwfRsZtt = true;}
      if(LBJNaFuNtP == DEgbTjLcNQ){OsccwMcDKc = true;}
      else if(DEgbTjLcNQ == LBJNaFuNtP){dIzOAttLtx = true;}
      if(UdOyCwDROY == ChCcJCCFRH){FNwKMmufYY = true;}
      else if(ChCcJCCFRH == UdOyCwDROY){kSJukwkxaN = true;}
      if(WzexhzGXtz == tVSUUnBUpF){BrqOWiVwOd = true;}
      else if(tVSUUnBUpF == WzexhzGXtz){mYSQQSRYVI = true;}
      if(mPzkUbjPLl == POYZyMPstr){PpdxhYRRJW = true;}
      else if(POYZyMPstr == mPzkUbjPLl){YKoIfTufqK = true;}
      if(uMoqngiKCf == JhttFXVHai){yiGHKMHbCW = true;}
      if(WRFqZMVLea == VncHoglLHe){XPMUQVCNFM = true;}
      if(zXStcEddca == hplIAmJbex){qfofNPizcm = true;}
      while(JhttFXVHai == uMoqngiKCf){FRPiaDsPLj = true;}
      while(VncHoglLHe == VncHoglLHe){gwzfHEohyh = true;}
      while(hplIAmJbex == hplIAmJbex){bUplYadBPR = true;}
      if(mILYxLaXOw == true){mILYxLaXOw = false;}
      if(SttGjalQkQ == true){SttGjalQkQ = false;}
      if(ZDlOKTuktR == true){ZDlOKTuktR = false;}
      if(OsccwMcDKc == true){OsccwMcDKc = false;}
      if(FNwKMmufYY == true){FNwKMmufYY = false;}
      if(BrqOWiVwOd == true){BrqOWiVwOd = false;}
      if(PpdxhYRRJW == true){PpdxhYRRJW = false;}
      if(yiGHKMHbCW == true){yiGHKMHbCW = false;}
      if(XPMUQVCNFM == true){XPMUQVCNFM = false;}
      if(qfofNPizcm == true){qfofNPizcm = false;}
      if(VdVBaSkiDJ == true){VdVBaSkiDJ = false;}
      if(bttqFzcJgL == true){bttqFzcJgL = false;}
      if(WDLwfRsZtt == true){WDLwfRsZtt = false;}
      if(dIzOAttLtx == true){dIzOAttLtx = false;}
      if(kSJukwkxaN == true){kSJukwkxaN = false;}
      if(mYSQQSRYVI == true){mYSQQSRYVI = false;}
      if(YKoIfTufqK == true){YKoIfTufqK = false;}
      if(FRPiaDsPLj == true){FRPiaDsPLj = false;}
      if(gwzfHEohyh == true){gwzfHEohyh = false;}
      if(bUplYadBPR == true){bUplYadBPR = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class JQNGSJCGIF
{ 
  void crCWOxGwCw()
  { 
      bool atVqXsZZGx = false;
      bool CIzwyLNhVe = false;
      bool jDSdoynExc = false;
      bool tNHKmaGRjp = false;
      bool iBAIGmiEIC = false;
      bool udygJXbqCY = false;
      bool EVcdCoAnJW = false;
      bool EwyewiDJWB = false;
      bool PjuuhQOaAP = false;
      bool yOOKkMXWFQ = false;
      bool lttlxyfTja = false;
      bool TSTBJUahul = false;
      bool aZmsXogmti = false;
      bool KgEFOVoIxi = false;
      bool kupZufuNBQ = false;
      bool kpaSpMGBNI = false;
      bool QrZBQmNNln = false;
      bool eSjMBfiNyq = false;
      bool tTlcyTFkPC = false;
      bool OntoRrUoJH = false;
      string gFQHQktLSi;
      string GZyIPIuxhB;
      string PwhFkgNZnf;
      string ZrUpQTOPXx;
      string BukVdxHIFD;
      string EimXEjWKWj;
      string XTXmJOFIrw;
      string seZkATKMam;
      string YEUkapExlf;
      string wDsnYhXxMP;
      string rzQJJZJCXj;
      string ZKjiKTzlMS;
      string JHVLzollLR;
      string uNALtZmKaB;
      string gCZBGkTJcE;
      string hlksFkcEKT;
      string mWpFoLKYnk;
      string goLKlHhUFN;
      string VbJHjJbGGJ;
      string whAHNJMUMt;
      if(gFQHQktLSi == rzQJJZJCXj){atVqXsZZGx = true;}
      else if(rzQJJZJCXj == gFQHQktLSi){lttlxyfTja = true;}
      if(GZyIPIuxhB == ZKjiKTzlMS){CIzwyLNhVe = true;}
      else if(ZKjiKTzlMS == GZyIPIuxhB){TSTBJUahul = true;}
      if(PwhFkgNZnf == JHVLzollLR){jDSdoynExc = true;}
      else if(JHVLzollLR == PwhFkgNZnf){aZmsXogmti = true;}
      if(ZrUpQTOPXx == uNALtZmKaB){tNHKmaGRjp = true;}
      else if(uNALtZmKaB == ZrUpQTOPXx){KgEFOVoIxi = true;}
      if(BukVdxHIFD == gCZBGkTJcE){iBAIGmiEIC = true;}
      else if(gCZBGkTJcE == BukVdxHIFD){kupZufuNBQ = true;}
      if(EimXEjWKWj == hlksFkcEKT){udygJXbqCY = true;}
      else if(hlksFkcEKT == EimXEjWKWj){kpaSpMGBNI = true;}
      if(XTXmJOFIrw == mWpFoLKYnk){EVcdCoAnJW = true;}
      else if(mWpFoLKYnk == XTXmJOFIrw){QrZBQmNNln = true;}
      if(seZkATKMam == goLKlHhUFN){EwyewiDJWB = true;}
      if(YEUkapExlf == VbJHjJbGGJ){PjuuhQOaAP = true;}
      if(wDsnYhXxMP == whAHNJMUMt){yOOKkMXWFQ = true;}
      while(goLKlHhUFN == seZkATKMam){eSjMBfiNyq = true;}
      while(VbJHjJbGGJ == VbJHjJbGGJ){tTlcyTFkPC = true;}
      while(whAHNJMUMt == whAHNJMUMt){OntoRrUoJH = true;}
      if(atVqXsZZGx == true){atVqXsZZGx = false;}
      if(CIzwyLNhVe == true){CIzwyLNhVe = false;}
      if(jDSdoynExc == true){jDSdoynExc = false;}
      if(tNHKmaGRjp == true){tNHKmaGRjp = false;}
      if(iBAIGmiEIC == true){iBAIGmiEIC = false;}
      if(udygJXbqCY == true){udygJXbqCY = false;}
      if(EVcdCoAnJW == true){EVcdCoAnJW = false;}
      if(EwyewiDJWB == true){EwyewiDJWB = false;}
      if(PjuuhQOaAP == true){PjuuhQOaAP = false;}
      if(yOOKkMXWFQ == true){yOOKkMXWFQ = false;}
      if(lttlxyfTja == true){lttlxyfTja = false;}
      if(TSTBJUahul == true){TSTBJUahul = false;}
      if(aZmsXogmti == true){aZmsXogmti = false;}
      if(KgEFOVoIxi == true){KgEFOVoIxi = false;}
      if(kupZufuNBQ == true){kupZufuNBQ = false;}
      if(kpaSpMGBNI == true){kpaSpMGBNI = false;}
      if(QrZBQmNNln == true){QrZBQmNNln = false;}
      if(eSjMBfiNyq == true){eSjMBfiNyq = false;}
      if(tTlcyTFkPC == true){tTlcyTFkPC = false;}
      if(OntoRrUoJH == true){OntoRrUoJH = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class KXNZLVZQWS
{ 
  void EYunuVNLUs()
  { 
      bool zjOyaqzBAu = false;
      bool iaoGXQlpjO = false;
      bool aNARNjVxDk = false;
      bool xSBOJRFKFi = false;
      bool rZYLjYpPyN = false;
      bool UZnSWkiwjp = false;
      bool VCxOyQYZxF = false;
      bool KbkBWAooho = false;
      bool tGzoPWdhrX = false;
      bool iJZONobJMT = false;
      bool zQSsDsomwV = false;
      bool wtNtwOCHza = false;
      bool lpgYVBBWmg = false;
      bool XebOocnGlW = false;
      bool hplWanufRy = false;
      bool mTJlgJjsWB = false;
      bool rRAPxQSzFT = false;
      bool awVcrwEKxh = false;
      bool FVEntDUohf = false;
      bool stjkdQpVYK = false;
      string LViOThLRzD;
      string cisCieJBuH;
      string AALdkEnmpd;
      string mqAOZzUJxi;
      string jIFEzmMrsb;
      string GTHsJKKEdO;
      string sXbVPlidci;
      string JADMWruGey;
      string rwtNWTiGFP;
      string oQfhoMgioN;
      string DhOJSGPuVR;
      string ODYfWxcNzw;
      string CcXNtsUUXK;
      string KLRRtJgkuQ;
      string DnknAkqALq;
      string iSjrKaKBOY;
      string kuWLGClHkN;
      string PrShrOrjMI;
      string BUIfarbYHS;
      string zeVVeHQYhx;
      if(LViOThLRzD == DhOJSGPuVR){zjOyaqzBAu = true;}
      else if(DhOJSGPuVR == LViOThLRzD){zQSsDsomwV = true;}
      if(cisCieJBuH == ODYfWxcNzw){iaoGXQlpjO = true;}
      else if(ODYfWxcNzw == cisCieJBuH){wtNtwOCHza = true;}
      if(AALdkEnmpd == CcXNtsUUXK){aNARNjVxDk = true;}
      else if(CcXNtsUUXK == AALdkEnmpd){lpgYVBBWmg = true;}
      if(mqAOZzUJxi == KLRRtJgkuQ){xSBOJRFKFi = true;}
      else if(KLRRtJgkuQ == mqAOZzUJxi){XebOocnGlW = true;}
      if(jIFEzmMrsb == DnknAkqALq){rZYLjYpPyN = true;}
      else if(DnknAkqALq == jIFEzmMrsb){hplWanufRy = true;}
      if(GTHsJKKEdO == iSjrKaKBOY){UZnSWkiwjp = true;}
      else if(iSjrKaKBOY == GTHsJKKEdO){mTJlgJjsWB = true;}
      if(sXbVPlidci == kuWLGClHkN){VCxOyQYZxF = true;}
      else if(kuWLGClHkN == sXbVPlidci){rRAPxQSzFT = true;}
      if(JADMWruGey == PrShrOrjMI){KbkBWAooho = true;}
      if(rwtNWTiGFP == BUIfarbYHS){tGzoPWdhrX = true;}
      if(oQfhoMgioN == zeVVeHQYhx){iJZONobJMT = true;}
      while(PrShrOrjMI == JADMWruGey){awVcrwEKxh = true;}
      while(BUIfarbYHS == BUIfarbYHS){FVEntDUohf = true;}
      while(zeVVeHQYhx == zeVVeHQYhx){stjkdQpVYK = true;}
      if(zjOyaqzBAu == true){zjOyaqzBAu = false;}
      if(iaoGXQlpjO == true){iaoGXQlpjO = false;}
      if(aNARNjVxDk == true){aNARNjVxDk = false;}
      if(xSBOJRFKFi == true){xSBOJRFKFi = false;}
      if(rZYLjYpPyN == true){rZYLjYpPyN = false;}
      if(UZnSWkiwjp == true){UZnSWkiwjp = false;}
      if(VCxOyQYZxF == true){VCxOyQYZxF = false;}
      if(KbkBWAooho == true){KbkBWAooho = false;}
      if(tGzoPWdhrX == true){tGzoPWdhrX = false;}
      if(iJZONobJMT == true){iJZONobJMT = false;}
      if(zQSsDsomwV == true){zQSsDsomwV = false;}
      if(wtNtwOCHza == true){wtNtwOCHza = false;}
      if(lpgYVBBWmg == true){lpgYVBBWmg = false;}
      if(XebOocnGlW == true){XebOocnGlW = false;}
      if(hplWanufRy == true){hplWanufRy = false;}
      if(mTJlgJjsWB == true){mTJlgJjsWB = false;}
      if(rRAPxQSzFT == true){rRAPxQSzFT = false;}
      if(awVcrwEKxh == true){awVcrwEKxh = false;}
      if(FVEntDUohf == true){FVEntDUohf = false;}
      if(stjkdQpVYK == true){stjkdQpVYK = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class CWCLMGYTTQ
{ 
  void gDsEnUDdBD()
  { 
      bool HVRtRLXTwS = false;
      bool VBIchiZoqy = false;
      bool uNbXBKNtOm = false;
      bool HYQSwNoNTm = false;
      bool mHJeIqMXyH = false;
      bool enbpItssrG = false;
      bool xcEIKxkogT = false;
      bool sMVELmDwPJ = false;
      bool yowGHSwZKC = false;
      bool UwUMpJCAUL = false;
      bool GWqdOSSXdU = false;
      bool pwciIHgyBq = false;
      bool BKeezwqJOC = false;
      bool jDbEDayRqo = false;
      bool AXwpLYSkDh = false;
      bool bEzdJwrLeR = false;
      bool aJJbjlUYfg = false;
      bool IPGLpcOnSZ = false;
      bool dGFfZfEytG = false;
      bool imlZNqNUGZ = false;
      string qEbQBZNXzO;
      string nOwfmHWTGJ;
      string jIbzGuLXzN;
      string VjlYhSCbos;
      string MyxMAuideC;
      string NGVLGiccJG;
      string OoXlsEcXyT;
      string FudMwkLOzL;
      string LgswzONZSz;
      string oZSieWaKTu;
      string RLfKxScIPU;
      string XOdxtgwale;
      string qDEzdfbuhY;
      string KAuDtABhzg;
      string lEKybawUnx;
      string ZzYoEOHffR;
      string pgapJWTaDt;
      string fObFrlrFXD;
      string iHHkyKaFye;
      string sUBgqEdToE;
      if(qEbQBZNXzO == RLfKxScIPU){HVRtRLXTwS = true;}
      else if(RLfKxScIPU == qEbQBZNXzO){GWqdOSSXdU = true;}
      if(nOwfmHWTGJ == XOdxtgwale){VBIchiZoqy = true;}
      else if(XOdxtgwale == nOwfmHWTGJ){pwciIHgyBq = true;}
      if(jIbzGuLXzN == qDEzdfbuhY){uNbXBKNtOm = true;}
      else if(qDEzdfbuhY == jIbzGuLXzN){BKeezwqJOC = true;}
      if(VjlYhSCbos == KAuDtABhzg){HYQSwNoNTm = true;}
      else if(KAuDtABhzg == VjlYhSCbos){jDbEDayRqo = true;}
      if(MyxMAuideC == lEKybawUnx){mHJeIqMXyH = true;}
      else if(lEKybawUnx == MyxMAuideC){AXwpLYSkDh = true;}
      if(NGVLGiccJG == ZzYoEOHffR){enbpItssrG = true;}
      else if(ZzYoEOHffR == NGVLGiccJG){bEzdJwrLeR = true;}
      if(OoXlsEcXyT == pgapJWTaDt){xcEIKxkogT = true;}
      else if(pgapJWTaDt == OoXlsEcXyT){aJJbjlUYfg = true;}
      if(FudMwkLOzL == fObFrlrFXD){sMVELmDwPJ = true;}
      if(LgswzONZSz == iHHkyKaFye){yowGHSwZKC = true;}
      if(oZSieWaKTu == sUBgqEdToE){UwUMpJCAUL = true;}
      while(fObFrlrFXD == FudMwkLOzL){IPGLpcOnSZ = true;}
      while(iHHkyKaFye == iHHkyKaFye){dGFfZfEytG = true;}
      while(sUBgqEdToE == sUBgqEdToE){imlZNqNUGZ = true;}
      if(HVRtRLXTwS == true){HVRtRLXTwS = false;}
      if(VBIchiZoqy == true){VBIchiZoqy = false;}
      if(uNbXBKNtOm == true){uNbXBKNtOm = false;}
      if(HYQSwNoNTm == true){HYQSwNoNTm = false;}
      if(mHJeIqMXyH == true){mHJeIqMXyH = false;}
      if(enbpItssrG == true){enbpItssrG = false;}
      if(xcEIKxkogT == true){xcEIKxkogT = false;}
      if(sMVELmDwPJ == true){sMVELmDwPJ = false;}
      if(yowGHSwZKC == true){yowGHSwZKC = false;}
      if(UwUMpJCAUL == true){UwUMpJCAUL = false;}
      if(GWqdOSSXdU == true){GWqdOSSXdU = false;}
      if(pwciIHgyBq == true){pwciIHgyBq = false;}
      if(BKeezwqJOC == true){BKeezwqJOC = false;}
      if(jDbEDayRqo == true){jDbEDayRqo = false;}
      if(AXwpLYSkDh == true){AXwpLYSkDh = false;}
      if(bEzdJwrLeR == true){bEzdJwrLeR = false;}
      if(aJJbjlUYfg == true){aJJbjlUYfg = false;}
      if(IPGLpcOnSZ == true){IPGLpcOnSZ = false;}
      if(dGFfZfEytG == true){dGFfZfEytG = false;}
      if(imlZNqNUGZ == true){imlZNqNUGZ = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class GLBNMZZWSI
{ 
  void KcVqGWliGa()
  { 
      bool xhXomoSYxs = false;
      bool nkJWBuHsKl = false;
      bool dJhNrDzSEW = false;
      bool YWIrZOREQR = false;
      bool mCOeGDDqGV = false;
      bool PIMismAJxj = false;
      bool pAUaTRcRwl = false;
      bool dCcrzatCHn = false;
      bool zHLhGPKZym = false;
      bool OIHgblhnKo = false;
      bool akuUqNfUiS = false;
      bool sxBIjholTE = false;
      bool HDTJWVuuPM = false;
      bool sFrSNNMqqs = false;
      bool iopetRGywt = false;
      bool xuUGhXRkxV = false;
      bool SkEVYmFiuV = false;
      bool UyuaURMnPF = false;
      bool OwyUPykkkp = false;
      bool wasUZykTGG = false;
      string DlFAOpmYkI;
      string HkXaWDrjlh;
      string WltQRQdSCF;
      string rahYYkcDHU;
      string uxxcbUFVWL;
      string wwVPSRqniy;
      string MTWfQfCyBk;
      string aobQlZnQow;
      string LHupIuESGH;
      string tnTJIaZRMu;
      string SGTljGUFcr;
      string cZzmlEXfWU;
      string ajqtqlVRHK;
      string zWEsdEmJGB;
      string ZzoNdTogWE;
      string DstqUiOZty;
      string kCxRrGVGIh;
      string QNZUtatdPX;
      string xotDHGbMXu;
      string oNOHQXCWUX;
      if(DlFAOpmYkI == SGTljGUFcr){xhXomoSYxs = true;}
      else if(SGTljGUFcr == DlFAOpmYkI){akuUqNfUiS = true;}
      if(HkXaWDrjlh == cZzmlEXfWU){nkJWBuHsKl = true;}
      else if(cZzmlEXfWU == HkXaWDrjlh){sxBIjholTE = true;}
      if(WltQRQdSCF == ajqtqlVRHK){dJhNrDzSEW = true;}
      else if(ajqtqlVRHK == WltQRQdSCF){HDTJWVuuPM = true;}
      if(rahYYkcDHU == zWEsdEmJGB){YWIrZOREQR = true;}
      else if(zWEsdEmJGB == rahYYkcDHU){sFrSNNMqqs = true;}
      if(uxxcbUFVWL == ZzoNdTogWE){mCOeGDDqGV = true;}
      else if(ZzoNdTogWE == uxxcbUFVWL){iopetRGywt = true;}
      if(wwVPSRqniy == DstqUiOZty){PIMismAJxj = true;}
      else if(DstqUiOZty == wwVPSRqniy){xuUGhXRkxV = true;}
      if(MTWfQfCyBk == kCxRrGVGIh){pAUaTRcRwl = true;}
      else if(kCxRrGVGIh == MTWfQfCyBk){SkEVYmFiuV = true;}
      if(aobQlZnQow == QNZUtatdPX){dCcrzatCHn = true;}
      if(LHupIuESGH == xotDHGbMXu){zHLhGPKZym = true;}
      if(tnTJIaZRMu == oNOHQXCWUX){OIHgblhnKo = true;}
      while(QNZUtatdPX == aobQlZnQow){UyuaURMnPF = true;}
      while(xotDHGbMXu == xotDHGbMXu){OwyUPykkkp = true;}
      while(oNOHQXCWUX == oNOHQXCWUX){wasUZykTGG = true;}
      if(xhXomoSYxs == true){xhXomoSYxs = false;}
      if(nkJWBuHsKl == true){nkJWBuHsKl = false;}
      if(dJhNrDzSEW == true){dJhNrDzSEW = false;}
      if(YWIrZOREQR == true){YWIrZOREQR = false;}
      if(mCOeGDDqGV == true){mCOeGDDqGV = false;}
      if(PIMismAJxj == true){PIMismAJxj = false;}
      if(pAUaTRcRwl == true){pAUaTRcRwl = false;}
      if(dCcrzatCHn == true){dCcrzatCHn = false;}
      if(zHLhGPKZym == true){zHLhGPKZym = false;}
      if(OIHgblhnKo == true){OIHgblhnKo = false;}
      if(akuUqNfUiS == true){akuUqNfUiS = false;}
      if(sxBIjholTE == true){sxBIjholTE = false;}
      if(HDTJWVuuPM == true){HDTJWVuuPM = false;}
      if(sFrSNNMqqs == true){sFrSNNMqqs = false;}
      if(iopetRGywt == true){iopetRGywt = false;}
      if(xuUGhXRkxV == true){xuUGhXRkxV = false;}
      if(SkEVYmFiuV == true){SkEVYmFiuV = false;}
      if(UyuaURMnPF == true){UyuaURMnPF = false;}
      if(OwyUPykkkp == true){OwyUPykkkp = false;}
      if(wasUZykTGG == true){wasUZykTGG = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class XSDVMGXXWA
{ 
  void BxwcENTdWI()
  { 
      bool RsRCgOUyZb = false;
      bool aOltubLLMX = false;
      bool BNoITBmCEL = false;
      bool XlIQassWrD = false;
      bool bkGPlUhhrn = false;
      bool yAwqJEDJhf = false;
      bool bSsNDoGVSC = false;
      bool ioSJwQGYWy = false;
      bool SEKPNXoQGW = false;
      bool pinMbIqsMx = false;
      bool NMOpFJgmur = false;
      bool xdliNWHcAe = false;
      bool zpOwMzAGgm = false;
      bool YNMZkFpUKE = false;
      bool qCUNYLwFyF = false;
      bool AOrhxXySdG = false;
      bool IaFITjRMyH = false;
      bool fmSwnxVAWA = false;
      bool CuHblKUebM = false;
      bool HWqDuPwLtn = false;
      string hjNdXtbRbO;
      string EnraeSUlUy;
      string kAagnfSnmO;
      string mLqXSrsfZi;
      string uDFmkBOwfU;
      string ZbAcKhJgpr;
      string amdNarwUIm;
      string ZoMkDgtmwl;
      string QVIRnKLNMj;
      string hLpgIHYrLr;
      string EtmrukPOZc;
      string mVkDaEeMYQ;
      string giHYFNyecu;
      string ICbDhWiPVD;
      string twnjwLamGD;
      string cLTuLVmOmh;
      string mkkeUkthUE;
      string VOpUVjuXbs;
      string lKYZRxigrM;
      string jUbnQJLJPL;
      if(hjNdXtbRbO == EtmrukPOZc){RsRCgOUyZb = true;}
      else if(EtmrukPOZc == hjNdXtbRbO){NMOpFJgmur = true;}
      if(EnraeSUlUy == mVkDaEeMYQ){aOltubLLMX = true;}
      else if(mVkDaEeMYQ == EnraeSUlUy){xdliNWHcAe = true;}
      if(kAagnfSnmO == giHYFNyecu){BNoITBmCEL = true;}
      else if(giHYFNyecu == kAagnfSnmO){zpOwMzAGgm = true;}
      if(mLqXSrsfZi == ICbDhWiPVD){XlIQassWrD = true;}
      else if(ICbDhWiPVD == mLqXSrsfZi){YNMZkFpUKE = true;}
      if(uDFmkBOwfU == twnjwLamGD){bkGPlUhhrn = true;}
      else if(twnjwLamGD == uDFmkBOwfU){qCUNYLwFyF = true;}
      if(ZbAcKhJgpr == cLTuLVmOmh){yAwqJEDJhf = true;}
      else if(cLTuLVmOmh == ZbAcKhJgpr){AOrhxXySdG = true;}
      if(amdNarwUIm == mkkeUkthUE){bSsNDoGVSC = true;}
      else if(mkkeUkthUE == amdNarwUIm){IaFITjRMyH = true;}
      if(ZoMkDgtmwl == VOpUVjuXbs){ioSJwQGYWy = true;}
      if(QVIRnKLNMj == lKYZRxigrM){SEKPNXoQGW = true;}
      if(hLpgIHYrLr == jUbnQJLJPL){pinMbIqsMx = true;}
      while(VOpUVjuXbs == ZoMkDgtmwl){fmSwnxVAWA = true;}
      while(lKYZRxigrM == lKYZRxigrM){CuHblKUebM = true;}
      while(jUbnQJLJPL == jUbnQJLJPL){HWqDuPwLtn = true;}
      if(RsRCgOUyZb == true){RsRCgOUyZb = false;}
      if(aOltubLLMX == true){aOltubLLMX = false;}
      if(BNoITBmCEL == true){BNoITBmCEL = false;}
      if(XlIQassWrD == true){XlIQassWrD = false;}
      if(bkGPlUhhrn == true){bkGPlUhhrn = false;}
      if(yAwqJEDJhf == true){yAwqJEDJhf = false;}
      if(bSsNDoGVSC == true){bSsNDoGVSC = false;}
      if(ioSJwQGYWy == true){ioSJwQGYWy = false;}
      if(SEKPNXoQGW == true){SEKPNXoQGW = false;}
      if(pinMbIqsMx == true){pinMbIqsMx = false;}
      if(NMOpFJgmur == true){NMOpFJgmur = false;}
      if(xdliNWHcAe == true){xdliNWHcAe = false;}
      if(zpOwMzAGgm == true){zpOwMzAGgm = false;}
      if(YNMZkFpUKE == true){YNMZkFpUKE = false;}
      if(qCUNYLwFyF == true){qCUNYLwFyF = false;}
      if(AOrhxXySdG == true){AOrhxXySdG = false;}
      if(IaFITjRMyH == true){IaFITjRMyH = false;}
      if(fmSwnxVAWA == true){fmSwnxVAWA = false;}
      if(CuHblKUebM == true){CuHblKUebM = false;}
      if(HWqDuPwLtn == true){HWqDuPwLtn = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class ARPRIFQOUJ
{ 
  void ZrySfnClEE()
  { 
      bool ytRNOeSbXO = false;
      bool nfkXxSeVCS = false;
      bool hDiheVwgwS = false;
      bool YVOkPEEgQL = false;
      bool gxUcubqYZH = false;
      bool UKhIxuLjis = false;
      bool hleEpRQAIs = false;
      bool NxEpkjiFmD = false;
      bool eXHoxNnGmU = false;
      bool rUxXdtSPmd = false;
      bool KpQfsWGqWM = false;
      bool LFxfOJepGc = false;
      bool cKMmArAgMq = false;
      bool RSSIsnHaua = false;
      bool HwjaImXRJT = false;
      bool ObJKAzdcfA = false;
      bool WZefurlnlZ = false;
      bool CEufVgZkdN = false;
      bool UhWrbpJIIs = false;
      bool JdutDhQEfQ = false;
      string ThFYLUPnkS;
      string SnMYAAUjec;
      string TiluRJKHgo;
      string fCOrCTUkUy;
      string KBdVYGZabw;
      string ekZaIjuKGB;
      string KIHumQYTVg;
      string ejOfRRFQVL;
      string jiejKubmjR;
      string XKdSnCthhI;
      string gFFuQuVsIp;
      string ednuRbcWkr;
      string nliDIUFwrP;
      string XWhMdddiSO;
      string YhdsmtViBM;
      string YWxpUuVBlw;
      string oZBsSHuaQm;
      string xtDVSFHpQO;
      string yWufqAZrri;
      string HbxWZzgkae;
      if(ThFYLUPnkS == gFFuQuVsIp){ytRNOeSbXO = true;}
      else if(gFFuQuVsIp == ThFYLUPnkS){KpQfsWGqWM = true;}
      if(SnMYAAUjec == ednuRbcWkr){nfkXxSeVCS = true;}
      else if(ednuRbcWkr == SnMYAAUjec){LFxfOJepGc = true;}
      if(TiluRJKHgo == nliDIUFwrP){hDiheVwgwS = true;}
      else if(nliDIUFwrP == TiluRJKHgo){cKMmArAgMq = true;}
      if(fCOrCTUkUy == XWhMdddiSO){YVOkPEEgQL = true;}
      else if(XWhMdddiSO == fCOrCTUkUy){RSSIsnHaua = true;}
      if(KBdVYGZabw == YhdsmtViBM){gxUcubqYZH = true;}
      else if(YhdsmtViBM == KBdVYGZabw){HwjaImXRJT = true;}
      if(ekZaIjuKGB == YWxpUuVBlw){UKhIxuLjis = true;}
      else if(YWxpUuVBlw == ekZaIjuKGB){ObJKAzdcfA = true;}
      if(KIHumQYTVg == oZBsSHuaQm){hleEpRQAIs = true;}
      else if(oZBsSHuaQm == KIHumQYTVg){WZefurlnlZ = true;}
      if(ejOfRRFQVL == xtDVSFHpQO){NxEpkjiFmD = true;}
      if(jiejKubmjR == yWufqAZrri){eXHoxNnGmU = true;}
      if(XKdSnCthhI == HbxWZzgkae){rUxXdtSPmd = true;}
      while(xtDVSFHpQO == ejOfRRFQVL){CEufVgZkdN = true;}
      while(yWufqAZrri == yWufqAZrri){UhWrbpJIIs = true;}
      while(HbxWZzgkae == HbxWZzgkae){JdutDhQEfQ = true;}
      if(ytRNOeSbXO == true){ytRNOeSbXO = false;}
      if(nfkXxSeVCS == true){nfkXxSeVCS = false;}
      if(hDiheVwgwS == true){hDiheVwgwS = false;}
      if(YVOkPEEgQL == true){YVOkPEEgQL = false;}
      if(gxUcubqYZH == true){gxUcubqYZH = false;}
      if(UKhIxuLjis == true){UKhIxuLjis = false;}
      if(hleEpRQAIs == true){hleEpRQAIs = false;}
      if(NxEpkjiFmD == true){NxEpkjiFmD = false;}
      if(eXHoxNnGmU == true){eXHoxNnGmU = false;}
      if(rUxXdtSPmd == true){rUxXdtSPmd = false;}
      if(KpQfsWGqWM == true){KpQfsWGqWM = false;}
      if(LFxfOJepGc == true){LFxfOJepGc = false;}
      if(cKMmArAgMq == true){cKMmArAgMq = false;}
      if(RSSIsnHaua == true){RSSIsnHaua = false;}
      if(HwjaImXRJT == true){HwjaImXRJT = false;}
      if(ObJKAzdcfA == true){ObJKAzdcfA = false;}
      if(WZefurlnlZ == true){WZefurlnlZ = false;}
      if(CEufVgZkdN == true){CEufVgZkdN = false;}
      if(UhWrbpJIIs == true){UhWrbpJIIs = false;}
      if(JdutDhQEfQ == true){JdutDhQEfQ = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class YBNAKHXYRZ
{ 
  void COysbGqKbm()
  { 
      bool iiFOWlwmKK = false;
      bool HFcqAmKqfs = false;
      bool bAjkSJrFyu = false;
      bool AjXmgCQBcj = false;
      bool HIBfwTmRUc = false;
      bool OittIhzTuN = false;
      bool tqoOJXgoKx = false;
      bool VJOukTzEnz = false;
      bool VZjVfQoddy = false;
      bool DxFOpQSlVY = false;
      bool lyHWHEUyIo = false;
      bool iteurTGShr = false;
      bool hCLLsXEzFU = false;
      bool AMhPNWSMOa = false;
      bool wqVoPJRJVV = false;
      bool JzDdpjludi = false;
      bool AUsmnVMPhU = false;
      bool AsEHwqgWwj = false;
      bool GtdiLAJDYd = false;
      bool kXieaaxhAt = false;
      string YNzDIoHIxZ;
      string jAXzFbcjRT;
      string TRQpNWxIgH;
      string FhVSlwUAZg;
      string DjeWhjTwao;
      string FHadIHxJpk;
      string rybpTBeFMJ;
      string GcKkPjlsHc;
      string DBgqCxHqJe;
      string yLJnnEIoCf;
      string FNiRhcwoNY;
      string UDBNhqQjmW;
      string tmwhKuSVxK;
      string bxqbWpRPIZ;
      string AScjJuJwGx;
      string nXBflRQBGm;
      string JaqCxXMZpr;
      string ZBaNVbKLYP;
      string lWPAWDuLpE;
      string YQIVPZaZmk;
      if(YNzDIoHIxZ == FNiRhcwoNY){iiFOWlwmKK = true;}
      else if(FNiRhcwoNY == YNzDIoHIxZ){lyHWHEUyIo = true;}
      if(jAXzFbcjRT == UDBNhqQjmW){HFcqAmKqfs = true;}
      else if(UDBNhqQjmW == jAXzFbcjRT){iteurTGShr = true;}
      if(TRQpNWxIgH == tmwhKuSVxK){bAjkSJrFyu = true;}
      else if(tmwhKuSVxK == TRQpNWxIgH){hCLLsXEzFU = true;}
      if(FhVSlwUAZg == bxqbWpRPIZ){AjXmgCQBcj = true;}
      else if(bxqbWpRPIZ == FhVSlwUAZg){AMhPNWSMOa = true;}
      if(DjeWhjTwao == AScjJuJwGx){HIBfwTmRUc = true;}
      else if(AScjJuJwGx == DjeWhjTwao){wqVoPJRJVV = true;}
      if(FHadIHxJpk == nXBflRQBGm){OittIhzTuN = true;}
      else if(nXBflRQBGm == FHadIHxJpk){JzDdpjludi = true;}
      if(rybpTBeFMJ == JaqCxXMZpr){tqoOJXgoKx = true;}
      else if(JaqCxXMZpr == rybpTBeFMJ){AUsmnVMPhU = true;}
      if(GcKkPjlsHc == ZBaNVbKLYP){VJOukTzEnz = true;}
      if(DBgqCxHqJe == lWPAWDuLpE){VZjVfQoddy = true;}
      if(yLJnnEIoCf == YQIVPZaZmk){DxFOpQSlVY = true;}
      while(ZBaNVbKLYP == GcKkPjlsHc){AsEHwqgWwj = true;}
      while(lWPAWDuLpE == lWPAWDuLpE){GtdiLAJDYd = true;}
      while(YQIVPZaZmk == YQIVPZaZmk){kXieaaxhAt = true;}
      if(iiFOWlwmKK == true){iiFOWlwmKK = false;}
      if(HFcqAmKqfs == true){HFcqAmKqfs = false;}
      if(bAjkSJrFyu == true){bAjkSJrFyu = false;}
      if(AjXmgCQBcj == true){AjXmgCQBcj = false;}
      if(HIBfwTmRUc == true){HIBfwTmRUc = false;}
      if(OittIhzTuN == true){OittIhzTuN = false;}
      if(tqoOJXgoKx == true){tqoOJXgoKx = false;}
      if(VJOukTzEnz == true){VJOukTzEnz = false;}
      if(VZjVfQoddy == true){VZjVfQoddy = false;}
      if(DxFOpQSlVY == true){DxFOpQSlVY = false;}
      if(lyHWHEUyIo == true){lyHWHEUyIo = false;}
      if(iteurTGShr == true){iteurTGShr = false;}
      if(hCLLsXEzFU == true){hCLLsXEzFU = false;}
      if(AMhPNWSMOa == true){AMhPNWSMOa = false;}
      if(wqVoPJRJVV == true){wqVoPJRJVV = false;}
      if(JzDdpjludi == true){JzDdpjludi = false;}
      if(AUsmnVMPhU == true){AUsmnVMPhU = false;}
      if(AsEHwqgWwj == true){AsEHwqgWwj = false;}
      if(GtdiLAJDYd == true){GtdiLAJDYd = false;}
      if(kXieaaxhAt == true){kXieaaxhAt = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class DDRKSFBSFX
{ 
  void oTnEMFzGNU()
  { 
      bool DpdqdgYGBR = false;
      bool pePmzZDWqe = false;
      bool WbuznjotMN = false;
      bool yZYXkKbpMX = false;
      bool DItGzFaJgo = false;
      bool yLalpaudDt = false;
      bool qdsnSPGqCo = false;
      bool xMKSbOhoAh = false;
      bool IfMXOlzmgK = false;
      bool PymSgYOGmi = false;
      bool yiGrqkBHJb = false;
      bool sFdUkKQVZg = false;
      bool PSJqYzZqkC = false;
      bool zaCQjZYTfc = false;
      bool kqcFQKTSgV = false;
      bool IrgFSfYOTr = false;
      bool LJWHbRCMjL = false;
      bool kwpwuYpEaO = false;
      bool fGKPtHtwxE = false;
      bool AKAnQaUVcy = false;
      string GrLRRcafZV;
      string fABiLFIImS;
      string HXZUrwhtXF;
      string wpKfQgrEPS;
      string NTXrTeGEZa;
      string HafaXiSqZU;
      string ugITYopVRe;
      string MDrTFnAgAM;
      string pcUxyVJiHh;
      string NAetWfLDTd;
      string ojltNDhLVi;
      string hkpMeRMKVC;
      string eGOjRMXxwY;
      string bwMWXGqZit;
      string myNXzbKRPF;
      string TAhQyhVBcB;
      string fkOwHlYTnY;
      string ambaPgrpko;
      string BFgqFbOwXo;
      string kpxgOCiRQN;
      if(GrLRRcafZV == ojltNDhLVi){DpdqdgYGBR = true;}
      else if(ojltNDhLVi == GrLRRcafZV){yiGrqkBHJb = true;}
      if(fABiLFIImS == hkpMeRMKVC){pePmzZDWqe = true;}
      else if(hkpMeRMKVC == fABiLFIImS){sFdUkKQVZg = true;}
      if(HXZUrwhtXF == eGOjRMXxwY){WbuznjotMN = true;}
      else if(eGOjRMXxwY == HXZUrwhtXF){PSJqYzZqkC = true;}
      if(wpKfQgrEPS == bwMWXGqZit){yZYXkKbpMX = true;}
      else if(bwMWXGqZit == wpKfQgrEPS){zaCQjZYTfc = true;}
      if(NTXrTeGEZa == myNXzbKRPF){DItGzFaJgo = true;}
      else if(myNXzbKRPF == NTXrTeGEZa){kqcFQKTSgV = true;}
      if(HafaXiSqZU == TAhQyhVBcB){yLalpaudDt = true;}
      else if(TAhQyhVBcB == HafaXiSqZU){IrgFSfYOTr = true;}
      if(ugITYopVRe == fkOwHlYTnY){qdsnSPGqCo = true;}
      else if(fkOwHlYTnY == ugITYopVRe){LJWHbRCMjL = true;}
      if(MDrTFnAgAM == ambaPgrpko){xMKSbOhoAh = true;}
      if(pcUxyVJiHh == BFgqFbOwXo){IfMXOlzmgK = true;}
      if(NAetWfLDTd == kpxgOCiRQN){PymSgYOGmi = true;}
      while(ambaPgrpko == MDrTFnAgAM){kwpwuYpEaO = true;}
      while(BFgqFbOwXo == BFgqFbOwXo){fGKPtHtwxE = true;}
      while(kpxgOCiRQN == kpxgOCiRQN){AKAnQaUVcy = true;}
      if(DpdqdgYGBR == true){DpdqdgYGBR = false;}
      if(pePmzZDWqe == true){pePmzZDWqe = false;}
      if(WbuznjotMN == true){WbuznjotMN = false;}
      if(yZYXkKbpMX == true){yZYXkKbpMX = false;}
      if(DItGzFaJgo == true){DItGzFaJgo = false;}
      if(yLalpaudDt == true){yLalpaudDt = false;}
      if(qdsnSPGqCo == true){qdsnSPGqCo = false;}
      if(xMKSbOhoAh == true){xMKSbOhoAh = false;}
      if(IfMXOlzmgK == true){IfMXOlzmgK = false;}
      if(PymSgYOGmi == true){PymSgYOGmi = false;}
      if(yiGrqkBHJb == true){yiGrqkBHJb = false;}
      if(sFdUkKQVZg == true){sFdUkKQVZg = false;}
      if(PSJqYzZqkC == true){PSJqYzZqkC = false;}
      if(zaCQjZYTfc == true){zaCQjZYTfc = false;}
      if(kqcFQKTSgV == true){kqcFQKTSgV = false;}
      if(IrgFSfYOTr == true){IrgFSfYOTr = false;}
      if(LJWHbRCMjL == true){LJWHbRCMjL = false;}
      if(kwpwuYpEaO == true){kwpwuYpEaO = false;}
      if(fGKPtHtwxE == true){fGKPtHtwxE = false;}
      if(AKAnQaUVcy == true){AKAnQaUVcy = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class ELFQSRWFGW
{ 
  void ozKURKnyfu()
  { 
      bool rzUolIWimO = false;
      bool nAfjiIGRfN = false;
      bool NkhsIQOTXS = false;
      bool NckYHKOFVo = false;
      bool mceZBwUySR = false;
      bool QzNMBHRagV = false;
      bool sDKUAKOGcX = false;
      bool sBuqajFIrL = false;
      bool uQAGBOPYWz = false;
      bool snXAuiSKZp = false;
      bool gNVtXOEWkQ = false;
      bool CJiVZcDESl = false;
      bool tpjdeFcuur = false;
      bool RthBdhtFhl = false;
      bool KrnFwjECZS = false;
      bool fNqnwqdrPS = false;
      bool lJaszIagrr = false;
      bool hxVgbBCdgt = false;
      bool AaUcMDCtFl = false;
      bool DCpPABRtGn = false;
      string FHbzpEtzNr;
      string XRBBdyyIuW;
      string KyRULrBaLA;
      string KUROPkkZIs;
      string sxIbTFJiZn;
      string DroLnHoHnx;
      string DTnMhCAlkr;
      string MYACdMopAF;
      string hRBWwReFaH;
      string wdlKoYJwsR;
      string FXxgbermhb;
      string SzGhPkSQPP;
      string WtLdwhmpME;
      string DrwiAJUTuR;
      string ZrWzowXDuD;
      string GrgctKMTks;
      string rBadYZDXhF;
      string QyUxpeWLnA;
      string KjuIxKLSoo;
      string xAiBZXQsaP;
      if(FHbzpEtzNr == FXxgbermhb){rzUolIWimO = true;}
      else if(FXxgbermhb == FHbzpEtzNr){gNVtXOEWkQ = true;}
      if(XRBBdyyIuW == SzGhPkSQPP){nAfjiIGRfN = true;}
      else if(SzGhPkSQPP == XRBBdyyIuW){CJiVZcDESl = true;}
      if(KyRULrBaLA == WtLdwhmpME){NkhsIQOTXS = true;}
      else if(WtLdwhmpME == KyRULrBaLA){tpjdeFcuur = true;}
      if(KUROPkkZIs == DrwiAJUTuR){NckYHKOFVo = true;}
      else if(DrwiAJUTuR == KUROPkkZIs){RthBdhtFhl = true;}
      if(sxIbTFJiZn == ZrWzowXDuD){mceZBwUySR = true;}
      else if(ZrWzowXDuD == sxIbTFJiZn){KrnFwjECZS = true;}
      if(DroLnHoHnx == GrgctKMTks){QzNMBHRagV = true;}
      else if(GrgctKMTks == DroLnHoHnx){fNqnwqdrPS = true;}
      if(DTnMhCAlkr == rBadYZDXhF){sDKUAKOGcX = true;}
      else if(rBadYZDXhF == DTnMhCAlkr){lJaszIagrr = true;}
      if(MYACdMopAF == QyUxpeWLnA){sBuqajFIrL = true;}
      if(hRBWwReFaH == KjuIxKLSoo){uQAGBOPYWz = true;}
      if(wdlKoYJwsR == xAiBZXQsaP){snXAuiSKZp = true;}
      while(QyUxpeWLnA == MYACdMopAF){hxVgbBCdgt = true;}
      while(KjuIxKLSoo == KjuIxKLSoo){AaUcMDCtFl = true;}
      while(xAiBZXQsaP == xAiBZXQsaP){DCpPABRtGn = true;}
      if(rzUolIWimO == true){rzUolIWimO = false;}
      if(nAfjiIGRfN == true){nAfjiIGRfN = false;}
      if(NkhsIQOTXS == true){NkhsIQOTXS = false;}
      if(NckYHKOFVo == true){NckYHKOFVo = false;}
      if(mceZBwUySR == true){mceZBwUySR = false;}
      if(QzNMBHRagV == true){QzNMBHRagV = false;}
      if(sDKUAKOGcX == true){sDKUAKOGcX = false;}
      if(sBuqajFIrL == true){sBuqajFIrL = false;}
      if(uQAGBOPYWz == true){uQAGBOPYWz = false;}
      if(snXAuiSKZp == true){snXAuiSKZp = false;}
      if(gNVtXOEWkQ == true){gNVtXOEWkQ = false;}
      if(CJiVZcDESl == true){CJiVZcDESl = false;}
      if(tpjdeFcuur == true){tpjdeFcuur = false;}
      if(RthBdhtFhl == true){RthBdhtFhl = false;}
      if(KrnFwjECZS == true){KrnFwjECZS = false;}
      if(fNqnwqdrPS == true){fNqnwqdrPS = false;}
      if(lJaszIagrr == true){lJaszIagrr = false;}
      if(hxVgbBCdgt == true){hxVgbBCdgt = false;}
      if(AaUcMDCtFl == true){AaUcMDCtFl = false;}
      if(DCpPABRtGn == true){DCpPABRtGn = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class PRZYOPDDUR
{ 
  void JflJBTVlKQ()
  { 
      bool pRWaOFiNpZ = false;
      bool pbACqslNMm = false;
      bool GEPHTmMSWX = false;
      bool BRdjeWmgkN = false;
      bool giZONrjeHS = false;
      bool jwbhukBPGa = false;
      bool rQqRXYxQXT = false;
      bool FEbyFXdBsb = false;
      bool DhLDmFowns = false;
      bool UXaJVQrHqo = false;
      bool tTHmNfUdcX = false;
      bool GAVeXJFmdS = false;
      bool iBbdygdRbn = false;
      bool fVKDgiaXpH = false;
      bool jLSQmUBulM = false;
      bool LEdXFrrcng = false;
      bool BCBnrjpSxn = false;
      bool hgxWhWiLqd = false;
      bool ehfPcarlxn = false;
      bool qxjJFhJdYC = false;
      string dFHWBRfxHT;
      string GgyhFuVGwf;
      string drnelSXVdx;
      string Ywnenwffib;
      string LPEqgOUXMH;
      string koVUjkRcjh;
      string tJSJuKsTtJ;
      string OoXUUOnwxW;
      string xzIWLiZTtC;
      string eCuAgBwtwW;
      string VBcDrwRBzV;
      string xUfMktAuyL;
      string jZYqeLsXmT;
      string RsAaBwVFeP;
      string QYTYFJWhOm;
      string AAwjlwblXf;
      string DtNfDDTELn;
      string XuQhtLFzlU;
      string oKIATQwPnE;
      string TjhyLWKnUC;
      if(dFHWBRfxHT == VBcDrwRBzV){pRWaOFiNpZ = true;}
      else if(VBcDrwRBzV == dFHWBRfxHT){tTHmNfUdcX = true;}
      if(GgyhFuVGwf == xUfMktAuyL){pbACqslNMm = true;}
      else if(xUfMktAuyL == GgyhFuVGwf){GAVeXJFmdS = true;}
      if(drnelSXVdx == jZYqeLsXmT){GEPHTmMSWX = true;}
      else if(jZYqeLsXmT == drnelSXVdx){iBbdygdRbn = true;}
      if(Ywnenwffib == RsAaBwVFeP){BRdjeWmgkN = true;}
      else if(RsAaBwVFeP == Ywnenwffib){fVKDgiaXpH = true;}
      if(LPEqgOUXMH == QYTYFJWhOm){giZONrjeHS = true;}
      else if(QYTYFJWhOm == LPEqgOUXMH){jLSQmUBulM = true;}
      if(koVUjkRcjh == AAwjlwblXf){jwbhukBPGa = true;}
      else if(AAwjlwblXf == koVUjkRcjh){LEdXFrrcng = true;}
      if(tJSJuKsTtJ == DtNfDDTELn){rQqRXYxQXT = true;}
      else if(DtNfDDTELn == tJSJuKsTtJ){BCBnrjpSxn = true;}
      if(OoXUUOnwxW == XuQhtLFzlU){FEbyFXdBsb = true;}
      if(xzIWLiZTtC == oKIATQwPnE){DhLDmFowns = true;}
      if(eCuAgBwtwW == TjhyLWKnUC){UXaJVQrHqo = true;}
      while(XuQhtLFzlU == OoXUUOnwxW){hgxWhWiLqd = true;}
      while(oKIATQwPnE == oKIATQwPnE){ehfPcarlxn = true;}
      while(TjhyLWKnUC == TjhyLWKnUC){qxjJFhJdYC = true;}
      if(pRWaOFiNpZ == true){pRWaOFiNpZ = false;}
      if(pbACqslNMm == true){pbACqslNMm = false;}
      if(GEPHTmMSWX == true){GEPHTmMSWX = false;}
      if(BRdjeWmgkN == true){BRdjeWmgkN = false;}
      if(giZONrjeHS == true){giZONrjeHS = false;}
      if(jwbhukBPGa == true){jwbhukBPGa = false;}
      if(rQqRXYxQXT == true){rQqRXYxQXT = false;}
      if(FEbyFXdBsb == true){FEbyFXdBsb = false;}
      if(DhLDmFowns == true){DhLDmFowns = false;}
      if(UXaJVQrHqo == true){UXaJVQrHqo = false;}
      if(tTHmNfUdcX == true){tTHmNfUdcX = false;}
      if(GAVeXJFmdS == true){GAVeXJFmdS = false;}
      if(iBbdygdRbn == true){iBbdygdRbn = false;}
      if(fVKDgiaXpH == true){fVKDgiaXpH = false;}
      if(jLSQmUBulM == true){jLSQmUBulM = false;}
      if(LEdXFrrcng == true){LEdXFrrcng = false;}
      if(BCBnrjpSxn == true){BCBnrjpSxn = false;}
      if(hgxWhWiLqd == true){hgxWhWiLqd = false;}
      if(ehfPcarlxn == true){ehfPcarlxn = false;}
      if(qxjJFhJdYC == true){qxjJFhJdYC = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class UHMPFTPNFS
{ 
  void PsKNfwnNEG()
  { 
      bool BZospiGBOC = false;
      bool VlzCpOFtRg = false;
      bool JyONEaQgwZ = false;
      bool lhRfybiygB = false;
      bool jlRCewnKIp = false;
      bool bEXRbCLaoO = false;
      bool RYEnQnUSEN = false;
      bool eHNQxXgLiH = false;
      bool lFXGyhJzEu = false;
      bool PHIRiKgclp = false;
      bool bVFtLTpGTE = false;
      bool VArgbLAypi = false;
      bool eVNJyWzuhl = false;
      bool pDZrfQActd = false;
      bool qDeAYPPapW = false;
      bool JhmDLFHuwn = false;
      bool UtYgNSZzBK = false;
      bool LXDLqapNkh = false;
      bool HXFKcHQWfZ = false;
      bool IEgGJxdxlF = false;
      string WNbqlLOYYs;
      string VCYbECcqYz;
      string yqQiZhRXWU;
      string DJtLCLzhLU;
      string wLCBBSEraq;
      string LByCmexsRE;
      string tpCDpMIMZs;
      string CtfDCloOgG;
      string dYxeJBLrYX;
      string NGQHaGJyLo;
      string KqSgnQVtzB;
      string ohLLZUsWtn;
      string BQnBewdYcw;
      string cqDrulFPqr;
      string fQrXiftFgF;
      string MlDWmtDRCr;
      string mxRCXxeTPm;
      string PdfBIkXQRz;
      string CYqWjpnfFB;
      string inNyFhzpzk;
      if(WNbqlLOYYs == KqSgnQVtzB){BZospiGBOC = true;}
      else if(KqSgnQVtzB == WNbqlLOYYs){bVFtLTpGTE = true;}
      if(VCYbECcqYz == ohLLZUsWtn){VlzCpOFtRg = true;}
      else if(ohLLZUsWtn == VCYbECcqYz){VArgbLAypi = true;}
      if(yqQiZhRXWU == BQnBewdYcw){JyONEaQgwZ = true;}
      else if(BQnBewdYcw == yqQiZhRXWU){eVNJyWzuhl = true;}
      if(DJtLCLzhLU == cqDrulFPqr){lhRfybiygB = true;}
      else if(cqDrulFPqr == DJtLCLzhLU){pDZrfQActd = true;}
      if(wLCBBSEraq == fQrXiftFgF){jlRCewnKIp = true;}
      else if(fQrXiftFgF == wLCBBSEraq){qDeAYPPapW = true;}
      if(LByCmexsRE == MlDWmtDRCr){bEXRbCLaoO = true;}
      else if(MlDWmtDRCr == LByCmexsRE){JhmDLFHuwn = true;}
      if(tpCDpMIMZs == mxRCXxeTPm){RYEnQnUSEN = true;}
      else if(mxRCXxeTPm == tpCDpMIMZs){UtYgNSZzBK = true;}
      if(CtfDCloOgG == PdfBIkXQRz){eHNQxXgLiH = true;}
      if(dYxeJBLrYX == CYqWjpnfFB){lFXGyhJzEu = true;}
      if(NGQHaGJyLo == inNyFhzpzk){PHIRiKgclp = true;}
      while(PdfBIkXQRz == CtfDCloOgG){LXDLqapNkh = true;}
      while(CYqWjpnfFB == CYqWjpnfFB){HXFKcHQWfZ = true;}
      while(inNyFhzpzk == inNyFhzpzk){IEgGJxdxlF = true;}
      if(BZospiGBOC == true){BZospiGBOC = false;}
      if(VlzCpOFtRg == true){VlzCpOFtRg = false;}
      if(JyONEaQgwZ == true){JyONEaQgwZ = false;}
      if(lhRfybiygB == true){lhRfybiygB = false;}
      if(jlRCewnKIp == true){jlRCewnKIp = false;}
      if(bEXRbCLaoO == true){bEXRbCLaoO = false;}
      if(RYEnQnUSEN == true){RYEnQnUSEN = false;}
      if(eHNQxXgLiH == true){eHNQxXgLiH = false;}
      if(lFXGyhJzEu == true){lFXGyhJzEu = false;}
      if(PHIRiKgclp == true){PHIRiKgclp = false;}
      if(bVFtLTpGTE == true){bVFtLTpGTE = false;}
      if(VArgbLAypi == true){VArgbLAypi = false;}
      if(eVNJyWzuhl == true){eVNJyWzuhl = false;}
      if(pDZrfQActd == true){pDZrfQActd = false;}
      if(qDeAYPPapW == true){qDeAYPPapW = false;}
      if(JhmDLFHuwn == true){JhmDLFHuwn = false;}
      if(UtYgNSZzBK == true){UtYgNSZzBK = false;}
      if(LXDLqapNkh == true){LXDLqapNkh = false;}
      if(HXFKcHQWfZ == true){HXFKcHQWfZ = false;}
      if(IEgGJxdxlF == true){IEgGJxdxlF = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class MKYQWUXOQG
{ 
  void tdLRpWLjYx()
  { 
      bool MrAsGMfepu = false;
      bool BDXLoPtZxd = false;
      bool lyXBiIOmqh = false;
      bool lpfCiGXeFm = false;
      bool kkJzrTsFCj = false;
      bool FfgkpNUzKx = false;
      bool xsnIIKWUbh = false;
      bool qPUKsAnXIP = false;
      bool OIjGbGIuMU = false;
      bool lYTHorxBqg = false;
      bool wXdUspLWro = false;
      bool YxpuinIhfC = false;
      bool CbIGwSuMUA = false;
      bool DmgbTqePNl = false;
      bool ukDXwoiYYB = false;
      bool iPVndTOWYZ = false;
      bool tyCqllPNaq = false;
      bool IsTsHQYkKG = false;
      bool jWmSRnQrxz = false;
      bool bIpmrwhLkJ = false;
      string wIwDTTjpxL;
      string bFwmztQXcd;
      string HQkmMTlsBX;
      string ATsFDHVtZJ;
      string nKalfetAGW;
      string coxdVfXJpz;
      string hqoZLHMpir;
      string XVyToxozHg;
      string YlmetKWPjW;
      string jMDZaxUBZY;
      string SEQOyGqdnY;
      string qXBJauEKeB;
      string kwGMHKSXrr;
      string bmYiOUVXfn;
      string SraKfLLtzf;
      string rKVYmVyEGn;
      string nSlwwDzStF;
      string ZfeqhrUufu;
      string zXYLzRQAus;
      string WRQqAAFeOc;
      if(wIwDTTjpxL == SEQOyGqdnY){MrAsGMfepu = true;}
      else if(SEQOyGqdnY == wIwDTTjpxL){wXdUspLWro = true;}
      if(bFwmztQXcd == qXBJauEKeB){BDXLoPtZxd = true;}
      else if(qXBJauEKeB == bFwmztQXcd){YxpuinIhfC = true;}
      if(HQkmMTlsBX == kwGMHKSXrr){lyXBiIOmqh = true;}
      else if(kwGMHKSXrr == HQkmMTlsBX){CbIGwSuMUA = true;}
      if(ATsFDHVtZJ == bmYiOUVXfn){lpfCiGXeFm = true;}
      else if(bmYiOUVXfn == ATsFDHVtZJ){DmgbTqePNl = true;}
      if(nKalfetAGW == SraKfLLtzf){kkJzrTsFCj = true;}
      else if(SraKfLLtzf == nKalfetAGW){ukDXwoiYYB = true;}
      if(coxdVfXJpz == rKVYmVyEGn){FfgkpNUzKx = true;}
      else if(rKVYmVyEGn == coxdVfXJpz){iPVndTOWYZ = true;}
      if(hqoZLHMpir == nSlwwDzStF){xsnIIKWUbh = true;}
      else if(nSlwwDzStF == hqoZLHMpir){tyCqllPNaq = true;}
      if(XVyToxozHg == ZfeqhrUufu){qPUKsAnXIP = true;}
      if(YlmetKWPjW == zXYLzRQAus){OIjGbGIuMU = true;}
      if(jMDZaxUBZY == WRQqAAFeOc){lYTHorxBqg = true;}
      while(ZfeqhrUufu == XVyToxozHg){IsTsHQYkKG = true;}
      while(zXYLzRQAus == zXYLzRQAus){jWmSRnQrxz = true;}
      while(WRQqAAFeOc == WRQqAAFeOc){bIpmrwhLkJ = true;}
      if(MrAsGMfepu == true){MrAsGMfepu = false;}
      if(BDXLoPtZxd == true){BDXLoPtZxd = false;}
      if(lyXBiIOmqh == true){lyXBiIOmqh = false;}
      if(lpfCiGXeFm == true){lpfCiGXeFm = false;}
      if(kkJzrTsFCj == true){kkJzrTsFCj = false;}
      if(FfgkpNUzKx == true){FfgkpNUzKx = false;}
      if(xsnIIKWUbh == true){xsnIIKWUbh = false;}
      if(qPUKsAnXIP == true){qPUKsAnXIP = false;}
      if(OIjGbGIuMU == true){OIjGbGIuMU = false;}
      if(lYTHorxBqg == true){lYTHorxBqg = false;}
      if(wXdUspLWro == true){wXdUspLWro = false;}
      if(YxpuinIhfC == true){YxpuinIhfC = false;}
      if(CbIGwSuMUA == true){CbIGwSuMUA = false;}
      if(DmgbTqePNl == true){DmgbTqePNl = false;}
      if(ukDXwoiYYB == true){ukDXwoiYYB = false;}
      if(iPVndTOWYZ == true){iPVndTOWYZ = false;}
      if(tyCqllPNaq == true){tyCqllPNaq = false;}
      if(IsTsHQYkKG == true){IsTsHQYkKG = false;}
      if(jWmSRnQrxz == true){jWmSRnQrxz = false;}
      if(bIpmrwhLkJ == true){bIpmrwhLkJ = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class KEZBHJHBAC
{ 
  void xbzbnMrbnA()
  { 
      bool wQSTcuFCii = false;
      bool CrMgajVxIz = false;
      bool XoWfHAOfEE = false;
      bool xfjbBLNtHp = false;
      bool DHhpnWbNeU = false;
      bool VchNkHsmMc = false;
      bool gYydlVIjfO = false;
      bool VapRwQHgqj = false;
      bool YABiiTyWqs = false;
      bool RaheJdJDER = false;
      bool OrgQztmPRU = false;
      bool AMucEfXOuR = false;
      bool XksmwusKIR = false;
      bool HDbYUfSkjo = false;
      bool ghFVsFeFac = false;
      bool GtIltcytTE = false;
      bool AbHzNxjWHX = false;
      bool MmdFkofWtq = false;
      bool PnjfKMtoeq = false;
      bool hYQfnEaFIw = false;
      string NDxyaZlbie;
      string VYizSYRswP;
      string eszuLectbw;
      string lnshULrQRt;
      string hndxXNMJmZ;
      string nSpUBUEBlw;
      string xqzmrgfBeH;
      string fBbChpOBXy;
      string RSGCHTyXgz;
      string GpdVxpoqEp;
      string gLefsmqnmK;
      string GDdnddjweY;
      string iHUeAoWGEr;
      string BWxgQGnaJU;
      string bKkVsDMpqT;
      string FrMfHYqzeD;
      string PkitIiGwWW;
      string pJmJwYWylx;
      string bfOklIKQYq;
      string PouGEqapNJ;
      if(NDxyaZlbie == gLefsmqnmK){wQSTcuFCii = true;}
      else if(gLefsmqnmK == NDxyaZlbie){OrgQztmPRU = true;}
      if(VYizSYRswP == GDdnddjweY){CrMgajVxIz = true;}
      else if(GDdnddjweY == VYizSYRswP){AMucEfXOuR = true;}
      if(eszuLectbw == iHUeAoWGEr){XoWfHAOfEE = true;}
      else if(iHUeAoWGEr == eszuLectbw){XksmwusKIR = true;}
      if(lnshULrQRt == BWxgQGnaJU){xfjbBLNtHp = true;}
      else if(BWxgQGnaJU == lnshULrQRt){HDbYUfSkjo = true;}
      if(hndxXNMJmZ == bKkVsDMpqT){DHhpnWbNeU = true;}
      else if(bKkVsDMpqT == hndxXNMJmZ){ghFVsFeFac = true;}
      if(nSpUBUEBlw == FrMfHYqzeD){VchNkHsmMc = true;}
      else if(FrMfHYqzeD == nSpUBUEBlw){GtIltcytTE = true;}
      if(xqzmrgfBeH == PkitIiGwWW){gYydlVIjfO = true;}
      else if(PkitIiGwWW == xqzmrgfBeH){AbHzNxjWHX = true;}
      if(fBbChpOBXy == pJmJwYWylx){VapRwQHgqj = true;}
      if(RSGCHTyXgz == bfOklIKQYq){YABiiTyWqs = true;}
      if(GpdVxpoqEp == PouGEqapNJ){RaheJdJDER = true;}
      while(pJmJwYWylx == fBbChpOBXy){MmdFkofWtq = true;}
      while(bfOklIKQYq == bfOklIKQYq){PnjfKMtoeq = true;}
      while(PouGEqapNJ == PouGEqapNJ){hYQfnEaFIw = true;}
      if(wQSTcuFCii == true){wQSTcuFCii = false;}
      if(CrMgajVxIz == true){CrMgajVxIz = false;}
      if(XoWfHAOfEE == true){XoWfHAOfEE = false;}
      if(xfjbBLNtHp == true){xfjbBLNtHp = false;}
      if(DHhpnWbNeU == true){DHhpnWbNeU = false;}
      if(VchNkHsmMc == true){VchNkHsmMc = false;}
      if(gYydlVIjfO == true){gYydlVIjfO = false;}
      if(VapRwQHgqj == true){VapRwQHgqj = false;}
      if(YABiiTyWqs == true){YABiiTyWqs = false;}
      if(RaheJdJDER == true){RaheJdJDER = false;}
      if(OrgQztmPRU == true){OrgQztmPRU = false;}
      if(AMucEfXOuR == true){AMucEfXOuR = false;}
      if(XksmwusKIR == true){XksmwusKIR = false;}
      if(HDbYUfSkjo == true){HDbYUfSkjo = false;}
      if(ghFVsFeFac == true){ghFVsFeFac = false;}
      if(GtIltcytTE == true){GtIltcytTE = false;}
      if(AbHzNxjWHX == true){AbHzNxjWHX = false;}
      if(MmdFkofWtq == true){MmdFkofWtq = false;}
      if(PnjfKMtoeq == true){PnjfKMtoeq = false;}
      if(hYQfnEaFIw == true){hYQfnEaFIw = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class TPZMQNFBVT
{ 
  void VwSlYRVOxy()
  { 
      bool tbJkwDKJVq = false;
      bool zaCalQpFFZ = false;
      bool CaQxBDJuNF = false;
      bool hNaLFydTEP = false;
      bool UFTxjSAmgi = false;
      bool bgrucTKMis = false;
      bool sOuPJkzpVn = false;
      bool lVBpExGTMh = false;
      bool DVOedBUfhk = false;
      bool mRkLWFJDmz = false;
      bool SJRrwFeCpe = false;
      bool NqzBoWAPlI = false;
      bool PTIkBUkoSz = false;
      bool mDgNPsEVhY = false;
      bool VSpCXwRjVz = false;
      bool FsReizBfqb = false;
      bool TpiqrKJlkw = false;
      bool SdhNmxcFNE = false;
      bool CBTTstkCdQ = false;
      bool rXdGEfizKM = false;
      string zEujYjhOcn;
      string wbOSHOlqAV;
      string mVjQPCCoSW;
      string FczMdhSmNn;
      string jPuQqYsXLR;
      string iKXGfcUeTV;
      string hrwGhScBoY;
      string wycLlXaSYq;
      string JecBnuFrgA;
      string NnTrGqTohY;
      string wrhmUjgLUH;
      string CBFbMDOtRm;
      string NjUnLIekEu;
      string DkkAuQwpfE;
      string OsXYxLhqfD;
      string bYWuLLWsaM;
      string EuGYERQFgu;
      string GYONYTMuqA;
      string ZnFBSeOpni;
      string tCOSzSlyUf;
      if(zEujYjhOcn == wrhmUjgLUH){tbJkwDKJVq = true;}
      else if(wrhmUjgLUH == zEujYjhOcn){SJRrwFeCpe = true;}
      if(wbOSHOlqAV == CBFbMDOtRm){zaCalQpFFZ = true;}
      else if(CBFbMDOtRm == wbOSHOlqAV){NqzBoWAPlI = true;}
      if(mVjQPCCoSW == NjUnLIekEu){CaQxBDJuNF = true;}
      else if(NjUnLIekEu == mVjQPCCoSW){PTIkBUkoSz = true;}
      if(FczMdhSmNn == DkkAuQwpfE){hNaLFydTEP = true;}
      else if(DkkAuQwpfE == FczMdhSmNn){mDgNPsEVhY = true;}
      if(jPuQqYsXLR == OsXYxLhqfD){UFTxjSAmgi = true;}
      else if(OsXYxLhqfD == jPuQqYsXLR){VSpCXwRjVz = true;}
      if(iKXGfcUeTV == bYWuLLWsaM){bgrucTKMis = true;}
      else if(bYWuLLWsaM == iKXGfcUeTV){FsReizBfqb = true;}
      if(hrwGhScBoY == EuGYERQFgu){sOuPJkzpVn = true;}
      else if(EuGYERQFgu == hrwGhScBoY){TpiqrKJlkw = true;}
      if(wycLlXaSYq == GYONYTMuqA){lVBpExGTMh = true;}
      if(JecBnuFrgA == ZnFBSeOpni){DVOedBUfhk = true;}
      if(NnTrGqTohY == tCOSzSlyUf){mRkLWFJDmz = true;}
      while(GYONYTMuqA == wycLlXaSYq){SdhNmxcFNE = true;}
      while(ZnFBSeOpni == ZnFBSeOpni){CBTTstkCdQ = true;}
      while(tCOSzSlyUf == tCOSzSlyUf){rXdGEfizKM = true;}
      if(tbJkwDKJVq == true){tbJkwDKJVq = false;}
      if(zaCalQpFFZ == true){zaCalQpFFZ = false;}
      if(CaQxBDJuNF == true){CaQxBDJuNF = false;}
      if(hNaLFydTEP == true){hNaLFydTEP = false;}
      if(UFTxjSAmgi == true){UFTxjSAmgi = false;}
      if(bgrucTKMis == true){bgrucTKMis = false;}
      if(sOuPJkzpVn == true){sOuPJkzpVn = false;}
      if(lVBpExGTMh == true){lVBpExGTMh = false;}
      if(DVOedBUfhk == true){DVOedBUfhk = false;}
      if(mRkLWFJDmz == true){mRkLWFJDmz = false;}
      if(SJRrwFeCpe == true){SJRrwFeCpe = false;}
      if(NqzBoWAPlI == true){NqzBoWAPlI = false;}
      if(PTIkBUkoSz == true){PTIkBUkoSz = false;}
      if(mDgNPsEVhY == true){mDgNPsEVhY = false;}
      if(VSpCXwRjVz == true){VSpCXwRjVz = false;}
      if(FsReizBfqb == true){FsReizBfqb = false;}
      if(TpiqrKJlkw == true){TpiqrKJlkw = false;}
      if(SdhNmxcFNE == true){SdhNmxcFNE = false;}
      if(CBTTstkCdQ == true){CBTTstkCdQ = false;}
      if(rXdGEfizKM == true){rXdGEfizKM = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class XXFHEKAHAS
{ 
  void MSRZOVFJwd()
  { 
      bool EildFaTNaH = false;
      bool ftqfxDtUWr = false;
      bool uDqBxAsIRQ = false;
      bool KhMEPrwjCf = false;
      bool PJylLaCRXu = false;
      bool EXrtTBqkgF = false;
      bool hLuJxyhlPF = false;
      bool GKSpckFFoV = false;
      bool xajWMmoRkO = false;
      bool BLCxyEOnoN = false;
      bool rQBSnsFCRh = false;
      bool wkuKHGaXxK = false;
      bool IQABEtHUqY = false;
      bool WQQbcfYRhT = false;
      bool gmACSPProq = false;
      bool cpqeFbQAOs = false;
      bool kjKrLeUTga = false;
      bool hIpccUPxin = false;
      bool ePeAugYlVB = false;
      bool PYDnhwcHqm = false;
      string xPszaFjdgc;
      string YRQHmHHaVf;
      string FxoIuTmprt;
      string gteeCEyylQ;
      string AFQJQFuTmd;
      string JHoiHAZjEH;
      string SsklwellFh;
      string JIoFfAfero;
      string YSDOkYFwWC;
      string dNteyGTeNl;
      string TINEUASiCH;
      string TurOhzoWAW;
      string ZpOCDwOKGY;
      string fBQGVPFysj;
      string GVsOhiUewz;
      string RwdqLctLAY;
      string lIcdbSdlsS;
      string tpcQPDxzUU;
      string aiNHHiWZtr;
      string VsxUyysOmP;
      if(xPszaFjdgc == TINEUASiCH){EildFaTNaH = true;}
      else if(TINEUASiCH == xPszaFjdgc){rQBSnsFCRh = true;}
      if(YRQHmHHaVf == TurOhzoWAW){ftqfxDtUWr = true;}
      else if(TurOhzoWAW == YRQHmHHaVf){wkuKHGaXxK = true;}
      if(FxoIuTmprt == ZpOCDwOKGY){uDqBxAsIRQ = true;}
      else if(ZpOCDwOKGY == FxoIuTmprt){IQABEtHUqY = true;}
      if(gteeCEyylQ == fBQGVPFysj){KhMEPrwjCf = true;}
      else if(fBQGVPFysj == gteeCEyylQ){WQQbcfYRhT = true;}
      if(AFQJQFuTmd == GVsOhiUewz){PJylLaCRXu = true;}
      else if(GVsOhiUewz == AFQJQFuTmd){gmACSPProq = true;}
      if(JHoiHAZjEH == RwdqLctLAY){EXrtTBqkgF = true;}
      else if(RwdqLctLAY == JHoiHAZjEH){cpqeFbQAOs = true;}
      if(SsklwellFh == lIcdbSdlsS){hLuJxyhlPF = true;}
      else if(lIcdbSdlsS == SsklwellFh){kjKrLeUTga = true;}
      if(JIoFfAfero == tpcQPDxzUU){GKSpckFFoV = true;}
      if(YSDOkYFwWC == aiNHHiWZtr){xajWMmoRkO = true;}
      if(dNteyGTeNl == VsxUyysOmP){BLCxyEOnoN = true;}
      while(tpcQPDxzUU == JIoFfAfero){hIpccUPxin = true;}
      while(aiNHHiWZtr == aiNHHiWZtr){ePeAugYlVB = true;}
      while(VsxUyysOmP == VsxUyysOmP){PYDnhwcHqm = true;}
      if(EildFaTNaH == true){EildFaTNaH = false;}
      if(ftqfxDtUWr == true){ftqfxDtUWr = false;}
      if(uDqBxAsIRQ == true){uDqBxAsIRQ = false;}
      if(KhMEPrwjCf == true){KhMEPrwjCf = false;}
      if(PJylLaCRXu == true){PJylLaCRXu = false;}
      if(EXrtTBqkgF == true){EXrtTBqkgF = false;}
      if(hLuJxyhlPF == true){hLuJxyhlPF = false;}
      if(GKSpckFFoV == true){GKSpckFFoV = false;}
      if(xajWMmoRkO == true){xajWMmoRkO = false;}
      if(BLCxyEOnoN == true){BLCxyEOnoN = false;}
      if(rQBSnsFCRh == true){rQBSnsFCRh = false;}
      if(wkuKHGaXxK == true){wkuKHGaXxK = false;}
      if(IQABEtHUqY == true){IQABEtHUqY = false;}
      if(WQQbcfYRhT == true){WQQbcfYRhT = false;}
      if(gmACSPProq == true){gmACSPProq = false;}
      if(cpqeFbQAOs == true){cpqeFbQAOs = false;}
      if(kjKrLeUTga == true){kjKrLeUTga = false;}
      if(hIpccUPxin == true){hIpccUPxin = false;}
      if(ePeAugYlVB == true){ePeAugYlVB = false;}
      if(PYDnhwcHqm == true){PYDnhwcHqm = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class ORYGRVSCKN
{ 
  void kNtcaGwWOR()
  { 
      bool UuCibImdwC = false;
      bool kDEcnsjoUU = false;
      bool EWljMfZZtn = false;
      bool zhiONwGEuU = false;
      bool MRLngltgAl = false;
      bool umyaJyISWu = false;
      bool hMiICDTpPq = false;
      bool leszImKxDZ = false;
      bool lsZHsLiIEP = false;
      bool mnhAlzhDlc = false;
      bool SDRIAPszSW = false;
      bool mKPwJombOq = false;
      bool TLlzEyxsMI = false;
      bool FHLZHhaQHd = false;
      bool RjogbbXlpx = false;
      bool MFotJHRREB = false;
      bool RAlKRfzpnb = false;
      bool OWTjYiVEXb = false;
      bool ZLDPuzRQPA = false;
      bool PILFLRxePu = false;
      string HpbDntjKJG;
      string QzYjMdMWYI;
      string bqYLgMgGGx;
      string iRosdWnjme;
      string gobLuSKcln;
      string uhkzHPRPWb;
      string NcDMXyKfFo;
      string pcjtbmPMQO;
      string CDUSCAgpkO;
      string FXNKQDlOmw;
      string IdXwySxqWU;
      string AEyIZKIjKW;
      string RUupjROYdY;
      string BAYUFXfXUi;
      string DpSPNAYFkG;
      string tBEQdmigMf;
      string DXMyTzedCB;
      string dkOaTbCeci;
      string rJnXdzuIqR;
      string oyKnfecTwN;
      if(HpbDntjKJG == IdXwySxqWU){UuCibImdwC = true;}
      else if(IdXwySxqWU == HpbDntjKJG){SDRIAPszSW = true;}
      if(QzYjMdMWYI == AEyIZKIjKW){kDEcnsjoUU = true;}
      else if(AEyIZKIjKW == QzYjMdMWYI){mKPwJombOq = true;}
      if(bqYLgMgGGx == RUupjROYdY){EWljMfZZtn = true;}
      else if(RUupjROYdY == bqYLgMgGGx){TLlzEyxsMI = true;}
      if(iRosdWnjme == BAYUFXfXUi){zhiONwGEuU = true;}
      else if(BAYUFXfXUi == iRosdWnjme){FHLZHhaQHd = true;}
      if(gobLuSKcln == DpSPNAYFkG){MRLngltgAl = true;}
      else if(DpSPNAYFkG == gobLuSKcln){RjogbbXlpx = true;}
      if(uhkzHPRPWb == tBEQdmigMf){umyaJyISWu = true;}
      else if(tBEQdmigMf == uhkzHPRPWb){MFotJHRREB = true;}
      if(NcDMXyKfFo == DXMyTzedCB){hMiICDTpPq = true;}
      else if(DXMyTzedCB == NcDMXyKfFo){RAlKRfzpnb = true;}
      if(pcjtbmPMQO == dkOaTbCeci){leszImKxDZ = true;}
      if(CDUSCAgpkO == rJnXdzuIqR){lsZHsLiIEP = true;}
      if(FXNKQDlOmw == oyKnfecTwN){mnhAlzhDlc = true;}
      while(dkOaTbCeci == pcjtbmPMQO){OWTjYiVEXb = true;}
      while(rJnXdzuIqR == rJnXdzuIqR){ZLDPuzRQPA = true;}
      while(oyKnfecTwN == oyKnfecTwN){PILFLRxePu = true;}
      if(UuCibImdwC == true){UuCibImdwC = false;}
      if(kDEcnsjoUU == true){kDEcnsjoUU = false;}
      if(EWljMfZZtn == true){EWljMfZZtn = false;}
      if(zhiONwGEuU == true){zhiONwGEuU = false;}
      if(MRLngltgAl == true){MRLngltgAl = false;}
      if(umyaJyISWu == true){umyaJyISWu = false;}
      if(hMiICDTpPq == true){hMiICDTpPq = false;}
      if(leszImKxDZ == true){leszImKxDZ = false;}
      if(lsZHsLiIEP == true){lsZHsLiIEP = false;}
      if(mnhAlzhDlc == true){mnhAlzhDlc = false;}
      if(SDRIAPszSW == true){SDRIAPszSW = false;}
      if(mKPwJombOq == true){mKPwJombOq = false;}
      if(TLlzEyxsMI == true){TLlzEyxsMI = false;}
      if(FHLZHhaQHd == true){FHLZHhaQHd = false;}
      if(RjogbbXlpx == true){RjogbbXlpx = false;}
      if(MFotJHRREB == true){MFotJHRREB = false;}
      if(RAlKRfzpnb == true){RAlKRfzpnb = false;}
      if(OWTjYiVEXb == true){OWTjYiVEXb = false;}
      if(ZLDPuzRQPA == true){ZLDPuzRQPA = false;}
      if(PILFLRxePu == true){PILFLRxePu = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class SJTPEUBUXQ
{ 
  void CIMozZiMgW()
  { 
      bool eSfKMmUcmC = false;
      bool ZzxyzNzOfz = false;
      bool MnjYhtEeMf = false;
      bool xHnfHJLMEC = false;
      bool qRmuPmFYbm = false;
      bool OjutupiHcS = false;
      bool ipQHERLRpp = false;
      bool BlKdIuAoIt = false;
      bool oeCYQMLtjR = false;
      bool aEjkTABfpx = false;
      bool bmillbZRkA = false;
      bool psyhdDnrpq = false;
      bool FQhYOwCYKI = false;
      bool sTyKSBwPlo = false;
      bool mtIjagGCHP = false;
      bool MJpzrKFJXp = false;
      bool ZAGcGVumPb = false;
      bool GXFADLIxxh = false;
      bool pzQtwjczSH = false;
      bool ulrwPmmfcF = false;
      string TRYGiGxjHz;
      string qRVREpMVsO;
      string bbZUxEmnSm;
      string HYHcCIiQzR;
      string JDeEuDOGNK;
      string nwjfXqrEIe;
      string TJRTqRJsPw;
      string GuWaEYxUZt;
      string pfZHzLoaEK;
      string PdITyzkLNc;
      string sVpRErZIbz;
      string tWdOomjJUf;
      string cinEfblCbF;
      string mlHxAUoIDG;
      string lfyFQsAteL;
      string PbpgzKhlkb;
      string FWfWLIOgOU;
      string ybGNtxjhnm;
      string brXQpLuaxo;
      string mDWbBOzbtI;
      if(TRYGiGxjHz == sVpRErZIbz){eSfKMmUcmC = true;}
      else if(sVpRErZIbz == TRYGiGxjHz){bmillbZRkA = true;}
      if(qRVREpMVsO == tWdOomjJUf){ZzxyzNzOfz = true;}
      else if(tWdOomjJUf == qRVREpMVsO){psyhdDnrpq = true;}
      if(bbZUxEmnSm == cinEfblCbF){MnjYhtEeMf = true;}
      else if(cinEfblCbF == bbZUxEmnSm){FQhYOwCYKI = true;}
      if(HYHcCIiQzR == mlHxAUoIDG){xHnfHJLMEC = true;}
      else if(mlHxAUoIDG == HYHcCIiQzR){sTyKSBwPlo = true;}
      if(JDeEuDOGNK == lfyFQsAteL){qRmuPmFYbm = true;}
      else if(lfyFQsAteL == JDeEuDOGNK){mtIjagGCHP = true;}
      if(nwjfXqrEIe == PbpgzKhlkb){OjutupiHcS = true;}
      else if(PbpgzKhlkb == nwjfXqrEIe){MJpzrKFJXp = true;}
      if(TJRTqRJsPw == FWfWLIOgOU){ipQHERLRpp = true;}
      else if(FWfWLIOgOU == TJRTqRJsPw){ZAGcGVumPb = true;}
      if(GuWaEYxUZt == ybGNtxjhnm){BlKdIuAoIt = true;}
      if(pfZHzLoaEK == brXQpLuaxo){oeCYQMLtjR = true;}
      if(PdITyzkLNc == mDWbBOzbtI){aEjkTABfpx = true;}
      while(ybGNtxjhnm == GuWaEYxUZt){GXFADLIxxh = true;}
      while(brXQpLuaxo == brXQpLuaxo){pzQtwjczSH = true;}
      while(mDWbBOzbtI == mDWbBOzbtI){ulrwPmmfcF = true;}
      if(eSfKMmUcmC == true){eSfKMmUcmC = false;}
      if(ZzxyzNzOfz == true){ZzxyzNzOfz = false;}
      if(MnjYhtEeMf == true){MnjYhtEeMf = false;}
      if(xHnfHJLMEC == true){xHnfHJLMEC = false;}
      if(qRmuPmFYbm == true){qRmuPmFYbm = false;}
      if(OjutupiHcS == true){OjutupiHcS = false;}
      if(ipQHERLRpp == true){ipQHERLRpp = false;}
      if(BlKdIuAoIt == true){BlKdIuAoIt = false;}
      if(oeCYQMLtjR == true){oeCYQMLtjR = false;}
      if(aEjkTABfpx == true){aEjkTABfpx = false;}
      if(bmillbZRkA == true){bmillbZRkA = false;}
      if(psyhdDnrpq == true){psyhdDnrpq = false;}
      if(FQhYOwCYKI == true){FQhYOwCYKI = false;}
      if(sTyKSBwPlo == true){sTyKSBwPlo = false;}
      if(mtIjagGCHP == true){mtIjagGCHP = false;}
      if(MJpzrKFJXp == true){MJpzrKFJXp = false;}
      if(ZAGcGVumPb == true){ZAGcGVumPb = false;}
      if(GXFADLIxxh == true){GXFADLIxxh = false;}
      if(pzQtwjczSH == true){pzQtwjczSH = false;}
      if(ulrwPmmfcF == true){ulrwPmmfcF = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class AXWSSLDMLR
{ 
  void tIyjoQYXwD()
  { 
      bool JZYRHouALi = false;
      bool IUiqMlLtYt = false;
      bool udiOqDRqUb = false;
      bool MRqRUKZVzT = false;
      bool UKocwBUjOV = false;
      bool iskFzepKZD = false;
      bool XEeiWqdQVB = false;
      bool LouEZkoGSp = false;
      bool igbysTflRo = false;
      bool UPuuwPfFGF = false;
      bool XDNNJsxgeO = false;
      bool pjqjUpcfpC = false;
      bool KqyggwtzHK = false;
      bool FiANReTNnz = false;
      bool VzGDykXLaG = false;
      bool lzODtfEggN = false;
      bool zxYUJHidRo = false;
      bool VOqqfLkuhw = false;
      bool XiYBXFTwSl = false;
      bool ZlgaAXZksq = false;
      string XUJpHNXVtT;
      string dAbuXuxWqS;
      string LmUwnNouAx;
      string jcLZhCaDXx;
      string BaxjZtQZJX;
      string YTRrZjzNCt;
      string XbUwiAnBNV;
      string TtytQkokVt;
      string xOkcYQLTzx;
      string CNBdYYGBBY;
      string FOMnDeUWao;
      string uOrIxJpqXS;
      string oUCPSGrUVr;
      string eniwniBxYt;
      string unsKCnVsfP;
      string hOcijjMxVx;
      string lABhKGeuTO;
      string HsScWAbqNd;
      string kznGJPKAME;
      string WEbbIumKAu;
      if(XUJpHNXVtT == FOMnDeUWao){JZYRHouALi = true;}
      else if(FOMnDeUWao == XUJpHNXVtT){XDNNJsxgeO = true;}
      if(dAbuXuxWqS == uOrIxJpqXS){IUiqMlLtYt = true;}
      else if(uOrIxJpqXS == dAbuXuxWqS){pjqjUpcfpC = true;}
      if(LmUwnNouAx == oUCPSGrUVr){udiOqDRqUb = true;}
      else if(oUCPSGrUVr == LmUwnNouAx){KqyggwtzHK = true;}
      if(jcLZhCaDXx == eniwniBxYt){MRqRUKZVzT = true;}
      else if(eniwniBxYt == jcLZhCaDXx){FiANReTNnz = true;}
      if(BaxjZtQZJX == unsKCnVsfP){UKocwBUjOV = true;}
      else if(unsKCnVsfP == BaxjZtQZJX){VzGDykXLaG = true;}
      if(YTRrZjzNCt == hOcijjMxVx){iskFzepKZD = true;}
      else if(hOcijjMxVx == YTRrZjzNCt){lzODtfEggN = true;}
      if(XbUwiAnBNV == lABhKGeuTO){XEeiWqdQVB = true;}
      else if(lABhKGeuTO == XbUwiAnBNV){zxYUJHidRo = true;}
      if(TtytQkokVt == HsScWAbqNd){LouEZkoGSp = true;}
      if(xOkcYQLTzx == kznGJPKAME){igbysTflRo = true;}
      if(CNBdYYGBBY == WEbbIumKAu){UPuuwPfFGF = true;}
      while(HsScWAbqNd == TtytQkokVt){VOqqfLkuhw = true;}
      while(kznGJPKAME == kznGJPKAME){XiYBXFTwSl = true;}
      while(WEbbIumKAu == WEbbIumKAu){ZlgaAXZksq = true;}
      if(JZYRHouALi == true){JZYRHouALi = false;}
      if(IUiqMlLtYt == true){IUiqMlLtYt = false;}
      if(udiOqDRqUb == true){udiOqDRqUb = false;}
      if(MRqRUKZVzT == true){MRqRUKZVzT = false;}
      if(UKocwBUjOV == true){UKocwBUjOV = false;}
      if(iskFzepKZD == true){iskFzepKZD = false;}
      if(XEeiWqdQVB == true){XEeiWqdQVB = false;}
      if(LouEZkoGSp == true){LouEZkoGSp = false;}
      if(igbysTflRo == true){igbysTflRo = false;}
      if(UPuuwPfFGF == true){UPuuwPfFGF = false;}
      if(XDNNJsxgeO == true){XDNNJsxgeO = false;}
      if(pjqjUpcfpC == true){pjqjUpcfpC = false;}
      if(KqyggwtzHK == true){KqyggwtzHK = false;}
      if(FiANReTNnz == true){FiANReTNnz = false;}
      if(VzGDykXLaG == true){VzGDykXLaG = false;}
      if(lzODtfEggN == true){lzODtfEggN = false;}
      if(zxYUJHidRo == true){zxYUJHidRo = false;}
      if(VOqqfLkuhw == true){VOqqfLkuhw = false;}
      if(XiYBXFTwSl == true){XiYBXFTwSl = false;}
      if(ZlgaAXZksq == true){ZlgaAXZksq = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class BAGQPDVCTX
{ 
  void cnpHqcXLgY()
  { 
      bool ZqGKtJciLE = false;
      bool rPjcMfkRyT = false;
      bool maxVYRmdxE = false;
      bool DuMVwIOwFk = false;
      bool WaoQRMBKpi = false;
      bool qmtPMztjlc = false;
      bool VylGAxCNfD = false;
      bool QoMMxLkfDL = false;
      bool QcnOMQAxJw = false;
      bool OdKcPXoiPU = false;
      bool JndlRCZgRB = false;
      bool ONfZLrJWsj = false;
      bool wFEjoleiwZ = false;
      bool WCPiCbzBxK = false;
      bool pSeHgAyjQW = false;
      bool ORofXDjsxe = false;
      bool WqkrdMywXj = false;
      bool sHZiscawDo = false;
      bool ntSZKFNjKy = false;
      bool rGERmzhmcU = false;
      string hpdEcYBPww;
      string VrDDjTtGzt;
      string DAaukoLehx;
      string KzJXimucmG;
      string SnWiQoptUu;
      string ZdKzqhOhSm;
      string MWhzkVieUx;
      string XRSsaOdrew;
      string yRJlXgoJfB;
      string YNJAswFWxt;
      string FKZXWIKRXc;
      string DVDWnuMwaD;
      string gZzTYKHSze;
      string IGtjpmqlOO;
      string VXlDxCKlLy;
      string jJusNfLGzM;
      string ArSsTxbSfA;
      string DZgLhImwVW;
      string AUGAuzKBVK;
      string bkmCOcErjz;
      if(hpdEcYBPww == FKZXWIKRXc){ZqGKtJciLE = true;}
      else if(FKZXWIKRXc == hpdEcYBPww){JndlRCZgRB = true;}
      if(VrDDjTtGzt == DVDWnuMwaD){rPjcMfkRyT = true;}
      else if(DVDWnuMwaD == VrDDjTtGzt){ONfZLrJWsj = true;}
      if(DAaukoLehx == gZzTYKHSze){maxVYRmdxE = true;}
      else if(gZzTYKHSze == DAaukoLehx){wFEjoleiwZ = true;}
      if(KzJXimucmG == IGtjpmqlOO){DuMVwIOwFk = true;}
      else if(IGtjpmqlOO == KzJXimucmG){WCPiCbzBxK = true;}
      if(SnWiQoptUu == VXlDxCKlLy){WaoQRMBKpi = true;}
      else if(VXlDxCKlLy == SnWiQoptUu){pSeHgAyjQW = true;}
      if(ZdKzqhOhSm == jJusNfLGzM){qmtPMztjlc = true;}
      else if(jJusNfLGzM == ZdKzqhOhSm){ORofXDjsxe = true;}
      if(MWhzkVieUx == ArSsTxbSfA){VylGAxCNfD = true;}
      else if(ArSsTxbSfA == MWhzkVieUx){WqkrdMywXj = true;}
      if(XRSsaOdrew == DZgLhImwVW){QoMMxLkfDL = true;}
      if(yRJlXgoJfB == AUGAuzKBVK){QcnOMQAxJw = true;}
      if(YNJAswFWxt == bkmCOcErjz){OdKcPXoiPU = true;}
      while(DZgLhImwVW == XRSsaOdrew){sHZiscawDo = true;}
      while(AUGAuzKBVK == AUGAuzKBVK){ntSZKFNjKy = true;}
      while(bkmCOcErjz == bkmCOcErjz){rGERmzhmcU = true;}
      if(ZqGKtJciLE == true){ZqGKtJciLE = false;}
      if(rPjcMfkRyT == true){rPjcMfkRyT = false;}
      if(maxVYRmdxE == true){maxVYRmdxE = false;}
      if(DuMVwIOwFk == true){DuMVwIOwFk = false;}
      if(WaoQRMBKpi == true){WaoQRMBKpi = false;}
      if(qmtPMztjlc == true){qmtPMztjlc = false;}
      if(VylGAxCNfD == true){VylGAxCNfD = false;}
      if(QoMMxLkfDL == true){QoMMxLkfDL = false;}
      if(QcnOMQAxJw == true){QcnOMQAxJw = false;}
      if(OdKcPXoiPU == true){OdKcPXoiPU = false;}
      if(JndlRCZgRB == true){JndlRCZgRB = false;}
      if(ONfZLrJWsj == true){ONfZLrJWsj = false;}
      if(wFEjoleiwZ == true){wFEjoleiwZ = false;}
      if(WCPiCbzBxK == true){WCPiCbzBxK = false;}
      if(pSeHgAyjQW == true){pSeHgAyjQW = false;}
      if(ORofXDjsxe == true){ORofXDjsxe = false;}
      if(WqkrdMywXj == true){WqkrdMywXj = false;}
      if(sHZiscawDo == true){sHZiscawDo = false;}
      if(ntSZKFNjKy == true){ntSZKFNjKy = false;}
      if(rGERmzhmcU == true){rGERmzhmcU = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class XQZODNPQJX
{ 
  void jqkYWXdGDJ()
  { 
      bool puhXfJHTFo = false;
      bool MjwtshtZZF = false;
      bool SqNhBSORZK = false;
      bool PVhlgtTnpn = false;
      bool iHFRgHWlWI = false;
      bool SNCifzgAWM = false;
      bool uptuZqCKMz = false;
      bool NGjkWKlwBs = false;
      bool ubuRqBSyGh = false;
      bool MSRcssNKro = false;
      bool FMZWtMdQMU = false;
      bool NkzcQTtcDX = false;
      bool XDDemunGrd = false;
      bool xbDLmiBXWd = false;
      bool WCkkUbTnMZ = false;
      bool yjGTQBJujy = false;
      bool YXYiWlgmoh = false;
      bool RVFZAVRSJK = false;
      bool bAtReMUiuk = false;
      bool YFnYFzcCNi = false;
      string MXsmMMuphO;
      string bXLVlopGMa;
      string qVWksCHSVW;
      string WMApqkulTN;
      string ZpkNAflrkh;
      string AUlacqAHtJ;
      string EbULrPWVeB;
      string sElzABkJkN;
      string QPhnVBZZMA;
      string jmqJIyVYUj;
      string IQMiowhmZb;
      string GqWgsosgoq;
      string pxIeQFMcpC;
      string eLnBEzCyyZ;
      string SlzkssQKQT;
      string EojdsKHhRi;
      string jFxXwtCVbs;
      string muhPXExXkX;
      string oCLWxpbKHt;
      string rTgPpNnboy;
      if(MXsmMMuphO == IQMiowhmZb){puhXfJHTFo = true;}
      else if(IQMiowhmZb == MXsmMMuphO){FMZWtMdQMU = true;}
      if(bXLVlopGMa == GqWgsosgoq){MjwtshtZZF = true;}
      else if(GqWgsosgoq == bXLVlopGMa){NkzcQTtcDX = true;}
      if(qVWksCHSVW == pxIeQFMcpC){SqNhBSORZK = true;}
      else if(pxIeQFMcpC == qVWksCHSVW){XDDemunGrd = true;}
      if(WMApqkulTN == eLnBEzCyyZ){PVhlgtTnpn = true;}
      else if(eLnBEzCyyZ == WMApqkulTN){xbDLmiBXWd = true;}
      if(ZpkNAflrkh == SlzkssQKQT){iHFRgHWlWI = true;}
      else if(SlzkssQKQT == ZpkNAflrkh){WCkkUbTnMZ = true;}
      if(AUlacqAHtJ == EojdsKHhRi){SNCifzgAWM = true;}
      else if(EojdsKHhRi == AUlacqAHtJ){yjGTQBJujy = true;}
      if(EbULrPWVeB == jFxXwtCVbs){uptuZqCKMz = true;}
      else if(jFxXwtCVbs == EbULrPWVeB){YXYiWlgmoh = true;}
      if(sElzABkJkN == muhPXExXkX){NGjkWKlwBs = true;}
      if(QPhnVBZZMA == oCLWxpbKHt){ubuRqBSyGh = true;}
      if(jmqJIyVYUj == rTgPpNnboy){MSRcssNKro = true;}
      while(muhPXExXkX == sElzABkJkN){RVFZAVRSJK = true;}
      while(oCLWxpbKHt == oCLWxpbKHt){bAtReMUiuk = true;}
      while(rTgPpNnboy == rTgPpNnboy){YFnYFzcCNi = true;}
      if(puhXfJHTFo == true){puhXfJHTFo = false;}
      if(MjwtshtZZF == true){MjwtshtZZF = false;}
      if(SqNhBSORZK == true){SqNhBSORZK = false;}
      if(PVhlgtTnpn == true){PVhlgtTnpn = false;}
      if(iHFRgHWlWI == true){iHFRgHWlWI = false;}
      if(SNCifzgAWM == true){SNCifzgAWM = false;}
      if(uptuZqCKMz == true){uptuZqCKMz = false;}
      if(NGjkWKlwBs == true){NGjkWKlwBs = false;}
      if(ubuRqBSyGh == true){ubuRqBSyGh = false;}
      if(MSRcssNKro == true){MSRcssNKro = false;}
      if(FMZWtMdQMU == true){FMZWtMdQMU = false;}
      if(NkzcQTtcDX == true){NkzcQTtcDX = false;}
      if(XDDemunGrd == true){XDDemunGrd = false;}
      if(xbDLmiBXWd == true){xbDLmiBXWd = false;}
      if(WCkkUbTnMZ == true){WCkkUbTnMZ = false;}
      if(yjGTQBJujy == true){yjGTQBJujy = false;}
      if(YXYiWlgmoh == true){YXYiWlgmoh = false;}
      if(RVFZAVRSJK == true){RVFZAVRSJK = false;}
      if(bAtReMUiuk == true){bAtReMUiuk = false;}
      if(YFnYFzcCNi == true){YFnYFzcCNi = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class INDIWTHBFC
{ 
  void qZMzJJjIZg()
  { 
      bool CIEjokJqWC = false;
      bool cewtxqSUVV = false;
      bool kLmFINxmYO = false;
      bool PiuJIERwbg = false;
      bool VKCtaqOBFw = false;
      bool WphVUpUybb = false;
      bool mWSIlsills = false;
      bool YVrnAZJsdQ = false;
      bool ywgbqZBYoS = false;
      bool iSUAtyrtIg = false;
      bool IbOMXAxsVu = false;
      bool fbUKcqppQM = false;
      bool rJxTKGArtB = false;
      bool hPkwIVgTEq = false;
      bool bHDslGyJWC = false;
      bool IBcuoyduCR = false;
      bool AFzTMQqXCH = false;
      bool JVlZjkGEhD = false;
      bool HpUqsfloHK = false;
      bool qlRmpWIjfV = false;
      string eWKGASbqpp;
      string WqAMzAMREt;
      string ZIRWOtWcGb;
      string LfjrMcpinJ;
      string XohytBGYYa;
      string aZNHRVEmqG;
      string wyjOdqHHAV;
      string JcdtVkaTcN;
      string mxEfAkRcap;
      string YDrhNYFSTC;
      string tzXCQywTkg;
      string ukKdSytEOs;
      string YdgKxGkwgx;
      string fHzZTnYBOB;
      string oyqstmsOOO;
      string dAEacPRMFK;
      string NzlnBnkjJe;
      string ZspMDalmQK;
      string MWgRSeCYwE;
      string VLwDnoLDrG;
      if(eWKGASbqpp == tzXCQywTkg){CIEjokJqWC = true;}
      else if(tzXCQywTkg == eWKGASbqpp){IbOMXAxsVu = true;}
      if(WqAMzAMREt == ukKdSytEOs){cewtxqSUVV = true;}
      else if(ukKdSytEOs == WqAMzAMREt){fbUKcqppQM = true;}
      if(ZIRWOtWcGb == YdgKxGkwgx){kLmFINxmYO = true;}
      else if(YdgKxGkwgx == ZIRWOtWcGb){rJxTKGArtB = true;}
      if(LfjrMcpinJ == fHzZTnYBOB){PiuJIERwbg = true;}
      else if(fHzZTnYBOB == LfjrMcpinJ){hPkwIVgTEq = true;}
      if(XohytBGYYa == oyqstmsOOO){VKCtaqOBFw = true;}
      else if(oyqstmsOOO == XohytBGYYa){bHDslGyJWC = true;}
      if(aZNHRVEmqG == dAEacPRMFK){WphVUpUybb = true;}
      else if(dAEacPRMFK == aZNHRVEmqG){IBcuoyduCR = true;}
      if(wyjOdqHHAV == NzlnBnkjJe){mWSIlsills = true;}
      else if(NzlnBnkjJe == wyjOdqHHAV){AFzTMQqXCH = true;}
      if(JcdtVkaTcN == ZspMDalmQK){YVrnAZJsdQ = true;}
      if(mxEfAkRcap == MWgRSeCYwE){ywgbqZBYoS = true;}
      if(YDrhNYFSTC == VLwDnoLDrG){iSUAtyrtIg = true;}
      while(ZspMDalmQK == JcdtVkaTcN){JVlZjkGEhD = true;}
      while(MWgRSeCYwE == MWgRSeCYwE){HpUqsfloHK = true;}
      while(VLwDnoLDrG == VLwDnoLDrG){qlRmpWIjfV = true;}
      if(CIEjokJqWC == true){CIEjokJqWC = false;}
      if(cewtxqSUVV == true){cewtxqSUVV = false;}
      if(kLmFINxmYO == true){kLmFINxmYO = false;}
      if(PiuJIERwbg == true){PiuJIERwbg = false;}
      if(VKCtaqOBFw == true){VKCtaqOBFw = false;}
      if(WphVUpUybb == true){WphVUpUybb = false;}
      if(mWSIlsills == true){mWSIlsills = false;}
      if(YVrnAZJsdQ == true){YVrnAZJsdQ = false;}
      if(ywgbqZBYoS == true){ywgbqZBYoS = false;}
      if(iSUAtyrtIg == true){iSUAtyrtIg = false;}
      if(IbOMXAxsVu == true){IbOMXAxsVu = false;}
      if(fbUKcqppQM == true){fbUKcqppQM = false;}
      if(rJxTKGArtB == true){rJxTKGArtB = false;}
      if(hPkwIVgTEq == true){hPkwIVgTEq = false;}
      if(bHDslGyJWC == true){bHDslGyJWC = false;}
      if(IBcuoyduCR == true){IBcuoyduCR = false;}
      if(AFzTMQqXCH == true){AFzTMQqXCH = false;}
      if(JVlZjkGEhD == true){JVlZjkGEhD = false;}
      if(HpUqsfloHK == true){HpUqsfloHK = false;}
      if(qlRmpWIjfV == true){qlRmpWIjfV = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class JGKWJWSEWT
{ 
  void LpORttNmPC()
  { 
      bool skpLqTmHmi = false;
      bool WwhIHJHctl = false;
      bool OENfJxVIwZ = false;
      bool NSQAtMtIqM = false;
      bool aTWiMkxtdb = false;
      bool zbMLBoXJBt = false;
      bool xeKMUDehNu = false;
      bool PylgLtheSY = false;
      bool zbeUZlFFzF = false;
      bool ojGwOuIJOI = false;
      bool FPfiLAoezG = false;
      bool GspctVzpmh = false;
      bool yZhIGfroSP = false;
      bool kYPKTjuwIY = false;
      bool wZFryusdCs = false;
      bool wSWfKfgXcf = false;
      bool IAMjUhcfJJ = false;
      bool aDgNlXTpJK = false;
      bool lOmZTSCjzm = false;
      bool DWTbQuMVXP = false;
      string poSPIduMTf;
      string oPWptBZzSZ;
      string lHmLhERdNo;
      string lYYLAAWipn;
      string iUibEwkOlA;
      string ZGsqOhBGhD;
      string LQzdtQpKpt;
      string eqIeqRXKHl;
      string TDrMPeehwR;
      string yPBlbRUFhm;
      string FZXrUixNAx;
      string JqzwjIYlOO;
      string kINYuOoVCY;
      string wScTfsezqf;
      string hRhyHHQFCT;
      string shpTCxLzwG;
      string taLaAqNePq;
      string cYtifTZPQn;
      string yjThfObJRi;
      string gfCklGFHyQ;
      if(poSPIduMTf == FZXrUixNAx){skpLqTmHmi = true;}
      else if(FZXrUixNAx == poSPIduMTf){FPfiLAoezG = true;}
      if(oPWptBZzSZ == JqzwjIYlOO){WwhIHJHctl = true;}
      else if(JqzwjIYlOO == oPWptBZzSZ){GspctVzpmh = true;}
      if(lHmLhERdNo == kINYuOoVCY){OENfJxVIwZ = true;}
      else if(kINYuOoVCY == lHmLhERdNo){yZhIGfroSP = true;}
      if(lYYLAAWipn == wScTfsezqf){NSQAtMtIqM = true;}
      else if(wScTfsezqf == lYYLAAWipn){kYPKTjuwIY = true;}
      if(iUibEwkOlA == hRhyHHQFCT){aTWiMkxtdb = true;}
      else if(hRhyHHQFCT == iUibEwkOlA){wZFryusdCs = true;}
      if(ZGsqOhBGhD == shpTCxLzwG){zbMLBoXJBt = true;}
      else if(shpTCxLzwG == ZGsqOhBGhD){wSWfKfgXcf = true;}
      if(LQzdtQpKpt == taLaAqNePq){xeKMUDehNu = true;}
      else if(taLaAqNePq == LQzdtQpKpt){IAMjUhcfJJ = true;}
      if(eqIeqRXKHl == cYtifTZPQn){PylgLtheSY = true;}
      if(TDrMPeehwR == yjThfObJRi){zbeUZlFFzF = true;}
      if(yPBlbRUFhm == gfCklGFHyQ){ojGwOuIJOI = true;}
      while(cYtifTZPQn == eqIeqRXKHl){aDgNlXTpJK = true;}
      while(yjThfObJRi == yjThfObJRi){lOmZTSCjzm = true;}
      while(gfCklGFHyQ == gfCklGFHyQ){DWTbQuMVXP = true;}
      if(skpLqTmHmi == true){skpLqTmHmi = false;}
      if(WwhIHJHctl == true){WwhIHJHctl = false;}
      if(OENfJxVIwZ == true){OENfJxVIwZ = false;}
      if(NSQAtMtIqM == true){NSQAtMtIqM = false;}
      if(aTWiMkxtdb == true){aTWiMkxtdb = false;}
      if(zbMLBoXJBt == true){zbMLBoXJBt = false;}
      if(xeKMUDehNu == true){xeKMUDehNu = false;}
      if(PylgLtheSY == true){PylgLtheSY = false;}
      if(zbeUZlFFzF == true){zbeUZlFFzF = false;}
      if(ojGwOuIJOI == true){ojGwOuIJOI = false;}
      if(FPfiLAoezG == true){FPfiLAoezG = false;}
      if(GspctVzpmh == true){GspctVzpmh = false;}
      if(yZhIGfroSP == true){yZhIGfroSP = false;}
      if(kYPKTjuwIY == true){kYPKTjuwIY = false;}
      if(wZFryusdCs == true){wZFryusdCs = false;}
      if(wSWfKfgXcf == true){wSWfKfgXcf = false;}
      if(IAMjUhcfJJ == true){IAMjUhcfJJ = false;}
      if(aDgNlXTpJK == true){aDgNlXTpJK = false;}
      if(lOmZTSCjzm == true){lOmZTSCjzm = false;}
      if(DWTbQuMVXP == true){DWTbQuMVXP = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class BPLQKCXBSJ
{ 
  void KHANiSstUk()
  { 
      bool aoOBdTCLQG = false;
      bool qAwKsbCBPn = false;
      bool ueuWXBedpc = false;
      bool hZnIHgzPOr = false;
      bool MctBTJklif = false;
      bool lHzPautqcb = false;
      bool nYUnYRLnDL = false;
      bool bmlXbSjsCN = false;
      bool PruKpZZYgL = false;
      bool mHllDmHGcC = false;
      bool yxiWDyUbnI = false;
      bool LAnPMudKxz = false;
      bool qlGqXTBATn = false;
      bool KdQAPSJXGr = false;
      bool FykYAmTWZH = false;
      bool JxIcKLpqzj = false;
      bool xTHzyginzs = false;
      bool lFDFssAhqk = false;
      bool AeZMdMUmoD = false;
      bool cRYWtkqlaS = false;
      string xGtxEcoBpL;
      string QqXFylqOlx;
      string FIPkSYMier;
      string KTlndtOExX;
      string WbDKnPcoyF;
      string qiPKEnpIde;
      string QFWxBxFjbE;
      string XmQNacEExC;
      string uWkYBaEaip;
      string DFZRHRFGJq;
      string KsNthDSBja;
      string ilLajsTxwa;
      string seAlARMyGI;
      string XyuGrCJqqy;
      string ICpHGRtyhN;
      string xIJixfrbsP;
      string pTtaDjqEig;
      string jcFyRpnreh;
      string WOQsLPoLIL;
      string JhxbHoIODW;
      if(xGtxEcoBpL == KsNthDSBja){aoOBdTCLQG = true;}
      else if(KsNthDSBja == xGtxEcoBpL){yxiWDyUbnI = true;}
      if(QqXFylqOlx == ilLajsTxwa){qAwKsbCBPn = true;}
      else if(ilLajsTxwa == QqXFylqOlx){LAnPMudKxz = true;}
      if(FIPkSYMier == seAlARMyGI){ueuWXBedpc = true;}
      else if(seAlARMyGI == FIPkSYMier){qlGqXTBATn = true;}
      if(KTlndtOExX == XyuGrCJqqy){hZnIHgzPOr = true;}
      else if(XyuGrCJqqy == KTlndtOExX){KdQAPSJXGr = true;}
      if(WbDKnPcoyF == ICpHGRtyhN){MctBTJklif = true;}
      else if(ICpHGRtyhN == WbDKnPcoyF){FykYAmTWZH = true;}
      if(qiPKEnpIde == xIJixfrbsP){lHzPautqcb = true;}
      else if(xIJixfrbsP == qiPKEnpIde){JxIcKLpqzj = true;}
      if(QFWxBxFjbE == pTtaDjqEig){nYUnYRLnDL = true;}
      else if(pTtaDjqEig == QFWxBxFjbE){xTHzyginzs = true;}
      if(XmQNacEExC == jcFyRpnreh){bmlXbSjsCN = true;}
      if(uWkYBaEaip == WOQsLPoLIL){PruKpZZYgL = true;}
      if(DFZRHRFGJq == JhxbHoIODW){mHllDmHGcC = true;}
      while(jcFyRpnreh == XmQNacEExC){lFDFssAhqk = true;}
      while(WOQsLPoLIL == WOQsLPoLIL){AeZMdMUmoD = true;}
      while(JhxbHoIODW == JhxbHoIODW){cRYWtkqlaS = true;}
      if(aoOBdTCLQG == true){aoOBdTCLQG = false;}
      if(qAwKsbCBPn == true){qAwKsbCBPn = false;}
      if(ueuWXBedpc == true){ueuWXBedpc = false;}
      if(hZnIHgzPOr == true){hZnIHgzPOr = false;}
      if(MctBTJklif == true){MctBTJklif = false;}
      if(lHzPautqcb == true){lHzPautqcb = false;}
      if(nYUnYRLnDL == true){nYUnYRLnDL = false;}
      if(bmlXbSjsCN == true){bmlXbSjsCN = false;}
      if(PruKpZZYgL == true){PruKpZZYgL = false;}
      if(mHllDmHGcC == true){mHllDmHGcC = false;}
      if(yxiWDyUbnI == true){yxiWDyUbnI = false;}
      if(LAnPMudKxz == true){LAnPMudKxz = false;}
      if(qlGqXTBATn == true){qlGqXTBATn = false;}
      if(KdQAPSJXGr == true){KdQAPSJXGr = false;}
      if(FykYAmTWZH == true){FykYAmTWZH = false;}
      if(JxIcKLpqzj == true){JxIcKLpqzj = false;}
      if(xTHzyginzs == true){xTHzyginzs = false;}
      if(lFDFssAhqk == true){lFDFssAhqk = false;}
      if(AeZMdMUmoD == true){AeZMdMUmoD = false;}
      if(cRYWtkqlaS == true){cRYWtkqlaS = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class CGYUSCISUO
{ 
  void aitzabhKRU()
  { 
      bool pJlVsJdPVd = false;
      bool PmzkflinwM = false;
      bool JUTCnAWHhZ = false;
      bool qabCmKugCE = false;
      bool ihehtPiRCp = false;
      bool ulRekUojhr = false;
      bool mVgwlnKxyU = false;
      bool pCkqcbplIX = false;
      bool REFrdFIxRR = false;
      bool ULyKRNBiuF = false;
      bool FlTgzsAaBJ = false;
      bool eDaKahPnRf = false;
      bool eNffzdDaZP = false;
      bool aGpCSfkYsk = false;
      bool FhwImRknji = false;
      bool xMROZqFmgU = false;
      bool pYBkhXMXrt = false;
      bool xqugaxQWrh = false;
      bool sOppSNobca = false;
      bool ZxqYtfgLZP = false;
      string oqYGPsjHXC;
      string rLSzljtHzK;
      string jBREwHCYpN;
      string JtPHTlxkYi;
      string lJtqWODaEx;
      string MmZhhmZUJH;
      string qLQJsxuKeA;
      string mJiQYZHagh;
      string EbUrBVUhZg;
      string LcaRrarjyY;
      string SruDKDEJIH;
      string ezmbDPqXIW;
      string cNkyoJhRYy;
      string hXcHOLfQhx;
      string RLYRBMozNc;
      string iTaawEHxNA;
      string UmjKZGWfMr;
      string iZpLERoTxc;
      string UhDwONxBLJ;
      string DiDhceaNqt;
      if(oqYGPsjHXC == SruDKDEJIH){pJlVsJdPVd = true;}
      else if(SruDKDEJIH == oqYGPsjHXC){FlTgzsAaBJ = true;}
      if(rLSzljtHzK == ezmbDPqXIW){PmzkflinwM = true;}
      else if(ezmbDPqXIW == rLSzljtHzK){eDaKahPnRf = true;}
      if(jBREwHCYpN == cNkyoJhRYy){JUTCnAWHhZ = true;}
      else if(cNkyoJhRYy == jBREwHCYpN){eNffzdDaZP = true;}
      if(JtPHTlxkYi == hXcHOLfQhx){qabCmKugCE = true;}
      else if(hXcHOLfQhx == JtPHTlxkYi){aGpCSfkYsk = true;}
      if(lJtqWODaEx == RLYRBMozNc){ihehtPiRCp = true;}
      else if(RLYRBMozNc == lJtqWODaEx){FhwImRknji = true;}
      if(MmZhhmZUJH == iTaawEHxNA){ulRekUojhr = true;}
      else if(iTaawEHxNA == MmZhhmZUJH){xMROZqFmgU = true;}
      if(qLQJsxuKeA == UmjKZGWfMr){mVgwlnKxyU = true;}
      else if(UmjKZGWfMr == qLQJsxuKeA){pYBkhXMXrt = true;}
      if(mJiQYZHagh == iZpLERoTxc){pCkqcbplIX = true;}
      if(EbUrBVUhZg == UhDwONxBLJ){REFrdFIxRR = true;}
      if(LcaRrarjyY == DiDhceaNqt){ULyKRNBiuF = true;}
      while(iZpLERoTxc == mJiQYZHagh){xqugaxQWrh = true;}
      while(UhDwONxBLJ == UhDwONxBLJ){sOppSNobca = true;}
      while(DiDhceaNqt == DiDhceaNqt){ZxqYtfgLZP = true;}
      if(pJlVsJdPVd == true){pJlVsJdPVd = false;}
      if(PmzkflinwM == true){PmzkflinwM = false;}
      if(JUTCnAWHhZ == true){JUTCnAWHhZ = false;}
      if(qabCmKugCE == true){qabCmKugCE = false;}
      if(ihehtPiRCp == true){ihehtPiRCp = false;}
      if(ulRekUojhr == true){ulRekUojhr = false;}
      if(mVgwlnKxyU == true){mVgwlnKxyU = false;}
      if(pCkqcbplIX == true){pCkqcbplIX = false;}
      if(REFrdFIxRR == true){REFrdFIxRR = false;}
      if(ULyKRNBiuF == true){ULyKRNBiuF = false;}
      if(FlTgzsAaBJ == true){FlTgzsAaBJ = false;}
      if(eDaKahPnRf == true){eDaKahPnRf = false;}
      if(eNffzdDaZP == true){eNffzdDaZP = false;}
      if(aGpCSfkYsk == true){aGpCSfkYsk = false;}
      if(FhwImRknji == true){FhwImRknji = false;}
      if(xMROZqFmgU == true){xMROZqFmgU = false;}
      if(pYBkhXMXrt == true){pYBkhXMXrt = false;}
      if(xqugaxQWrh == true){xqugaxQWrh = false;}
      if(sOppSNobca == true){sOppSNobca = false;}
      if(ZxqYtfgLZP == true){ZxqYtfgLZP = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class CGNNZMKWPH
{ 
  void yeXGiqojVi()
  { 
      bool LDmlQEgwaO = false;
      bool AgtpszoOVq = false;
      bool aVWOgsoIBN = false;
      bool HiCrQpprWC = false;
      bool HyodQSdZXo = false;
      bool MWeGlpfYFW = false;
      bool PXtMHQdCYC = false;
      bool JwqTibgrxN = false;
      bool POkMBjDwGa = false;
      bool KQmAljDcWz = false;
      bool oaBUePfLWJ = false;
      bool JnarGAmhKX = false;
      bool NhwxrrJqgz = false;
      bool XDVxYnNPhk = false;
      bool EqYwRWptsl = false;
      bool xVRylGeDbl = false;
      bool GneXkFRcTS = false;
      bool lXAYSWIzeV = false;
      bool COytBCkWLR = false;
      bool IKmueQLBKM = false;
      string DNbQMXHsOS;
      string UPLpgsdfVd;
      string MXlTjzVoGO;
      string qddWRQsgwa;
      string PatDejCLLA;
      string WCSHOfaHgM;
      string BRmzbpknYQ;
      string zxiuNkchoz;
      string xKdGqoKWIk;
      string plAjYxnubn;
      string yNltAZTXsc;
      string DrRgPpnfIl;
      string fNfmaNwzVQ;
      string xhGBBiXiFR;
      string VmdehxTSTi;
      string JHmpHjhzSm;
      string cUBcfVlQfg;
      string REapPrjBEc;
      string scemGouPsQ;
      string AYPRnBkByM;
      if(DNbQMXHsOS == yNltAZTXsc){LDmlQEgwaO = true;}
      else if(yNltAZTXsc == DNbQMXHsOS){oaBUePfLWJ = true;}
      if(UPLpgsdfVd == DrRgPpnfIl){AgtpszoOVq = true;}
      else if(DrRgPpnfIl == UPLpgsdfVd){JnarGAmhKX = true;}
      if(MXlTjzVoGO == fNfmaNwzVQ){aVWOgsoIBN = true;}
      else if(fNfmaNwzVQ == MXlTjzVoGO){NhwxrrJqgz = true;}
      if(qddWRQsgwa == xhGBBiXiFR){HiCrQpprWC = true;}
      else if(xhGBBiXiFR == qddWRQsgwa){XDVxYnNPhk = true;}
      if(PatDejCLLA == VmdehxTSTi){HyodQSdZXo = true;}
      else if(VmdehxTSTi == PatDejCLLA){EqYwRWptsl = true;}
      if(WCSHOfaHgM == JHmpHjhzSm){MWeGlpfYFW = true;}
      else if(JHmpHjhzSm == WCSHOfaHgM){xVRylGeDbl = true;}
      if(BRmzbpknYQ == cUBcfVlQfg){PXtMHQdCYC = true;}
      else if(cUBcfVlQfg == BRmzbpknYQ){GneXkFRcTS = true;}
      if(zxiuNkchoz == REapPrjBEc){JwqTibgrxN = true;}
      if(xKdGqoKWIk == scemGouPsQ){POkMBjDwGa = true;}
      if(plAjYxnubn == AYPRnBkByM){KQmAljDcWz = true;}
      while(REapPrjBEc == zxiuNkchoz){lXAYSWIzeV = true;}
      while(scemGouPsQ == scemGouPsQ){COytBCkWLR = true;}
      while(AYPRnBkByM == AYPRnBkByM){IKmueQLBKM = true;}
      if(LDmlQEgwaO == true){LDmlQEgwaO = false;}
      if(AgtpszoOVq == true){AgtpszoOVq = false;}
      if(aVWOgsoIBN == true){aVWOgsoIBN = false;}
      if(HiCrQpprWC == true){HiCrQpprWC = false;}
      if(HyodQSdZXo == true){HyodQSdZXo = false;}
      if(MWeGlpfYFW == true){MWeGlpfYFW = false;}
      if(PXtMHQdCYC == true){PXtMHQdCYC = false;}
      if(JwqTibgrxN == true){JwqTibgrxN = false;}
      if(POkMBjDwGa == true){POkMBjDwGa = false;}
      if(KQmAljDcWz == true){KQmAljDcWz = false;}
      if(oaBUePfLWJ == true){oaBUePfLWJ = false;}
      if(JnarGAmhKX == true){JnarGAmhKX = false;}
      if(NhwxrrJqgz == true){NhwxrrJqgz = false;}
      if(XDVxYnNPhk == true){XDVxYnNPhk = false;}
      if(EqYwRWptsl == true){EqYwRWptsl = false;}
      if(xVRylGeDbl == true){xVRylGeDbl = false;}
      if(GneXkFRcTS == true){GneXkFRcTS = false;}
      if(lXAYSWIzeV == true){lXAYSWIzeV = false;}
      if(COytBCkWLR == true){COytBCkWLR = false;}
      if(IKmueQLBKM == true){IKmueQLBKM = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class FWVRNQDDXS
{ 
  void owyiJWBOOX()
  { 
      bool xyqmdgtfml = false;
      bool DlgoVLuEHE = false;
      bool miOUlEyRmU = false;
      bool DAhdemKwZa = false;
      bool DLENRdVPGL = false;
      bool bbaHHNiVBY = false;
      bool hcrRiCDCKi = false;
      bool AydfBaeBDI = false;
      bool iiLbsbYaWQ = false;
      bool DotAsaTleO = false;
      bool ZSEWKcxuFg = false;
      bool ihSspyQPXH = false;
      bool dcfteLDcma = false;
      bool GrVnhPdoRQ = false;
      bool ddUogVWBKt = false;
      bool JENXjxmKry = false;
      bool YUHeZqLdKa = false;
      bool TbxHdAHpMI = false;
      bool oCSrQBdyDk = false;
      bool cTxSrJVoPp = false;
      string NHlLaZhZTZ;
      string zKNBYISoYc;
      string zgRfloxTBr;
      string ZjUARHHEae;
      string YrNXMJClgJ;
      string KTsMwfoGZl;
      string bNXbAPoMiQ;
      string BNOsEHTsTb;
      string lLmrgGpHEk;
      string SBeoCLTkXw;
      string UpCPHwEAIo;
      string MumxzQaeus;
      string ZhIxyziZqs;
      string mhVWHwIWjj;
      string BpyOYWNgpl;
      string kopeWlgFRH;
      string NeJPCdZPpC;
      string HDtKqjitYb;
      string kBjEHxqqAU;
      string PDEbWWfiLt;
      if(NHlLaZhZTZ == UpCPHwEAIo){xyqmdgtfml = true;}
      else if(UpCPHwEAIo == NHlLaZhZTZ){ZSEWKcxuFg = true;}
      if(zKNBYISoYc == MumxzQaeus){DlgoVLuEHE = true;}
      else if(MumxzQaeus == zKNBYISoYc){ihSspyQPXH = true;}
      if(zgRfloxTBr == ZhIxyziZqs){miOUlEyRmU = true;}
      else if(ZhIxyziZqs == zgRfloxTBr){dcfteLDcma = true;}
      if(ZjUARHHEae == mhVWHwIWjj){DAhdemKwZa = true;}
      else if(mhVWHwIWjj == ZjUARHHEae){GrVnhPdoRQ = true;}
      if(YrNXMJClgJ == BpyOYWNgpl){DLENRdVPGL = true;}
      else if(BpyOYWNgpl == YrNXMJClgJ){ddUogVWBKt = true;}
      if(KTsMwfoGZl == kopeWlgFRH){bbaHHNiVBY = true;}
      else if(kopeWlgFRH == KTsMwfoGZl){JENXjxmKry = true;}
      if(bNXbAPoMiQ == NeJPCdZPpC){hcrRiCDCKi = true;}
      else if(NeJPCdZPpC == bNXbAPoMiQ){YUHeZqLdKa = true;}
      if(BNOsEHTsTb == HDtKqjitYb){AydfBaeBDI = true;}
      if(lLmrgGpHEk == kBjEHxqqAU){iiLbsbYaWQ = true;}
      if(SBeoCLTkXw == PDEbWWfiLt){DotAsaTleO = true;}
      while(HDtKqjitYb == BNOsEHTsTb){TbxHdAHpMI = true;}
      while(kBjEHxqqAU == kBjEHxqqAU){oCSrQBdyDk = true;}
      while(PDEbWWfiLt == PDEbWWfiLt){cTxSrJVoPp = true;}
      if(xyqmdgtfml == true){xyqmdgtfml = false;}
      if(DlgoVLuEHE == true){DlgoVLuEHE = false;}
      if(miOUlEyRmU == true){miOUlEyRmU = false;}
      if(DAhdemKwZa == true){DAhdemKwZa = false;}
      if(DLENRdVPGL == true){DLENRdVPGL = false;}
      if(bbaHHNiVBY == true){bbaHHNiVBY = false;}
      if(hcrRiCDCKi == true){hcrRiCDCKi = false;}
      if(AydfBaeBDI == true){AydfBaeBDI = false;}
      if(iiLbsbYaWQ == true){iiLbsbYaWQ = false;}
      if(DotAsaTleO == true){DotAsaTleO = false;}
      if(ZSEWKcxuFg == true){ZSEWKcxuFg = false;}
      if(ihSspyQPXH == true){ihSspyQPXH = false;}
      if(dcfteLDcma == true){dcfteLDcma = false;}
      if(GrVnhPdoRQ == true){GrVnhPdoRQ = false;}
      if(ddUogVWBKt == true){ddUogVWBKt = false;}
      if(JENXjxmKry == true){JENXjxmKry = false;}
      if(YUHeZqLdKa == true){YUHeZqLdKa = false;}
      if(TbxHdAHpMI == true){TbxHdAHpMI = false;}
      if(oCSrQBdyDk == true){oCSrQBdyDk = false;}
      if(cTxSrJVoPp == true){cTxSrJVoPp = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class CPEWXNUUOA
{ 
  void OHxmfKkKYy()
  { 
      bool JrkrmhGyma = false;
      bool cjVoxGoNIL = false;
      bool wZiUECOkDE = false;
      bool LpddHNCoiz = false;
      bool CqkZGuuTbh = false;
      bool oFSOBiIPnk = false;
      bool SUtiOmGqhj = false;
      bool DAdJIFoJOI = false;
      bool GuJVOGWOcY = false;
      bool ElAyfgwCLS = false;
      bool oEkrdoaIFu = false;
      bool szBfdXLYTH = false;
      bool PqOJeRzeca = false;
      bool JmyuSCJRqZ = false;
      bool fOIgeFkUUI = false;
      bool VWhDDxobMM = false;
      bool owfdlGAFMb = false;
      bool NthtbBhheY = false;
      bool feKUFmEtrV = false;
      bool MhEdjihduX = false;
      string IpMxwMmAXd;
      string pYQekCWfQF;
      string qumcHlCFyn;
      string HszYOGCQpz;
      string aIzgjBeaJk;
      string fWdGfMCjpK;
      string JhBiWwZrPd;
      string AFpReiuGsF;
      string GauNIjOrrB;
      string ESaforGQKm;
      string bmLfjZgMbx;
      string RupjDimnal;
      string ggzNZgeJcl;
      string bewGdTPPci;
      string CCQujIbqbF;
      string FSpXFtnyGD;
      string tWjoUlzjFj;
      string SXLqjeQDcQ;
      string FnhWgJoYAj;
      string fQIZneSaZy;
      if(IpMxwMmAXd == bmLfjZgMbx){JrkrmhGyma = true;}
      else if(bmLfjZgMbx == IpMxwMmAXd){oEkrdoaIFu = true;}
      if(pYQekCWfQF == RupjDimnal){cjVoxGoNIL = true;}
      else if(RupjDimnal == pYQekCWfQF){szBfdXLYTH = true;}
      if(qumcHlCFyn == ggzNZgeJcl){wZiUECOkDE = true;}
      else if(ggzNZgeJcl == qumcHlCFyn){PqOJeRzeca = true;}
      if(HszYOGCQpz == bewGdTPPci){LpddHNCoiz = true;}
      else if(bewGdTPPci == HszYOGCQpz){JmyuSCJRqZ = true;}
      if(aIzgjBeaJk == CCQujIbqbF){CqkZGuuTbh = true;}
      else if(CCQujIbqbF == aIzgjBeaJk){fOIgeFkUUI = true;}
      if(fWdGfMCjpK == FSpXFtnyGD){oFSOBiIPnk = true;}
      else if(FSpXFtnyGD == fWdGfMCjpK){VWhDDxobMM = true;}
      if(JhBiWwZrPd == tWjoUlzjFj){SUtiOmGqhj = true;}
      else if(tWjoUlzjFj == JhBiWwZrPd){owfdlGAFMb = true;}
      if(AFpReiuGsF == SXLqjeQDcQ){DAdJIFoJOI = true;}
      if(GauNIjOrrB == FnhWgJoYAj){GuJVOGWOcY = true;}
      if(ESaforGQKm == fQIZneSaZy){ElAyfgwCLS = true;}
      while(SXLqjeQDcQ == AFpReiuGsF){NthtbBhheY = true;}
      while(FnhWgJoYAj == FnhWgJoYAj){feKUFmEtrV = true;}
      while(fQIZneSaZy == fQIZneSaZy){MhEdjihduX = true;}
      if(JrkrmhGyma == true){JrkrmhGyma = false;}
      if(cjVoxGoNIL == true){cjVoxGoNIL = false;}
      if(wZiUECOkDE == true){wZiUECOkDE = false;}
      if(LpddHNCoiz == true){LpddHNCoiz = false;}
      if(CqkZGuuTbh == true){CqkZGuuTbh = false;}
      if(oFSOBiIPnk == true){oFSOBiIPnk = false;}
      if(SUtiOmGqhj == true){SUtiOmGqhj = false;}
      if(DAdJIFoJOI == true){DAdJIFoJOI = false;}
      if(GuJVOGWOcY == true){GuJVOGWOcY = false;}
      if(ElAyfgwCLS == true){ElAyfgwCLS = false;}
      if(oEkrdoaIFu == true){oEkrdoaIFu = false;}
      if(szBfdXLYTH == true){szBfdXLYTH = false;}
      if(PqOJeRzeca == true){PqOJeRzeca = false;}
      if(JmyuSCJRqZ == true){JmyuSCJRqZ = false;}
      if(fOIgeFkUUI == true){fOIgeFkUUI = false;}
      if(VWhDDxobMM == true){VWhDDxobMM = false;}
      if(owfdlGAFMb == true){owfdlGAFMb = false;}
      if(NthtbBhheY == true){NthtbBhheY = false;}
      if(feKUFmEtrV == true){feKUFmEtrV = false;}
      if(MhEdjihduX == true){MhEdjihduX = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class KYCFYTOKXJ
{ 
  void FUsqZPyWKZ()
  { 
      bool DweWRdCguz = false;
      bool QKdfQmieZg = false;
      bool TlZOttcpOF = false;
      bool SCMYddIAef = false;
      bool aeBBeyjqcR = false;
      bool cqejdRVQcX = false;
      bool BLSofOyEBm = false;
      bool dhAtFojYiu = false;
      bool KlMwbaWbuM = false;
      bool HrXHeOMMUQ = false;
      bool Aeopntqkdo = false;
      bool gwggNOzVMF = false;
      bool qVInelKsOq = false;
      bool cXEStewWIg = false;
      bool jlxGfLKpsP = false;
      bool PpzPYeWBKB = false;
      bool jxVmMIqNlh = false;
      bool SbNeUFYCHT = false;
      bool aTzzblXotP = false;
      bool IuLGxlQKtW = false;
      string XbctlfTBiS;
      string FMNKoNpuAg;
      string lKWpZssKCt;
      string GQyFklbpUi;
      string ZJsMTiBbnb;
      string GfRhDMEmUr;
      string mIyoMnNHZD;
      string lAZRHbRKVp;
      string qQWamZyQCY;
      string gnUbuRKDAe;
      string VsCkoGFzaa;
      string tsReBVlWBl;
      string oxFBVxeyWo;
      string QNKpTxOllg;
      string TzpadmWpaZ;
      string enBNoXnBOq;
      string bHckJfiaKD;
      string HAkUSpHdWh;
      string ZnXxKcMwAw;
      string JNWtFMWFQx;
      if(XbctlfTBiS == VsCkoGFzaa){DweWRdCguz = true;}
      else if(VsCkoGFzaa == XbctlfTBiS){Aeopntqkdo = true;}
      if(FMNKoNpuAg == tsReBVlWBl){QKdfQmieZg = true;}
      else if(tsReBVlWBl == FMNKoNpuAg){gwggNOzVMF = true;}
      if(lKWpZssKCt == oxFBVxeyWo){TlZOttcpOF = true;}
      else if(oxFBVxeyWo == lKWpZssKCt){qVInelKsOq = true;}
      if(GQyFklbpUi == QNKpTxOllg){SCMYddIAef = true;}
      else if(QNKpTxOllg == GQyFklbpUi){cXEStewWIg = true;}
      if(ZJsMTiBbnb == TzpadmWpaZ){aeBBeyjqcR = true;}
      else if(TzpadmWpaZ == ZJsMTiBbnb){jlxGfLKpsP = true;}
      if(GfRhDMEmUr == enBNoXnBOq){cqejdRVQcX = true;}
      else if(enBNoXnBOq == GfRhDMEmUr){PpzPYeWBKB = true;}
      if(mIyoMnNHZD == bHckJfiaKD){BLSofOyEBm = true;}
      else if(bHckJfiaKD == mIyoMnNHZD){jxVmMIqNlh = true;}
      if(lAZRHbRKVp == HAkUSpHdWh){dhAtFojYiu = true;}
      if(qQWamZyQCY == ZnXxKcMwAw){KlMwbaWbuM = true;}
      if(gnUbuRKDAe == JNWtFMWFQx){HrXHeOMMUQ = true;}
      while(HAkUSpHdWh == lAZRHbRKVp){SbNeUFYCHT = true;}
      while(ZnXxKcMwAw == ZnXxKcMwAw){aTzzblXotP = true;}
      while(JNWtFMWFQx == JNWtFMWFQx){IuLGxlQKtW = true;}
      if(DweWRdCguz == true){DweWRdCguz = false;}
      if(QKdfQmieZg == true){QKdfQmieZg = false;}
      if(TlZOttcpOF == true){TlZOttcpOF = false;}
      if(SCMYddIAef == true){SCMYddIAef = false;}
      if(aeBBeyjqcR == true){aeBBeyjqcR = false;}
      if(cqejdRVQcX == true){cqejdRVQcX = false;}
      if(BLSofOyEBm == true){BLSofOyEBm = false;}
      if(dhAtFojYiu == true){dhAtFojYiu = false;}
      if(KlMwbaWbuM == true){KlMwbaWbuM = false;}
      if(HrXHeOMMUQ == true){HrXHeOMMUQ = false;}
      if(Aeopntqkdo == true){Aeopntqkdo = false;}
      if(gwggNOzVMF == true){gwggNOzVMF = false;}
      if(qVInelKsOq == true){qVInelKsOq = false;}
      if(cXEStewWIg == true){cXEStewWIg = false;}
      if(jlxGfLKpsP == true){jlxGfLKpsP = false;}
      if(PpzPYeWBKB == true){PpzPYeWBKB = false;}
      if(jxVmMIqNlh == true){jxVmMIqNlh = false;}
      if(SbNeUFYCHT == true){SbNeUFYCHT = false;}
      if(aTzzblXotP == true){aTzzblXotP = false;}
      if(IuLGxlQKtW == true){IuLGxlQKtW = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class NTMAIOPTGO
{ 
  void OhpFsZILrA()
  { 
      bool GrxlFQQtGb = false;
      bool gUMjyZwtAp = false;
      bool QiffNTjxhK = false;
      bool JwMTERChid = false;
      bool gyAQWWSafN = false;
      bool RjAhhXLRYl = false;
      bool fTLuRjHreg = false;
      bool WNLVJRhOIq = false;
      bool AIRTrYwekf = false;
      bool FkJxyNlEzm = false;
      bool OZwyqEYeYQ = false;
      bool oxIgkWBrDr = false;
      bool ncGyalDNWw = false;
      bool edPUcZMScn = false;
      bool AQFUqIbcLb = false;
      bool LtBGzkTxXE = false;
      bool AKHbkLgnEK = false;
      bool JiOOrWWlHR = false;
      bool KaCujjbJUq = false;
      bool GOtYmoJcje = false;
      string gPBwNtKWHM;
      string RLNxCmGRsy;
      string tISoWDUwiF;
      string yYUVyVLZHl;
      string cuAxLPyFkL;
      string loiWcYxLZK;
      string YNmBNrqqzg;
      string agKGVyHVcG;
      string FPLXSJpxrY;
      string XzzxNOIyiT;
      string XGFEjFdbBe;
      string RbhSEICPiE;
      string CszaIagNsG;
      string pIlJiyKGmM;
      string eNuNHwQgrE;
      string LrPeQeHeuI;
      string YQitnIoYjF;
      string yubVYoxlSL;
      string KzUntxrGsE;
      string qeLdnNeAYy;
      if(gPBwNtKWHM == XGFEjFdbBe){GrxlFQQtGb = true;}
      else if(XGFEjFdbBe == gPBwNtKWHM){OZwyqEYeYQ = true;}
      if(RLNxCmGRsy == RbhSEICPiE){gUMjyZwtAp = true;}
      else if(RbhSEICPiE == RLNxCmGRsy){oxIgkWBrDr = true;}
      if(tISoWDUwiF == CszaIagNsG){QiffNTjxhK = true;}
      else if(CszaIagNsG == tISoWDUwiF){ncGyalDNWw = true;}
      if(yYUVyVLZHl == pIlJiyKGmM){JwMTERChid = true;}
      else if(pIlJiyKGmM == yYUVyVLZHl){edPUcZMScn = true;}
      if(cuAxLPyFkL == eNuNHwQgrE){gyAQWWSafN = true;}
      else if(eNuNHwQgrE == cuAxLPyFkL){AQFUqIbcLb = true;}
      if(loiWcYxLZK == LrPeQeHeuI){RjAhhXLRYl = true;}
      else if(LrPeQeHeuI == loiWcYxLZK){LtBGzkTxXE = true;}
      if(YNmBNrqqzg == YQitnIoYjF){fTLuRjHreg = true;}
      else if(YQitnIoYjF == YNmBNrqqzg){AKHbkLgnEK = true;}
      if(agKGVyHVcG == yubVYoxlSL){WNLVJRhOIq = true;}
      if(FPLXSJpxrY == KzUntxrGsE){AIRTrYwekf = true;}
      if(XzzxNOIyiT == qeLdnNeAYy){FkJxyNlEzm = true;}
      while(yubVYoxlSL == agKGVyHVcG){JiOOrWWlHR = true;}
      while(KzUntxrGsE == KzUntxrGsE){KaCujjbJUq = true;}
      while(qeLdnNeAYy == qeLdnNeAYy){GOtYmoJcje = true;}
      if(GrxlFQQtGb == true){GrxlFQQtGb = false;}
      if(gUMjyZwtAp == true){gUMjyZwtAp = false;}
      if(QiffNTjxhK == true){QiffNTjxhK = false;}
      if(JwMTERChid == true){JwMTERChid = false;}
      if(gyAQWWSafN == true){gyAQWWSafN = false;}
      if(RjAhhXLRYl == true){RjAhhXLRYl = false;}
      if(fTLuRjHreg == true){fTLuRjHreg = false;}
      if(WNLVJRhOIq == true){WNLVJRhOIq = false;}
      if(AIRTrYwekf == true){AIRTrYwekf = false;}
      if(FkJxyNlEzm == true){FkJxyNlEzm = false;}
      if(OZwyqEYeYQ == true){OZwyqEYeYQ = false;}
      if(oxIgkWBrDr == true){oxIgkWBrDr = false;}
      if(ncGyalDNWw == true){ncGyalDNWw = false;}
      if(edPUcZMScn == true){edPUcZMScn = false;}
      if(AQFUqIbcLb == true){AQFUqIbcLb = false;}
      if(LtBGzkTxXE == true){LtBGzkTxXE = false;}
      if(AKHbkLgnEK == true){AKHbkLgnEK = false;}
      if(JiOOrWWlHR == true){JiOOrWWlHR = false;}
      if(KaCujjbJUq == true){KaCujjbJUq = false;}
      if(GOtYmoJcje == true){GOtYmoJcje = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class QLPTPCAGTZ
{ 
  void xEQJhUEbBG()
  { 
      bool UuqEWfqJhU = false;
      bool ENYPMLcjIl = false;
      bool aMOPiwTTTV = false;
      bool tyIrwRKCDK = false;
      bool oAbpbqPeqW = false;
      bool eKBnrHfbVZ = false;
      bool MWoLZFEfTt = false;
      bool AZgyxZjYmr = false;
      bool gnbwpixUAn = false;
      bool kigcxRKQPW = false;
      bool liLxVEdDpR = false;
      bool XHncsXurUq = false;
      bool IifeIRsEAf = false;
      bool OTJQFxcdal = false;
      bool FsehQduDiZ = false;
      bool VSuYNCCfnE = false;
      bool LYDKDDyXXu = false;
      bool tRRikPEyOd = false;
      bool WpUaJwXjCD = false;
      bool uxpVafpTeM = false;
      string ylodyiPbdm;
      string sMMfhdMbHR;
      string LElXPizFpa;
      string oyAdFlgrwD;
      string uCRgzpHZmE;
      string XOyHWtAROP;
      string jJlDxuLiaw;
      string wTfDWJlFXY;
      string aYSkCaAsGL;
      string lOdgTkPOiE;
      string eYzqHEitjM;
      string HtspnKpBBW;
      string tRbOJhpzik;
      string tWWTsBYbdx;
      string rFIsDrUmrI;
      string tONMJMwjgZ;
      string OjKzSjWZwm;
      string lOXDdoIiLR;
      string MCGapfJKKg;
      string EotEiIuJZS;
      if(ylodyiPbdm == eYzqHEitjM){UuqEWfqJhU = true;}
      else if(eYzqHEitjM == ylodyiPbdm){liLxVEdDpR = true;}
      if(sMMfhdMbHR == HtspnKpBBW){ENYPMLcjIl = true;}
      else if(HtspnKpBBW == sMMfhdMbHR){XHncsXurUq = true;}
      if(LElXPizFpa == tRbOJhpzik){aMOPiwTTTV = true;}
      else if(tRbOJhpzik == LElXPizFpa){IifeIRsEAf = true;}
      if(oyAdFlgrwD == tWWTsBYbdx){tyIrwRKCDK = true;}
      else if(tWWTsBYbdx == oyAdFlgrwD){OTJQFxcdal = true;}
      if(uCRgzpHZmE == rFIsDrUmrI){oAbpbqPeqW = true;}
      else if(rFIsDrUmrI == uCRgzpHZmE){FsehQduDiZ = true;}
      if(XOyHWtAROP == tONMJMwjgZ){eKBnrHfbVZ = true;}
      else if(tONMJMwjgZ == XOyHWtAROP){VSuYNCCfnE = true;}
      if(jJlDxuLiaw == OjKzSjWZwm){MWoLZFEfTt = true;}
      else if(OjKzSjWZwm == jJlDxuLiaw){LYDKDDyXXu = true;}
      if(wTfDWJlFXY == lOXDdoIiLR){AZgyxZjYmr = true;}
      if(aYSkCaAsGL == MCGapfJKKg){gnbwpixUAn = true;}
      if(lOdgTkPOiE == EotEiIuJZS){kigcxRKQPW = true;}
      while(lOXDdoIiLR == wTfDWJlFXY){tRRikPEyOd = true;}
      while(MCGapfJKKg == MCGapfJKKg){WpUaJwXjCD = true;}
      while(EotEiIuJZS == EotEiIuJZS){uxpVafpTeM = true;}
      if(UuqEWfqJhU == true){UuqEWfqJhU = false;}
      if(ENYPMLcjIl == true){ENYPMLcjIl = false;}
      if(aMOPiwTTTV == true){aMOPiwTTTV = false;}
      if(tyIrwRKCDK == true){tyIrwRKCDK = false;}
      if(oAbpbqPeqW == true){oAbpbqPeqW = false;}
      if(eKBnrHfbVZ == true){eKBnrHfbVZ = false;}
      if(MWoLZFEfTt == true){MWoLZFEfTt = false;}
      if(AZgyxZjYmr == true){AZgyxZjYmr = false;}
      if(gnbwpixUAn == true){gnbwpixUAn = false;}
      if(kigcxRKQPW == true){kigcxRKQPW = false;}
      if(liLxVEdDpR == true){liLxVEdDpR = false;}
      if(XHncsXurUq == true){XHncsXurUq = false;}
      if(IifeIRsEAf == true){IifeIRsEAf = false;}
      if(OTJQFxcdal == true){OTJQFxcdal = false;}
      if(FsehQduDiZ == true){FsehQduDiZ = false;}
      if(VSuYNCCfnE == true){VSuYNCCfnE = false;}
      if(LYDKDDyXXu == true){LYDKDDyXXu = false;}
      if(tRRikPEyOd == true){tRRikPEyOd = false;}
      if(WpUaJwXjCD == true){WpUaJwXjCD = false;}
      if(uxpVafpTeM == true){uxpVafpTeM = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class FOUAKLJOTB
{ 
  void eJcxrcVDNp()
  { 
      bool XkGsxQbWWA = false;
      bool HCEJXmWWGU = false;
      bool sdVoZATGeK = false;
      bool cCQmBLRnLE = false;
      bool ucskpOInXX = false;
      bool YTHzUsORSx = false;
      bool xUrLXFlQIM = false;
      bool VhLCYQkjyL = false;
      bool qehGlJtQSH = false;
      bool wAUNGZjgNk = false;
      bool crfLCpIFZE = false;
      bool IdSHFSmkZN = false;
      bool LUyAPVMxuz = false;
      bool fDWNhyzWEw = false;
      bool AnqNzRgNHn = false;
      bool mzHzYIteuf = false;
      bool cKKaXFHEYG = false;
      bool SQgdNWcjBy = false;
      bool nzoGMguWnZ = false;
      bool EUaXSodQps = false;
      string ctZpMqpjdP;
      string pZCgOtEQTf;
      string uhgpVbYgmM;
      string peszJRsbRJ;
      string rusHWPmoXL;
      string IUJUtuMiTk;
      string RJwRZLgCXw;
      string AbyKmAnZSG;
      string ojJbDUUXFN;
      string FJIgqiyagL;
      string hjQaKfVygs;
      string GmPMwgATNE;
      string pIxJqpTRSE;
      string BMrHXEThQX;
      string zVqLHRsukK;
      string ieNbUYmGiU;
      string LDebrstInq;
      string NRCpFTRkCY;
      string wYgIVWzPly;
      string QMywLupOTO;
      if(ctZpMqpjdP == hjQaKfVygs){XkGsxQbWWA = true;}
      else if(hjQaKfVygs == ctZpMqpjdP){crfLCpIFZE = true;}
      if(pZCgOtEQTf == GmPMwgATNE){HCEJXmWWGU = true;}
      else if(GmPMwgATNE == pZCgOtEQTf){IdSHFSmkZN = true;}
      if(uhgpVbYgmM == pIxJqpTRSE){sdVoZATGeK = true;}
      else if(pIxJqpTRSE == uhgpVbYgmM){LUyAPVMxuz = true;}
      if(peszJRsbRJ == BMrHXEThQX){cCQmBLRnLE = true;}
      else if(BMrHXEThQX == peszJRsbRJ){fDWNhyzWEw = true;}
      if(rusHWPmoXL == zVqLHRsukK){ucskpOInXX = true;}
      else if(zVqLHRsukK == rusHWPmoXL){AnqNzRgNHn = true;}
      if(IUJUtuMiTk == ieNbUYmGiU){YTHzUsORSx = true;}
      else if(ieNbUYmGiU == IUJUtuMiTk){mzHzYIteuf = true;}
      if(RJwRZLgCXw == LDebrstInq){xUrLXFlQIM = true;}
      else if(LDebrstInq == RJwRZLgCXw){cKKaXFHEYG = true;}
      if(AbyKmAnZSG == NRCpFTRkCY){VhLCYQkjyL = true;}
      if(ojJbDUUXFN == wYgIVWzPly){qehGlJtQSH = true;}
      if(FJIgqiyagL == QMywLupOTO){wAUNGZjgNk = true;}
      while(NRCpFTRkCY == AbyKmAnZSG){SQgdNWcjBy = true;}
      while(wYgIVWzPly == wYgIVWzPly){nzoGMguWnZ = true;}
      while(QMywLupOTO == QMywLupOTO){EUaXSodQps = true;}
      if(XkGsxQbWWA == true){XkGsxQbWWA = false;}
      if(HCEJXmWWGU == true){HCEJXmWWGU = false;}
      if(sdVoZATGeK == true){sdVoZATGeK = false;}
      if(cCQmBLRnLE == true){cCQmBLRnLE = false;}
      if(ucskpOInXX == true){ucskpOInXX = false;}
      if(YTHzUsORSx == true){YTHzUsORSx = false;}
      if(xUrLXFlQIM == true){xUrLXFlQIM = false;}
      if(VhLCYQkjyL == true){VhLCYQkjyL = false;}
      if(qehGlJtQSH == true){qehGlJtQSH = false;}
      if(wAUNGZjgNk == true){wAUNGZjgNk = false;}
      if(crfLCpIFZE == true){crfLCpIFZE = false;}
      if(IdSHFSmkZN == true){IdSHFSmkZN = false;}
      if(LUyAPVMxuz == true){LUyAPVMxuz = false;}
      if(fDWNhyzWEw == true){fDWNhyzWEw = false;}
      if(AnqNzRgNHn == true){AnqNzRgNHn = false;}
      if(mzHzYIteuf == true){mzHzYIteuf = false;}
      if(cKKaXFHEYG == true){cKKaXFHEYG = false;}
      if(SQgdNWcjBy == true){SQgdNWcjBy = false;}
      if(nzoGMguWnZ == true){nzoGMguWnZ = false;}
      if(EUaXSodQps == true){EUaXSodQps = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class UUSBSWVWNZ
{ 
  void NCKBXcxxFQ()
  { 
      bool sJjSImELjy = false;
      bool jsTgqabWOG = false;
      bool bIZVQyUfFt = false;
      bool WFUpQQcCyU = false;
      bool hmzsXVKnhk = false;
      bool KULeVjjNCJ = false;
      bool SYFpadYcPZ = false;
      bool xZXtYnJfyu = false;
      bool mfxUiCsoUf = false;
      bool gPzoCIgIRs = false;
      bool whYInkwRGh = false;
      bool aDPGVlbkHY = false;
      bool kiIirhZirQ = false;
      bool GAOEyFHnfx = false;
      bool GbilFdzrSP = false;
      bool fuBsINYoPF = false;
      bool KNZoaanKIQ = false;
      bool emFJSIAWdO = false;
      bool hgPcjKyVwk = false;
      bool fSYZmrBsKe = false;
      string sPzdCAVpOE;
      string kVgGgVmKZG;
      string YLmZECYPfc;
      string jKjVMGWrud;
      string mSiDXhyPOT;
      string LhScyhbYZz;
      string aFJkUalKsZ;
      string ztPwTGbjBV;
      string DJBMRCqHXe;
      string dxSuDhIyix;
      string wnVnTQRWIq;
      string FrWDwQDxTR;
      string jemNwBbUrl;
      string xdAEYPmNrA;
      string jUyfYkaOzl;
      string dKdQMQAIqR;
      string nxdWtarRdf;
      string dpFSgOgGnK;
      string aNUGHmziqI;
      string OeVZMmqalx;
      if(sPzdCAVpOE == wnVnTQRWIq){sJjSImELjy = true;}
      else if(wnVnTQRWIq == sPzdCAVpOE){whYInkwRGh = true;}
      if(kVgGgVmKZG == FrWDwQDxTR){jsTgqabWOG = true;}
      else if(FrWDwQDxTR == kVgGgVmKZG){aDPGVlbkHY = true;}
      if(YLmZECYPfc == jemNwBbUrl){bIZVQyUfFt = true;}
      else if(jemNwBbUrl == YLmZECYPfc){kiIirhZirQ = true;}
      if(jKjVMGWrud == xdAEYPmNrA){WFUpQQcCyU = true;}
      else if(xdAEYPmNrA == jKjVMGWrud){GAOEyFHnfx = true;}
      if(mSiDXhyPOT == jUyfYkaOzl){hmzsXVKnhk = true;}
      else if(jUyfYkaOzl == mSiDXhyPOT){GbilFdzrSP = true;}
      if(LhScyhbYZz == dKdQMQAIqR){KULeVjjNCJ = true;}
      else if(dKdQMQAIqR == LhScyhbYZz){fuBsINYoPF = true;}
      if(aFJkUalKsZ == nxdWtarRdf){SYFpadYcPZ = true;}
      else if(nxdWtarRdf == aFJkUalKsZ){KNZoaanKIQ = true;}
      if(ztPwTGbjBV == dpFSgOgGnK){xZXtYnJfyu = true;}
      if(DJBMRCqHXe == aNUGHmziqI){mfxUiCsoUf = true;}
      if(dxSuDhIyix == OeVZMmqalx){gPzoCIgIRs = true;}
      while(dpFSgOgGnK == ztPwTGbjBV){emFJSIAWdO = true;}
      while(aNUGHmziqI == aNUGHmziqI){hgPcjKyVwk = true;}
      while(OeVZMmqalx == OeVZMmqalx){fSYZmrBsKe = true;}
      if(sJjSImELjy == true){sJjSImELjy = false;}
      if(jsTgqabWOG == true){jsTgqabWOG = false;}
      if(bIZVQyUfFt == true){bIZVQyUfFt = false;}
      if(WFUpQQcCyU == true){WFUpQQcCyU = false;}
      if(hmzsXVKnhk == true){hmzsXVKnhk = false;}
      if(KULeVjjNCJ == true){KULeVjjNCJ = false;}
      if(SYFpadYcPZ == true){SYFpadYcPZ = false;}
      if(xZXtYnJfyu == true){xZXtYnJfyu = false;}
      if(mfxUiCsoUf == true){mfxUiCsoUf = false;}
      if(gPzoCIgIRs == true){gPzoCIgIRs = false;}
      if(whYInkwRGh == true){whYInkwRGh = false;}
      if(aDPGVlbkHY == true){aDPGVlbkHY = false;}
      if(kiIirhZirQ == true){kiIirhZirQ = false;}
      if(GAOEyFHnfx == true){GAOEyFHnfx = false;}
      if(GbilFdzrSP == true){GbilFdzrSP = false;}
      if(fuBsINYoPF == true){fuBsINYoPF = false;}
      if(KNZoaanKIQ == true){KNZoaanKIQ = false;}
      if(emFJSIAWdO == true){emFJSIAWdO = false;}
      if(hgPcjKyVwk == true){hgPcjKyVwk = false;}
      if(fSYZmrBsKe == true){fSYZmrBsKe = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class IKXGPRYAFH
{ 
  void yWwZULIqBm()
  { 
      bool HfnuSqUBgh = false;
      bool tUkgBtDcxq = false;
      bool xCNLSldYxa = false;
      bool TKQCwjhYoh = false;
      bool khhQynfJBH = false;
      bool FbTVHESccg = false;
      bool MwDFOjDijR = false;
      bool LdnPFPUwMd = false;
      bool FTXoUqputq = false;
      bool QEwHUodbCO = false;
      bool jxZiwbnDPr = false;
      bool jWQyarXNjW = false;
      bool sInrBHgftP = false;
      bool krtxtItoss = false;
      bool DmeCHtmygc = false;
      bool RQqeUbIggo = false;
      bool tIIAHqbSES = false;
      bool yiTpTGclkH = false;
      bool TizRyTAObR = false;
      bool zMHEzudeuP = false;
      string PcLPPtkmac;
      string BGLcfcIlJm;
      string jqPQwijzsI;
      string MhwLchGfmu;
      string smlAowmlKx;
      string IOcAzXMtTf;
      string KksRPTKAzx;
      string VbyOsxFPbA;
      string uxnwzxEuLF;
      string UMMHjIsTjV;
      string kmmMbgPOHB;
      string SxSSjNwwSS;
      string OPntbJPqdk;
      string DkfGOIJbUS;
      string hpnKmXssWV;
      string LxBRGVzrkR;
      string QXkWxgQMEb;
      string DUbzjYbdHD;
      string PWUHYGjOzs;
      string JRpCBJEQMF;
      if(PcLPPtkmac == kmmMbgPOHB){HfnuSqUBgh = true;}
      else if(kmmMbgPOHB == PcLPPtkmac){jxZiwbnDPr = true;}
      if(BGLcfcIlJm == SxSSjNwwSS){tUkgBtDcxq = true;}
      else if(SxSSjNwwSS == BGLcfcIlJm){jWQyarXNjW = true;}
      if(jqPQwijzsI == OPntbJPqdk){xCNLSldYxa = true;}
      else if(OPntbJPqdk == jqPQwijzsI){sInrBHgftP = true;}
      if(MhwLchGfmu == DkfGOIJbUS){TKQCwjhYoh = true;}
      else if(DkfGOIJbUS == MhwLchGfmu){krtxtItoss = true;}
      if(smlAowmlKx == hpnKmXssWV){khhQynfJBH = true;}
      else if(hpnKmXssWV == smlAowmlKx){DmeCHtmygc = true;}
      if(IOcAzXMtTf == LxBRGVzrkR){FbTVHESccg = true;}
      else if(LxBRGVzrkR == IOcAzXMtTf){RQqeUbIggo = true;}
      if(KksRPTKAzx == QXkWxgQMEb){MwDFOjDijR = true;}
      else if(QXkWxgQMEb == KksRPTKAzx){tIIAHqbSES = true;}
      if(VbyOsxFPbA == DUbzjYbdHD){LdnPFPUwMd = true;}
      if(uxnwzxEuLF == PWUHYGjOzs){FTXoUqputq = true;}
      if(UMMHjIsTjV == JRpCBJEQMF){QEwHUodbCO = true;}
      while(DUbzjYbdHD == VbyOsxFPbA){yiTpTGclkH = true;}
      while(PWUHYGjOzs == PWUHYGjOzs){TizRyTAObR = true;}
      while(JRpCBJEQMF == JRpCBJEQMF){zMHEzudeuP = true;}
      if(HfnuSqUBgh == true){HfnuSqUBgh = false;}
      if(tUkgBtDcxq == true){tUkgBtDcxq = false;}
      if(xCNLSldYxa == true){xCNLSldYxa = false;}
      if(TKQCwjhYoh == true){TKQCwjhYoh = false;}
      if(khhQynfJBH == true){khhQynfJBH = false;}
      if(FbTVHESccg == true){FbTVHESccg = false;}
      if(MwDFOjDijR == true){MwDFOjDijR = false;}
      if(LdnPFPUwMd == true){LdnPFPUwMd = false;}
      if(FTXoUqputq == true){FTXoUqputq = false;}
      if(QEwHUodbCO == true){QEwHUodbCO = false;}
      if(jxZiwbnDPr == true){jxZiwbnDPr = false;}
      if(jWQyarXNjW == true){jWQyarXNjW = false;}
      if(sInrBHgftP == true){sInrBHgftP = false;}
      if(krtxtItoss == true){krtxtItoss = false;}
      if(DmeCHtmygc == true){DmeCHtmygc = false;}
      if(RQqeUbIggo == true){RQqeUbIggo = false;}
      if(tIIAHqbSES == true){tIIAHqbSES = false;}
      if(yiTpTGclkH == true){yiTpTGclkH = false;}
      if(TizRyTAObR == true){TizRyTAObR = false;}
      if(zMHEzudeuP == true){zMHEzudeuP = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class IRNNOTKDIZ
{ 
  void kxjZxFgEgy()
  { 
      bool jgppPTpsDh = false;
      bool XhMhUQykkI = false;
      bool yQJUpzGEJq = false;
      bool demaOCdzCd = false;
      bool eoJMVKqMRI = false;
      bool WaxgrSXVAP = false;
      bool NkiMDrulSS = false;
      bool myhGcJHwye = false;
      bool ItmATChFhu = false;
      bool dIzlPsFwIc = false;
      bool PEsyVYspEh = false;
      bool LaXUHTxhrB = false;
      bool KoDWndyuqi = false;
      bool DKnUPDAneu = false;
      bool JqBAjDkeew = false;
      bool wXEHSZAWKq = false;
      bool ZxzUeBmCEE = false;
      bool SJDwqSnDmj = false;
      bool sTQtmfFfCp = false;
      bool CccmVLrfUh = false;
      string DRFzFYxXXW;
      string zinyhMHetI;
      string gapjKJfzXE;
      string mojtryfkGA;
      string sOqXnPzbdG;
      string gajQxbaUnw;
      string rxzSiKysGj;
      string gVYtORiSwu;
      string JEVQWLFTxQ;
      string WKxKHwPYnc;
      string QGUtZKCpBe;
      string rIXrlnbhuW;
      string FeupNVYNlS;
      string CKdSeDiapL;
      string JORSXNlEYT;
      string UgcQXkKegE;
      string lnDicgdENh;
      string EAqjMpNcRz;
      string iUoSyUhNus;
      string rEtlZVLhoq;
      if(DRFzFYxXXW == QGUtZKCpBe){jgppPTpsDh = true;}
      else if(QGUtZKCpBe == DRFzFYxXXW){PEsyVYspEh = true;}
      if(zinyhMHetI == rIXrlnbhuW){XhMhUQykkI = true;}
      else if(rIXrlnbhuW == zinyhMHetI){LaXUHTxhrB = true;}
      if(gapjKJfzXE == FeupNVYNlS){yQJUpzGEJq = true;}
      else if(FeupNVYNlS == gapjKJfzXE){KoDWndyuqi = true;}
      if(mojtryfkGA == CKdSeDiapL){demaOCdzCd = true;}
      else if(CKdSeDiapL == mojtryfkGA){DKnUPDAneu = true;}
      if(sOqXnPzbdG == JORSXNlEYT){eoJMVKqMRI = true;}
      else if(JORSXNlEYT == sOqXnPzbdG){JqBAjDkeew = true;}
      if(gajQxbaUnw == UgcQXkKegE){WaxgrSXVAP = true;}
      else if(UgcQXkKegE == gajQxbaUnw){wXEHSZAWKq = true;}
      if(rxzSiKysGj == lnDicgdENh){NkiMDrulSS = true;}
      else if(lnDicgdENh == rxzSiKysGj){ZxzUeBmCEE = true;}
      if(gVYtORiSwu == EAqjMpNcRz){myhGcJHwye = true;}
      if(JEVQWLFTxQ == iUoSyUhNus){ItmATChFhu = true;}
      if(WKxKHwPYnc == rEtlZVLhoq){dIzlPsFwIc = true;}
      while(EAqjMpNcRz == gVYtORiSwu){SJDwqSnDmj = true;}
      while(iUoSyUhNus == iUoSyUhNus){sTQtmfFfCp = true;}
      while(rEtlZVLhoq == rEtlZVLhoq){CccmVLrfUh = true;}
      if(jgppPTpsDh == true){jgppPTpsDh = false;}
      if(XhMhUQykkI == true){XhMhUQykkI = false;}
      if(yQJUpzGEJq == true){yQJUpzGEJq = false;}
      if(demaOCdzCd == true){demaOCdzCd = false;}
      if(eoJMVKqMRI == true){eoJMVKqMRI = false;}
      if(WaxgrSXVAP == true){WaxgrSXVAP = false;}
      if(NkiMDrulSS == true){NkiMDrulSS = false;}
      if(myhGcJHwye == true){myhGcJHwye = false;}
      if(ItmATChFhu == true){ItmATChFhu = false;}
      if(dIzlPsFwIc == true){dIzlPsFwIc = false;}
      if(PEsyVYspEh == true){PEsyVYspEh = false;}
      if(LaXUHTxhrB == true){LaXUHTxhrB = false;}
      if(KoDWndyuqi == true){KoDWndyuqi = false;}
      if(DKnUPDAneu == true){DKnUPDAneu = false;}
      if(JqBAjDkeew == true){JqBAjDkeew = false;}
      if(wXEHSZAWKq == true){wXEHSZAWKq = false;}
      if(ZxzUeBmCEE == true){ZxzUeBmCEE = false;}
      if(SJDwqSnDmj == true){SJDwqSnDmj = false;}
      if(sTQtmfFfCp == true){sTQtmfFfCp = false;}
      if(CccmVLrfUh == true){CccmVLrfUh = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class XUQZWFWAHT
{ 
  void rykGXkyPdH()
  { 
      bool NuyblEhkoI = false;
      bool YCyusHTxpu = false;
      bool SKBbAeCzQI = false;
      bool WPhiBjnVMG = false;
      bool OAWzSuXnCq = false;
      bool MsuTMDtWaH = false;
      bool CiTflJTOtJ = false;
      bool SxkjgSnCIE = false;
      bool GNwZucTOVy = false;
      bool pQuEEffpNJ = false;
      bool bJtsXPILlt = false;
      bool OqNVBoltjJ = false;
      bool oFswSBBfeB = false;
      bool lynzcxSDBf = false;
      bool TIbaiyDYCP = false;
      bool skFETVPyZV = false;
      bool NbfkIQDOrE = false;
      bool VisEofdRMT = false;
      bool yccPHArjfH = false;
      bool gUceRrcpSR = false;
      string AYlElMEaJA;
      string mQCmPRhONt;
      string SMDwjogOaF;
      string YPeTNSkXTD;
      string PuPttBmkHs;
      string KjskqmVpTx;
      string fozEbXkhYx;
      string gJtKdWxIBi;
      string BuGhtnWtcZ;
      string xtEVXauKSW;
      string QELKLApiGU;
      string pMnkujiRJn;
      string BpFzzlFXlD;
      string alpdRxiuVt;
      string ymnIjjFSZm;
      string rdAeVZzMLZ;
      string uRwCsEVKTy;
      string AmuPoNBxOP;
      string fmyzLxkLIq;
      string xVjwygqlOf;
      if(AYlElMEaJA == QELKLApiGU){NuyblEhkoI = true;}
      else if(QELKLApiGU == AYlElMEaJA){bJtsXPILlt = true;}
      if(mQCmPRhONt == pMnkujiRJn){YCyusHTxpu = true;}
      else if(pMnkujiRJn == mQCmPRhONt){OqNVBoltjJ = true;}
      if(SMDwjogOaF == BpFzzlFXlD){SKBbAeCzQI = true;}
      else if(BpFzzlFXlD == SMDwjogOaF){oFswSBBfeB = true;}
      if(YPeTNSkXTD == alpdRxiuVt){WPhiBjnVMG = true;}
      else if(alpdRxiuVt == YPeTNSkXTD){lynzcxSDBf = true;}
      if(PuPttBmkHs == ymnIjjFSZm){OAWzSuXnCq = true;}
      else if(ymnIjjFSZm == PuPttBmkHs){TIbaiyDYCP = true;}
      if(KjskqmVpTx == rdAeVZzMLZ){MsuTMDtWaH = true;}
      else if(rdAeVZzMLZ == KjskqmVpTx){skFETVPyZV = true;}
      if(fozEbXkhYx == uRwCsEVKTy){CiTflJTOtJ = true;}
      else if(uRwCsEVKTy == fozEbXkhYx){NbfkIQDOrE = true;}
      if(gJtKdWxIBi == AmuPoNBxOP){SxkjgSnCIE = true;}
      if(BuGhtnWtcZ == fmyzLxkLIq){GNwZucTOVy = true;}
      if(xtEVXauKSW == xVjwygqlOf){pQuEEffpNJ = true;}
      while(AmuPoNBxOP == gJtKdWxIBi){VisEofdRMT = true;}
      while(fmyzLxkLIq == fmyzLxkLIq){yccPHArjfH = true;}
      while(xVjwygqlOf == xVjwygqlOf){gUceRrcpSR = true;}
      if(NuyblEhkoI == true){NuyblEhkoI = false;}
      if(YCyusHTxpu == true){YCyusHTxpu = false;}
      if(SKBbAeCzQI == true){SKBbAeCzQI = false;}
      if(WPhiBjnVMG == true){WPhiBjnVMG = false;}
      if(OAWzSuXnCq == true){OAWzSuXnCq = false;}
      if(MsuTMDtWaH == true){MsuTMDtWaH = false;}
      if(CiTflJTOtJ == true){CiTflJTOtJ = false;}
      if(SxkjgSnCIE == true){SxkjgSnCIE = false;}
      if(GNwZucTOVy == true){GNwZucTOVy = false;}
      if(pQuEEffpNJ == true){pQuEEffpNJ = false;}
      if(bJtsXPILlt == true){bJtsXPILlt = false;}
      if(OqNVBoltjJ == true){OqNVBoltjJ = false;}
      if(oFswSBBfeB == true){oFswSBBfeB = false;}
      if(lynzcxSDBf == true){lynzcxSDBf = false;}
      if(TIbaiyDYCP == true){TIbaiyDYCP = false;}
      if(skFETVPyZV == true){skFETVPyZV = false;}
      if(NbfkIQDOrE == true){NbfkIQDOrE = false;}
      if(VisEofdRMT == true){VisEofdRMT = false;}
      if(yccPHArjfH == true){yccPHArjfH = false;}
      if(gUceRrcpSR == true){gUceRrcpSR = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class GWXFNORGZE
{ 
  void XuVhFOKAnx()
  { 
      bool bLubMlWdZg = false;
      bool diFTSgVTgq = false;
      bool AnBhbOxedR = false;
      bool LXVcVohiKP = false;
      bool XAKrNhSbim = false;
      bool cGtBGmKNzy = false;
      bool orAHUFMcyd = false;
      bool zlJRTzdITs = false;
      bool uUupnEdTWh = false;
      bool dTiLZeACXI = false;
      bool VpdFnqxchG = false;
      bool JBsFCUwJTP = false;
      bool arFPzeCxqn = false;
      bool zakLXEppBx = false;
      bool HBlQXcacJF = false;
      bool ipiHgcjOFJ = false;
      bool nzksGiQhhx = false;
      bool dFHVHYForW = false;
      bool EYnkFJrddu = false;
      bool UbkrIIPsJo = false;
      string iKTegkRRfI;
      string MBXDIpYEup;
      string AmugePPjhL;
      string QXPLQMuMtV;
      string UrafNYGuID;
      string VWomtwOmzR;
      string UgiTqnlMmu;
      string uLJYUIMPSG;
      string IUaeotibQT;
      string yHNcAmIGnY;
      string lsHNHJNPRk;
      string jzUsIAGEdx;
      string FJuSwnyfXh;
      string zFasTPMMWf;
      string fSKfjzmUUA;
      string fEbqTcynQT;
      string LgrildXaYs;
      string mshyQmzPix;
      string AdLXCtdjZq;
      string QYwCUzaasG;
      if(iKTegkRRfI == lsHNHJNPRk){bLubMlWdZg = true;}
      else if(lsHNHJNPRk == iKTegkRRfI){VpdFnqxchG = true;}
      if(MBXDIpYEup == jzUsIAGEdx){diFTSgVTgq = true;}
      else if(jzUsIAGEdx == MBXDIpYEup){JBsFCUwJTP = true;}
      if(AmugePPjhL == FJuSwnyfXh){AnBhbOxedR = true;}
      else if(FJuSwnyfXh == AmugePPjhL){arFPzeCxqn = true;}
      if(QXPLQMuMtV == zFasTPMMWf){LXVcVohiKP = true;}
      else if(zFasTPMMWf == QXPLQMuMtV){zakLXEppBx = true;}
      if(UrafNYGuID == fSKfjzmUUA){XAKrNhSbim = true;}
      else if(fSKfjzmUUA == UrafNYGuID){HBlQXcacJF = true;}
      if(VWomtwOmzR == fEbqTcynQT){cGtBGmKNzy = true;}
      else if(fEbqTcynQT == VWomtwOmzR){ipiHgcjOFJ = true;}
      if(UgiTqnlMmu == LgrildXaYs){orAHUFMcyd = true;}
      else if(LgrildXaYs == UgiTqnlMmu){nzksGiQhhx = true;}
      if(uLJYUIMPSG == mshyQmzPix){zlJRTzdITs = true;}
      if(IUaeotibQT == AdLXCtdjZq){uUupnEdTWh = true;}
      if(yHNcAmIGnY == QYwCUzaasG){dTiLZeACXI = true;}
      while(mshyQmzPix == uLJYUIMPSG){dFHVHYForW = true;}
      while(AdLXCtdjZq == AdLXCtdjZq){EYnkFJrddu = true;}
      while(QYwCUzaasG == QYwCUzaasG){UbkrIIPsJo = true;}
      if(bLubMlWdZg == true){bLubMlWdZg = false;}
      if(diFTSgVTgq == true){diFTSgVTgq = false;}
      if(AnBhbOxedR == true){AnBhbOxedR = false;}
      if(LXVcVohiKP == true){LXVcVohiKP = false;}
      if(XAKrNhSbim == true){XAKrNhSbim = false;}
      if(cGtBGmKNzy == true){cGtBGmKNzy = false;}
      if(orAHUFMcyd == true){orAHUFMcyd = false;}
      if(zlJRTzdITs == true){zlJRTzdITs = false;}
      if(uUupnEdTWh == true){uUupnEdTWh = false;}
      if(dTiLZeACXI == true){dTiLZeACXI = false;}
      if(VpdFnqxchG == true){VpdFnqxchG = false;}
      if(JBsFCUwJTP == true){JBsFCUwJTP = false;}
      if(arFPzeCxqn == true){arFPzeCxqn = false;}
      if(zakLXEppBx == true){zakLXEppBx = false;}
      if(HBlQXcacJF == true){HBlQXcacJF = false;}
      if(ipiHgcjOFJ == true){ipiHgcjOFJ = false;}
      if(nzksGiQhhx == true){nzksGiQhhx = false;}
      if(dFHVHYForW == true){dFHVHYForW = false;}
      if(EYnkFJrddu == true){EYnkFJrddu = false;}
      if(UbkrIIPsJo == true){UbkrIIPsJo = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class WSIFMBKSMS
{ 
  void PRkTWbnTYH()
  { 
      bool VmYbnrJCCR = false;
      bool efmcZICTmI = false;
      bool RYUMdKerxb = false;
      bool QghcmFMiBi = false;
      bool XURefakZrs = false;
      bool aeZZEwRMyd = false;
      bool NQFZAxyKpU = false;
      bool wTSDkxGofC = false;
      bool YEADAkGHXp = false;
      bool mzjXVHPreh = false;
      bool cajXxHMWoH = false;
      bool ocfwFIQBZO = false;
      bool qplzgwjuhd = false;
      bool gOKyYxUbGs = false;
      bool YjSPAKTnRM = false;
      bool qORPqlojpA = false;
      bool XQoLaZRhWH = false;
      bool nntfpGWWzW = false;
      bool cucUlSxuGl = false;
      bool IkkGVHtHoZ = false;
      string jaophCsQAY;
      string wlpHFlbWEY;
      string jsTEAuxVRg;
      string wmRfStlrrX;
      string VQSjRRzmVP;
      string JREUMpGjom;
      string EXyTcIUKnL;
      string zidfCTZjmh;
      string uKzBWehwSb;
      string mBCFSyRzGI;
      string xoyKQZmXSs;
      string PWwHqtXwwy;
      string ZXqLYxfYND;
      string CacejFLokw;
      string rJcZLPFuNX;
      string aUDIhZymlS;
      string tNKPposRWk;
      string ihLAGQtRzI;
      string rkKpbgXUwK;
      string HYDSCdzNiW;
      if(jaophCsQAY == xoyKQZmXSs){VmYbnrJCCR = true;}
      else if(xoyKQZmXSs == jaophCsQAY){cajXxHMWoH = true;}
      if(wlpHFlbWEY == PWwHqtXwwy){efmcZICTmI = true;}
      else if(PWwHqtXwwy == wlpHFlbWEY){ocfwFIQBZO = true;}
      if(jsTEAuxVRg == ZXqLYxfYND){RYUMdKerxb = true;}
      else if(ZXqLYxfYND == jsTEAuxVRg){qplzgwjuhd = true;}
      if(wmRfStlrrX == CacejFLokw){QghcmFMiBi = true;}
      else if(CacejFLokw == wmRfStlrrX){gOKyYxUbGs = true;}
      if(VQSjRRzmVP == rJcZLPFuNX){XURefakZrs = true;}
      else if(rJcZLPFuNX == VQSjRRzmVP){YjSPAKTnRM = true;}
      if(JREUMpGjom == aUDIhZymlS){aeZZEwRMyd = true;}
      else if(aUDIhZymlS == JREUMpGjom){qORPqlojpA = true;}
      if(EXyTcIUKnL == tNKPposRWk){NQFZAxyKpU = true;}
      else if(tNKPposRWk == EXyTcIUKnL){XQoLaZRhWH = true;}
      if(zidfCTZjmh == ihLAGQtRzI){wTSDkxGofC = true;}
      if(uKzBWehwSb == rkKpbgXUwK){YEADAkGHXp = true;}
      if(mBCFSyRzGI == HYDSCdzNiW){mzjXVHPreh = true;}
      while(ihLAGQtRzI == zidfCTZjmh){nntfpGWWzW = true;}
      while(rkKpbgXUwK == rkKpbgXUwK){cucUlSxuGl = true;}
      while(HYDSCdzNiW == HYDSCdzNiW){IkkGVHtHoZ = true;}
      if(VmYbnrJCCR == true){VmYbnrJCCR = false;}
      if(efmcZICTmI == true){efmcZICTmI = false;}
      if(RYUMdKerxb == true){RYUMdKerxb = false;}
      if(QghcmFMiBi == true){QghcmFMiBi = false;}
      if(XURefakZrs == true){XURefakZrs = false;}
      if(aeZZEwRMyd == true){aeZZEwRMyd = false;}
      if(NQFZAxyKpU == true){NQFZAxyKpU = false;}
      if(wTSDkxGofC == true){wTSDkxGofC = false;}
      if(YEADAkGHXp == true){YEADAkGHXp = false;}
      if(mzjXVHPreh == true){mzjXVHPreh = false;}
      if(cajXxHMWoH == true){cajXxHMWoH = false;}
      if(ocfwFIQBZO == true){ocfwFIQBZO = false;}
      if(qplzgwjuhd == true){qplzgwjuhd = false;}
      if(gOKyYxUbGs == true){gOKyYxUbGs = false;}
      if(YjSPAKTnRM == true){YjSPAKTnRM = false;}
      if(qORPqlojpA == true){qORPqlojpA = false;}
      if(XQoLaZRhWH == true){XQoLaZRhWH = false;}
      if(nntfpGWWzW == true){nntfpGWWzW = false;}
      if(cucUlSxuGl == true){cucUlSxuGl = false;}
      if(IkkGVHtHoZ == true){IkkGVHtHoZ = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class QYTPQRMQTP
{ 
  void VgPIXISgnx()
  { 
      bool EQZkLHdJlA = false;
      bool HITonGkFIm = false;
      bool hWChTcOUWs = false;
      bool VRMVcnHGQD = false;
      bool eWJAGGRmtm = false;
      bool cGbjdhOqQh = false;
      bool rIlrepwyMz = false;
      bool ydnEILMCbN = false;
      bool KbZjQOobru = false;
      bool ZPpiLVjRVP = false;
      bool JTZunySXaR = false;
      bool UMPDXQiCbP = false;
      bool ATGRZhnFsm = false;
      bool augLDqCeuR = false;
      bool wRAZZNAlKu = false;
      bool mgpFOoNHUF = false;
      bool KMenqYfDzf = false;
      bool NDHJSiTgrM = false;
      bool hBtxztFaxO = false;
      bool dtJoHimMhA = false;
      string NDCCJyHaic;
      string AyPkIbwfCI;
      string zTKQsNBnxM;
      string usKDlXsAHX;
      string IrraTEIGMB;
      string mNOcutrkJw;
      string wScVgHnLzj;
      string huXdzHajxn;
      string EtbwYgehHr;
      string fIqLbpPVtM;
      string QwHbTrojcn;
      string SInUqBqgxz;
      string cGDGEZEMCJ;
      string qEpjXHmzcg;
      string qtETYWTWTZ;
      string yhYtiJrBWs;
      string nchTwNSDwi;
      string OqEPHhCjgg;
      string FhrbKIfuBN;
      string PlcisOMjWL;
      if(NDCCJyHaic == QwHbTrojcn){EQZkLHdJlA = true;}
      else if(QwHbTrojcn == NDCCJyHaic){JTZunySXaR = true;}
      if(AyPkIbwfCI == SInUqBqgxz){HITonGkFIm = true;}
      else if(SInUqBqgxz == AyPkIbwfCI){UMPDXQiCbP = true;}
      if(zTKQsNBnxM == cGDGEZEMCJ){hWChTcOUWs = true;}
      else if(cGDGEZEMCJ == zTKQsNBnxM){ATGRZhnFsm = true;}
      if(usKDlXsAHX == qEpjXHmzcg){VRMVcnHGQD = true;}
      else if(qEpjXHmzcg == usKDlXsAHX){augLDqCeuR = true;}
      if(IrraTEIGMB == qtETYWTWTZ){eWJAGGRmtm = true;}
      else if(qtETYWTWTZ == IrraTEIGMB){wRAZZNAlKu = true;}
      if(mNOcutrkJw == yhYtiJrBWs){cGbjdhOqQh = true;}
      else if(yhYtiJrBWs == mNOcutrkJw){mgpFOoNHUF = true;}
      if(wScVgHnLzj == nchTwNSDwi){rIlrepwyMz = true;}
      else if(nchTwNSDwi == wScVgHnLzj){KMenqYfDzf = true;}
      if(huXdzHajxn == OqEPHhCjgg){ydnEILMCbN = true;}
      if(EtbwYgehHr == FhrbKIfuBN){KbZjQOobru = true;}
      if(fIqLbpPVtM == PlcisOMjWL){ZPpiLVjRVP = true;}
      while(OqEPHhCjgg == huXdzHajxn){NDHJSiTgrM = true;}
      while(FhrbKIfuBN == FhrbKIfuBN){hBtxztFaxO = true;}
      while(PlcisOMjWL == PlcisOMjWL){dtJoHimMhA = true;}
      if(EQZkLHdJlA == true){EQZkLHdJlA = false;}
      if(HITonGkFIm == true){HITonGkFIm = false;}
      if(hWChTcOUWs == true){hWChTcOUWs = false;}
      if(VRMVcnHGQD == true){VRMVcnHGQD = false;}
      if(eWJAGGRmtm == true){eWJAGGRmtm = false;}
      if(cGbjdhOqQh == true){cGbjdhOqQh = false;}
      if(rIlrepwyMz == true){rIlrepwyMz = false;}
      if(ydnEILMCbN == true){ydnEILMCbN = false;}
      if(KbZjQOobru == true){KbZjQOobru = false;}
      if(ZPpiLVjRVP == true){ZPpiLVjRVP = false;}
      if(JTZunySXaR == true){JTZunySXaR = false;}
      if(UMPDXQiCbP == true){UMPDXQiCbP = false;}
      if(ATGRZhnFsm == true){ATGRZhnFsm = false;}
      if(augLDqCeuR == true){augLDqCeuR = false;}
      if(wRAZZNAlKu == true){wRAZZNAlKu = false;}
      if(mgpFOoNHUF == true){mgpFOoNHUF = false;}
      if(KMenqYfDzf == true){KMenqYfDzf = false;}
      if(NDHJSiTgrM == true){NDHJSiTgrM = false;}
      if(hBtxztFaxO == true){hBtxztFaxO = false;}
      if(dtJoHimMhA == true){dtJoHimMhA = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class IDCHDJGAHT
{ 
  void lkNpVmPeUG()
  { 
      bool mgOBKGbsxP = false;
      bool FKXXOOcycN = false;
      bool wWISurzuIB = false;
      bool UPIEUAuYbm = false;
      bool aDnukjAqPt = false;
      bool ogDBEQYwFS = false;
      bool GgkutoBSDN = false;
      bool SDWomriNgK = false;
      bool qIeOMmMHAE = false;
      bool aySIgsSrAu = false;
      bool igmBakKNOL = false;
      bool gLOubxBWiG = false;
      bool ctSymUkNIs = false;
      bool ZqMkbJUcma = false;
      bool cyroXOjXgi = false;
      bool rwJsSnOoOG = false;
      bool AwEVkoycSR = false;
      bool bYiHdeBcaX = false;
      bool kMgZBdhSSm = false;
      bool tfOgafsWDh = false;
      string oXZZuDZQsb;
      string ALjTrYZfuV;
      string QSBWgIHfLE;
      string sTWeUewRAo;
      string ZIzpOnqbyG;
      string PBEhdWWCsl;
      string wsFnhgnEyM;
      string bHfGuITKIr;
      string QehEorOoBy;
      string HtYNrfCKHh;
      string AldldHVylV;
      string DLsAURKAzp;
      string RzDAEhiSNO;
      string FIDaqdBwah;
      string VQDeuwAXra;
      string VCLRPBicgw;
      string YDkWQtISJq;
      string POZRTAwXFI;
      string hKZlsCxkKp;
      string uXOdISffOA;
      if(oXZZuDZQsb == AldldHVylV){mgOBKGbsxP = true;}
      else if(AldldHVylV == oXZZuDZQsb){igmBakKNOL = true;}
      if(ALjTrYZfuV == DLsAURKAzp){FKXXOOcycN = true;}
      else if(DLsAURKAzp == ALjTrYZfuV){gLOubxBWiG = true;}
      if(QSBWgIHfLE == RzDAEhiSNO){wWISurzuIB = true;}
      else if(RzDAEhiSNO == QSBWgIHfLE){ctSymUkNIs = true;}
      if(sTWeUewRAo == FIDaqdBwah){UPIEUAuYbm = true;}
      else if(FIDaqdBwah == sTWeUewRAo){ZqMkbJUcma = true;}
      if(ZIzpOnqbyG == VQDeuwAXra){aDnukjAqPt = true;}
      else if(VQDeuwAXra == ZIzpOnqbyG){cyroXOjXgi = true;}
      if(PBEhdWWCsl == VCLRPBicgw){ogDBEQYwFS = true;}
      else if(VCLRPBicgw == PBEhdWWCsl){rwJsSnOoOG = true;}
      if(wsFnhgnEyM == YDkWQtISJq){GgkutoBSDN = true;}
      else if(YDkWQtISJq == wsFnhgnEyM){AwEVkoycSR = true;}
      if(bHfGuITKIr == POZRTAwXFI){SDWomriNgK = true;}
      if(QehEorOoBy == hKZlsCxkKp){qIeOMmMHAE = true;}
      if(HtYNrfCKHh == uXOdISffOA){aySIgsSrAu = true;}
      while(POZRTAwXFI == bHfGuITKIr){bYiHdeBcaX = true;}
      while(hKZlsCxkKp == hKZlsCxkKp){kMgZBdhSSm = true;}
      while(uXOdISffOA == uXOdISffOA){tfOgafsWDh = true;}
      if(mgOBKGbsxP == true){mgOBKGbsxP = false;}
      if(FKXXOOcycN == true){FKXXOOcycN = false;}
      if(wWISurzuIB == true){wWISurzuIB = false;}
      if(UPIEUAuYbm == true){UPIEUAuYbm = false;}
      if(aDnukjAqPt == true){aDnukjAqPt = false;}
      if(ogDBEQYwFS == true){ogDBEQYwFS = false;}
      if(GgkutoBSDN == true){GgkutoBSDN = false;}
      if(SDWomriNgK == true){SDWomriNgK = false;}
      if(qIeOMmMHAE == true){qIeOMmMHAE = false;}
      if(aySIgsSrAu == true){aySIgsSrAu = false;}
      if(igmBakKNOL == true){igmBakKNOL = false;}
      if(gLOubxBWiG == true){gLOubxBWiG = false;}
      if(ctSymUkNIs == true){ctSymUkNIs = false;}
      if(ZqMkbJUcma == true){ZqMkbJUcma = false;}
      if(cyroXOjXgi == true){cyroXOjXgi = false;}
      if(rwJsSnOoOG == true){rwJsSnOoOG = false;}
      if(AwEVkoycSR == true){AwEVkoycSR = false;}
      if(bYiHdeBcaX == true){bYiHdeBcaX = false;}
      if(kMgZBdhSSm == true){kMgZBdhSSm = false;}
      if(tfOgafsWDh == true){tfOgafsWDh = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class NJLHICUYVI
{ 
  void xWnVwJlnCo()
  { 
      bool TtqXRgKUJz = false;
      bool sOGTZhLMFt = false;
      bool FNMawAmtmh = false;
      bool deWVMtrMVT = false;
      bool BEsGqxLXDR = false;
      bool cUCwmGhPbQ = false;
      bool sPhbVOqjGe = false;
      bool ozplrAUFiy = false;
      bool oPpUEJbaiG = false;
      bool LbkFZlWRjc = false;
      bool GbQXcddQDl = false;
      bool kcgcadYMWM = false;
      bool lPAzSNNkLG = false;
      bool dDUFrMyRrZ = false;
      bool eLWwVitHdw = false;
      bool MJtXqpaRFO = false;
      bool PsExIhHbjO = false;
      bool eGUwgZsDdj = false;
      bool SGGPtTIwNB = false;
      bool kfMcJlHZnn = false;
      string mejqJYMDMA;
      string xYCRFGawIJ;
      string NdKcOgXeco;
      string ywrptEFIEr;
      string PWioFPCdTS;
      string UDoLqIUHcb;
      string AgZXBAgLWB;
      string BRrPtptVWz;
      string etKKTuGfyk;
      string iyfbqhwLmF;
      string hpGSRCKYRA;
      string NzjcwGWPDG;
      string sBMlRClPYL;
      string shhRRomrrQ;
      string jhNyXjNCfk;
      string LgIfLfcUAO;
      string QuAFGeQSLH;
      string TeWmWLmOOg;
      string oijmALZCGk;
      string LSqczngIqr;
      if(mejqJYMDMA == hpGSRCKYRA){TtqXRgKUJz = true;}
      else if(hpGSRCKYRA == mejqJYMDMA){GbQXcddQDl = true;}
      if(xYCRFGawIJ == NzjcwGWPDG){sOGTZhLMFt = true;}
      else if(NzjcwGWPDG == xYCRFGawIJ){kcgcadYMWM = true;}
      if(NdKcOgXeco == sBMlRClPYL){FNMawAmtmh = true;}
      else if(sBMlRClPYL == NdKcOgXeco){lPAzSNNkLG = true;}
      if(ywrptEFIEr == shhRRomrrQ){deWVMtrMVT = true;}
      else if(shhRRomrrQ == ywrptEFIEr){dDUFrMyRrZ = true;}
      if(PWioFPCdTS == jhNyXjNCfk){BEsGqxLXDR = true;}
      else if(jhNyXjNCfk == PWioFPCdTS){eLWwVitHdw = true;}
      if(UDoLqIUHcb == LgIfLfcUAO){cUCwmGhPbQ = true;}
      else if(LgIfLfcUAO == UDoLqIUHcb){MJtXqpaRFO = true;}
      if(AgZXBAgLWB == QuAFGeQSLH){sPhbVOqjGe = true;}
      else if(QuAFGeQSLH == AgZXBAgLWB){PsExIhHbjO = true;}
      if(BRrPtptVWz == TeWmWLmOOg){ozplrAUFiy = true;}
      if(etKKTuGfyk == oijmALZCGk){oPpUEJbaiG = true;}
      if(iyfbqhwLmF == LSqczngIqr){LbkFZlWRjc = true;}
      while(TeWmWLmOOg == BRrPtptVWz){eGUwgZsDdj = true;}
      while(oijmALZCGk == oijmALZCGk){SGGPtTIwNB = true;}
      while(LSqczngIqr == LSqczngIqr){kfMcJlHZnn = true;}
      if(TtqXRgKUJz == true){TtqXRgKUJz = false;}
      if(sOGTZhLMFt == true){sOGTZhLMFt = false;}
      if(FNMawAmtmh == true){FNMawAmtmh = false;}
      if(deWVMtrMVT == true){deWVMtrMVT = false;}
      if(BEsGqxLXDR == true){BEsGqxLXDR = false;}
      if(cUCwmGhPbQ == true){cUCwmGhPbQ = false;}
      if(sPhbVOqjGe == true){sPhbVOqjGe = false;}
      if(ozplrAUFiy == true){ozplrAUFiy = false;}
      if(oPpUEJbaiG == true){oPpUEJbaiG = false;}
      if(LbkFZlWRjc == true){LbkFZlWRjc = false;}
      if(GbQXcddQDl == true){GbQXcddQDl = false;}
      if(kcgcadYMWM == true){kcgcadYMWM = false;}
      if(lPAzSNNkLG == true){lPAzSNNkLG = false;}
      if(dDUFrMyRrZ == true){dDUFrMyRrZ = false;}
      if(eLWwVitHdw == true){eLWwVitHdw = false;}
      if(MJtXqpaRFO == true){MJtXqpaRFO = false;}
      if(PsExIhHbjO == true){PsExIhHbjO = false;}
      if(eGUwgZsDdj == true){eGUwgZsDdj = false;}
      if(SGGPtTIwNB == true){SGGPtTIwNB = false;}
      if(kfMcJlHZnn == true){kfMcJlHZnn = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class HUXVYUNTLQ
{ 
  void qCMqMJZdtR()
  { 
      bool VHzDSisESr = false;
      bool dobIqJferC = false;
      bool jYwspDRNOj = false;
      bool ItKKAMGIRp = false;
      bool NroWEgbnNj = false;
      bool uuBsywLFMP = false;
      bool QephjjdRHe = false;
      bool CXNCorjYoJ = false;
      bool adAdoMsRLD = false;
      bool BAuCYhCGmU = false;
      bool DJfigWhyEG = false;
      bool MlQDnmeMsW = false;
      bool pMGEcCcKcG = false;
      bool oclUFRxQwR = false;
      bool etNEpOjqOk = false;
      bool DpNPdpDaFe = false;
      bool tWVxQjzwxW = false;
      bool oNParwzBOO = false;
      bool RkwqDzPWqP = false;
      bool NWKRWHYPmF = false;
      string LxfTqwlpyE;
      string CsdFcgYcQJ;
      string YhfjciHVje;
      string iLuglkTqEx;
      string BFuhqNGAsP;
      string bstwxdQupI;
      string oQGSVpyxTr;
      string MgYTHTlyrO;
      string bGbUDoQzjI;
      string UXBwIkzbLA;
      string PJgBCtUand;
      string qSDafhnlPg;
      string YyMKXofbKW;
      string TJlqzSZZRI;
      string UpLFQBTaQa;
      string xMMebQwVdM;
      string OrPRJhfLaM;
      string HNTHMimHsV;
      string UFLjYGxHPh;
      string WEwFsbaswi;
      if(LxfTqwlpyE == PJgBCtUand){VHzDSisESr = true;}
      else if(PJgBCtUand == LxfTqwlpyE){DJfigWhyEG = true;}
      if(CsdFcgYcQJ == qSDafhnlPg){dobIqJferC = true;}
      else if(qSDafhnlPg == CsdFcgYcQJ){MlQDnmeMsW = true;}
      if(YhfjciHVje == YyMKXofbKW){jYwspDRNOj = true;}
      else if(YyMKXofbKW == YhfjciHVje){pMGEcCcKcG = true;}
      if(iLuglkTqEx == TJlqzSZZRI){ItKKAMGIRp = true;}
      else if(TJlqzSZZRI == iLuglkTqEx){oclUFRxQwR = true;}
      if(BFuhqNGAsP == UpLFQBTaQa){NroWEgbnNj = true;}
      else if(UpLFQBTaQa == BFuhqNGAsP){etNEpOjqOk = true;}
      if(bstwxdQupI == xMMebQwVdM){uuBsywLFMP = true;}
      else if(xMMebQwVdM == bstwxdQupI){DpNPdpDaFe = true;}
      if(oQGSVpyxTr == OrPRJhfLaM){QephjjdRHe = true;}
      else if(OrPRJhfLaM == oQGSVpyxTr){tWVxQjzwxW = true;}
      if(MgYTHTlyrO == HNTHMimHsV){CXNCorjYoJ = true;}
      if(bGbUDoQzjI == UFLjYGxHPh){adAdoMsRLD = true;}
      if(UXBwIkzbLA == WEwFsbaswi){BAuCYhCGmU = true;}
      while(HNTHMimHsV == MgYTHTlyrO){oNParwzBOO = true;}
      while(UFLjYGxHPh == UFLjYGxHPh){RkwqDzPWqP = true;}
      while(WEwFsbaswi == WEwFsbaswi){NWKRWHYPmF = true;}
      if(VHzDSisESr == true){VHzDSisESr = false;}
      if(dobIqJferC == true){dobIqJferC = false;}
      if(jYwspDRNOj == true){jYwspDRNOj = false;}
      if(ItKKAMGIRp == true){ItKKAMGIRp = false;}
      if(NroWEgbnNj == true){NroWEgbnNj = false;}
      if(uuBsywLFMP == true){uuBsywLFMP = false;}
      if(QephjjdRHe == true){QephjjdRHe = false;}
      if(CXNCorjYoJ == true){CXNCorjYoJ = false;}
      if(adAdoMsRLD == true){adAdoMsRLD = false;}
      if(BAuCYhCGmU == true){BAuCYhCGmU = false;}
      if(DJfigWhyEG == true){DJfigWhyEG = false;}
      if(MlQDnmeMsW == true){MlQDnmeMsW = false;}
      if(pMGEcCcKcG == true){pMGEcCcKcG = false;}
      if(oclUFRxQwR == true){oclUFRxQwR = false;}
      if(etNEpOjqOk == true){etNEpOjqOk = false;}
      if(DpNPdpDaFe == true){DpNPdpDaFe = false;}
      if(tWVxQjzwxW == true){tWVxQjzwxW = false;}
      if(oNParwzBOO == true){oNParwzBOO = false;}
      if(RkwqDzPWqP == true){RkwqDzPWqP = false;}
      if(NWKRWHYPmF == true){NWKRWHYPmF = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class MSDUFVMOLB
{ 
  void HrhbRTfmRi()
  { 
      bool jaLaCJFknk = false;
      bool abIDuzthqd = false;
      bool NjKBmeaNNM = false;
      bool hYAVBdljkd = false;
      bool LzzXHboANp = false;
      bool jJuBpAPKmW = false;
      bool hqWaCCbmCQ = false;
      bool MKwNRNjltL = false;
      bool paAXbXcyfB = false;
      bool ObwOuTcYVE = false;
      bool zCywcZNhib = false;
      bool PcQagGqyyd = false;
      bool YcHACkNhRx = false;
      bool kLQoMmcDtC = false;
      bool KuODkkLVho = false;
      bool cdZqfVuxsr = false;
      bool LfPlpELaOs = false;
      bool dmEwTcODPQ = false;
      bool ZrzcTHkZJp = false;
      bool reKCpefcNf = false;
      string XJZnewKpjG;
      string BQYsPimyDH;
      string FznOyDwHyQ;
      string GHRFuVxqxq;
      string RBxJsNeGdm;
      string mkCurXVLpb;
      string ADrSzsySxs;
      string luALpDCdUj;
      string XodKdVEWNW;
      string zkBVqOJdJA;
      string OMIjBqjpFn;
      string VqpFDKZgod;
      string nbEZtAtdUb;
      string sXTUVLgtJl;
      string kNQZBHuwSf;
      string ncnfLmHhpA;
      string xGVdtxXUjq;
      string deWDrZLeYl;
      string EyLnmQjnJh;
      string DyEJoerleD;
      if(XJZnewKpjG == OMIjBqjpFn){jaLaCJFknk = true;}
      else if(OMIjBqjpFn == XJZnewKpjG){zCywcZNhib = true;}
      if(BQYsPimyDH == VqpFDKZgod){abIDuzthqd = true;}
      else if(VqpFDKZgod == BQYsPimyDH){PcQagGqyyd = true;}
      if(FznOyDwHyQ == nbEZtAtdUb){NjKBmeaNNM = true;}
      else if(nbEZtAtdUb == FznOyDwHyQ){YcHACkNhRx = true;}
      if(GHRFuVxqxq == sXTUVLgtJl){hYAVBdljkd = true;}
      else if(sXTUVLgtJl == GHRFuVxqxq){kLQoMmcDtC = true;}
      if(RBxJsNeGdm == kNQZBHuwSf){LzzXHboANp = true;}
      else if(kNQZBHuwSf == RBxJsNeGdm){KuODkkLVho = true;}
      if(mkCurXVLpb == ncnfLmHhpA){jJuBpAPKmW = true;}
      else if(ncnfLmHhpA == mkCurXVLpb){cdZqfVuxsr = true;}
      if(ADrSzsySxs == xGVdtxXUjq){hqWaCCbmCQ = true;}
      else if(xGVdtxXUjq == ADrSzsySxs){LfPlpELaOs = true;}
      if(luALpDCdUj == deWDrZLeYl){MKwNRNjltL = true;}
      if(XodKdVEWNW == EyLnmQjnJh){paAXbXcyfB = true;}
      if(zkBVqOJdJA == DyEJoerleD){ObwOuTcYVE = true;}
      while(deWDrZLeYl == luALpDCdUj){dmEwTcODPQ = true;}
      while(EyLnmQjnJh == EyLnmQjnJh){ZrzcTHkZJp = true;}
      while(DyEJoerleD == DyEJoerleD){reKCpefcNf = true;}
      if(jaLaCJFknk == true){jaLaCJFknk = false;}
      if(abIDuzthqd == true){abIDuzthqd = false;}
      if(NjKBmeaNNM == true){NjKBmeaNNM = false;}
      if(hYAVBdljkd == true){hYAVBdljkd = false;}
      if(LzzXHboANp == true){LzzXHboANp = false;}
      if(jJuBpAPKmW == true){jJuBpAPKmW = false;}
      if(hqWaCCbmCQ == true){hqWaCCbmCQ = false;}
      if(MKwNRNjltL == true){MKwNRNjltL = false;}
      if(paAXbXcyfB == true){paAXbXcyfB = false;}
      if(ObwOuTcYVE == true){ObwOuTcYVE = false;}
      if(zCywcZNhib == true){zCywcZNhib = false;}
      if(PcQagGqyyd == true){PcQagGqyyd = false;}
      if(YcHACkNhRx == true){YcHACkNhRx = false;}
      if(kLQoMmcDtC == true){kLQoMmcDtC = false;}
      if(KuODkkLVho == true){KuODkkLVho = false;}
      if(cdZqfVuxsr == true){cdZqfVuxsr = false;}
      if(LfPlpELaOs == true){LfPlpELaOs = false;}
      if(dmEwTcODPQ == true){dmEwTcODPQ = false;}
      if(ZrzcTHkZJp == true){ZrzcTHkZJp = false;}
      if(reKCpefcNf == true){reKCpefcNf = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class QTMMODLNAZ
{ 
  void RKGecOgkCx()
  { 
      bool CdeASwGmIa = false;
      bool cKYAKgkNnV = false;
      bool MXRMJLbiar = false;
      bool KTPqAExeKV = false;
      bool SfwoNNWqzI = false;
      bool OsPPddLSqG = false;
      bool TXMPPJthzF = false;
      bool iGCRDgbcyu = false;
      bool ojiRcQEAMW = false;
      bool senECuTfYD = false;
      bool SnqsZIqxMx = false;
      bool BhTuQintmy = false;
      bool FtVcMDSyPI = false;
      bool MwEtbBrorU = false;
      bool ZGmOUKLrmS = false;
      bool GZsZyYROgV = false;
      bool orhEjFdYTO = false;
      bool pzBRYzGGHB = false;
      bool raLwBmDdwD = false;
      bool jdIWfgXidP = false;
      string tizLLdIYZu;
      string nibxHOwPCp;
      string MzimnLDLgl;
      string oeCrTMPDAL;
      string bpHRTOeoem;
      string PskCqtzLWz;
      string ZwqmGJfjct;
      string zsOpNWqRTZ;
      string fOgsWwszBY;
      string MEfBlfyULJ;
      string huLknWduoT;
      string ChrwSLPyQK;
      string QgiEgtMNEh;
      string YWFJrkDuEz;
      string RyKgWeLjha;
      string PzDBsAMHDs;
      string JQqGufchEh;
      string HTsQsSWBhC;
      string icecSYSEPq;
      string YwrKpAHDlq;
      if(tizLLdIYZu == huLknWduoT){CdeASwGmIa = true;}
      else if(huLknWduoT == tizLLdIYZu){SnqsZIqxMx = true;}
      if(nibxHOwPCp == ChrwSLPyQK){cKYAKgkNnV = true;}
      else if(ChrwSLPyQK == nibxHOwPCp){BhTuQintmy = true;}
      if(MzimnLDLgl == QgiEgtMNEh){MXRMJLbiar = true;}
      else if(QgiEgtMNEh == MzimnLDLgl){FtVcMDSyPI = true;}
      if(oeCrTMPDAL == YWFJrkDuEz){KTPqAExeKV = true;}
      else if(YWFJrkDuEz == oeCrTMPDAL){MwEtbBrorU = true;}
      if(bpHRTOeoem == RyKgWeLjha){SfwoNNWqzI = true;}
      else if(RyKgWeLjha == bpHRTOeoem){ZGmOUKLrmS = true;}
      if(PskCqtzLWz == PzDBsAMHDs){OsPPddLSqG = true;}
      else if(PzDBsAMHDs == PskCqtzLWz){GZsZyYROgV = true;}
      if(ZwqmGJfjct == JQqGufchEh){TXMPPJthzF = true;}
      else if(JQqGufchEh == ZwqmGJfjct){orhEjFdYTO = true;}
      if(zsOpNWqRTZ == HTsQsSWBhC){iGCRDgbcyu = true;}
      if(fOgsWwszBY == icecSYSEPq){ojiRcQEAMW = true;}
      if(MEfBlfyULJ == YwrKpAHDlq){senECuTfYD = true;}
      while(HTsQsSWBhC == zsOpNWqRTZ){pzBRYzGGHB = true;}
      while(icecSYSEPq == icecSYSEPq){raLwBmDdwD = true;}
      while(YwrKpAHDlq == YwrKpAHDlq){jdIWfgXidP = true;}
      if(CdeASwGmIa == true){CdeASwGmIa = false;}
      if(cKYAKgkNnV == true){cKYAKgkNnV = false;}
      if(MXRMJLbiar == true){MXRMJLbiar = false;}
      if(KTPqAExeKV == true){KTPqAExeKV = false;}
      if(SfwoNNWqzI == true){SfwoNNWqzI = false;}
      if(OsPPddLSqG == true){OsPPddLSqG = false;}
      if(TXMPPJthzF == true){TXMPPJthzF = false;}
      if(iGCRDgbcyu == true){iGCRDgbcyu = false;}
      if(ojiRcQEAMW == true){ojiRcQEAMW = false;}
      if(senECuTfYD == true){senECuTfYD = false;}
      if(SnqsZIqxMx == true){SnqsZIqxMx = false;}
      if(BhTuQintmy == true){BhTuQintmy = false;}
      if(FtVcMDSyPI == true){FtVcMDSyPI = false;}
      if(MwEtbBrorU == true){MwEtbBrorU = false;}
      if(ZGmOUKLrmS == true){ZGmOUKLrmS = false;}
      if(GZsZyYROgV == true){GZsZyYROgV = false;}
      if(orhEjFdYTO == true){orhEjFdYTO = false;}
      if(pzBRYzGGHB == true){pzBRYzGGHB = false;}
      if(raLwBmDdwD == true){raLwBmDdwD = false;}
      if(jdIWfgXidP == true){jdIWfgXidP = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class MNGAVAIYHI
{ 
  void LKNOnlbMFe()
  { 
      bool uTTBYSxUyT = false;
      bool WHzJAMmEJJ = false;
      bool VZzDqEDdLF = false;
      bool wrPEXmwVPZ = false;
      bool OUWsPXpiOT = false;
      bool tKfHOUUQKT = false;
      bool OTJrWdqulN = false;
      bool PQnjtADFmS = false;
      bool NTPqKlLIoC = false;
      bool SfLwKuLdVl = false;
      bool guxBDcVwMO = false;
      bool ROcrGuERgk = false;
      bool RiFjtiFrYz = false;
      bool oZjBkRWOng = false;
      bool PPuajDDToP = false;
      bool qtwkTyoMGU = false;
      bool XdWNZreaGn = false;
      bool XoczVCmezq = false;
      bool flCJItcyhl = false;
      bool bJHTJkshAr = false;
      string LsDZwybcAp;
      string jgmZWBOwVH;
      string HlSLXZVypl;
      string NJGCgTctkV;
      string NtZtWDuRoV;
      string YPBEnYarCV;
      string cclNcaajrC;
      string YTKAsMMXnT;
      string eDJUNxIBOH;
      string sjrOrjILQw;
      string cKYlxEFAKa;
      string MCDhqYTQAe;
      string RYVjJnbuHI;
      string EBHqqUeWXI;
      string rHqnupgKXS;
      string QqLldEoncI;
      string cKrBWKuMpW;
      string txsqmKggoS;
      string HQWnrMoUMm;
      string fpsOfgOoRj;
      if(LsDZwybcAp == cKYlxEFAKa){uTTBYSxUyT = true;}
      else if(cKYlxEFAKa == LsDZwybcAp){guxBDcVwMO = true;}
      if(jgmZWBOwVH == MCDhqYTQAe){WHzJAMmEJJ = true;}
      else if(MCDhqYTQAe == jgmZWBOwVH){ROcrGuERgk = true;}
      if(HlSLXZVypl == RYVjJnbuHI){VZzDqEDdLF = true;}
      else if(RYVjJnbuHI == HlSLXZVypl){RiFjtiFrYz = true;}
      if(NJGCgTctkV == EBHqqUeWXI){wrPEXmwVPZ = true;}
      else if(EBHqqUeWXI == NJGCgTctkV){oZjBkRWOng = true;}
      if(NtZtWDuRoV == rHqnupgKXS){OUWsPXpiOT = true;}
      else if(rHqnupgKXS == NtZtWDuRoV){PPuajDDToP = true;}
      if(YPBEnYarCV == QqLldEoncI){tKfHOUUQKT = true;}
      else if(QqLldEoncI == YPBEnYarCV){qtwkTyoMGU = true;}
      if(cclNcaajrC == cKrBWKuMpW){OTJrWdqulN = true;}
      else if(cKrBWKuMpW == cclNcaajrC){XdWNZreaGn = true;}
      if(YTKAsMMXnT == txsqmKggoS){PQnjtADFmS = true;}
      if(eDJUNxIBOH == HQWnrMoUMm){NTPqKlLIoC = true;}
      if(sjrOrjILQw == fpsOfgOoRj){SfLwKuLdVl = true;}
      while(txsqmKggoS == YTKAsMMXnT){XoczVCmezq = true;}
      while(HQWnrMoUMm == HQWnrMoUMm){flCJItcyhl = true;}
      while(fpsOfgOoRj == fpsOfgOoRj){bJHTJkshAr = true;}
      if(uTTBYSxUyT == true){uTTBYSxUyT = false;}
      if(WHzJAMmEJJ == true){WHzJAMmEJJ = false;}
      if(VZzDqEDdLF == true){VZzDqEDdLF = false;}
      if(wrPEXmwVPZ == true){wrPEXmwVPZ = false;}
      if(OUWsPXpiOT == true){OUWsPXpiOT = false;}
      if(tKfHOUUQKT == true){tKfHOUUQKT = false;}
      if(OTJrWdqulN == true){OTJrWdqulN = false;}
      if(PQnjtADFmS == true){PQnjtADFmS = false;}
      if(NTPqKlLIoC == true){NTPqKlLIoC = false;}
      if(SfLwKuLdVl == true){SfLwKuLdVl = false;}
      if(guxBDcVwMO == true){guxBDcVwMO = false;}
      if(ROcrGuERgk == true){ROcrGuERgk = false;}
      if(RiFjtiFrYz == true){RiFjtiFrYz = false;}
      if(oZjBkRWOng == true){oZjBkRWOng = false;}
      if(PPuajDDToP == true){PPuajDDToP = false;}
      if(qtwkTyoMGU == true){qtwkTyoMGU = false;}
      if(XdWNZreaGn == true){XdWNZreaGn = false;}
      if(XoczVCmezq == true){XoczVCmezq = false;}
      if(flCJItcyhl == true){flCJItcyhl = false;}
      if(bJHTJkshAr == true){bJHTJkshAr = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class JITTSLSZQM
{ 
  void trOKSLoEds()
  { 
      bool fAKOBrCQMn = false;
      bool RdPmFoBKub = false;
      bool BEbowxDNsY = false;
      bool mCrOjtpLfj = false;
      bool bJeiYyGyIJ = false;
      bool TKgFzbYUSD = false;
      bool noWmAOlACK = false;
      bool zoeKArZrQx = false;
      bool qEEjEbVlPI = false;
      bool VUsbwllqhJ = false;
      bool MFwyKefVFH = false;
      bool CfEVMikmiY = false;
      bool rzktnduCOO = false;
      bool GhJGkkIGYY = false;
      bool uAgIGoQXOM = false;
      bool ByIJRMUCJf = false;
      bool icHpATVyka = false;
      bool adOJcrRcmy = false;
      bool NXnCMHYAnX = false;
      bool QGwrpSspHm = false;
      string OfmsehSPLZ;
      string WIMKlitBgE;
      string wajhJcjBQF;
      string ptrubTWssn;
      string eTzjusgIOH;
      string hAmIrnuFjB;
      string xRzGicPQhR;
      string MAHsYcbzlQ;
      string wblJWpGjDn;
      string XRJrpNTrAS;
      string cQZwtgrsiP;
      string LuSTEVepis;
      string VfNsstqPCK;
      string IizTmfCoOp;
      string yMAncczpnU;
      string hdJHwxDfDA;
      string pcqYGbwyfY;
      string ToastIeYQQ;
      string uAagcdZqWp;
      string cVlNzVVbgB;
      if(OfmsehSPLZ == cQZwtgrsiP){fAKOBrCQMn = true;}
      else if(cQZwtgrsiP == OfmsehSPLZ){MFwyKefVFH = true;}
      if(WIMKlitBgE == LuSTEVepis){RdPmFoBKub = true;}
      else if(LuSTEVepis == WIMKlitBgE){CfEVMikmiY = true;}
      if(wajhJcjBQF == VfNsstqPCK){BEbowxDNsY = true;}
      else if(VfNsstqPCK == wajhJcjBQF){rzktnduCOO = true;}
      if(ptrubTWssn == IizTmfCoOp){mCrOjtpLfj = true;}
      else if(IizTmfCoOp == ptrubTWssn){GhJGkkIGYY = true;}
      if(eTzjusgIOH == yMAncczpnU){bJeiYyGyIJ = true;}
      else if(yMAncczpnU == eTzjusgIOH){uAgIGoQXOM = true;}
      if(hAmIrnuFjB == hdJHwxDfDA){TKgFzbYUSD = true;}
      else if(hdJHwxDfDA == hAmIrnuFjB){ByIJRMUCJf = true;}
      if(xRzGicPQhR == pcqYGbwyfY){noWmAOlACK = true;}
      else if(pcqYGbwyfY == xRzGicPQhR){icHpATVyka = true;}
      if(MAHsYcbzlQ == ToastIeYQQ){zoeKArZrQx = true;}
      if(wblJWpGjDn == uAagcdZqWp){qEEjEbVlPI = true;}
      if(XRJrpNTrAS == cVlNzVVbgB){VUsbwllqhJ = true;}
      while(ToastIeYQQ == MAHsYcbzlQ){adOJcrRcmy = true;}
      while(uAagcdZqWp == uAagcdZqWp){NXnCMHYAnX = true;}
      while(cVlNzVVbgB == cVlNzVVbgB){QGwrpSspHm = true;}
      if(fAKOBrCQMn == true){fAKOBrCQMn = false;}
      if(RdPmFoBKub == true){RdPmFoBKub = false;}
      if(BEbowxDNsY == true){BEbowxDNsY = false;}
      if(mCrOjtpLfj == true){mCrOjtpLfj = false;}
      if(bJeiYyGyIJ == true){bJeiYyGyIJ = false;}
      if(TKgFzbYUSD == true){TKgFzbYUSD = false;}
      if(noWmAOlACK == true){noWmAOlACK = false;}
      if(zoeKArZrQx == true){zoeKArZrQx = false;}
      if(qEEjEbVlPI == true){qEEjEbVlPI = false;}
      if(VUsbwllqhJ == true){VUsbwllqhJ = false;}
      if(MFwyKefVFH == true){MFwyKefVFH = false;}
      if(CfEVMikmiY == true){CfEVMikmiY = false;}
      if(rzktnduCOO == true){rzktnduCOO = false;}
      if(GhJGkkIGYY == true){GhJGkkIGYY = false;}
      if(uAgIGoQXOM == true){uAgIGoQXOM = false;}
      if(ByIJRMUCJf == true){ByIJRMUCJf = false;}
      if(icHpATVyka == true){icHpATVyka = false;}
      if(adOJcrRcmy == true){adOJcrRcmy = false;}
      if(NXnCMHYAnX == true){NXnCMHYAnX = false;}
      if(QGwrpSspHm == true){QGwrpSspHm = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class CRBDUFHBBS
{ 
  void hAhhggxjLf()
  { 
      bool SospwnHlaj = false;
      bool FMSNhFAgwC = false;
      bool qRxpJGargH = false;
      bool rAsFhFIHOD = false;
      bool YoPCzCqjTN = false;
      bool EFKGSBqCfp = false;
      bool MPFTqFSMfb = false;
      bool wsRscBBtqH = false;
      bool PqYTCmomlf = false;
      bool OGbXqJjuLt = false;
      bool idDqQLmRdR = false;
      bool AwKXaUplRE = false;
      bool PfZANpQtCS = false;
      bool RFixXkngCp = false;
      bool zWJUeRuDxV = false;
      bool TydHdDEDca = false;
      bool tsPKztMMAp = false;
      bool fIibEsVEUu = false;
      bool tNwfyTabTU = false;
      bool fkEbuGGyUk = false;
      string ptLiqfcEHo;
      string zXxXeDnomp;
      string nhWznBDmDL;
      string HxgqSmXwIw;
      string nbHlZFOhib;
      string orEtfHXLup;
      string coAwgBpFFr;
      string fqfpCLZjZh;
      string mUDaWPrmLL;
      string OLBSTybLFX;
      string PIcqwxLOrT;
      string gmlNDHkYYQ;
      string ICttcTpNWE;
      string jOeBRdrMdZ;
      string EdurdbYnPL;
      string MClnOMOiOc;
      string GyqmiSIjuY;
      string PYtzMeHCQA;
      string tBxKqgbqmE;
      string OJxBSFlHIK;
      if(ptLiqfcEHo == PIcqwxLOrT){SospwnHlaj = true;}
      else if(PIcqwxLOrT == ptLiqfcEHo){idDqQLmRdR = true;}
      if(zXxXeDnomp == gmlNDHkYYQ){FMSNhFAgwC = true;}
      else if(gmlNDHkYYQ == zXxXeDnomp){AwKXaUplRE = true;}
      if(nhWznBDmDL == ICttcTpNWE){qRxpJGargH = true;}
      else if(ICttcTpNWE == nhWznBDmDL){PfZANpQtCS = true;}
      if(HxgqSmXwIw == jOeBRdrMdZ){rAsFhFIHOD = true;}
      else if(jOeBRdrMdZ == HxgqSmXwIw){RFixXkngCp = true;}
      if(nbHlZFOhib == EdurdbYnPL){YoPCzCqjTN = true;}
      else if(EdurdbYnPL == nbHlZFOhib){zWJUeRuDxV = true;}
      if(orEtfHXLup == MClnOMOiOc){EFKGSBqCfp = true;}
      else if(MClnOMOiOc == orEtfHXLup){TydHdDEDca = true;}
      if(coAwgBpFFr == GyqmiSIjuY){MPFTqFSMfb = true;}
      else if(GyqmiSIjuY == coAwgBpFFr){tsPKztMMAp = true;}
      if(fqfpCLZjZh == PYtzMeHCQA){wsRscBBtqH = true;}
      if(mUDaWPrmLL == tBxKqgbqmE){PqYTCmomlf = true;}
      if(OLBSTybLFX == OJxBSFlHIK){OGbXqJjuLt = true;}
      while(PYtzMeHCQA == fqfpCLZjZh){fIibEsVEUu = true;}
      while(tBxKqgbqmE == tBxKqgbqmE){tNwfyTabTU = true;}
      while(OJxBSFlHIK == OJxBSFlHIK){fkEbuGGyUk = true;}
      if(SospwnHlaj == true){SospwnHlaj = false;}
      if(FMSNhFAgwC == true){FMSNhFAgwC = false;}
      if(qRxpJGargH == true){qRxpJGargH = false;}
      if(rAsFhFIHOD == true){rAsFhFIHOD = false;}
      if(YoPCzCqjTN == true){YoPCzCqjTN = false;}
      if(EFKGSBqCfp == true){EFKGSBqCfp = false;}
      if(MPFTqFSMfb == true){MPFTqFSMfb = false;}
      if(wsRscBBtqH == true){wsRscBBtqH = false;}
      if(PqYTCmomlf == true){PqYTCmomlf = false;}
      if(OGbXqJjuLt == true){OGbXqJjuLt = false;}
      if(idDqQLmRdR == true){idDqQLmRdR = false;}
      if(AwKXaUplRE == true){AwKXaUplRE = false;}
      if(PfZANpQtCS == true){PfZANpQtCS = false;}
      if(RFixXkngCp == true){RFixXkngCp = false;}
      if(zWJUeRuDxV == true){zWJUeRuDxV = false;}
      if(TydHdDEDca == true){TydHdDEDca = false;}
      if(tsPKztMMAp == true){tsPKztMMAp = false;}
      if(fIibEsVEUu == true){fIibEsVEUu = false;}
      if(tNwfyTabTU == true){tNwfyTabTU = false;}
      if(fkEbuGGyUk == true){fkEbuGGyUk = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class HLVZKRVQDV
{ 
  void gYdLqwBGxX()
  { 
      bool xjpMxIceTe = false;
      bool eukMGDskZQ = false;
      bool WQGhluGIqP = false;
      bool dzNmOtgORc = false;
      bool POepdwyROn = false;
      bool DWjnAfdIaC = false;
      bool CUmDBfhxxM = false;
      bool VdTxAHlPEo = false;
      bool xnsDMHOYmh = false;
      bool PYnOaubbox = false;
      bool OATCRYClns = false;
      bool tNDlFNajqs = false;
      bool QIKOwxoFWF = false;
      bool fJaGZwUqkm = false;
      bool EcksnCUCIN = false;
      bool TqkufFoEFU = false;
      bool jxPiMjmxLI = false;
      bool rjzDonXQat = false;
      bool cmwJloYeZU = false;
      bool GQlQDGMCfE = false;
      string kRglCYUJLd;
      string XAoXZRKREb;
      string LnhOdLlglK;
      string sYJfJqwgUZ;
      string SRQtMKGJfA;
      string KlWyFwiSIq;
      string mmXBjypJNh;
      string VdxdItXnBS;
      string EbAlzGCLaN;
      string IdXcmesPJN;
      string UxwydgoroK;
      string YuQplKmlBd;
      string wehzZrFTqd;
      string BHenyHfCHS;
      string RJVPnNNhqb;
      string rHNfRoOwYl;
      string aUALJQPcqd;
      string djdiLlJSLL;
      string eXbPkstyVJ;
      string ridVqwIKFX;
      if(kRglCYUJLd == UxwydgoroK){xjpMxIceTe = true;}
      else if(UxwydgoroK == kRglCYUJLd){OATCRYClns = true;}
      if(XAoXZRKREb == YuQplKmlBd){eukMGDskZQ = true;}
      else if(YuQplKmlBd == XAoXZRKREb){tNDlFNajqs = true;}
      if(LnhOdLlglK == wehzZrFTqd){WQGhluGIqP = true;}
      else if(wehzZrFTqd == LnhOdLlglK){QIKOwxoFWF = true;}
      if(sYJfJqwgUZ == BHenyHfCHS){dzNmOtgORc = true;}
      else if(BHenyHfCHS == sYJfJqwgUZ){fJaGZwUqkm = true;}
      if(SRQtMKGJfA == RJVPnNNhqb){POepdwyROn = true;}
      else if(RJVPnNNhqb == SRQtMKGJfA){EcksnCUCIN = true;}
      if(KlWyFwiSIq == rHNfRoOwYl){DWjnAfdIaC = true;}
      else if(rHNfRoOwYl == KlWyFwiSIq){TqkufFoEFU = true;}
      if(mmXBjypJNh == aUALJQPcqd){CUmDBfhxxM = true;}
      else if(aUALJQPcqd == mmXBjypJNh){jxPiMjmxLI = true;}
      if(VdxdItXnBS == djdiLlJSLL){VdTxAHlPEo = true;}
      if(EbAlzGCLaN == eXbPkstyVJ){xnsDMHOYmh = true;}
      if(IdXcmesPJN == ridVqwIKFX){PYnOaubbox = true;}
      while(djdiLlJSLL == VdxdItXnBS){rjzDonXQat = true;}
      while(eXbPkstyVJ == eXbPkstyVJ){cmwJloYeZU = true;}
      while(ridVqwIKFX == ridVqwIKFX){GQlQDGMCfE = true;}
      if(xjpMxIceTe == true){xjpMxIceTe = false;}
      if(eukMGDskZQ == true){eukMGDskZQ = false;}
      if(WQGhluGIqP == true){WQGhluGIqP = false;}
      if(dzNmOtgORc == true){dzNmOtgORc = false;}
      if(POepdwyROn == true){POepdwyROn = false;}
      if(DWjnAfdIaC == true){DWjnAfdIaC = false;}
      if(CUmDBfhxxM == true){CUmDBfhxxM = false;}
      if(VdTxAHlPEo == true){VdTxAHlPEo = false;}
      if(xnsDMHOYmh == true){xnsDMHOYmh = false;}
      if(PYnOaubbox == true){PYnOaubbox = false;}
      if(OATCRYClns == true){OATCRYClns = false;}
      if(tNDlFNajqs == true){tNDlFNajqs = false;}
      if(QIKOwxoFWF == true){QIKOwxoFWF = false;}
      if(fJaGZwUqkm == true){fJaGZwUqkm = false;}
      if(EcksnCUCIN == true){EcksnCUCIN = false;}
      if(TqkufFoEFU == true){TqkufFoEFU = false;}
      if(jxPiMjmxLI == true){jxPiMjmxLI = false;}
      if(rjzDonXQat == true){rjzDonXQat = false;}
      if(cmwJloYeZU == true){cmwJloYeZU = false;}
      if(GQlQDGMCfE == true){GQlQDGMCfE = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class KZOTHFVZAX
{ 
  void fBmKcGNkGi()
  { 
      bool wgKwqToBXq = false;
      bool GHBljWPTsJ = false;
      bool mJquXgMZed = false;
      bool oPlrPrcrby = false;
      bool jefTQuqezC = false;
      bool PGWIYmpOYK = false;
      bool GPVsBqVJVr = false;
      bool sWqtYIdWeb = false;
      bool pgacOiscSb = false;
      bool COTRqUJlRZ = false;
      bool YgIHIrObjQ = false;
      bool JSjwTZnseS = false;
      bool xsptoeDYDE = false;
      bool yqFFDIXTTV = false;
      bool TQsBSidWxQ = false;
      bool fPHzbfpORd = false;
      bool npYeRSNdsL = false;
      bool CUZIygzobG = false;
      bool BgbmYijFdX = false;
      bool RICphdrNiA = false;
      string cyWoiTDPZw;
      string BkMzqoRJfU;
      string CmnAGMEcwT;
      string xlcxbPaqiE;
      string QXDayBfOth;
      string EsAcmpJWiV;
      string OaSFzOHOWb;
      string NZZaEdjMCE;
      string fphOODlAJl;
      string GEHNpoExbi;
      string tQqSTdSYYI;
      string GxUdpYrEpu;
      string cGFkUJSMkO;
      string ZljSKOyOtk;
      string kMaBfJidXR;
      string xzGgGmLGxK;
      string LFmKiTMCSa;
      string ZcKFJPfDEL;
      string ZnoTRZfDLX;
      string DrQjZfZPRM;
      if(cyWoiTDPZw == tQqSTdSYYI){wgKwqToBXq = true;}
      else if(tQqSTdSYYI == cyWoiTDPZw){YgIHIrObjQ = true;}
      if(BkMzqoRJfU == GxUdpYrEpu){GHBljWPTsJ = true;}
      else if(GxUdpYrEpu == BkMzqoRJfU){JSjwTZnseS = true;}
      if(CmnAGMEcwT == cGFkUJSMkO){mJquXgMZed = true;}
      else if(cGFkUJSMkO == CmnAGMEcwT){xsptoeDYDE = true;}
      if(xlcxbPaqiE == ZljSKOyOtk){oPlrPrcrby = true;}
      else if(ZljSKOyOtk == xlcxbPaqiE){yqFFDIXTTV = true;}
      if(QXDayBfOth == kMaBfJidXR){jefTQuqezC = true;}
      else if(kMaBfJidXR == QXDayBfOth){TQsBSidWxQ = true;}
      if(EsAcmpJWiV == xzGgGmLGxK){PGWIYmpOYK = true;}
      else if(xzGgGmLGxK == EsAcmpJWiV){fPHzbfpORd = true;}
      if(OaSFzOHOWb == LFmKiTMCSa){GPVsBqVJVr = true;}
      else if(LFmKiTMCSa == OaSFzOHOWb){npYeRSNdsL = true;}
      if(NZZaEdjMCE == ZcKFJPfDEL){sWqtYIdWeb = true;}
      if(fphOODlAJl == ZnoTRZfDLX){pgacOiscSb = true;}
      if(GEHNpoExbi == DrQjZfZPRM){COTRqUJlRZ = true;}
      while(ZcKFJPfDEL == NZZaEdjMCE){CUZIygzobG = true;}
      while(ZnoTRZfDLX == ZnoTRZfDLX){BgbmYijFdX = true;}
      while(DrQjZfZPRM == DrQjZfZPRM){RICphdrNiA = true;}
      if(wgKwqToBXq == true){wgKwqToBXq = false;}
      if(GHBljWPTsJ == true){GHBljWPTsJ = false;}
      if(mJquXgMZed == true){mJquXgMZed = false;}
      if(oPlrPrcrby == true){oPlrPrcrby = false;}
      if(jefTQuqezC == true){jefTQuqezC = false;}
      if(PGWIYmpOYK == true){PGWIYmpOYK = false;}
      if(GPVsBqVJVr == true){GPVsBqVJVr = false;}
      if(sWqtYIdWeb == true){sWqtYIdWeb = false;}
      if(pgacOiscSb == true){pgacOiscSb = false;}
      if(COTRqUJlRZ == true){COTRqUJlRZ = false;}
      if(YgIHIrObjQ == true){YgIHIrObjQ = false;}
      if(JSjwTZnseS == true){JSjwTZnseS = false;}
      if(xsptoeDYDE == true){xsptoeDYDE = false;}
      if(yqFFDIXTTV == true){yqFFDIXTTV = false;}
      if(TQsBSidWxQ == true){TQsBSidWxQ = false;}
      if(fPHzbfpORd == true){fPHzbfpORd = false;}
      if(npYeRSNdsL == true){npYeRSNdsL = false;}
      if(CUZIygzobG == true){CUZIygzobG = false;}
      if(BgbmYijFdX == true){BgbmYijFdX = false;}
      if(RICphdrNiA == true){RICphdrNiA = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class JXKDDYUPPP
{ 
  void MlBCATdONq()
  { 
      bool VCbzzlmKLZ = false;
      bool iNMKmfRBOd = false;
      bool oDJRJnpXmj = false;
      bool KZbgKxKHCh = false;
      bool uobyYIpOpd = false;
      bool iNTzBSrJoK = false;
      bool wOWaPIlezp = false;
      bool VKyfhzaKrB = false;
      bool yagIBxGber = false;
      bool EASqlgRBiP = false;
      bool WKPAIYOmRC = false;
      bool rgRnLUhOZS = false;
      bool CKAHkVrHtB = false;
      bool gYbcenLfAc = false;
      bool hTKczXieeQ = false;
      bool zDbPNMJIPm = false;
      bool gGrPUSFnJX = false;
      bool JBNwjhzXHN = false;
      bool lMbdCdxLOR = false;
      bool dDPNwbatHg = false;
      string gXZORGKFPf;
      string YcOBApZQrU;
      string CpAFbqzatD;
      string iVgqTOMMcd;
      string QUwFrMlVXC;
      string TyJJQpXUma;
      string HiLLwCwWgl;
      string dMnOEgstNO;
      string EcDqjkMWac;
      string qrYBVhJjIo;
      string POolYGKuFj;
      string xcGXVefUbL;
      string pYwDtkmlrW;
      string XIlXyomQRd;
      string ZRQpfNkBep;
      string BoIxzqSkqm;
      string SYCiMoqiYf;
      string qPCykYHFXg;
      string AlGBUhznYH;
      string WCYdKBOhdq;
      if(gXZORGKFPf == POolYGKuFj){VCbzzlmKLZ = true;}
      else if(POolYGKuFj == gXZORGKFPf){WKPAIYOmRC = true;}
      if(YcOBApZQrU == xcGXVefUbL){iNMKmfRBOd = true;}
      else if(xcGXVefUbL == YcOBApZQrU){rgRnLUhOZS = true;}
      if(CpAFbqzatD == pYwDtkmlrW){oDJRJnpXmj = true;}
      else if(pYwDtkmlrW == CpAFbqzatD){CKAHkVrHtB = true;}
      if(iVgqTOMMcd == XIlXyomQRd){KZbgKxKHCh = true;}
      else if(XIlXyomQRd == iVgqTOMMcd){gYbcenLfAc = true;}
      if(QUwFrMlVXC == ZRQpfNkBep){uobyYIpOpd = true;}
      else if(ZRQpfNkBep == QUwFrMlVXC){hTKczXieeQ = true;}
      if(TyJJQpXUma == BoIxzqSkqm){iNTzBSrJoK = true;}
      else if(BoIxzqSkqm == TyJJQpXUma){zDbPNMJIPm = true;}
      if(HiLLwCwWgl == SYCiMoqiYf){wOWaPIlezp = true;}
      else if(SYCiMoqiYf == HiLLwCwWgl){gGrPUSFnJX = true;}
      if(dMnOEgstNO == qPCykYHFXg){VKyfhzaKrB = true;}
      if(EcDqjkMWac == AlGBUhznYH){yagIBxGber = true;}
      if(qrYBVhJjIo == WCYdKBOhdq){EASqlgRBiP = true;}
      while(qPCykYHFXg == dMnOEgstNO){JBNwjhzXHN = true;}
      while(AlGBUhznYH == AlGBUhznYH){lMbdCdxLOR = true;}
      while(WCYdKBOhdq == WCYdKBOhdq){dDPNwbatHg = true;}
      if(VCbzzlmKLZ == true){VCbzzlmKLZ = false;}
      if(iNMKmfRBOd == true){iNMKmfRBOd = false;}
      if(oDJRJnpXmj == true){oDJRJnpXmj = false;}
      if(KZbgKxKHCh == true){KZbgKxKHCh = false;}
      if(uobyYIpOpd == true){uobyYIpOpd = false;}
      if(iNTzBSrJoK == true){iNTzBSrJoK = false;}
      if(wOWaPIlezp == true){wOWaPIlezp = false;}
      if(VKyfhzaKrB == true){VKyfhzaKrB = false;}
      if(yagIBxGber == true){yagIBxGber = false;}
      if(EASqlgRBiP == true){EASqlgRBiP = false;}
      if(WKPAIYOmRC == true){WKPAIYOmRC = false;}
      if(rgRnLUhOZS == true){rgRnLUhOZS = false;}
      if(CKAHkVrHtB == true){CKAHkVrHtB = false;}
      if(gYbcenLfAc == true){gYbcenLfAc = false;}
      if(hTKczXieeQ == true){hTKczXieeQ = false;}
      if(zDbPNMJIPm == true){zDbPNMJIPm = false;}
      if(gGrPUSFnJX == true){gGrPUSFnJX = false;}
      if(JBNwjhzXHN == true){JBNwjhzXHN = false;}
      if(lMbdCdxLOR == true){lMbdCdxLOR = false;}
      if(dDPNwbatHg == true){dDPNwbatHg = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class VZQYKYXSAI
{ 
  void XZNnHwtFmb()
  { 
      bool pnSoXYcCfu = false;
      bool OmVeIsuThP = false;
      bool JqEwxAHbqV = false;
      bool ynrrzzKEAo = false;
      bool lDtppiEGtJ = false;
      bool JpaityjWqW = false;
      bool QAKJwatcfJ = false;
      bool ipSrdGxNGO = false;
      bool wBhhMHMJyA = false;
      bool OmMcYkrksO = false;
      bool naajaSWiFn = false;
      bool BVQcaOScxn = false;
      bool NjeftucpTr = false;
      bool NMTqZVZxHt = false;
      bool jdEJysWjCJ = false;
      bool SPmEAEuupe = false;
      bool ogPMZoBYDF = false;
      bool oUUDEjfUgB = false;
      bool XsmJZyYPpV = false;
      bool ZeHbEDOqjI = false;
      string ZHjbTDfuBP;
      string rqAXcXUXwx;
      string spwycBKDCr;
      string IQJxVUwlsJ;
      string wgXkrwCjbo;
      string BVAcQjLlzS;
      string sbrIHbhCBI;
      string aidlAMRKGf;
      string zZaNplPfgl;
      string JJlaQTnOcP;
      string OzhTNSrNbD;
      string SAfSSSBeRV;
      string LBUPyRwCVf;
      string XChpRzrGzX;
      string tCEdTIdTIx;
      string SIwHEMdRUw;
      string VoquePSpBS;
      string ZtftaJxqwo;
      string mctXNPFakF;
      string VZlDCEKIyD;
      if(ZHjbTDfuBP == OzhTNSrNbD){pnSoXYcCfu = true;}
      else if(OzhTNSrNbD == ZHjbTDfuBP){naajaSWiFn = true;}
      if(rqAXcXUXwx == SAfSSSBeRV){OmVeIsuThP = true;}
      else if(SAfSSSBeRV == rqAXcXUXwx){BVQcaOScxn = true;}
      if(spwycBKDCr == LBUPyRwCVf){JqEwxAHbqV = true;}
      else if(LBUPyRwCVf == spwycBKDCr){NjeftucpTr = true;}
      if(IQJxVUwlsJ == XChpRzrGzX){ynrrzzKEAo = true;}
      else if(XChpRzrGzX == IQJxVUwlsJ){NMTqZVZxHt = true;}
      if(wgXkrwCjbo == tCEdTIdTIx){lDtppiEGtJ = true;}
      else if(tCEdTIdTIx == wgXkrwCjbo){jdEJysWjCJ = true;}
      if(BVAcQjLlzS == SIwHEMdRUw){JpaityjWqW = true;}
      else if(SIwHEMdRUw == BVAcQjLlzS){SPmEAEuupe = true;}
      if(sbrIHbhCBI == VoquePSpBS){QAKJwatcfJ = true;}
      else if(VoquePSpBS == sbrIHbhCBI){ogPMZoBYDF = true;}
      if(aidlAMRKGf == ZtftaJxqwo){ipSrdGxNGO = true;}
      if(zZaNplPfgl == mctXNPFakF){wBhhMHMJyA = true;}
      if(JJlaQTnOcP == VZlDCEKIyD){OmMcYkrksO = true;}
      while(ZtftaJxqwo == aidlAMRKGf){oUUDEjfUgB = true;}
      while(mctXNPFakF == mctXNPFakF){XsmJZyYPpV = true;}
      while(VZlDCEKIyD == VZlDCEKIyD){ZeHbEDOqjI = true;}
      if(pnSoXYcCfu == true){pnSoXYcCfu = false;}
      if(OmVeIsuThP == true){OmVeIsuThP = false;}
      if(JqEwxAHbqV == true){JqEwxAHbqV = false;}
      if(ynrrzzKEAo == true){ynrrzzKEAo = false;}
      if(lDtppiEGtJ == true){lDtppiEGtJ = false;}
      if(JpaityjWqW == true){JpaityjWqW = false;}
      if(QAKJwatcfJ == true){QAKJwatcfJ = false;}
      if(ipSrdGxNGO == true){ipSrdGxNGO = false;}
      if(wBhhMHMJyA == true){wBhhMHMJyA = false;}
      if(OmMcYkrksO == true){OmMcYkrksO = false;}
      if(naajaSWiFn == true){naajaSWiFn = false;}
      if(BVQcaOScxn == true){BVQcaOScxn = false;}
      if(NjeftucpTr == true){NjeftucpTr = false;}
      if(NMTqZVZxHt == true){NMTqZVZxHt = false;}
      if(jdEJysWjCJ == true){jdEJysWjCJ = false;}
      if(SPmEAEuupe == true){SPmEAEuupe = false;}
      if(ogPMZoBYDF == true){ogPMZoBYDF = false;}
      if(oUUDEjfUgB == true){oUUDEjfUgB = false;}
      if(XsmJZyYPpV == true){XsmJZyYPpV = false;}
      if(ZeHbEDOqjI == true){ZeHbEDOqjI = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class TRYGSNSOJC
{ 
  void pFjGMwiIQF()
  { 
      bool MMwjUKRcHs = false;
      bool GSGPIstzRx = false;
      bool UZnUfoIJpQ = false;
      bool FsnZXDhnEm = false;
      bool XWKNknndaP = false;
      bool QXNZCmXbDe = false;
      bool BIlpmNegrE = false;
      bool KFteZxPajr = false;
      bool BehaAheNWj = false;
      bool eGkZkOkTZX = false;
      bool IGlVFKchzE = false;
      bool XwrKdWZKpF = false;
      bool hQJHYDTUtL = false;
      bool MuBMitrMVo = false;
      bool ExOSMiOZuO = false;
      bool nZdTorwdwB = false;
      bool pInnrbuebi = false;
      bool dNoAAkCqtp = false;
      bool ntYfWlQgWp = false;
      bool xOPTywIZZk = false;
      string zPlbQlxyKw;
      string xNQAXXiyeR;
      string VRerSGMOxk;
      string yXVwViXCGM;
      string tKgmUsUVdu;
      string rGWyxgksJK;
      string YiBYyZrTdn;
      string AgrSWKjqWY;
      string kpkBrrAWyo;
      string ydswmLJIou;
      string BArptLOEam;
      string xsWjYhyzfF;
      string YUVnoWnueL;
      string AbBbXkytGg;
      string dwuKrEGIWE;
      string NKbiVfdDAX;
      string XSYPmUrtMm;
      string jDrzbcYLwj;
      string PeYZxozRGq;
      string GttiIKWfWW;
      if(zPlbQlxyKw == BArptLOEam){MMwjUKRcHs = true;}
      else if(BArptLOEam == zPlbQlxyKw){IGlVFKchzE = true;}
      if(xNQAXXiyeR == xsWjYhyzfF){GSGPIstzRx = true;}
      else if(xsWjYhyzfF == xNQAXXiyeR){XwrKdWZKpF = true;}
      if(VRerSGMOxk == YUVnoWnueL){UZnUfoIJpQ = true;}
      else if(YUVnoWnueL == VRerSGMOxk){hQJHYDTUtL = true;}
      if(yXVwViXCGM == AbBbXkytGg){FsnZXDhnEm = true;}
      else if(AbBbXkytGg == yXVwViXCGM){MuBMitrMVo = true;}
      if(tKgmUsUVdu == dwuKrEGIWE){XWKNknndaP = true;}
      else if(dwuKrEGIWE == tKgmUsUVdu){ExOSMiOZuO = true;}
      if(rGWyxgksJK == NKbiVfdDAX){QXNZCmXbDe = true;}
      else if(NKbiVfdDAX == rGWyxgksJK){nZdTorwdwB = true;}
      if(YiBYyZrTdn == XSYPmUrtMm){BIlpmNegrE = true;}
      else if(XSYPmUrtMm == YiBYyZrTdn){pInnrbuebi = true;}
      if(AgrSWKjqWY == jDrzbcYLwj){KFteZxPajr = true;}
      if(kpkBrrAWyo == PeYZxozRGq){BehaAheNWj = true;}
      if(ydswmLJIou == GttiIKWfWW){eGkZkOkTZX = true;}
      while(jDrzbcYLwj == AgrSWKjqWY){dNoAAkCqtp = true;}
      while(PeYZxozRGq == PeYZxozRGq){ntYfWlQgWp = true;}
      while(GttiIKWfWW == GttiIKWfWW){xOPTywIZZk = true;}
      if(MMwjUKRcHs == true){MMwjUKRcHs = false;}
      if(GSGPIstzRx == true){GSGPIstzRx = false;}
      if(UZnUfoIJpQ == true){UZnUfoIJpQ = false;}
      if(FsnZXDhnEm == true){FsnZXDhnEm = false;}
      if(XWKNknndaP == true){XWKNknndaP = false;}
      if(QXNZCmXbDe == true){QXNZCmXbDe = false;}
      if(BIlpmNegrE == true){BIlpmNegrE = false;}
      if(KFteZxPajr == true){KFteZxPajr = false;}
      if(BehaAheNWj == true){BehaAheNWj = false;}
      if(eGkZkOkTZX == true){eGkZkOkTZX = false;}
      if(IGlVFKchzE == true){IGlVFKchzE = false;}
      if(XwrKdWZKpF == true){XwrKdWZKpF = false;}
      if(hQJHYDTUtL == true){hQJHYDTUtL = false;}
      if(MuBMitrMVo == true){MuBMitrMVo = false;}
      if(ExOSMiOZuO == true){ExOSMiOZuO = false;}
      if(nZdTorwdwB == true){nZdTorwdwB = false;}
      if(pInnrbuebi == true){pInnrbuebi = false;}
      if(dNoAAkCqtp == true){dNoAAkCqtp = false;}
      if(ntYfWlQgWp == true){ntYfWlQgWp = false;}
      if(xOPTywIZZk == true){xOPTywIZZk = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class DKENTMEFAL
{ 
  void zPzcrdQDQG()
  { 
      bool LuNQzuqhmB = false;
      bool JerXAEKOyz = false;
      bool LsuRpaGZIt = false;
      bool tHFTpmGcQq = false;
      bool BwWfaXsWpK = false;
      bool YWTpGSAuZX = false;
      bool nRYsHBYYgN = false;
      bool ygyGyOWOqS = false;
      bool hiiyUWmOMX = false;
      bool lKCrCjXcYY = false;
      bool yTpcMqYNrr = false;
      bool wkEGoEhaXj = false;
      bool NKMJamdFDO = false;
      bool qspSUNsFld = false;
      bool yZWUbBGwDx = false;
      bool BxFnKmHgCY = false;
      bool MSJdADtllb = false;
      bool LcoslnmqhY = false;
      bool fhCGMtmCHg = false;
      bool GMDMReQsTX = false;
      string zqfDCTKZms;
      string RtfquWTPcO;
      string zYDtwxyWWe;
      string hwtWKhBuiK;
      string JAXsANOGGJ;
      string hnYXsankGE;
      string UnCHLVzJfM;
      string VYgREyAJti;
      string iqPMwtXWdj;
      string tPndpUxQhe;
      string NFasnJGGTt;
      string aeqXVdXoKQ;
      string xcewSFjCbi;
      string BjaOUcQVYm;
      string mQCiJPXQIL;
      string xHFQgjaeah;
      string YEejspDbCr;
      string MBQXdfaulC;
      string hTsPlseKgj;
      string CkupOilSpS;
      if(zqfDCTKZms == NFasnJGGTt){LuNQzuqhmB = true;}
      else if(NFasnJGGTt == zqfDCTKZms){yTpcMqYNrr = true;}
      if(RtfquWTPcO == aeqXVdXoKQ){JerXAEKOyz = true;}
      else if(aeqXVdXoKQ == RtfquWTPcO){wkEGoEhaXj = true;}
      if(zYDtwxyWWe == xcewSFjCbi){LsuRpaGZIt = true;}
      else if(xcewSFjCbi == zYDtwxyWWe){NKMJamdFDO = true;}
      if(hwtWKhBuiK == BjaOUcQVYm){tHFTpmGcQq = true;}
      else if(BjaOUcQVYm == hwtWKhBuiK){qspSUNsFld = true;}
      if(JAXsANOGGJ == mQCiJPXQIL){BwWfaXsWpK = true;}
      else if(mQCiJPXQIL == JAXsANOGGJ){yZWUbBGwDx = true;}
      if(hnYXsankGE == xHFQgjaeah){YWTpGSAuZX = true;}
      else if(xHFQgjaeah == hnYXsankGE){BxFnKmHgCY = true;}
      if(UnCHLVzJfM == YEejspDbCr){nRYsHBYYgN = true;}
      else if(YEejspDbCr == UnCHLVzJfM){MSJdADtllb = true;}
      if(VYgREyAJti == MBQXdfaulC){ygyGyOWOqS = true;}
      if(iqPMwtXWdj == hTsPlseKgj){hiiyUWmOMX = true;}
      if(tPndpUxQhe == CkupOilSpS){lKCrCjXcYY = true;}
      while(MBQXdfaulC == VYgREyAJti){LcoslnmqhY = true;}
      while(hTsPlseKgj == hTsPlseKgj){fhCGMtmCHg = true;}
      while(CkupOilSpS == CkupOilSpS){GMDMReQsTX = true;}
      if(LuNQzuqhmB == true){LuNQzuqhmB = false;}
      if(JerXAEKOyz == true){JerXAEKOyz = false;}
      if(LsuRpaGZIt == true){LsuRpaGZIt = false;}
      if(tHFTpmGcQq == true){tHFTpmGcQq = false;}
      if(BwWfaXsWpK == true){BwWfaXsWpK = false;}
      if(YWTpGSAuZX == true){YWTpGSAuZX = false;}
      if(nRYsHBYYgN == true){nRYsHBYYgN = false;}
      if(ygyGyOWOqS == true){ygyGyOWOqS = false;}
      if(hiiyUWmOMX == true){hiiyUWmOMX = false;}
      if(lKCrCjXcYY == true){lKCrCjXcYY = false;}
      if(yTpcMqYNrr == true){yTpcMqYNrr = false;}
      if(wkEGoEhaXj == true){wkEGoEhaXj = false;}
      if(NKMJamdFDO == true){NKMJamdFDO = false;}
      if(qspSUNsFld == true){qspSUNsFld = false;}
      if(yZWUbBGwDx == true){yZWUbBGwDx = false;}
      if(BxFnKmHgCY == true){BxFnKmHgCY = false;}
      if(MSJdADtllb == true){MSJdADtllb = false;}
      if(LcoslnmqhY == true){LcoslnmqhY = false;}
      if(fhCGMtmCHg == true){fhCGMtmCHg = false;}
      if(GMDMReQsTX == true){GMDMReQsTX = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class HMSAFTQPQM
{ 
  void OcmEYHaUgy()
  { 
      bool cDKZLuWsmY = false;
      bool ApNxfhcLwK = false;
      bool bJcZtNeulr = false;
      bool JBhYgQzymk = false;
      bool mNUfycTUFo = false;
      bool CayCcSakex = false;
      bool QbGtPyInPP = false;
      bool hdXKWOowbQ = false;
      bool tJoxohDewO = false;
      bool pOSpULGZQz = false;
      bool UeFpGYDmeN = false;
      bool ddIOCGlIFg = false;
      bool ucrBYTKhpL = false;
      bool HPfbuPEzpQ = false;
      bool ePzhjLFEmN = false;
      bool YyTiEqmDQm = false;
      bool NUxTGOxgSm = false;
      bool ClRoCfcJQM = false;
      bool NGtclIuxXE = false;
      bool cAhDCJRfaV = false;
      string QGLhCctOUS;
      string VZcyamBEFQ;
      string aoqOqTeizs;
      string VMXkFroynY;
      string anEKYWDzuE;
      string pcxtVbOxqh;
      string yKPbwJBqsh;
      string xCQfpmkfpT;
      string QemtCrOdPc;
      string crHFZPYbOP;
      string VLGMGmMQEh;
      string qiHWRTWUYD;
      string tWbPEFuLFZ;
      string NIRZxEXZmP;
      string fxZgltkjmG;
      string rECKUyjqHB;
      string rAKdUhQgZN;
      string uxgJXwxtcK;
      string UKXzgJGHEz;
      string TgRlWemuME;
      if(QGLhCctOUS == VLGMGmMQEh){cDKZLuWsmY = true;}
      else if(VLGMGmMQEh == QGLhCctOUS){UeFpGYDmeN = true;}
      if(VZcyamBEFQ == qiHWRTWUYD){ApNxfhcLwK = true;}
      else if(qiHWRTWUYD == VZcyamBEFQ){ddIOCGlIFg = true;}
      if(aoqOqTeizs == tWbPEFuLFZ){bJcZtNeulr = true;}
      else if(tWbPEFuLFZ == aoqOqTeizs){ucrBYTKhpL = true;}
      if(VMXkFroynY == NIRZxEXZmP){JBhYgQzymk = true;}
      else if(NIRZxEXZmP == VMXkFroynY){HPfbuPEzpQ = true;}
      if(anEKYWDzuE == fxZgltkjmG){mNUfycTUFo = true;}
      else if(fxZgltkjmG == anEKYWDzuE){ePzhjLFEmN = true;}
      if(pcxtVbOxqh == rECKUyjqHB){CayCcSakex = true;}
      else if(rECKUyjqHB == pcxtVbOxqh){YyTiEqmDQm = true;}
      if(yKPbwJBqsh == rAKdUhQgZN){QbGtPyInPP = true;}
      else if(rAKdUhQgZN == yKPbwJBqsh){NUxTGOxgSm = true;}
      if(xCQfpmkfpT == uxgJXwxtcK){hdXKWOowbQ = true;}
      if(QemtCrOdPc == UKXzgJGHEz){tJoxohDewO = true;}
      if(crHFZPYbOP == TgRlWemuME){pOSpULGZQz = true;}
      while(uxgJXwxtcK == xCQfpmkfpT){ClRoCfcJQM = true;}
      while(UKXzgJGHEz == UKXzgJGHEz){NGtclIuxXE = true;}
      while(TgRlWemuME == TgRlWemuME){cAhDCJRfaV = true;}
      if(cDKZLuWsmY == true){cDKZLuWsmY = false;}
      if(ApNxfhcLwK == true){ApNxfhcLwK = false;}
      if(bJcZtNeulr == true){bJcZtNeulr = false;}
      if(JBhYgQzymk == true){JBhYgQzymk = false;}
      if(mNUfycTUFo == true){mNUfycTUFo = false;}
      if(CayCcSakex == true){CayCcSakex = false;}
      if(QbGtPyInPP == true){QbGtPyInPP = false;}
      if(hdXKWOowbQ == true){hdXKWOowbQ = false;}
      if(tJoxohDewO == true){tJoxohDewO = false;}
      if(pOSpULGZQz == true){pOSpULGZQz = false;}
      if(UeFpGYDmeN == true){UeFpGYDmeN = false;}
      if(ddIOCGlIFg == true){ddIOCGlIFg = false;}
      if(ucrBYTKhpL == true){ucrBYTKhpL = false;}
      if(HPfbuPEzpQ == true){HPfbuPEzpQ = false;}
      if(ePzhjLFEmN == true){ePzhjLFEmN = false;}
      if(YyTiEqmDQm == true){YyTiEqmDQm = false;}
      if(NUxTGOxgSm == true){NUxTGOxgSm = false;}
      if(ClRoCfcJQM == true){ClRoCfcJQM = false;}
      if(NGtclIuxXE == true){NGtclIuxXE = false;}
      if(cAhDCJRfaV == true){cAhDCJRfaV = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class UQZEXSAFTR
{ 
  void QCjWGsSXMh()
  { 
      bool qMQDnXNDWf = false;
      bool yXcksqfIrN = false;
      bool zzAExmXYcr = false;
      bool jEApzYcpFY = false;
      bool akEAqWMVDB = false;
      bool sgCgwrLMFA = false;
      bool AnaewsXllU = false;
      bool OpCSmOuANa = false;
      bool aBUazCCTtG = false;
      bool MPjFYlJZDx = false;
      bool zZjilCeitg = false;
      bool xKzeYySzft = false;
      bool qDreHyGwsA = false;
      bool EVxPaARlow = false;
      bool WSYMJCQEga = false;
      bool SKtJGuhFbm = false;
      bool uhptbaNiEX = false;
      bool ggKiWXeeUF = false;
      bool gCPRgtbmJe = false;
      bool SLJBAocekh = false;
      string TilJFSLggR;
      string ArgjxrutnT;
      string cfRFHPpbtL;
      string hdjLZbwuwb;
      string BUsstnjxGH;
      string pPXJkmRfBo;
      string bilUjWIUJU;
      string wzyLSIlYKS;
      string esUmURFZal;
      string KPtHARiYIX;
      string fOmlKqRMpb;
      string BrUhJiOyzS;
      string RhtXJfFqKB;
      string YNQmmQFibd;
      string AriyjStLxQ;
      string DjYoGxUPbe;
      string kZCoDnahts;
      string ceWVSZywmq;
      string ksssxonagp;
      string uoGxrZotuw;
      if(TilJFSLggR == fOmlKqRMpb){qMQDnXNDWf = true;}
      else if(fOmlKqRMpb == TilJFSLggR){zZjilCeitg = true;}
      if(ArgjxrutnT == BrUhJiOyzS){yXcksqfIrN = true;}
      else if(BrUhJiOyzS == ArgjxrutnT){xKzeYySzft = true;}
      if(cfRFHPpbtL == RhtXJfFqKB){zzAExmXYcr = true;}
      else if(RhtXJfFqKB == cfRFHPpbtL){qDreHyGwsA = true;}
      if(hdjLZbwuwb == YNQmmQFibd){jEApzYcpFY = true;}
      else if(YNQmmQFibd == hdjLZbwuwb){EVxPaARlow = true;}
      if(BUsstnjxGH == AriyjStLxQ){akEAqWMVDB = true;}
      else if(AriyjStLxQ == BUsstnjxGH){WSYMJCQEga = true;}
      if(pPXJkmRfBo == DjYoGxUPbe){sgCgwrLMFA = true;}
      else if(DjYoGxUPbe == pPXJkmRfBo){SKtJGuhFbm = true;}
      if(bilUjWIUJU == kZCoDnahts){AnaewsXllU = true;}
      else if(kZCoDnahts == bilUjWIUJU){uhptbaNiEX = true;}
      if(wzyLSIlYKS == ceWVSZywmq){OpCSmOuANa = true;}
      if(esUmURFZal == ksssxonagp){aBUazCCTtG = true;}
      if(KPtHARiYIX == uoGxrZotuw){MPjFYlJZDx = true;}
      while(ceWVSZywmq == wzyLSIlYKS){ggKiWXeeUF = true;}
      while(ksssxonagp == ksssxonagp){gCPRgtbmJe = true;}
      while(uoGxrZotuw == uoGxrZotuw){SLJBAocekh = true;}
      if(qMQDnXNDWf == true){qMQDnXNDWf = false;}
      if(yXcksqfIrN == true){yXcksqfIrN = false;}
      if(zzAExmXYcr == true){zzAExmXYcr = false;}
      if(jEApzYcpFY == true){jEApzYcpFY = false;}
      if(akEAqWMVDB == true){akEAqWMVDB = false;}
      if(sgCgwrLMFA == true){sgCgwrLMFA = false;}
      if(AnaewsXllU == true){AnaewsXllU = false;}
      if(OpCSmOuANa == true){OpCSmOuANa = false;}
      if(aBUazCCTtG == true){aBUazCCTtG = false;}
      if(MPjFYlJZDx == true){MPjFYlJZDx = false;}
      if(zZjilCeitg == true){zZjilCeitg = false;}
      if(xKzeYySzft == true){xKzeYySzft = false;}
      if(qDreHyGwsA == true){qDreHyGwsA = false;}
      if(EVxPaARlow == true){EVxPaARlow = false;}
      if(WSYMJCQEga == true){WSYMJCQEga = false;}
      if(SKtJGuhFbm == true){SKtJGuhFbm = false;}
      if(uhptbaNiEX == true){uhptbaNiEX = false;}
      if(ggKiWXeeUF == true){ggKiWXeeUF = false;}
      if(gCPRgtbmJe == true){gCPRgtbmJe = false;}
      if(SLJBAocekh == true){SLJBAocekh = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class CLSKUBTMVG
{ 
  void ByTGjeVljc()
  { 
      bool ghmQXYnxPo = false;
      bool lEfZwGOjoT = false;
      bool nRWZxDtMjn = false;
      bool tkiOcTKswa = false;
      bool NSpyTQkHzj = false;
      bool GLfDmOKMTU = false;
      bool daNatBUQwc = false;
      bool uVnOFUaYGg = false;
      bool RmNzghEfbN = false;
      bool JyYawmFPES = false;
      bool uTKWnkXRxR = false;
      bool nlGmCqNNsL = false;
      bool wnohTxwMRS = false;
      bool PKTnkybpKw = false;
      bool KmiJZXqlYE = false;
      bool YqVrWHdcDp = false;
      bool oKzdBcRSBD = false;
      bool PWCxAIFeIw = false;
      bool GJnNsYnaRd = false;
      bool UzmUGAmFIw = false;
      string CHorpJorpV;
      string zFoGlIJuus;
      string wVyUwEWhzC;
      string GqjfIQqtSk;
      string zujqehQqTK;
      string ktaiUfJUuk;
      string lGsnPHUIyV;
      string RPbKsBkGpO;
      string mfOnRMQBLb;
      string GWzhysCubW;
      string NHsysUSPpT;
      string uCdfyGrEWD;
      string qSxWOtQtLA;
      string yoeSAemQuw;
      string sALqgErSjr;
      string AxYYftKViy;
      string EYEoUFXKfS;
      string TbJaJpHFpJ;
      string BxJTzBQFmG;
      string UQgwqUwVWa;
      if(CHorpJorpV == NHsysUSPpT){ghmQXYnxPo = true;}
      else if(NHsysUSPpT == CHorpJorpV){uTKWnkXRxR = true;}
      if(zFoGlIJuus == uCdfyGrEWD){lEfZwGOjoT = true;}
      else if(uCdfyGrEWD == zFoGlIJuus){nlGmCqNNsL = true;}
      if(wVyUwEWhzC == qSxWOtQtLA){nRWZxDtMjn = true;}
      else if(qSxWOtQtLA == wVyUwEWhzC){wnohTxwMRS = true;}
      if(GqjfIQqtSk == yoeSAemQuw){tkiOcTKswa = true;}
      else if(yoeSAemQuw == GqjfIQqtSk){PKTnkybpKw = true;}
      if(zujqehQqTK == sALqgErSjr){NSpyTQkHzj = true;}
      else if(sALqgErSjr == zujqehQqTK){KmiJZXqlYE = true;}
      if(ktaiUfJUuk == AxYYftKViy){GLfDmOKMTU = true;}
      else if(AxYYftKViy == ktaiUfJUuk){YqVrWHdcDp = true;}
      if(lGsnPHUIyV == EYEoUFXKfS){daNatBUQwc = true;}
      else if(EYEoUFXKfS == lGsnPHUIyV){oKzdBcRSBD = true;}
      if(RPbKsBkGpO == TbJaJpHFpJ){uVnOFUaYGg = true;}
      if(mfOnRMQBLb == BxJTzBQFmG){RmNzghEfbN = true;}
      if(GWzhysCubW == UQgwqUwVWa){JyYawmFPES = true;}
      while(TbJaJpHFpJ == RPbKsBkGpO){PWCxAIFeIw = true;}
      while(BxJTzBQFmG == BxJTzBQFmG){GJnNsYnaRd = true;}
      while(UQgwqUwVWa == UQgwqUwVWa){UzmUGAmFIw = true;}
      if(ghmQXYnxPo == true){ghmQXYnxPo = false;}
      if(lEfZwGOjoT == true){lEfZwGOjoT = false;}
      if(nRWZxDtMjn == true){nRWZxDtMjn = false;}
      if(tkiOcTKswa == true){tkiOcTKswa = false;}
      if(NSpyTQkHzj == true){NSpyTQkHzj = false;}
      if(GLfDmOKMTU == true){GLfDmOKMTU = false;}
      if(daNatBUQwc == true){daNatBUQwc = false;}
      if(uVnOFUaYGg == true){uVnOFUaYGg = false;}
      if(RmNzghEfbN == true){RmNzghEfbN = false;}
      if(JyYawmFPES == true){JyYawmFPES = false;}
      if(uTKWnkXRxR == true){uTKWnkXRxR = false;}
      if(nlGmCqNNsL == true){nlGmCqNNsL = false;}
      if(wnohTxwMRS == true){wnohTxwMRS = false;}
      if(PKTnkybpKw == true){PKTnkybpKw = false;}
      if(KmiJZXqlYE == true){KmiJZXqlYE = false;}
      if(YqVrWHdcDp == true){YqVrWHdcDp = false;}
      if(oKzdBcRSBD == true){oKzdBcRSBD = false;}
      if(PWCxAIFeIw == true){PWCxAIFeIw = false;}
      if(GJnNsYnaRd == true){GJnNsYnaRd = false;}
      if(UzmUGAmFIw == true){UzmUGAmFIw = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class GQMNMOPVZS
{ 
  void FXoXMYbaYH()
  { 
      bool dXPyaCRwob = false;
      bool iWiEKjuyuU = false;
      bool trwxdFxfwC = false;
      bool hnjpkwpmIF = false;
      bool rNCXyUUtCq = false;
      bool DUtwFlaSTU = false;
      bool EkzltulrSN = false;
      bool sHppcfoYzJ = false;
      bool kCcEyMsnjy = false;
      bool VXSmBGNPdC = false;
      bool hbboyueETZ = false;
      bool xCTKjBIung = false;
      bool CyHTrUoCnV = false;
      bool SYuwaIanGD = false;
      bool hnUKBSEHCz = false;
      bool xSbxzjUHxc = false;
      bool GbPxHXGWib = false;
      bool ZUnjyNdwSY = false;
      bool QgAoXzxyxq = false;
      bool mTqcxFXWDd = false;
      string JstzVoBVWZ;
      string BIAlFbyuzO;
      string KqZDsxCVWY;
      string YthJExnbfI;
      string ttGWpMLDFJ;
      string OEqdORTpGX;
      string lfyyBHaqhH;
      string nWPpUQkCNg;
      string kzPNJUDDtl;
      string dxUHWOuHVi;
      string kUVxUrnBJy;
      string gQbZmmPknf;
      string DXwucpBHTG;
      string UcgeuQdSrR;
      string fBsuENUtUj;
      string yKSoeNXZTe;
      string pghDdEixeV;
      string JwsWACdBqP;
      string UGliHJJqAg;
      string rDzMayTpQA;
      if(JstzVoBVWZ == kUVxUrnBJy){dXPyaCRwob = true;}
      else if(kUVxUrnBJy == JstzVoBVWZ){hbboyueETZ = true;}
      if(BIAlFbyuzO == gQbZmmPknf){iWiEKjuyuU = true;}
      else if(gQbZmmPknf == BIAlFbyuzO){xCTKjBIung = true;}
      if(KqZDsxCVWY == DXwucpBHTG){trwxdFxfwC = true;}
      else if(DXwucpBHTG == KqZDsxCVWY){CyHTrUoCnV = true;}
      if(YthJExnbfI == UcgeuQdSrR){hnjpkwpmIF = true;}
      else if(UcgeuQdSrR == YthJExnbfI){SYuwaIanGD = true;}
      if(ttGWpMLDFJ == fBsuENUtUj){rNCXyUUtCq = true;}
      else if(fBsuENUtUj == ttGWpMLDFJ){hnUKBSEHCz = true;}
      if(OEqdORTpGX == yKSoeNXZTe){DUtwFlaSTU = true;}
      else if(yKSoeNXZTe == OEqdORTpGX){xSbxzjUHxc = true;}
      if(lfyyBHaqhH == pghDdEixeV){EkzltulrSN = true;}
      else if(pghDdEixeV == lfyyBHaqhH){GbPxHXGWib = true;}
      if(nWPpUQkCNg == JwsWACdBqP){sHppcfoYzJ = true;}
      if(kzPNJUDDtl == UGliHJJqAg){kCcEyMsnjy = true;}
      if(dxUHWOuHVi == rDzMayTpQA){VXSmBGNPdC = true;}
      while(JwsWACdBqP == nWPpUQkCNg){ZUnjyNdwSY = true;}
      while(UGliHJJqAg == UGliHJJqAg){QgAoXzxyxq = true;}
      while(rDzMayTpQA == rDzMayTpQA){mTqcxFXWDd = true;}
      if(dXPyaCRwob == true){dXPyaCRwob = false;}
      if(iWiEKjuyuU == true){iWiEKjuyuU = false;}
      if(trwxdFxfwC == true){trwxdFxfwC = false;}
      if(hnjpkwpmIF == true){hnjpkwpmIF = false;}
      if(rNCXyUUtCq == true){rNCXyUUtCq = false;}
      if(DUtwFlaSTU == true){DUtwFlaSTU = false;}
      if(EkzltulrSN == true){EkzltulrSN = false;}
      if(sHppcfoYzJ == true){sHppcfoYzJ = false;}
      if(kCcEyMsnjy == true){kCcEyMsnjy = false;}
      if(VXSmBGNPdC == true){VXSmBGNPdC = false;}
      if(hbboyueETZ == true){hbboyueETZ = false;}
      if(xCTKjBIung == true){xCTKjBIung = false;}
      if(CyHTrUoCnV == true){CyHTrUoCnV = false;}
      if(SYuwaIanGD == true){SYuwaIanGD = false;}
      if(hnUKBSEHCz == true){hnUKBSEHCz = false;}
      if(xSbxzjUHxc == true){xSbxzjUHxc = false;}
      if(GbPxHXGWib == true){GbPxHXGWib = false;}
      if(ZUnjyNdwSY == true){ZUnjyNdwSY = false;}
      if(QgAoXzxyxq == true){QgAoXzxyxq = false;}
      if(mTqcxFXWDd == true){mTqcxFXWDd = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class WSPGYPNGPG
{ 
  void AcCTwuiKFb()
  { 
      bool rWRmMUfawe = false;
      bool EbNjXTbBKY = false;
      bool DhWQhhgpiZ = false;
      bool cIjZsgHcFw = false;
      bool yuSCCTyTdB = false;
      bool QkyexJzBEd = false;
      bool moqWCurnqq = false;
      bool MzuOZHPUNO = false;
      bool jNMgIqKEci = false;
      bool gGXbJJEwzH = false;
      bool bKbloQojFo = false;
      bool semptYbKNK = false;
      bool kmKHKFbTEP = false;
      bool DTVGmYkarq = false;
      bool CaznoCShgj = false;
      bool gsinWnAUbi = false;
      bool oVeolZJgCV = false;
      bool mBSVIJmWRH = false;
      bool mslTiJjgjy = false;
      bool YQzICguKBP = false;
      string aKDXtaqkli;
      string wLchoSEBZj;
      string DxheRlkLdq;
      string UZXUeufxOt;
      string wDuhlORsps;
      string QKZmGdbYFI;
      string ofHtNVnIDt;
      string lHlemzCzrD;
      string TrUkZJAjNB;
      string SHqFFQuATP;
      string ZJpwGJYtzH;
      string bcfBnxKWUE;
      string VDtBaePgZW;
      string DBebdKBYdP;
      string kGkGZpapQH;
      string FYePtWOoUb;
      string trTbDZxEXd;
      string uksESORmak;
      string DZPSQeVPgH;
      string uMDCVslJDA;
      if(aKDXtaqkli == ZJpwGJYtzH){rWRmMUfawe = true;}
      else if(ZJpwGJYtzH == aKDXtaqkli){bKbloQojFo = true;}
      if(wLchoSEBZj == bcfBnxKWUE){EbNjXTbBKY = true;}
      else if(bcfBnxKWUE == wLchoSEBZj){semptYbKNK = true;}
      if(DxheRlkLdq == VDtBaePgZW){DhWQhhgpiZ = true;}
      else if(VDtBaePgZW == DxheRlkLdq){kmKHKFbTEP = true;}
      if(UZXUeufxOt == DBebdKBYdP){cIjZsgHcFw = true;}
      else if(DBebdKBYdP == UZXUeufxOt){DTVGmYkarq = true;}
      if(wDuhlORsps == kGkGZpapQH){yuSCCTyTdB = true;}
      else if(kGkGZpapQH == wDuhlORsps){CaznoCShgj = true;}
      if(QKZmGdbYFI == FYePtWOoUb){QkyexJzBEd = true;}
      else if(FYePtWOoUb == QKZmGdbYFI){gsinWnAUbi = true;}
      if(ofHtNVnIDt == trTbDZxEXd){moqWCurnqq = true;}
      else if(trTbDZxEXd == ofHtNVnIDt){oVeolZJgCV = true;}
      if(lHlemzCzrD == uksESORmak){MzuOZHPUNO = true;}
      if(TrUkZJAjNB == DZPSQeVPgH){jNMgIqKEci = true;}
      if(SHqFFQuATP == uMDCVslJDA){gGXbJJEwzH = true;}
      while(uksESORmak == lHlemzCzrD){mBSVIJmWRH = true;}
      while(DZPSQeVPgH == DZPSQeVPgH){mslTiJjgjy = true;}
      while(uMDCVslJDA == uMDCVslJDA){YQzICguKBP = true;}
      if(rWRmMUfawe == true){rWRmMUfawe = false;}
      if(EbNjXTbBKY == true){EbNjXTbBKY = false;}
      if(DhWQhhgpiZ == true){DhWQhhgpiZ = false;}
      if(cIjZsgHcFw == true){cIjZsgHcFw = false;}
      if(yuSCCTyTdB == true){yuSCCTyTdB = false;}
      if(QkyexJzBEd == true){QkyexJzBEd = false;}
      if(moqWCurnqq == true){moqWCurnqq = false;}
      if(MzuOZHPUNO == true){MzuOZHPUNO = false;}
      if(jNMgIqKEci == true){jNMgIqKEci = false;}
      if(gGXbJJEwzH == true){gGXbJJEwzH = false;}
      if(bKbloQojFo == true){bKbloQojFo = false;}
      if(semptYbKNK == true){semptYbKNK = false;}
      if(kmKHKFbTEP == true){kmKHKFbTEP = false;}
      if(DTVGmYkarq == true){DTVGmYkarq = false;}
      if(CaznoCShgj == true){CaznoCShgj = false;}
      if(gsinWnAUbi == true){gsinWnAUbi = false;}
      if(oVeolZJgCV == true){oVeolZJgCV = false;}
      if(mBSVIJmWRH == true){mBSVIJmWRH = false;}
      if(mslTiJjgjy == true){mslTiJjgjy = false;}
      if(YQzICguKBP == true){YQzICguKBP = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class IBDVLJTJKZ
{ 
  void AFSCkqTTAB()
  { 
      bool QhSWauaawp = false;
      bool IINynXnEcy = false;
      bool jKcKmITyyf = false;
      bool YEZStUWJQQ = false;
      bool kLwxulxFlj = false;
      bool mwCfhFEHiS = false;
      bool bcbQRDhuDT = false;
      bool AemMNYNePB = false;
      bool KNLOrbBsjn = false;
      bool PPZynIiefq = false;
      bool DBBSjIIoSJ = false;
      bool rZrhHNQNYo = false;
      bool CoLPDkEoXE = false;
      bool ohzXxILrej = false;
      bool SLaawpWrpZ = false;
      bool qVGpoOplPz = false;
      bool DTRNUJZUkz = false;
      bool CXinWpNkTM = false;
      bool NMzyNSbIhh = false;
      bool SZcefztMGm = false;
      string olGYqaWnqL;
      string tfACfIFrGT;
      string GVcqYhMngH;
      string zkpqyejpGp;
      string lArVxjQcnS;
      string AsBCdSIOzI;
      string OiGiLIpIEA;
      string XPkPhGcHso;
      string QizOGGjnNe;
      string VUqyaCsJJo;
      string tIYmukIkTX;
      string pBVJreirbF;
      string YCtZeCXmne;
      string MTxEuIKMSV;
      string xyTpoTzgFw;
      string SAgEQqNyIr;
      string NVxoKWDQOi;
      string UWYGHZiEkK;
      string DpgrLMlsnD;
      string uLDaHbBeeR;
      if(olGYqaWnqL == tIYmukIkTX){QhSWauaawp = true;}
      else if(tIYmukIkTX == olGYqaWnqL){DBBSjIIoSJ = true;}
      if(tfACfIFrGT == pBVJreirbF){IINynXnEcy = true;}
      else if(pBVJreirbF == tfACfIFrGT){rZrhHNQNYo = true;}
      if(GVcqYhMngH == YCtZeCXmne){jKcKmITyyf = true;}
      else if(YCtZeCXmne == GVcqYhMngH){CoLPDkEoXE = true;}
      if(zkpqyejpGp == MTxEuIKMSV){YEZStUWJQQ = true;}
      else if(MTxEuIKMSV == zkpqyejpGp){ohzXxILrej = true;}
      if(lArVxjQcnS == xyTpoTzgFw){kLwxulxFlj = true;}
      else if(xyTpoTzgFw == lArVxjQcnS){SLaawpWrpZ = true;}
      if(AsBCdSIOzI == SAgEQqNyIr){mwCfhFEHiS = true;}
      else if(SAgEQqNyIr == AsBCdSIOzI){qVGpoOplPz = true;}
      if(OiGiLIpIEA == NVxoKWDQOi){bcbQRDhuDT = true;}
      else if(NVxoKWDQOi == OiGiLIpIEA){DTRNUJZUkz = true;}
      if(XPkPhGcHso == UWYGHZiEkK){AemMNYNePB = true;}
      if(QizOGGjnNe == DpgrLMlsnD){KNLOrbBsjn = true;}
      if(VUqyaCsJJo == uLDaHbBeeR){PPZynIiefq = true;}
      while(UWYGHZiEkK == XPkPhGcHso){CXinWpNkTM = true;}
      while(DpgrLMlsnD == DpgrLMlsnD){NMzyNSbIhh = true;}
      while(uLDaHbBeeR == uLDaHbBeeR){SZcefztMGm = true;}
      if(QhSWauaawp == true){QhSWauaawp = false;}
      if(IINynXnEcy == true){IINynXnEcy = false;}
      if(jKcKmITyyf == true){jKcKmITyyf = false;}
      if(YEZStUWJQQ == true){YEZStUWJQQ = false;}
      if(kLwxulxFlj == true){kLwxulxFlj = false;}
      if(mwCfhFEHiS == true){mwCfhFEHiS = false;}
      if(bcbQRDhuDT == true){bcbQRDhuDT = false;}
      if(AemMNYNePB == true){AemMNYNePB = false;}
      if(KNLOrbBsjn == true){KNLOrbBsjn = false;}
      if(PPZynIiefq == true){PPZynIiefq = false;}
      if(DBBSjIIoSJ == true){DBBSjIIoSJ = false;}
      if(rZrhHNQNYo == true){rZrhHNQNYo = false;}
      if(CoLPDkEoXE == true){CoLPDkEoXE = false;}
      if(ohzXxILrej == true){ohzXxILrej = false;}
      if(SLaawpWrpZ == true){SLaawpWrpZ = false;}
      if(qVGpoOplPz == true){qVGpoOplPz = false;}
      if(DTRNUJZUkz == true){DTRNUJZUkz = false;}
      if(CXinWpNkTM == true){CXinWpNkTM = false;}
      if(NMzyNSbIhh == true){NMzyNSbIhh = false;}
      if(SZcefztMGm == true){SZcefztMGm = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class MSPEJVCYUC
{ 
  void ocWtiVHxoY()
  { 
      bool EWkmbnqFJZ = false;
      bool xKPkQLLgaM = false;
      bool WKVbsxcWin = false;
      bool hsuNAyDQeI = false;
      bool xPMTGAHGIN = false;
      bool pBwEQtBJte = false;
      bool KUWVqEPCkS = false;
      bool ItCROHxCUs = false;
      bool pVOUxgwqwG = false;
      bool xtWAxcsqcC = false;
      bool kEVoFuzdoJ = false;
      bool wynAnoFBXK = false;
      bool HXGeVOXBUl = false;
      bool NGZSIlzZPC = false;
      bool gRBlJyGVLI = false;
      bool WqSRtMxqSq = false;
      bool WxJDupYUrC = false;
      bool oflVcoWUUX = false;
      bool HBoLOWmHYw = false;
      bool nHGYejIxpS = false;
      string IFVjyoBTdJ;
      string ewkOFHamXB;
      string oyXCuWlfDL;
      string WYQFUXIEIK;
      string hNPtlEiuOu;
      string crHtGKhSob;
      string CUQRmGfesg;
      string zVdNSahdQp;
      string mqQIheRVzK;
      string poPgINxyHf;
      string XDBhwHNsbf;
      string cDBynKEIjH;
      string nKfiqJGxEF;
      string djWkRioiLa;
      string RXtSglnRrx;
      string JnOzqNXRpl;
      string BPoWCsgQfF;
      string UUwIoQQMBF;
      string UoEHwoVWtE;
      string LXrZZBiWQn;
      if(IFVjyoBTdJ == XDBhwHNsbf){EWkmbnqFJZ = true;}
      else if(XDBhwHNsbf == IFVjyoBTdJ){kEVoFuzdoJ = true;}
      if(ewkOFHamXB == cDBynKEIjH){xKPkQLLgaM = true;}
      else if(cDBynKEIjH == ewkOFHamXB){wynAnoFBXK = true;}
      if(oyXCuWlfDL == nKfiqJGxEF){WKVbsxcWin = true;}
      else if(nKfiqJGxEF == oyXCuWlfDL){HXGeVOXBUl = true;}
      if(WYQFUXIEIK == djWkRioiLa){hsuNAyDQeI = true;}
      else if(djWkRioiLa == WYQFUXIEIK){NGZSIlzZPC = true;}
      if(hNPtlEiuOu == RXtSglnRrx){xPMTGAHGIN = true;}
      else if(RXtSglnRrx == hNPtlEiuOu){gRBlJyGVLI = true;}
      if(crHtGKhSob == JnOzqNXRpl){pBwEQtBJte = true;}
      else if(JnOzqNXRpl == crHtGKhSob){WqSRtMxqSq = true;}
      if(CUQRmGfesg == BPoWCsgQfF){KUWVqEPCkS = true;}
      else if(BPoWCsgQfF == CUQRmGfesg){WxJDupYUrC = true;}
      if(zVdNSahdQp == UUwIoQQMBF){ItCROHxCUs = true;}
      if(mqQIheRVzK == UoEHwoVWtE){pVOUxgwqwG = true;}
      if(poPgINxyHf == LXrZZBiWQn){xtWAxcsqcC = true;}
      while(UUwIoQQMBF == zVdNSahdQp){oflVcoWUUX = true;}
      while(UoEHwoVWtE == UoEHwoVWtE){HBoLOWmHYw = true;}
      while(LXrZZBiWQn == LXrZZBiWQn){nHGYejIxpS = true;}
      if(EWkmbnqFJZ == true){EWkmbnqFJZ = false;}
      if(xKPkQLLgaM == true){xKPkQLLgaM = false;}
      if(WKVbsxcWin == true){WKVbsxcWin = false;}
      if(hsuNAyDQeI == true){hsuNAyDQeI = false;}
      if(xPMTGAHGIN == true){xPMTGAHGIN = false;}
      if(pBwEQtBJte == true){pBwEQtBJte = false;}
      if(KUWVqEPCkS == true){KUWVqEPCkS = false;}
      if(ItCROHxCUs == true){ItCROHxCUs = false;}
      if(pVOUxgwqwG == true){pVOUxgwqwG = false;}
      if(xtWAxcsqcC == true){xtWAxcsqcC = false;}
      if(kEVoFuzdoJ == true){kEVoFuzdoJ = false;}
      if(wynAnoFBXK == true){wynAnoFBXK = false;}
      if(HXGeVOXBUl == true){HXGeVOXBUl = false;}
      if(NGZSIlzZPC == true){NGZSIlzZPC = false;}
      if(gRBlJyGVLI == true){gRBlJyGVLI = false;}
      if(WqSRtMxqSq == true){WqSRtMxqSq = false;}
      if(WxJDupYUrC == true){WxJDupYUrC = false;}
      if(oflVcoWUUX == true){oflVcoWUUX = false;}
      if(HBoLOWmHYw == true){HBoLOWmHYw = false;}
      if(nHGYejIxpS == true){nHGYejIxpS = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class RBEKOMCTFJ
{ 
  void nBbVokFYIE()
  { 
      bool lADYCmOYzw = false;
      bool GOtDfEKQqB = false;
      bool kkOcPLNsOn = false;
      bool DUjxiVCMXE = false;
      bool TYEQYNCDgh = false;
      bool YUKTdAkZIp = false;
      bool YUKLrldxTJ = false;
      bool BxrmhMgxEC = false;
      bool IKMfOiJQTi = false;
      bool kbDgeyNsYl = false;
      bool iFiWgbcXkQ = false;
      bool TnVGhOIdwJ = false;
      bool cMckYYsKHi = false;
      bool ymYRSCapzm = false;
      bool GleCOwGxzQ = false;
      bool pjwOJVcyxH = false;
      bool hRPBSfODme = false;
      bool nReJDphaWb = false;
      bool SwLqsOqJHx = false;
      bool ZbrqFnVcih = false;
      string JXQgWZQGmO;
      string andXyiBYPU;
      string ZDGlOIuMSK;
      string iyKaKIhzSE;
      string MeDFgQhbKC;
      string gEppiGQeRO;
      string eDmcfbcDNo;
      string BBGLIuzAEy;
      string aSCQcdITrE;
      string rCgEYIqaZF;
      string meOVBeyehm;
      string HQaTmMBVzC;
      string TIKIwyTCmz;
      string DYazKuDfPy;
      string eclExabNQL;
      string HUaWldTGYC;
      string KwqijhobJq;
      string JUGBWpWFLV;
      string WGlaqhxEMf;
      string bxHMmilCUO;
      if(JXQgWZQGmO == meOVBeyehm){lADYCmOYzw = true;}
      else if(meOVBeyehm == JXQgWZQGmO){iFiWgbcXkQ = true;}
      if(andXyiBYPU == HQaTmMBVzC){GOtDfEKQqB = true;}
      else if(HQaTmMBVzC == andXyiBYPU){TnVGhOIdwJ = true;}
      if(ZDGlOIuMSK == TIKIwyTCmz){kkOcPLNsOn = true;}
      else if(TIKIwyTCmz == ZDGlOIuMSK){cMckYYsKHi = true;}
      if(iyKaKIhzSE == DYazKuDfPy){DUjxiVCMXE = true;}
      else if(DYazKuDfPy == iyKaKIhzSE){ymYRSCapzm = true;}
      if(MeDFgQhbKC == eclExabNQL){TYEQYNCDgh = true;}
      else if(eclExabNQL == MeDFgQhbKC){GleCOwGxzQ = true;}
      if(gEppiGQeRO == HUaWldTGYC){YUKTdAkZIp = true;}
      else if(HUaWldTGYC == gEppiGQeRO){pjwOJVcyxH = true;}
      if(eDmcfbcDNo == KwqijhobJq){YUKLrldxTJ = true;}
      else if(KwqijhobJq == eDmcfbcDNo){hRPBSfODme = true;}
      if(BBGLIuzAEy == JUGBWpWFLV){BxrmhMgxEC = true;}
      if(aSCQcdITrE == WGlaqhxEMf){IKMfOiJQTi = true;}
      if(rCgEYIqaZF == bxHMmilCUO){kbDgeyNsYl = true;}
      while(JUGBWpWFLV == BBGLIuzAEy){nReJDphaWb = true;}
      while(WGlaqhxEMf == WGlaqhxEMf){SwLqsOqJHx = true;}
      while(bxHMmilCUO == bxHMmilCUO){ZbrqFnVcih = true;}
      if(lADYCmOYzw == true){lADYCmOYzw = false;}
      if(GOtDfEKQqB == true){GOtDfEKQqB = false;}
      if(kkOcPLNsOn == true){kkOcPLNsOn = false;}
      if(DUjxiVCMXE == true){DUjxiVCMXE = false;}
      if(TYEQYNCDgh == true){TYEQYNCDgh = false;}
      if(YUKTdAkZIp == true){YUKTdAkZIp = false;}
      if(YUKLrldxTJ == true){YUKLrldxTJ = false;}
      if(BxrmhMgxEC == true){BxrmhMgxEC = false;}
      if(IKMfOiJQTi == true){IKMfOiJQTi = false;}
      if(kbDgeyNsYl == true){kbDgeyNsYl = false;}
      if(iFiWgbcXkQ == true){iFiWgbcXkQ = false;}
      if(TnVGhOIdwJ == true){TnVGhOIdwJ = false;}
      if(cMckYYsKHi == true){cMckYYsKHi = false;}
      if(ymYRSCapzm == true){ymYRSCapzm = false;}
      if(GleCOwGxzQ == true){GleCOwGxzQ = false;}
      if(pjwOJVcyxH == true){pjwOJVcyxH = false;}
      if(hRPBSfODme == true){hRPBSfODme = false;}
      if(nReJDphaWb == true){nReJDphaWb = false;}
      if(SwLqsOqJHx == true){SwLqsOqJHx = false;}
      if(ZbrqFnVcih == true){ZbrqFnVcih = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class KZYWOFEGKC
{ 
  void AoXUbsaFjL()
  { 
      bool EzCergqdTB = false;
      bool ZThhFnDziZ = false;
      bool plkeptCAdU = false;
      bool qPiIJcthVX = false;
      bool iyyIHfkxsr = false;
      bool FdhQJRNWox = false;
      bool eqAyJJkZYb = false;
      bool tUcLprnbXJ = false;
      bool IFGlPNhRyq = false;
      bool PWsYsrxzyx = false;
      bool uKXQyjAWaR = false;
      bool ckzeoYkOiu = false;
      bool bSbgMWbERy = false;
      bool tndZOxgone = false;
      bool NKqgOdXNjT = false;
      bool GiQCVbipEa = false;
      bool HwEbWnHYQq = false;
      bool ruaDhQbtSi = false;
      bool yOUyqLXaEl = false;
      bool NqkMXQGOJZ = false;
      string FkNYZcRDij;
      string kUxATyiXcU;
      string jnxakobNiq;
      string HCQVUSGEme;
      string bsHeOzlyTu;
      string bieBKRnlmk;
      string BDUqchDbeB;
      string qdjxrqgSLk;
      string CctmPYXPKD;
      string dTRCdYYPCf;
      string wJSSExygIS;
      string jUZBhXJgbD;
      string KnQbWWMhTT;
      string SQQforKahR;
      string ZpGqSItPUF;
      string OqnyVHsqwh;
      string kQNnASEtMo;
      string NhzJdUhZIN;
      string cxNNFacRJg;
      string zTezfIcRpA;
      if(FkNYZcRDij == wJSSExygIS){EzCergqdTB = true;}
      else if(wJSSExygIS == FkNYZcRDij){uKXQyjAWaR = true;}
      if(kUxATyiXcU == jUZBhXJgbD){ZThhFnDziZ = true;}
      else if(jUZBhXJgbD == kUxATyiXcU){ckzeoYkOiu = true;}
      if(jnxakobNiq == KnQbWWMhTT){plkeptCAdU = true;}
      else if(KnQbWWMhTT == jnxakobNiq){bSbgMWbERy = true;}
      if(HCQVUSGEme == SQQforKahR){qPiIJcthVX = true;}
      else if(SQQforKahR == HCQVUSGEme){tndZOxgone = true;}
      if(bsHeOzlyTu == ZpGqSItPUF){iyyIHfkxsr = true;}
      else if(ZpGqSItPUF == bsHeOzlyTu){NKqgOdXNjT = true;}
      if(bieBKRnlmk == OqnyVHsqwh){FdhQJRNWox = true;}
      else if(OqnyVHsqwh == bieBKRnlmk){GiQCVbipEa = true;}
      if(BDUqchDbeB == kQNnASEtMo){eqAyJJkZYb = true;}
      else if(kQNnASEtMo == BDUqchDbeB){HwEbWnHYQq = true;}
      if(qdjxrqgSLk == NhzJdUhZIN){tUcLprnbXJ = true;}
      if(CctmPYXPKD == cxNNFacRJg){IFGlPNhRyq = true;}
      if(dTRCdYYPCf == zTezfIcRpA){PWsYsrxzyx = true;}
      while(NhzJdUhZIN == qdjxrqgSLk){ruaDhQbtSi = true;}
      while(cxNNFacRJg == cxNNFacRJg){yOUyqLXaEl = true;}
      while(zTezfIcRpA == zTezfIcRpA){NqkMXQGOJZ = true;}
      if(EzCergqdTB == true){EzCergqdTB = false;}
      if(ZThhFnDziZ == true){ZThhFnDziZ = false;}
      if(plkeptCAdU == true){plkeptCAdU = false;}
      if(qPiIJcthVX == true){qPiIJcthVX = false;}
      if(iyyIHfkxsr == true){iyyIHfkxsr = false;}
      if(FdhQJRNWox == true){FdhQJRNWox = false;}
      if(eqAyJJkZYb == true){eqAyJJkZYb = false;}
      if(tUcLprnbXJ == true){tUcLprnbXJ = false;}
      if(IFGlPNhRyq == true){IFGlPNhRyq = false;}
      if(PWsYsrxzyx == true){PWsYsrxzyx = false;}
      if(uKXQyjAWaR == true){uKXQyjAWaR = false;}
      if(ckzeoYkOiu == true){ckzeoYkOiu = false;}
      if(bSbgMWbERy == true){bSbgMWbERy = false;}
      if(tndZOxgone == true){tndZOxgone = false;}
      if(NKqgOdXNjT == true){NKqgOdXNjT = false;}
      if(GiQCVbipEa == true){GiQCVbipEa = false;}
      if(HwEbWnHYQq == true){HwEbWnHYQq = false;}
      if(ruaDhQbtSi == true){ruaDhQbtSi = false;}
      if(yOUyqLXaEl == true){yOUyqLXaEl = false;}
      if(NqkMXQGOJZ == true){NqkMXQGOJZ = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class SLKMKXRPWL
{ 
  void qmzAAdOpme()
  { 
      bool PQPjBhqMUN = false;
      bool OWbffeZKgn = false;
      bool UCSxdudpWq = false;
      bool ZdScTfICZJ = false;
      bool RXIKPOefya = false;
      bool xDAJUMyRGG = false;
      bool EApcnjDyMA = false;
      bool WXjXVxtHgP = false;
      bool QxrusWdJIH = false;
      bool gqwTERgeWf = false;
      bool KgTyEZScnX = false;
      bool SpjpoGItjQ = false;
      bool FtoETeaQSE = false;
      bool POkBFjctpT = false;
      bool EBUknpGGdy = false;
      bool ImuFaPqPdY = false;
      bool yBKiHDFijF = false;
      bool cOEPMEYDPc = false;
      bool YUmTucTfZo = false;
      bool rNPRUCqlck = false;
      string pErbJSZRPx;
      string YFKzwlscEr;
      string NFPKywGjBs;
      string MUslKcHCBS;
      string iEATtCXwNM;
      string MbDyZkohcM;
      string MpQVjELXnS;
      string eqblJIFwPu;
      string YJWogkQtMZ;
      string nZZnGrneio;
      string qzIthVARoR;
      string esRgnCTbnz;
      string mQLNeEQmeQ;
      string UZMaEYAbHL;
      string jzFttuHrAD;
      string YLpiCZntPc;
      string EMlXwFfqcP;
      string BqUcOnLQSi;
      string wYmbqIjcYe;
      string kGMdGXNgxo;
      if(pErbJSZRPx == qzIthVARoR){PQPjBhqMUN = true;}
      else if(qzIthVARoR == pErbJSZRPx){KgTyEZScnX = true;}
      if(YFKzwlscEr == esRgnCTbnz){OWbffeZKgn = true;}
      else if(esRgnCTbnz == YFKzwlscEr){SpjpoGItjQ = true;}
      if(NFPKywGjBs == mQLNeEQmeQ){UCSxdudpWq = true;}
      else if(mQLNeEQmeQ == NFPKywGjBs){FtoETeaQSE = true;}
      if(MUslKcHCBS == UZMaEYAbHL){ZdScTfICZJ = true;}
      else if(UZMaEYAbHL == MUslKcHCBS){POkBFjctpT = true;}
      if(iEATtCXwNM == jzFttuHrAD){RXIKPOefya = true;}
      else if(jzFttuHrAD == iEATtCXwNM){EBUknpGGdy = true;}
      if(MbDyZkohcM == YLpiCZntPc){xDAJUMyRGG = true;}
      else if(YLpiCZntPc == MbDyZkohcM){ImuFaPqPdY = true;}
      if(MpQVjELXnS == EMlXwFfqcP){EApcnjDyMA = true;}
      else if(EMlXwFfqcP == MpQVjELXnS){yBKiHDFijF = true;}
      if(eqblJIFwPu == BqUcOnLQSi){WXjXVxtHgP = true;}
      if(YJWogkQtMZ == wYmbqIjcYe){QxrusWdJIH = true;}
      if(nZZnGrneio == kGMdGXNgxo){gqwTERgeWf = true;}
      while(BqUcOnLQSi == eqblJIFwPu){cOEPMEYDPc = true;}
      while(wYmbqIjcYe == wYmbqIjcYe){YUmTucTfZo = true;}
      while(kGMdGXNgxo == kGMdGXNgxo){rNPRUCqlck = true;}
      if(PQPjBhqMUN == true){PQPjBhqMUN = false;}
      if(OWbffeZKgn == true){OWbffeZKgn = false;}
      if(UCSxdudpWq == true){UCSxdudpWq = false;}
      if(ZdScTfICZJ == true){ZdScTfICZJ = false;}
      if(RXIKPOefya == true){RXIKPOefya = false;}
      if(xDAJUMyRGG == true){xDAJUMyRGG = false;}
      if(EApcnjDyMA == true){EApcnjDyMA = false;}
      if(WXjXVxtHgP == true){WXjXVxtHgP = false;}
      if(QxrusWdJIH == true){QxrusWdJIH = false;}
      if(gqwTERgeWf == true){gqwTERgeWf = false;}
      if(KgTyEZScnX == true){KgTyEZScnX = false;}
      if(SpjpoGItjQ == true){SpjpoGItjQ = false;}
      if(FtoETeaQSE == true){FtoETeaQSE = false;}
      if(POkBFjctpT == true){POkBFjctpT = false;}
      if(EBUknpGGdy == true){EBUknpGGdy = false;}
      if(ImuFaPqPdY == true){ImuFaPqPdY = false;}
      if(yBKiHDFijF == true){yBKiHDFijF = false;}
      if(cOEPMEYDPc == true){cOEPMEYDPc = false;}
      if(YUmTucTfZo == true){YUmTucTfZo = false;}
      if(rNPRUCqlck == true){rNPRUCqlck = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class DESTUDUYXL
{ 
  void yoQiBITJzC()
  { 
      bool GgioHuSkHj = false;
      bool jGXKJcQJWF = false;
      bool YRonHyRTra = false;
      bool PLzHTCuBnJ = false;
      bool nYXbXzVtAd = false;
      bool RWGLonruhJ = false;
      bool cyrgUYGPqG = false;
      bool hOUMRAsNQI = false;
      bool bXTNIrEmRe = false;
      bool KzTefofqHz = false;
      bool rGDswDBtto = false;
      bool tddZgFedYb = false;
      bool TSxLuhtpfc = false;
      bool TCFRQVTZRE = false;
      bool pKscjfVtya = false;
      bool KCRfeYIryN = false;
      bool ILOQUrYMIK = false;
      bool kEMTkIZTaO = false;
      bool MAqERRkYlr = false;
      bool MbbDudwcIr = false;
      string TgiEHoNbVZ;
      string mMqshVPZoC;
      string OuXlXPIubX;
      string gRLxzGZslM;
      string yezJgUPHpJ;
      string oodFBYIxgr;
      string gRzyrUAstb;
      string wWmcEiuNEC;
      string AAERhrmGwZ;
      string xcLtffeBRM;
      string TVNONSBBAR;
      string ctseqfNhPA;
      string gtxTdTKswY;
      string EtwqhdmpDP;
      string pkFexDifCA;
      string SxkQeZYskt;
      string HHFbMhxBxM;
      string rWdAJuoRVZ;
      string jdqwFGJfLI;
      string FsFJHifcRO;
      if(TgiEHoNbVZ == TVNONSBBAR){GgioHuSkHj = true;}
      else if(TVNONSBBAR == TgiEHoNbVZ){rGDswDBtto = true;}
      if(mMqshVPZoC == ctseqfNhPA){jGXKJcQJWF = true;}
      else if(ctseqfNhPA == mMqshVPZoC){tddZgFedYb = true;}
      if(OuXlXPIubX == gtxTdTKswY){YRonHyRTra = true;}
      else if(gtxTdTKswY == OuXlXPIubX){TSxLuhtpfc = true;}
      if(gRLxzGZslM == EtwqhdmpDP){PLzHTCuBnJ = true;}
      else if(EtwqhdmpDP == gRLxzGZslM){TCFRQVTZRE = true;}
      if(yezJgUPHpJ == pkFexDifCA){nYXbXzVtAd = true;}
      else if(pkFexDifCA == yezJgUPHpJ){pKscjfVtya = true;}
      if(oodFBYIxgr == SxkQeZYskt){RWGLonruhJ = true;}
      else if(SxkQeZYskt == oodFBYIxgr){KCRfeYIryN = true;}
      if(gRzyrUAstb == HHFbMhxBxM){cyrgUYGPqG = true;}
      else if(HHFbMhxBxM == gRzyrUAstb){ILOQUrYMIK = true;}
      if(wWmcEiuNEC == rWdAJuoRVZ){hOUMRAsNQI = true;}
      if(AAERhrmGwZ == jdqwFGJfLI){bXTNIrEmRe = true;}
      if(xcLtffeBRM == FsFJHifcRO){KzTefofqHz = true;}
      while(rWdAJuoRVZ == wWmcEiuNEC){kEMTkIZTaO = true;}
      while(jdqwFGJfLI == jdqwFGJfLI){MAqERRkYlr = true;}
      while(FsFJHifcRO == FsFJHifcRO){MbbDudwcIr = true;}
      if(GgioHuSkHj == true){GgioHuSkHj = false;}
      if(jGXKJcQJWF == true){jGXKJcQJWF = false;}
      if(YRonHyRTra == true){YRonHyRTra = false;}
      if(PLzHTCuBnJ == true){PLzHTCuBnJ = false;}
      if(nYXbXzVtAd == true){nYXbXzVtAd = false;}
      if(RWGLonruhJ == true){RWGLonruhJ = false;}
      if(cyrgUYGPqG == true){cyrgUYGPqG = false;}
      if(hOUMRAsNQI == true){hOUMRAsNQI = false;}
      if(bXTNIrEmRe == true){bXTNIrEmRe = false;}
      if(KzTefofqHz == true){KzTefofqHz = false;}
      if(rGDswDBtto == true){rGDswDBtto = false;}
      if(tddZgFedYb == true){tddZgFedYb = false;}
      if(TSxLuhtpfc == true){TSxLuhtpfc = false;}
      if(TCFRQVTZRE == true){TCFRQVTZRE = false;}
      if(pKscjfVtya == true){pKscjfVtya = false;}
      if(KCRfeYIryN == true){KCRfeYIryN = false;}
      if(ILOQUrYMIK == true){ILOQUrYMIK = false;}
      if(kEMTkIZTaO == true){kEMTkIZTaO = false;}
      if(MAqERRkYlr == true){MAqERRkYlr = false;}
      if(MbbDudwcIr == true){MbbDudwcIr = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class BHJQGWTTNB
{ 
  void fMSqxgoFlk()
  { 
      bool oUuglpPCHB = false;
      bool mTInnTIGAx = false;
      bool OdYDFHlsQd = false;
      bool BisSQiUJnb = false;
      bool rghpYnujGU = false;
      bool ljIRlKwqad = false;
      bool EVlczEZpWE = false;
      bool yySXEgwheR = false;
      bool LCmuqRZbfF = false;
      bool mdiJXWuFpT = false;
      bool OFMBVnQjNE = false;
      bool ONMJRBhpkh = false;
      bool dyJRRUPJAh = false;
      bool lqqKDGplYD = false;
      bool ApObpYQYqW = false;
      bool nETIpPutjB = false;
      bool XHifSXVBGK = false;
      bool KwQggnjhbr = false;
      bool EpRdsgWiUm = false;
      bool LwCXfsGhJR = false;
      string xhzZFmzdKH;
      string ugFIVUOYbc;
      string NeWzZNUxit;
      string FBypEIoSoK;
      string fXCBDhUwWO;
      string HWXiFRKzzr;
      string RCuQCshODN;
      string fujRwocUwq;
      string rYaUlhdOkm;
      string yoSwrcclzJ;
      string zGrIhMmGlQ;
      string ooDHAsbZdT;
      string PTcQOpbmYT;
      string LqVlrkfRlY;
      string tXbUyIlLwz;
      string BDHftfcbtr;
      string jzgSFxTQPO;
      string MKnFYrrISF;
      string EQqZSHiorM;
      string IEXtntpIOA;
      if(xhzZFmzdKH == zGrIhMmGlQ){oUuglpPCHB = true;}
      else if(zGrIhMmGlQ == xhzZFmzdKH){OFMBVnQjNE = true;}
      if(ugFIVUOYbc == ooDHAsbZdT){mTInnTIGAx = true;}
      else if(ooDHAsbZdT == ugFIVUOYbc){ONMJRBhpkh = true;}
      if(NeWzZNUxit == PTcQOpbmYT){OdYDFHlsQd = true;}
      else if(PTcQOpbmYT == NeWzZNUxit){dyJRRUPJAh = true;}
      if(FBypEIoSoK == LqVlrkfRlY){BisSQiUJnb = true;}
      else if(LqVlrkfRlY == FBypEIoSoK){lqqKDGplYD = true;}
      if(fXCBDhUwWO == tXbUyIlLwz){rghpYnujGU = true;}
      else if(tXbUyIlLwz == fXCBDhUwWO){ApObpYQYqW = true;}
      if(HWXiFRKzzr == BDHftfcbtr){ljIRlKwqad = true;}
      else if(BDHftfcbtr == HWXiFRKzzr){nETIpPutjB = true;}
      if(RCuQCshODN == jzgSFxTQPO){EVlczEZpWE = true;}
      else if(jzgSFxTQPO == RCuQCshODN){XHifSXVBGK = true;}
      if(fujRwocUwq == MKnFYrrISF){yySXEgwheR = true;}
      if(rYaUlhdOkm == EQqZSHiorM){LCmuqRZbfF = true;}
      if(yoSwrcclzJ == IEXtntpIOA){mdiJXWuFpT = true;}
      while(MKnFYrrISF == fujRwocUwq){KwQggnjhbr = true;}
      while(EQqZSHiorM == EQqZSHiorM){EpRdsgWiUm = true;}
      while(IEXtntpIOA == IEXtntpIOA){LwCXfsGhJR = true;}
      if(oUuglpPCHB == true){oUuglpPCHB = false;}
      if(mTInnTIGAx == true){mTInnTIGAx = false;}
      if(OdYDFHlsQd == true){OdYDFHlsQd = false;}
      if(BisSQiUJnb == true){BisSQiUJnb = false;}
      if(rghpYnujGU == true){rghpYnujGU = false;}
      if(ljIRlKwqad == true){ljIRlKwqad = false;}
      if(EVlczEZpWE == true){EVlczEZpWE = false;}
      if(yySXEgwheR == true){yySXEgwheR = false;}
      if(LCmuqRZbfF == true){LCmuqRZbfF = false;}
      if(mdiJXWuFpT == true){mdiJXWuFpT = false;}
      if(OFMBVnQjNE == true){OFMBVnQjNE = false;}
      if(ONMJRBhpkh == true){ONMJRBhpkh = false;}
      if(dyJRRUPJAh == true){dyJRRUPJAh = false;}
      if(lqqKDGplYD == true){lqqKDGplYD = false;}
      if(ApObpYQYqW == true){ApObpYQYqW = false;}
      if(nETIpPutjB == true){nETIpPutjB = false;}
      if(XHifSXVBGK == true){XHifSXVBGK = false;}
      if(KwQggnjhbr == true){KwQggnjhbr = false;}
      if(EpRdsgWiUm == true){EpRdsgWiUm = false;}
      if(LwCXfsGhJR == true){LwCXfsGhJR = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class GHLDUUULJH
{ 
  void lzmtYyHbOL()
  { 
      bool YxlTVCrPAc = false;
      bool DOYPqLBEDa = false;
      bool WAKFwGYJMU = false;
      bool WeLqIfjyBV = false;
      bool jLfLqmaGhH = false;
      bool ujHqRXlfXO = false;
      bool diCfGXDgGK = false;
      bool aDCgpLTzNI = false;
      bool fSaFZlXTZk = false;
      bool sEamrBIAET = false;
      bool jtzWfqhZAG = false;
      bool EmROiLHxFU = false;
      bool AiHVRWcOoo = false;
      bool DTttYlSEYh = false;
      bool DxTTfGlLDf = false;
      bool sLtjSAmcFJ = false;
      bool OSkLDjsXox = false;
      bool rDXXQDOmoL = false;
      bool kQKIwqYJbX = false;
      bool yozPSjMIQu = false;
      string SgtzkXmuBW;
      string aiWzpmSkTX;
      string dBBaxGfQdZ;
      string THVtYQpeof;
      string kUDCikUAKp;
      string fzPjQReTCe;
      string qWQaCSNcaY;
      string wmunlIxzrL;
      string leFntUqkdG;
      string lWcKnOEbAP;
      string WqZktrEayH;
      string TfaprLQcgh;
      string bczTmYJjzW;
      string EVzbotFUtB;
      string QQlVmFumRb;
      string yauRntrFxU;
      string hTbaDygyAy;
      string GuifRLpcgh;
      string cWRXXcagnu;
      string CzWYSwnKRo;
      if(SgtzkXmuBW == WqZktrEayH){YxlTVCrPAc = true;}
      else if(WqZktrEayH == SgtzkXmuBW){jtzWfqhZAG = true;}
      if(aiWzpmSkTX == TfaprLQcgh){DOYPqLBEDa = true;}
      else if(TfaprLQcgh == aiWzpmSkTX){EmROiLHxFU = true;}
      if(dBBaxGfQdZ == bczTmYJjzW){WAKFwGYJMU = true;}
      else if(bczTmYJjzW == dBBaxGfQdZ){AiHVRWcOoo = true;}
      if(THVtYQpeof == EVzbotFUtB){WeLqIfjyBV = true;}
      else if(EVzbotFUtB == THVtYQpeof){DTttYlSEYh = true;}
      if(kUDCikUAKp == QQlVmFumRb){jLfLqmaGhH = true;}
      else if(QQlVmFumRb == kUDCikUAKp){DxTTfGlLDf = true;}
      if(fzPjQReTCe == yauRntrFxU){ujHqRXlfXO = true;}
      else if(yauRntrFxU == fzPjQReTCe){sLtjSAmcFJ = true;}
      if(qWQaCSNcaY == hTbaDygyAy){diCfGXDgGK = true;}
      else if(hTbaDygyAy == qWQaCSNcaY){OSkLDjsXox = true;}
      if(wmunlIxzrL == GuifRLpcgh){aDCgpLTzNI = true;}
      if(leFntUqkdG == cWRXXcagnu){fSaFZlXTZk = true;}
      if(lWcKnOEbAP == CzWYSwnKRo){sEamrBIAET = true;}
      while(GuifRLpcgh == wmunlIxzrL){rDXXQDOmoL = true;}
      while(cWRXXcagnu == cWRXXcagnu){kQKIwqYJbX = true;}
      while(CzWYSwnKRo == CzWYSwnKRo){yozPSjMIQu = true;}
      if(YxlTVCrPAc == true){YxlTVCrPAc = false;}
      if(DOYPqLBEDa == true){DOYPqLBEDa = false;}
      if(WAKFwGYJMU == true){WAKFwGYJMU = false;}
      if(WeLqIfjyBV == true){WeLqIfjyBV = false;}
      if(jLfLqmaGhH == true){jLfLqmaGhH = false;}
      if(ujHqRXlfXO == true){ujHqRXlfXO = false;}
      if(diCfGXDgGK == true){diCfGXDgGK = false;}
      if(aDCgpLTzNI == true){aDCgpLTzNI = false;}
      if(fSaFZlXTZk == true){fSaFZlXTZk = false;}
      if(sEamrBIAET == true){sEamrBIAET = false;}
      if(jtzWfqhZAG == true){jtzWfqhZAG = false;}
      if(EmROiLHxFU == true){EmROiLHxFU = false;}
      if(AiHVRWcOoo == true){AiHVRWcOoo = false;}
      if(DTttYlSEYh == true){DTttYlSEYh = false;}
      if(DxTTfGlLDf == true){DxTTfGlLDf = false;}
      if(sLtjSAmcFJ == true){sLtjSAmcFJ = false;}
      if(OSkLDjsXox == true){OSkLDjsXox = false;}
      if(rDXXQDOmoL == true){rDXXQDOmoL = false;}
      if(kQKIwqYJbX == true){kQKIwqYJbX = false;}
      if(yozPSjMIQu == true){yozPSjMIQu = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class UAJKBALXHR
{ 
  void qnOegBzIFX()
  { 
      bool VqiLGhxJrN = false;
      bool NcTFruEWcQ = false;
      bool fZLMwtTdUD = false;
      bool VajOMHgdny = false;
      bool ZioBwMfBWE = false;
      bool ROpWDueWPL = false;
      bool NTonrlsFrj = false;
      bool OaiepwkKPi = false;
      bool OSGPlHkNKR = false;
      bool bJOcjGtAJK = false;
      bool TaImoqfKfH = false;
      bool JUHfxuMYBj = false;
      bool BetaHFLFuj = false;
      bool CjBFPmJTau = false;
      bool aZgDHHChfn = false;
      bool sUzYInfhej = false;
      bool eZOwEZTBPJ = false;
      bool ksyFJaxqTz = false;
      bool CcZGpgkbwa = false;
      bool GbnpQBLkyh = false;
      string xXZZtgHsZu;
      string YoOsrUJSfM;
      string OTJnhWbqby;
      string DrolhxToAU;
      string tIlBQgdjuK;
      string DCZOIdNlrX;
      string FQQbrfzcLu;
      string ATSLRFhHWB;
      string rquQuASadE;
      string ihxcOdqKJj;
      string hAYAJijNxC;
      string uFOpeNVAfq;
      string NYzGLSWown;
      string OWymTrSuGL;
      string QEcaIcSGyB;
      string IqdRWIBRnq;
      string LuRJnYGbWl;
      string uZsUZIuXyi;
      string zQptfXsgPK;
      string pAGPAVlTmj;
      if(xXZZtgHsZu == hAYAJijNxC){VqiLGhxJrN = true;}
      else if(hAYAJijNxC == xXZZtgHsZu){TaImoqfKfH = true;}
      if(YoOsrUJSfM == uFOpeNVAfq){NcTFruEWcQ = true;}
      else if(uFOpeNVAfq == YoOsrUJSfM){JUHfxuMYBj = true;}
      if(OTJnhWbqby == NYzGLSWown){fZLMwtTdUD = true;}
      else if(NYzGLSWown == OTJnhWbqby){BetaHFLFuj = true;}
      if(DrolhxToAU == OWymTrSuGL){VajOMHgdny = true;}
      else if(OWymTrSuGL == DrolhxToAU){CjBFPmJTau = true;}
      if(tIlBQgdjuK == QEcaIcSGyB){ZioBwMfBWE = true;}
      else if(QEcaIcSGyB == tIlBQgdjuK){aZgDHHChfn = true;}
      if(DCZOIdNlrX == IqdRWIBRnq){ROpWDueWPL = true;}
      else if(IqdRWIBRnq == DCZOIdNlrX){sUzYInfhej = true;}
      if(FQQbrfzcLu == LuRJnYGbWl){NTonrlsFrj = true;}
      else if(LuRJnYGbWl == FQQbrfzcLu){eZOwEZTBPJ = true;}
      if(ATSLRFhHWB == uZsUZIuXyi){OaiepwkKPi = true;}
      if(rquQuASadE == zQptfXsgPK){OSGPlHkNKR = true;}
      if(ihxcOdqKJj == pAGPAVlTmj){bJOcjGtAJK = true;}
      while(uZsUZIuXyi == ATSLRFhHWB){ksyFJaxqTz = true;}
      while(zQptfXsgPK == zQptfXsgPK){CcZGpgkbwa = true;}
      while(pAGPAVlTmj == pAGPAVlTmj){GbnpQBLkyh = true;}
      if(VqiLGhxJrN == true){VqiLGhxJrN = false;}
      if(NcTFruEWcQ == true){NcTFruEWcQ = false;}
      if(fZLMwtTdUD == true){fZLMwtTdUD = false;}
      if(VajOMHgdny == true){VajOMHgdny = false;}
      if(ZioBwMfBWE == true){ZioBwMfBWE = false;}
      if(ROpWDueWPL == true){ROpWDueWPL = false;}
      if(NTonrlsFrj == true){NTonrlsFrj = false;}
      if(OaiepwkKPi == true){OaiepwkKPi = false;}
      if(OSGPlHkNKR == true){OSGPlHkNKR = false;}
      if(bJOcjGtAJK == true){bJOcjGtAJK = false;}
      if(TaImoqfKfH == true){TaImoqfKfH = false;}
      if(JUHfxuMYBj == true){JUHfxuMYBj = false;}
      if(BetaHFLFuj == true){BetaHFLFuj = false;}
      if(CjBFPmJTau == true){CjBFPmJTau = false;}
      if(aZgDHHChfn == true){aZgDHHChfn = false;}
      if(sUzYInfhej == true){sUzYInfhej = false;}
      if(eZOwEZTBPJ == true){eZOwEZTBPJ = false;}
      if(ksyFJaxqTz == true){ksyFJaxqTz = false;}
      if(CcZGpgkbwa == true){CcZGpgkbwa = false;}
      if(GbnpQBLkyh == true){GbnpQBLkyh = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class QRXJTDDLMJ
{ 
  void xHPAOILeRj()
  { 
      bool srKCIJpSnt = false;
      bool utOOjMarey = false;
      bool QZeHNIdulD = false;
      bool JDsjppcNaV = false;
      bool otDLajoNsJ = false;
      bool mSAGRSNCoA = false;
      bool eugjkqAdXs = false;
      bool iNRJJWVSgc = false;
      bool SQBcQpDmRX = false;
      bool caYZptMSai = false;
      bool iKozZYBpxu = false;
      bool wtULgOtETu = false;
      bool nNMAQIoqTP = false;
      bool JDrytHaBCq = false;
      bool oMpVahFMsa = false;
      bool zIzeuVyohR = false;
      bool jJWhksBWRZ = false;
      bool nrCbGaXpYh = false;
      bool CbyrPBDNDY = false;
      bool JkSjGeoIjh = false;
      string uaxGaWdNDR;
      string tIEGlsutlj;
      string RgksYNZfNX;
      string kToOtQqzWP;
      string sllKyVQZNi;
      string XaBuFNpDgM;
      string xxAegaSpMU;
      string BuWVpfuatD;
      string xzRdzJStIf;
      string amSKSukGcX;
      string CZNrgcEeEY;
      string SPIdPxfVeW;
      string IYhftNcLDt;
      string unxWAWkZxW;
      string FmoiMKenuU;
      string PObFPdrgxT;
      string AraJddRldr;
      string MFYIRUiySi;
      string inQiefMrGV;
      string dDbdVNLeEi;
      if(uaxGaWdNDR == CZNrgcEeEY){srKCIJpSnt = true;}
      else if(CZNrgcEeEY == uaxGaWdNDR){iKozZYBpxu = true;}
      if(tIEGlsutlj == SPIdPxfVeW){utOOjMarey = true;}
      else if(SPIdPxfVeW == tIEGlsutlj){wtULgOtETu = true;}
      if(RgksYNZfNX == IYhftNcLDt){QZeHNIdulD = true;}
      else if(IYhftNcLDt == RgksYNZfNX){nNMAQIoqTP = true;}
      if(kToOtQqzWP == unxWAWkZxW){JDsjppcNaV = true;}
      else if(unxWAWkZxW == kToOtQqzWP){JDrytHaBCq = true;}
      if(sllKyVQZNi == FmoiMKenuU){otDLajoNsJ = true;}
      else if(FmoiMKenuU == sllKyVQZNi){oMpVahFMsa = true;}
      if(XaBuFNpDgM == PObFPdrgxT){mSAGRSNCoA = true;}
      else if(PObFPdrgxT == XaBuFNpDgM){zIzeuVyohR = true;}
      if(xxAegaSpMU == AraJddRldr){eugjkqAdXs = true;}
      else if(AraJddRldr == xxAegaSpMU){jJWhksBWRZ = true;}
      if(BuWVpfuatD == MFYIRUiySi){iNRJJWVSgc = true;}
      if(xzRdzJStIf == inQiefMrGV){SQBcQpDmRX = true;}
      if(amSKSukGcX == dDbdVNLeEi){caYZptMSai = true;}
      while(MFYIRUiySi == BuWVpfuatD){nrCbGaXpYh = true;}
      while(inQiefMrGV == inQiefMrGV){CbyrPBDNDY = true;}
      while(dDbdVNLeEi == dDbdVNLeEi){JkSjGeoIjh = true;}
      if(srKCIJpSnt == true){srKCIJpSnt = false;}
      if(utOOjMarey == true){utOOjMarey = false;}
      if(QZeHNIdulD == true){QZeHNIdulD = false;}
      if(JDsjppcNaV == true){JDsjppcNaV = false;}
      if(otDLajoNsJ == true){otDLajoNsJ = false;}
      if(mSAGRSNCoA == true){mSAGRSNCoA = false;}
      if(eugjkqAdXs == true){eugjkqAdXs = false;}
      if(iNRJJWVSgc == true){iNRJJWVSgc = false;}
      if(SQBcQpDmRX == true){SQBcQpDmRX = false;}
      if(caYZptMSai == true){caYZptMSai = false;}
      if(iKozZYBpxu == true){iKozZYBpxu = false;}
      if(wtULgOtETu == true){wtULgOtETu = false;}
      if(nNMAQIoqTP == true){nNMAQIoqTP = false;}
      if(JDrytHaBCq == true){JDrytHaBCq = false;}
      if(oMpVahFMsa == true){oMpVahFMsa = false;}
      if(zIzeuVyohR == true){zIzeuVyohR = false;}
      if(jJWhksBWRZ == true){jJWhksBWRZ = false;}
      if(nrCbGaXpYh == true){nrCbGaXpYh = false;}
      if(CbyrPBDNDY == true){CbyrPBDNDY = false;}
      if(JkSjGeoIjh == true){JkSjGeoIjh = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class JVJMIDGJLW
{ 
  void VDmWRnxXEJ()
  { 
      bool ZDUIjuycNy = false;
      bool GbczgaVFoS = false;
      bool LrTeDiJhOz = false;
      bool wOVFXXjSVf = false;
      bool DieOBnRPOP = false;
      bool sbIgxgjoEA = false;
      bool kPONCqGXbI = false;
      bool pCjJOcMEdP = false;
      bool RsSyGTFoIp = false;
      bool ntOUtmUQMJ = false;
      bool gtnFZprzRU = false;
      bool TfLnirxPGh = false;
      bool kRPkUunPOb = false;
      bool HwqThWFMYQ = false;
      bool bGWmVHiZkC = false;
      bool pEJeXPeCje = false;
      bool CbjpMXorGL = false;
      bool mjqpGdtbPN = false;
      bool MNdLkClMuR = false;
      bool rCbtNzWgax = false;
      string anKHdHldlQ;
      string JwNUMspKbE;
      string NEMtWtNmSt;
      string dJqGWpXGuZ;
      string EXBoCAslYq;
      string dQhNoWbPjj;
      string szLrmAFGxV;
      string UjPBApDWrV;
      string AbOaQMacRA;
      string OIVLfEMJCB;
      string uloDVtBgNy;
      string SEXNiRjjaZ;
      string YbowGMNEUw;
      string dtUpaOmLFW;
      string LtPThJkIcO;
      string UbhbcSxrwJ;
      string fxLQTYjgmU;
      string dYdEOeMUOx;
      string bFaFbBMrNH;
      string QuOwpOhyzJ;
      if(anKHdHldlQ == uloDVtBgNy){ZDUIjuycNy = true;}
      else if(uloDVtBgNy == anKHdHldlQ){gtnFZprzRU = true;}
      if(JwNUMspKbE == SEXNiRjjaZ){GbczgaVFoS = true;}
      else if(SEXNiRjjaZ == JwNUMspKbE){TfLnirxPGh = true;}
      if(NEMtWtNmSt == YbowGMNEUw){LrTeDiJhOz = true;}
      else if(YbowGMNEUw == NEMtWtNmSt){kRPkUunPOb = true;}
      if(dJqGWpXGuZ == dtUpaOmLFW){wOVFXXjSVf = true;}
      else if(dtUpaOmLFW == dJqGWpXGuZ){HwqThWFMYQ = true;}
      if(EXBoCAslYq == LtPThJkIcO){DieOBnRPOP = true;}
      else if(LtPThJkIcO == EXBoCAslYq){bGWmVHiZkC = true;}
      if(dQhNoWbPjj == UbhbcSxrwJ){sbIgxgjoEA = true;}
      else if(UbhbcSxrwJ == dQhNoWbPjj){pEJeXPeCje = true;}
      if(szLrmAFGxV == fxLQTYjgmU){kPONCqGXbI = true;}
      else if(fxLQTYjgmU == szLrmAFGxV){CbjpMXorGL = true;}
      if(UjPBApDWrV == dYdEOeMUOx){pCjJOcMEdP = true;}
      if(AbOaQMacRA == bFaFbBMrNH){RsSyGTFoIp = true;}
      if(OIVLfEMJCB == QuOwpOhyzJ){ntOUtmUQMJ = true;}
      while(dYdEOeMUOx == UjPBApDWrV){mjqpGdtbPN = true;}
      while(bFaFbBMrNH == bFaFbBMrNH){MNdLkClMuR = true;}
      while(QuOwpOhyzJ == QuOwpOhyzJ){rCbtNzWgax = true;}
      if(ZDUIjuycNy == true){ZDUIjuycNy = false;}
      if(GbczgaVFoS == true){GbczgaVFoS = false;}
      if(LrTeDiJhOz == true){LrTeDiJhOz = false;}
      if(wOVFXXjSVf == true){wOVFXXjSVf = false;}
      if(DieOBnRPOP == true){DieOBnRPOP = false;}
      if(sbIgxgjoEA == true){sbIgxgjoEA = false;}
      if(kPONCqGXbI == true){kPONCqGXbI = false;}
      if(pCjJOcMEdP == true){pCjJOcMEdP = false;}
      if(RsSyGTFoIp == true){RsSyGTFoIp = false;}
      if(ntOUtmUQMJ == true){ntOUtmUQMJ = false;}
      if(gtnFZprzRU == true){gtnFZprzRU = false;}
      if(TfLnirxPGh == true){TfLnirxPGh = false;}
      if(kRPkUunPOb == true){kRPkUunPOb = false;}
      if(HwqThWFMYQ == true){HwqThWFMYQ = false;}
      if(bGWmVHiZkC == true){bGWmVHiZkC = false;}
      if(pEJeXPeCje == true){pEJeXPeCje = false;}
      if(CbjpMXorGL == true){CbjpMXorGL = false;}
      if(mjqpGdtbPN == true){mjqpGdtbPN = false;}
      if(MNdLkClMuR == true){MNdLkClMuR = false;}
      if(rCbtNzWgax == true){rCbtNzWgax = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class UTHCZPJHAO
{ 
  void OKduwfMjbz()
  { 
      bool FRmicbzVdb = false;
      bool acsCtGIeLn = false;
      bool ZdoZgtNCxC = false;
      bool QinUUHisTc = false;
      bool PyCDHosoKs = false;
      bool GTizZacMBh = false;
      bool NwXbLroYgl = false;
      bool XOLiYbbkSq = false;
      bool BXrDuwznut = false;
      bool dVrkOSZZrO = false;
      bool AUHXVrIzax = false;
      bool yqsJgpETgO = false;
      bool rAcmHBWZTG = false;
      bool CBsEqgQUhC = false;
      bool nzNxumchEY = false;
      bool OFscVAqUPU = false;
      bool VhfTuxxoSA = false;
      bool ZjldarlfqU = false;
      bool XoVurwHQhp = false;
      bool ouEMgFTtBy = false;
      string wszRjTKPcj;
      string zPYsSckGGN;
      string XcSxjJFxfd;
      string SuKpybiZjG;
      string UTsdnAJZJa;
      string GUiwbTZCgZ;
      string NNiyQDEiuq;
      string tLWzsEjnIj;
      string AfmEXyLOOe;
      string BgsJrHjuNj;
      string uaeSgtyiCW;
      string iksxZhZdaR;
      string rpTPpNRMHl;
      string TnaXnZBUXc;
      string AbLquPmwjK;
      string gFTurFGOcT;
      string ckbQCtKUIA;
      string gFGyRPdcUZ;
      string ZVcxEOUffh;
      string SlqEAPzunA;
      if(wszRjTKPcj == uaeSgtyiCW){FRmicbzVdb = true;}
      else if(uaeSgtyiCW == wszRjTKPcj){AUHXVrIzax = true;}
      if(zPYsSckGGN == iksxZhZdaR){acsCtGIeLn = true;}
      else if(iksxZhZdaR == zPYsSckGGN){yqsJgpETgO = true;}
      if(XcSxjJFxfd == rpTPpNRMHl){ZdoZgtNCxC = true;}
      else if(rpTPpNRMHl == XcSxjJFxfd){rAcmHBWZTG = true;}
      if(SuKpybiZjG == TnaXnZBUXc){QinUUHisTc = true;}
      else if(TnaXnZBUXc == SuKpybiZjG){CBsEqgQUhC = true;}
      if(UTsdnAJZJa == AbLquPmwjK){PyCDHosoKs = true;}
      else if(AbLquPmwjK == UTsdnAJZJa){nzNxumchEY = true;}
      if(GUiwbTZCgZ == gFTurFGOcT){GTizZacMBh = true;}
      else if(gFTurFGOcT == GUiwbTZCgZ){OFscVAqUPU = true;}
      if(NNiyQDEiuq == ckbQCtKUIA){NwXbLroYgl = true;}
      else if(ckbQCtKUIA == NNiyQDEiuq){VhfTuxxoSA = true;}
      if(tLWzsEjnIj == gFGyRPdcUZ){XOLiYbbkSq = true;}
      if(AfmEXyLOOe == ZVcxEOUffh){BXrDuwznut = true;}
      if(BgsJrHjuNj == SlqEAPzunA){dVrkOSZZrO = true;}
      while(gFGyRPdcUZ == tLWzsEjnIj){ZjldarlfqU = true;}
      while(ZVcxEOUffh == ZVcxEOUffh){XoVurwHQhp = true;}
      while(SlqEAPzunA == SlqEAPzunA){ouEMgFTtBy = true;}
      if(FRmicbzVdb == true){FRmicbzVdb = false;}
      if(acsCtGIeLn == true){acsCtGIeLn = false;}
      if(ZdoZgtNCxC == true){ZdoZgtNCxC = false;}
      if(QinUUHisTc == true){QinUUHisTc = false;}
      if(PyCDHosoKs == true){PyCDHosoKs = false;}
      if(GTizZacMBh == true){GTizZacMBh = false;}
      if(NwXbLroYgl == true){NwXbLroYgl = false;}
      if(XOLiYbbkSq == true){XOLiYbbkSq = false;}
      if(BXrDuwznut == true){BXrDuwznut = false;}
      if(dVrkOSZZrO == true){dVrkOSZZrO = false;}
      if(AUHXVrIzax == true){AUHXVrIzax = false;}
      if(yqsJgpETgO == true){yqsJgpETgO = false;}
      if(rAcmHBWZTG == true){rAcmHBWZTG = false;}
      if(CBsEqgQUhC == true){CBsEqgQUhC = false;}
      if(nzNxumchEY == true){nzNxumchEY = false;}
      if(OFscVAqUPU == true){OFscVAqUPU = false;}
      if(VhfTuxxoSA == true){VhfTuxxoSA = false;}
      if(ZjldarlfqU == true){ZjldarlfqU = false;}
      if(XoVurwHQhp == true){XoVurwHQhp = false;}
      if(ouEMgFTtBy == true){ouEMgFTtBy = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class ZQBQNDEDJQ
{ 
  void JnDmPqMsjI()
  { 
      bool PwPrAqwNBm = false;
      bool giKefmaQkD = false;
      bool NOzXqaYrps = false;
      bool SrxuQUYOlM = false;
      bool bbwMGRffMi = false;
      bool OrBQSBwqBZ = false;
      bool RDXIUolONL = false;
      bool OMdXakRlQY = false;
      bool tsfGdapfcP = false;
      bool XhNMuXEnrR = false;
      bool fQRAUCNcog = false;
      bool iJZbeXXQds = false;
      bool yGlxmfyQcC = false;
      bool fdtzscbela = false;
      bool NMpugNHkhW = false;
      bool AnJySYeTMn = false;
      bool EwAmAFPaiB = false;
      bool wreCfkPqQZ = false;
      bool YMiGCrTufT = false;
      bool yHRxWQMDta = false;
      string RxYhhGzTzI;
      string AkUogchUrw;
      string EuZkxVlzos;
      string BpfcZxAatd;
      string hnryPaFMGm;
      string ABVhyWXmjM;
      string TAdFGJFqOj;
      string bGaONPDaVW;
      string QZsCszUxdD;
      string ZNphKhJmrF;
      string UNxVLsaHUh;
      string TwQNwsGbMH;
      string oHMLKNQsDe;
      string GPiQBCbWpz;
      string XMcwjcwbkQ;
      string ahZkPMAlLx;
      string chDobDMAMs;
      string QjkMibeQbg;
      string QoHmEYpyAn;
      string BpKsWpJmTf;
      if(RxYhhGzTzI == UNxVLsaHUh){PwPrAqwNBm = true;}
      else if(UNxVLsaHUh == RxYhhGzTzI){fQRAUCNcog = true;}
      if(AkUogchUrw == TwQNwsGbMH){giKefmaQkD = true;}
      else if(TwQNwsGbMH == AkUogchUrw){iJZbeXXQds = true;}
      if(EuZkxVlzos == oHMLKNQsDe){NOzXqaYrps = true;}
      else if(oHMLKNQsDe == EuZkxVlzos){yGlxmfyQcC = true;}
      if(BpfcZxAatd == GPiQBCbWpz){SrxuQUYOlM = true;}
      else if(GPiQBCbWpz == BpfcZxAatd){fdtzscbela = true;}
      if(hnryPaFMGm == XMcwjcwbkQ){bbwMGRffMi = true;}
      else if(XMcwjcwbkQ == hnryPaFMGm){NMpugNHkhW = true;}
      if(ABVhyWXmjM == ahZkPMAlLx){OrBQSBwqBZ = true;}
      else if(ahZkPMAlLx == ABVhyWXmjM){AnJySYeTMn = true;}
      if(TAdFGJFqOj == chDobDMAMs){RDXIUolONL = true;}
      else if(chDobDMAMs == TAdFGJFqOj){EwAmAFPaiB = true;}
      if(bGaONPDaVW == QjkMibeQbg){OMdXakRlQY = true;}
      if(QZsCszUxdD == QoHmEYpyAn){tsfGdapfcP = true;}
      if(ZNphKhJmrF == BpKsWpJmTf){XhNMuXEnrR = true;}
      while(QjkMibeQbg == bGaONPDaVW){wreCfkPqQZ = true;}
      while(QoHmEYpyAn == QoHmEYpyAn){YMiGCrTufT = true;}
      while(BpKsWpJmTf == BpKsWpJmTf){yHRxWQMDta = true;}
      if(PwPrAqwNBm == true){PwPrAqwNBm = false;}
      if(giKefmaQkD == true){giKefmaQkD = false;}
      if(NOzXqaYrps == true){NOzXqaYrps = false;}
      if(SrxuQUYOlM == true){SrxuQUYOlM = false;}
      if(bbwMGRffMi == true){bbwMGRffMi = false;}
      if(OrBQSBwqBZ == true){OrBQSBwqBZ = false;}
      if(RDXIUolONL == true){RDXIUolONL = false;}
      if(OMdXakRlQY == true){OMdXakRlQY = false;}
      if(tsfGdapfcP == true){tsfGdapfcP = false;}
      if(XhNMuXEnrR == true){XhNMuXEnrR = false;}
      if(fQRAUCNcog == true){fQRAUCNcog = false;}
      if(iJZbeXXQds == true){iJZbeXXQds = false;}
      if(yGlxmfyQcC == true){yGlxmfyQcC = false;}
      if(fdtzscbela == true){fdtzscbela = false;}
      if(NMpugNHkhW == true){NMpugNHkhW = false;}
      if(AnJySYeTMn == true){AnJySYeTMn = false;}
      if(EwAmAFPaiB == true){EwAmAFPaiB = false;}
      if(wreCfkPqQZ == true){wreCfkPqQZ = false;}
      if(YMiGCrTufT == true){YMiGCrTufT = false;}
      if(yHRxWQMDta == true){yHRxWQMDta = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class MMGXQUYRRW
{ 
  void DfGBPZZydk()
  { 
      bool OWmkKcCYDH = false;
      bool hERIIiQgpF = false;
      bool QcGItqmLEC = false;
      bool mujhJOHego = false;
      bool LxiicmxZfH = false;
      bool yNcShkPdpT = false;
      bool oqTAUlUiyt = false;
      bool bkAAtTsXfH = false;
      bool tMewEYRQzX = false;
      bool ydnMzTchNp = false;
      bool RNalfMMcXO = false;
      bool rqxiZbMXww = false;
      bool TDiauywmAa = false;
      bool qKJppflsPq = false;
      bool LoskfHfFmW = false;
      bool HElRWNdAph = false;
      bool QZbxWghHss = false;
      bool pTHEjdKytn = false;
      bool RqzcSlYqTb = false;
      bool CkChalNwNz = false;
      string hSVrRuQOeW;
      string bNxEUKjbjN;
      string PdERXIpjrN;
      string qZXTTQDBXq;
      string OKDNscpFmH;
      string MZZWpEODUI;
      string FgVReBpcjE;
      string GhDsyFapYt;
      string RjxkARAAcP;
      string CAgOkhnkhq;
      string mNUhAeVfYk;
      string cXeaqUjkQN;
      string BpAUCGAoHQ;
      string QpHgGEOOjV;
      string uTarldUGXQ;
      string yDTUpwMAft;
      string dgYITmPyTl;
      string FUAuRhOIhX;
      string ktQqRNVmqK;
      string qOhoqOuSXz;
      if(hSVrRuQOeW == mNUhAeVfYk){OWmkKcCYDH = true;}
      else if(mNUhAeVfYk == hSVrRuQOeW){RNalfMMcXO = true;}
      if(bNxEUKjbjN == cXeaqUjkQN){hERIIiQgpF = true;}
      else if(cXeaqUjkQN == bNxEUKjbjN){rqxiZbMXww = true;}
      if(PdERXIpjrN == BpAUCGAoHQ){QcGItqmLEC = true;}
      else if(BpAUCGAoHQ == PdERXIpjrN){TDiauywmAa = true;}
      if(qZXTTQDBXq == QpHgGEOOjV){mujhJOHego = true;}
      else if(QpHgGEOOjV == qZXTTQDBXq){qKJppflsPq = true;}
      if(OKDNscpFmH == uTarldUGXQ){LxiicmxZfH = true;}
      else if(uTarldUGXQ == OKDNscpFmH){LoskfHfFmW = true;}
      if(MZZWpEODUI == yDTUpwMAft){yNcShkPdpT = true;}
      else if(yDTUpwMAft == MZZWpEODUI){HElRWNdAph = true;}
      if(FgVReBpcjE == dgYITmPyTl){oqTAUlUiyt = true;}
      else if(dgYITmPyTl == FgVReBpcjE){QZbxWghHss = true;}
      if(GhDsyFapYt == FUAuRhOIhX){bkAAtTsXfH = true;}
      if(RjxkARAAcP == ktQqRNVmqK){tMewEYRQzX = true;}
      if(CAgOkhnkhq == qOhoqOuSXz){ydnMzTchNp = true;}
      while(FUAuRhOIhX == GhDsyFapYt){pTHEjdKytn = true;}
      while(ktQqRNVmqK == ktQqRNVmqK){RqzcSlYqTb = true;}
      while(qOhoqOuSXz == qOhoqOuSXz){CkChalNwNz = true;}
      if(OWmkKcCYDH == true){OWmkKcCYDH = false;}
      if(hERIIiQgpF == true){hERIIiQgpF = false;}
      if(QcGItqmLEC == true){QcGItqmLEC = false;}
      if(mujhJOHego == true){mujhJOHego = false;}
      if(LxiicmxZfH == true){LxiicmxZfH = false;}
      if(yNcShkPdpT == true){yNcShkPdpT = false;}
      if(oqTAUlUiyt == true){oqTAUlUiyt = false;}
      if(bkAAtTsXfH == true){bkAAtTsXfH = false;}
      if(tMewEYRQzX == true){tMewEYRQzX = false;}
      if(ydnMzTchNp == true){ydnMzTchNp = false;}
      if(RNalfMMcXO == true){RNalfMMcXO = false;}
      if(rqxiZbMXww == true){rqxiZbMXww = false;}
      if(TDiauywmAa == true){TDiauywmAa = false;}
      if(qKJppflsPq == true){qKJppflsPq = false;}
      if(LoskfHfFmW == true){LoskfHfFmW = false;}
      if(HElRWNdAph == true){HElRWNdAph = false;}
      if(QZbxWghHss == true){QZbxWghHss = false;}
      if(pTHEjdKytn == true){pTHEjdKytn = false;}
      if(RqzcSlYqTb == true){RqzcSlYqTb = false;}
      if(CkChalNwNz == true){CkChalNwNz = false;}
    } 
}; 

#include <stdio.h>
#include <string>
#include <iostream>

using namespace std;

class WANUOAARWP
{ 
  void ipZzgOdQnK()
  { 
      bool gsuIbUFMIE = false;
      bool cRfRmItGTJ = false;
      bool dZoubpWzze = false;
      bool zYpFqhXdcE = false;
      bool YIfAqpgGoM = false;
      bool RQWhNGDzgl = false;
      bool yFNcFDbZZE = false;
      bool kPcOjUtnEk = false;
      bool JQJlMhCHrk = false;
      bool eYwqGTuDtm = false;
      bool OGfkbBnHyr = false;
      bool MPtwcgubPX = false;
      bool BUhoZMTlHQ = false;
      bool ZpsRWCjYJL = false;
      bool ttJAYOdANY = false;
      bool XTmWltXpKP = false;
      bool hCzgRVVcYZ = false;
      bool wWREcGKhQL = false;
      bool hSXisGCWec = false;
      bool etOtdrtbhC = false;
      string gQQDmrgauX;
      string QwqYqkhSZX;
      string NbqbWZwAhX;
      string jhYyuXESAS;
      string GwYVOQFrcK;
      string UeDCREYngN;
      string wgrWmiXscS;
      string fOSGQQDVMF;
      string UEWWDEeWfp;
      string zPllWZDBhf;
      string sLOJeFMwkB;
      string BDbasrJUTi;
      string EAMlTPcfjq;
      string MCngLIoNry;
      string rhkeownKse;
      string QhgzarzcoO;
      string bfLtnyPuPk;
      string CucUpVPgwX;
      string bSlFZeUoFT;
      string IMXcVLWpqq;
      if(gQQDmrgauX == sLOJeFMwkB){gsuIbUFMIE = true;}
      else if(sLOJeFMwkB == gQQDmrgauX){OGfkbBnHyr = true;}
      if(QwqYqkhSZX == BDbasrJUTi){cRfRmItGTJ = true;}
      else if(BDbasrJUTi == QwqYqkhSZX){MPtwcgubPX = true;}
      if(NbqbWZwAhX == EAMlTPcfjq){dZoubpWzze = true;}
      else if(EAMlTPcfjq == NbqbWZwAhX){BUhoZMTlHQ = true;}
      if(jhYyuXESAS == MCngLIoNry){zYpFqhXdcE = true;}
      else if(MCngLIoNry == jhYyuXESAS){ZpsRWCjYJL = true;}
      if(GwYVOQFrcK == rhkeownKse){YIfAqpgGoM = true;}
      else if(rhkeownKse == GwYVOQFrcK){ttJAYOdANY = true;}
      if(UeDCREYngN == QhgzarzcoO){RQWhNGDzgl = true;}
      else if(QhgzarzcoO == UeDCREYngN){XTmWltXpKP = true;}
      if(wgrWmiXscS == bfLtnyPuPk){yFNcFDbZZE = true;}
      else if(bfLtnyPuPk == wgrWmiXscS){hCzgRVVcYZ = true;}
      if(fOSGQQDVMF == CucUpVPgwX){kPcOjUtnEk = true;}
      if(UEWWDEeWfp == bSlFZeUoFT){JQJlMhCHrk = true;}
      if(zPllWZDBhf == IMXcVLWpqq){eYwqGTuDtm = true;}
      while(CucUpVPgwX == fOSGQQDVMF){wWREcGKhQL = true;}
      while(bSlFZeUoFT == bSlFZeUoFT){hSXisGCWec = true;}
      while(IMXcVLWpqq == IMXcVLWpqq){etOtdrtbhC = true;}
      if(gsuIbUFMIE == true){gsuIbUFMIE = false;}
      if(cRfRmItGTJ == true){cRfRmItGTJ = false;}
      if(dZoubpWzze == true){dZoubpWzze = false;}
      if(zYpFqhXdcE == true){zYpFqhXdcE = false;}
      if(YIfAqpgGoM == true){YIfAqpgGoM = false;}
      if(RQWhNGDzgl == true){RQWhNGDzgl = false;}
      if(yFNcFDbZZE == true){yFNcFDbZZE = false;}
      if(kPcOjUtnEk == true){kPcOjUtnEk = false;}
      if(JQJlMhCHrk == true){JQJlMhCHrk = false;}
      if(eYwqGTuDtm == true){eYwqGTuDtm = false;}
      if(OGfkbBnHyr == true){OGfkbBnHyr = false;}
      if(MPtwcgubPX == true){MPtwcgubPX = false;}
      if(BUhoZMTlHQ == true){BUhoZMTlHQ = false;}
      if(ZpsRWCjYJL == true){ZpsRWCjYJL = false;}
      if(ttJAYOdANY == true){ttJAYOdANY = false;}
      if(XTmWltXpKP == true){XTmWltXpKP = false;}
      if(hCzgRVVcYZ == true){hCzgRVVcYZ = false;}
      if(wWREcGKhQL == true){wWREcGKhQL = false;}
      if(hSXisGCWec == true){hSXisGCWec = false;}
      if(etOtdrtbhC == true){etOtdrtbhC = false;}
    } 
}; 
